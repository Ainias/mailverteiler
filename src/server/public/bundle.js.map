{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/cordova-sites-database/dist/BaseDatabase.js","webpack:///./node_modules/cordova-sites-database/dist/BaseModel.js","webpack:///./node_modules/cordova-sites-database/dist/cordova-sites-database.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/ClientFileMedium.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/ClientModel.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/ClientPartialModel.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/EasySyncClientDb.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/FileWriter/FilePromise.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/FileWriter/FileTransferPromise.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/FileWriter/FileWriterPromise.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/LastSyncDates.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/SyncJob.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/SyncJob_old.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/editEntitySite/ModifyEntitySite.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/client/migration/SetupEasySync.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/shared.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/shared/EasySyncBaseModel.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/shared/EasySyncPartialModel.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/shared/FileMedium.js","webpack:///./node_modules/cordova-sites-easy-sync/dist/shared/migrations/AddFileMediumMigration.js","webpack:///./node_modules/cordova-sites-user-management/dist/client.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/html/dialog/selectUserDialog.html","webpack:///./node_modules/cordova-sites-user-management/dist/client/html/sites/changeUserSite.html","webpack:///./node_modules/cordova-sites-user-management/dist/client/html/sites/forgotPasswordSite.html","webpack:///./node_modules/cordova-sites-user-management/dist/client/html/sites/loginSite.html","webpack:///./node_modules/cordova-sites-user-management/dist/client/html/sites/notAllowedSite.html","webpack:///./node_modules/cordova-sites-user-management/dist/client/html/sites/registrationSite.html","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/Context/UserSite.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/Dialog/SelectUserDialog.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/MenuAction/StartUserSiteMenuAction.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/MenuAction/UserMenuAction.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/OfflineUserManager.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/Site/ChangeUserSite.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/Site/ForgotPasswordSite.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/Site/LoginSite.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/Site/NotAllowedSite.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/Site/RegistrationSite.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/UserManager.js","webpack:///./node_modules/cordova-sites-user-management/dist/client/js/translationInit.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/migrations/DeleteUserManagement.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/migrations/SetupUserManagement.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/v1/model/Access.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/v1/model/AccessEasySyncModel.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/v1/model/Role.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/v1/model/User.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/v1/model/UserSyncModel.js","webpack:///./node_modules/cordova-sites-user-management/dist/shared/v1/model/UserSyncPartialModel.js","webpack:///./node_modules/cordova-sites/dist/client.js","webpack:///./node_modules/cordova-sites/dist/client/html/Dialog/shareDialog.html","webpack:///./node_modules/cordova-sites/dist/client/html/Framework/Dialog/chooseDialog.html","webpack:///./node_modules/cordova-sites/dist/client/html/Framework/Fragment/abstractWindowTemplate.html","webpack:///./node_modules/cordova-sites/dist/client/html/Framework/Fragment/alphabeticListFragment.html","webpack:///./node_modules/cordova-sites/dist/client/html/Framework/Fragment/swipeFragment.html","webpack:///./node_modules/cordova-sites/dist/client/html/Framework/Fragment/tabFragment.html","webpack:///./node_modules/cordova-sites/dist/client/html/siteTemplates/container.html","webpack:///./node_modules/cordova-sites/dist/client/html/siteTemplates/menuSite.html","webpack:///./node_modules/cordova-sites/dist/client/html/siteTemplates/navbar.html","webpack:///./node_modules/cordova-sites/dist/client/img/errorIcon.png","webpack:///./node_modules/cordova-sites/dist/client/js/App.js","webpack:///./node_modules/cordova-sites/dist/client/js/ColorIndicator/ColorIndicator.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/AbstractFragment.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/AbstractSite.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/ContainerSite.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Context.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Delegate/DelegateSite.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Delegate/MasterSite.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Fragment/AbstractWindowFragment.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Fragment/AlphabeticListFragment.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Fragment/TabFragment.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/Menu.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/MenuAction/ErrorAction.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/MenuAction/MenuAction.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/MenuAction/OpenSubmenuAction.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/MenuAction/StartSiteMenuAction.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/NavbarFragment.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/Renderer/AccordionRenderer.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/Renderer/DropdownRenderer.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/Renderer/MenuRenderer.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/Menu/Submenu.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/MenuSite.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/SiteManager.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/SwipeFragment/SwipeChildFragment.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/SwipeFragment/SwipeFragment.js","webpack:///./node_modules/cordova-sites/dist/client/js/Context/TemplateSite.js","webpack:///./node_modules/cordova-sites/dist/client/js/DataManager.js","webpack:///./node_modules/cordova-sites/dist/client/js/DataManager/NotOnlineError.js","webpack:///./node_modules/cordova-sites/dist/client/js/Dialog/ButtonChooseDialog.js","webpack:///./node_modules/cordova-sites/dist/client/js/Dialog/ChooseDialog.js","webpack:///./node_modules/cordova-sites/dist/client/js/Dialog/ConfirmDialog.js","webpack:///./node_modules/cordova-sites/dist/client/js/Dialog/Dialog.js","webpack:///./node_modules/cordova-sites/dist/client/js/Dialog/ElemChooseDialog.js","webpack:///./node_modules/cordova-sites/dist/client/js/Dialog/ImgChooseDialog.js","webpack:///./node_modules/cordova-sites/dist/client/js/Form.js","webpack:///./node_modules/cordova-sites/dist/client/js/HistoryManager.js","webpack:///./node_modules/cordova-sites/dist/client/js/Legacy/EventManager/EventManager.js","webpack:///./node_modules/cordova-sites/dist/client/js/Legacy/Helper.js","webpack:///./node_modules/cordova-sites/dist/client/js/Legacy/Matomo.js","webpack:///./node_modules/cordova-sites/dist/client/js/Legacy/ScaleHelper.js","webpack:///./node_modules/cordova-sites/dist/client/js/NativeStoragePromise.js","webpack:///./node_modules/cordova-sites/dist/client/js/PromiseHelper.js","webpack:///./node_modules/cordova-sites/dist/client/js/ShareManager/ShareDialog.js","webpack:///./node_modules/cordova-sites/dist/client/js/ShareManager/ShareManager.js","webpack:///./node_modules/cordova-sites/dist/client/js/Singleton.js","webpack:///./node_modules/cordova-sites/dist/client/js/Sound/AudioChain.js","webpack:///./node_modules/cordova-sites/dist/client/js/Sound/SoundManager.js","webpack:///./node_modules/cordova-sites/dist/client/js/Toast/Toast.js","webpack:///./node_modules/cordova-sites/dist/client/js/Toast/ToastManager.js","webpack:///./node_modules/cordova-sites/dist/client/js/Translator.js","webpack:///./node_modules/cordova-sites/dist/client/js/ViewInflater.js","webpack:///./node_modules/cordova-sites/dist/client/js/translationInit.js","webpack:///./node_modules/cordova-sites/dist/shared.js","webpack:///./node_modules/cordova-sites/dist/shared/Translator.js","webpack:///./node_modules/cs-event-manager/dist/shared.js","webpack:///./node_modules/cs-event-manager/dist/shared/EventManager.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/js-helper/dist/client.js","webpack:///./node_modules/js-helper/dist/client/HotkeyManager.js","webpack:///./node_modules/js-helper/dist/client/ViewHelper.js","webpack:///./node_modules/js-helper/dist/shared.js","webpack:///./node_modules/js-helper/dist/shared/Counter.js","webpack:///./node_modules/js-helper/dist/shared/DateHelper.js","webpack:///./node_modules/js-helper/dist/shared/Helper.js","webpack:///./node_modules/js-helper/dist/shared/JsonHelper.js","webpack:///./node_modules/js-helper/dist/shared/MigrationHelper.js","webpack:///./node_modules/js-helper/dist/shared/Prioritized.js","webpack:///./node_modules/js-helper/dist/shared/Random.js","webpack:///./node_modules/js-helper/dist/shared/XSSHelper.js","webpack:///./node_modules/node-libs-browser/node_modules/buffer/index.js","webpack:///./node_modules/node-libs-browser/node_modules/process/browser.js","webpack:///./node_modules/node-libs-browser/node_modules/punycode/punycode.js","webpack:///./node_modules/querystring-es3/decode.js","webpack:///./node_modules/querystring-es3/encode.js","webpack:///./node_modules/querystring-es3/index.js","webpack:///./node_modules/reflect-metadata/Reflect.js","webpack:///./node_modules/safe-buffer/index.js","webpack:///./node_modules/sha.js/hash.js","webpack:///./node_modules/sha.js/index.js","webpack:///./node_modules/sha.js/sha.js","webpack:///./node_modules/sha.js/sha1.js","webpack:///./node_modules/sha.js/sha224.js","webpack:///./node_modules/sha.js/sha256.js","webpack:///./node_modules/sha.js/sha384.js","webpack:///./node_modules/sha.js/sha512.js","webpack:///./node_modules/tabulator-tables/dist/js/tabulator.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/typeorm/browser/cache/DbQueryResultCache.js","webpack:///./node_modules/typeorm/browser/cache/QueryResultCacheFactory.js","webpack:///./node_modules/typeorm/browser/cache/RedisQueryResultCache.js","webpack:///./node_modules/typeorm/browser/connection/Connection.js","webpack:///./node_modules/typeorm/browser/connection/ConnectionManager.js","webpack:///./node_modules/typeorm/browser/connection/ConnectionMetadataBuilder.js","webpack:///./node_modules/typeorm/browser/connection/ConnectionOptionsReader.js","webpack:///./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsEnvReader.js","webpack:///./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsXmlReader.js","webpack:///./node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsYmlReader.js","webpack:///./node_modules/typeorm/browser/container.js","webpack:///./node_modules/typeorm/browser/decorator/Check.js","webpack:///./node_modules/typeorm/browser/decorator/EntityRepository.js","webpack:///./node_modules/typeorm/browser/decorator/Exclusion.js","webpack:///./node_modules/typeorm/browser/decorator/Generated.js","webpack:///./node_modules/typeorm/browser/decorator/Index.js","webpack:///./node_modules/typeorm/browser/decorator/Unique.js","webpack:///./node_modules/typeorm/browser/decorator/columns/Column.js","webpack:///./node_modules/typeorm/browser/decorator/columns/CreateDateColumn.js","webpack:///./node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.js","webpack:///./node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.js","webpack:///./node_modules/typeorm/browser/decorator/columns/PrimaryColumn.js","webpack:///./node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.js","webpack:///./node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.js","webpack:///./node_modules/typeorm/browser/decorator/columns/VersionColumn.js","webpack:///./node_modules/typeorm/browser/decorator/columns/ViewColumn.js","webpack:///./node_modules/typeorm/browser/decorator/entity-view/ViewEntity.js","webpack:///./node_modules/typeorm/browser/decorator/entity/ChildEntity.js","webpack:///./node_modules/typeorm/browser/decorator/entity/Entity.js","webpack:///./node_modules/typeorm/browser/decorator/entity/TableInheritance.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/AfterInsert.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/AfterLoad.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/AfterRemove.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/AfterUpdate.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/BeforeInsert.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/BeforeRemove.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/BeforeUpdate.js","webpack:///./node_modules/typeorm/browser/decorator/listeners/EventSubscriber.js","webpack:///./node_modules/typeorm/browser/decorator/relations/JoinColumn.js","webpack:///./node_modules/typeorm/browser/decorator/relations/JoinTable.js","webpack:///./node_modules/typeorm/browser/decorator/relations/ManyToMany.js","webpack:///./node_modules/typeorm/browser/decorator/relations/ManyToOne.js","webpack:///./node_modules/typeorm/browser/decorator/relations/OneToMany.js","webpack:///./node_modules/typeorm/browser/decorator/relations/OneToOne.js","webpack:///./node_modules/typeorm/browser/decorator/relations/RelationCount.js","webpack:///./node_modules/typeorm/browser/decorator/relations/RelationId.js","webpack:///./node_modules/typeorm/browser/decorator/transaction/Transaction.js","webpack:///./node_modules/typeorm/browser/decorator/transaction/TransactionManager.js","webpack:///./node_modules/typeorm/browser/decorator/transaction/TransactionRepository.js","webpack:///./node_modules/typeorm/browser/decorator/tree/Tree.js","webpack:///./node_modules/typeorm/browser/decorator/tree/TreeChildren.js","webpack:///./node_modules/typeorm/browser/decorator/tree/TreeLevelColumn.js","webpack:///./node_modules/typeorm/browser/decorator/tree/TreeParent.js","webpack:///./node_modules/typeorm/browser/driver/DriverFactory.js","webpack:///./node_modules/typeorm/browser/driver/DriverUtils.js","webpack:///./node_modules/typeorm/browser/driver/Query.js","webpack:///./node_modules/typeorm/browser/driver/SqlInMemory.js","webpack:///./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiDriver.js","webpack:///./node_modules/typeorm/browser/driver/aurora-data-api/AuroraDataApiQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/cockroachdb/CockroachDriver.js","webpack:///./node_modules/typeorm/browser/driver/cockroachdb/CockroachQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/cordova/CordovaDriver.js","webpack:///./node_modules/typeorm/browser/driver/cordova/CordovaQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/expo/ExpoDriver.js","webpack:///./node_modules/typeorm/browser/driver/expo/ExpoQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/mongodb/typings.js","webpack:///./node_modules/typeorm/browser/driver/nativescript/NativescriptDriver.js","webpack:///./node_modules/typeorm/browser/driver/nativescript/NativescriptQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/react-native/ReactNativeDriver.js","webpack:///./node_modules/typeorm/browser/driver/react-native/ReactNativeQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteDriver.js","webpack:///./node_modules/typeorm/browser/driver/sqlite-abstract/AbstractSqliteQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/sqlite/SqliteDriver.js","webpack:///./node_modules/typeorm/browser/driver/sqlite/SqliteQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/sqljs/SqljsDriver.js","webpack:///./node_modules/typeorm/browser/driver/sqljs/SqljsQueryRunner.js","webpack:///./node_modules/typeorm/browser/driver/sqlserver/MssqlParameter.js","webpack:///./node_modules/typeorm/browser/entity-manager/EntityManager.js","webpack:///./node_modules/typeorm/browser/entity-manager/EntityManagerFactory.js","webpack:///./node_modules/typeorm/browser/entity-manager/SqljsEntityManager.js","webpack:///./node_modules/typeorm/browser/entity-schema/EntitySchema.js","webpack:///./node_modules/typeorm/browser/entity-schema/EntitySchemaTransformer.js","webpack:///./node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.js","webpack:///./node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.js","webpack:///./node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.js","webpack:///./node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.js","webpack:///./node_modules/typeorm/browser/error/CannotDetermineEntityError.js","webpack:///./node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.js","webpack:///./node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.js","webpack:///./node_modules/typeorm/browser/error/CircularRelationsError.js","webpack:///./node_modules/typeorm/browser/error/ColumnTypeUndefinedError.js","webpack:///./node_modules/typeorm/browser/error/ConnectionIsNotSetError.js","webpack:///./node_modules/typeorm/browser/error/ConnectionNotFoundError.js","webpack:///./node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.js","webpack:///./node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.js","webpack:///./node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.js","webpack:///./node_modules/typeorm/browser/error/DataTypeNotSupportedError.js","webpack:///./node_modules/typeorm/browser/error/DriverOptionNotSetError.js","webpack:///./node_modules/typeorm/browser/error/DriverPackageNotInstalledError.js","webpack:///./node_modules/typeorm/browser/error/EntityColumnNotFound.js","webpack:///./node_modules/typeorm/browser/error/EntityMetadataNotFoundError.js","webpack:///./node_modules/typeorm/browser/error/EntityNotFoundError.js","webpack:///./node_modules/typeorm/browser/error/FindRelationsNotFoundError.js","webpack:///./node_modules/typeorm/browser/error/InitializedRelationError.js","webpack:///./node_modules/typeorm/browser/error/InsertValuesMissingError.js","webpack:///./node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.js","webpack:///./node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.js","webpack:///./node_modules/typeorm/browser/error/MissingDeleteDateColumnError.js","webpack:///./node_modules/typeorm/browser/error/MissingDriverError.js","webpack:///./node_modules/typeorm/browser/error/MissingPrimaryColumnError.js","webpack:///./node_modules/typeorm/browser/error/MustBeEntityError.js","webpack:///./node_modules/typeorm/browser/error/NoConnectionOptionError.js","webpack:///./node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.js","webpack:///./node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.js","webpack:///./node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.js","webpack:///./node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.js","webpack:///./node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.js","webpack:///./node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.js","webpack:///./node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.js","webpack:///./node_modules/typeorm/browser/error/QueryFailedError.js","webpack:///./node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.js","webpack:///./node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.js","webpack:///./node_modules/typeorm/browser/error/RepositoryNotFoundError.js","webpack:///./node_modules/typeorm/browser/error/RepositoryNotTreeError.js","webpack:///./node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.js","webpack:///./node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.js","webpack:///./node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.js","webpack:///./node_modules/typeorm/browser/error/TransactionAlreadyStartedError.js","webpack:///./node_modules/typeorm/browser/error/TransactionNotStartedError.js","webpack:///./node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.js","webpack:///./node_modules/typeorm/browser/error/UpdateValuesMissingError.js","webpack:///./node_modules/typeorm/browser/find-options/FindOperator.js","webpack:///./node_modules/typeorm/browser/find-options/FindOptionsUtils.js","webpack:///./node_modules/typeorm/browser/find-options/operator/Any.js","webpack:///./node_modules/typeorm/browser/find-options/operator/Between.js","webpack:///./node_modules/typeorm/browser/find-options/operator/Equal.js","webpack:///./node_modules/typeorm/browser/find-options/operator/In.js","webpack:///./node_modules/typeorm/browser/find-options/operator/IsNull.js","webpack:///./node_modules/typeorm/browser/find-options/operator/LessThan.js","webpack:///./node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.js","webpack:///./node_modules/typeorm/browser/find-options/operator/Like.js","webpack:///./node_modules/typeorm/browser/find-options/operator/MoreThan.js","webpack:///./node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.js","webpack:///./node_modules/typeorm/browser/find-options/operator/Not.js","webpack:///./node_modules/typeorm/browser/find-options/operator/Raw.js","webpack:///./node_modules/typeorm/browser/index.js","webpack:///./node_modules/typeorm/browser/logger/AdvancedConsoleLogger.js","webpack:///./node_modules/typeorm/browser/logger/DebugLogger.js","webpack:///./node_modules/typeorm/browser/logger/FileLogger.js","webpack:///./node_modules/typeorm/browser/logger/LoggerFactory.js","webpack:///./node_modules/typeorm/browser/logger/SimpleConsoleLogger.js","webpack:///./node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.js","webpack:///./node_modules/typeorm/browser/metadata-builder/ClosureJunctionEntityMetadataBuilder.js","webpack:///./node_modules/typeorm/browser/metadata-builder/EntityMetadataBuilder.js","webpack:///./node_modules/typeorm/browser/metadata-builder/EntityMetadataValidator.js","webpack:///./node_modules/typeorm/browser/metadata-builder/JunctionEntityMetadataBuilder.js","webpack:///./node_modules/typeorm/browser/metadata-builder/MetadataUtils.js","webpack:///./node_modules/typeorm/browser/metadata-builder/RelationJoinColumnBuilder.js","webpack:///./node_modules/typeorm/browser/metadata/CheckMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/ColumnMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/EmbeddedMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/EntityListenerMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/EntityMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/ExclusionMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/ForeignKeyMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/IndexMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/RelationCountMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/RelationIdMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/RelationMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/UniqueMetadata.js","webpack:///./node_modules/typeorm/browser/metadata/types/EventListenerTypes.js","webpack:///./node_modules/typeorm/browser/migration/Migration.js","webpack:///./node_modules/typeorm/browser/migration/MigrationExecutor.js","webpack:///./node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js","webpack:///./node_modules/typeorm/browser/persistence/EntityPersistExecutor.js","webpack:///./node_modules/typeorm/browser/persistence/Subject.js","webpack:///./node_modules/typeorm/browser/persistence/SubjectChangedColumnsComputer.js","webpack:///./node_modules/typeorm/browser/persistence/SubjectDatabaseEntityLoader.js","webpack:///./node_modules/typeorm/browser/persistence/SubjectExecutor.js","webpack:///./node_modules/typeorm/browser/persistence/SubjectTopoligicalSorter.js","webpack:///./node_modules/typeorm/browser/persistence/subject-builder/CascadesSubjectBuilder.js","webpack:///./node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js","webpack:///./node_modules/typeorm/browser/persistence/subject-builder/OneToManySubjectBuilder.js","webpack:///./node_modules/typeorm/browser/persistence/subject-builder/OneToOneInverseSideSubjectBuilder.js","webpack:///./node_modules/typeorm/browser/persistence/tree/ClosureSubjectExecutor.js","webpack:///./node_modules/typeorm/browser/persistence/tree/MaterializedPathSubjectExecutor.js","webpack:///./node_modules/typeorm/browser/persistence/tree/NestedSetSubjectExecutor.js","webpack:///./node_modules/typeorm/browser/platform/BrowserDisabledDriversDummy.js","webpack:///./node_modules/typeorm/browser/platform/PlatformTools.js","webpack:///./node_modules/typeorm/browser/query-builder/Alias.js","webpack:///./node_modules/typeorm/browser/query-builder/Brackets.js","webpack:///./node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.js","webpack:///./node_modules/typeorm/browser/query-builder/InsertQueryBuilder.js","webpack:///./node_modules/typeorm/browser/query-builder/JoinAttribute.js","webpack:///./node_modules/typeorm/browser/query-builder/QueryBuilder.js","webpack:///./node_modules/typeorm/browser/query-builder/QueryBuilderUtils.js","webpack:///./node_modules/typeorm/browser/query-builder/QueryExpressionMap.js","webpack:///./node_modules/typeorm/browser/query-builder/RelationIdLoader.js","webpack:///./node_modules/typeorm/browser/query-builder/RelationLoader.js","webpack:///./node_modules/typeorm/browser/query-builder/RelationQueryBuilder.js","webpack:///./node_modules/typeorm/browser/query-builder/RelationRemover.js","webpack:///./node_modules/typeorm/browser/query-builder/RelationUpdater.js","webpack:///./node_modules/typeorm/browser/query-builder/ReturningResultsEntityUpdator.js","webpack:///./node_modules/typeorm/browser/query-builder/SelectQueryBuilder.js","webpack:///./node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.js","webpack:///./node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.js","webpack:///./node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.js","webpack:///./node_modules/typeorm/browser/query-builder/relation-count/RelationCountLoader.js","webpack:///./node_modules/typeorm/browser/query-builder/relation-count/RelationCountMetadataToAttributeTransformer.js","webpack:///./node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.js","webpack:///./node_modules/typeorm/browser/query-builder/relation-id/RelationIdLoader.js","webpack:///./node_modules/typeorm/browser/query-builder/relation-id/RelationIdMetadataToAttributeTransformer.js","webpack:///./node_modules/typeorm/browser/query-builder/result/DeleteResult.js","webpack:///./node_modules/typeorm/browser/query-builder/result/InsertResult.js","webpack:///./node_modules/typeorm/browser/query-builder/result/UpdateResult.js","webpack:///./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.js","webpack:///./node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.js","webpack:///./node_modules/typeorm/browser/query-builder/transformer/RawSqlResultsToEntityTransformer.js","webpack:///./node_modules/typeorm/browser/query-runner/BaseQueryRunner.js","webpack:///./node_modules/typeorm/browser/repository/AbstractRepository.js","webpack:///./node_modules/typeorm/browser/repository/BaseEntity.js","webpack:///./node_modules/typeorm/browser/repository/Repository.js","webpack:///./node_modules/typeorm/browser/repository/RepositoryFactory.js","webpack:///./node_modules/typeorm/browser/repository/TreeRepository.js","webpack:///./node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.js","webpack:///./node_modules/typeorm/browser/schema-builder/table/Table.js","webpack:///./node_modules/typeorm/browser/schema-builder/table/TableCheck.js","webpack:///./node_modules/typeorm/browser/schema-builder/table/TableColumn.js","webpack:///./node_modules/typeorm/browser/schema-builder/table/TableExclusion.js","webpack:///./node_modules/typeorm/browser/schema-builder/table/TableForeignKey.js","webpack:///./node_modules/typeorm/browser/schema-builder/table/TableIndex.js","webpack:///./node_modules/typeorm/browser/schema-builder/table/TableUnique.js","webpack:///./node_modules/typeorm/browser/schema-builder/util/TableUtils.js","webpack:///./node_modules/typeorm/browser/schema-builder/view/View.js","webpack:///./node_modules/typeorm/browser/subscriber/Broadcaster.js","webpack:///./node_modules/typeorm/browser/subscriber/BroadcasterResult.js","webpack:///./node_modules/typeorm/browser/util/ApplyValueTransformers.js","webpack:///./node_modules/typeorm/browser/util/DateUtils.js","webpack:///./node_modules/typeorm/browser/util/DepGraph.js","webpack:///./node_modules/typeorm/browser/util/DirectoryExportedClassesLoader.js","webpack:///./node_modules/typeorm/browser/util/ObjectUtils.js","webpack:///./node_modules/typeorm/browser/util/OrmUtils.js","webpack:///./node_modules/typeorm/browser/util/PromiseUtils.js","webpack:///./node_modules/typeorm/browser/util/RandomGenerator.js","webpack:///./node_modules/typeorm/browser/util/StringUtils.js","webpack:///./node_modules/url/url.js","webpack:///./node_modules/url/util.js","webpack:///(webpack)/buildin/global.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/client/html/Fragment/selectPersonFragment.html","webpack:///./src/client/html/Site/checkMailSite.html","webpack:///./src/client/html/Site/editListsSite.html","webpack:///./src/client/html/Site/editPersonSite.html","webpack:///./src/client/html/Site/selectListSite.html","webpack:///./src/client/html/Site/selectPersonSite.html","webpack:///./src/client/js/Fragment/SelectPersonFragment.js","webpack:///./src/client/js/Site/CheckMailSite.js","webpack:///./src/client/js/Site/EditListSite.js","webpack:///./src/client/js/Site/EditPersonSite.js","webpack:///./src/client/js/Site/SelectListSite.js","webpack:///./src/client/js/Site/SelectPersonSite.js","webpack:///./src/client/js/script.js","webpack:///./src/client/sass/index.scss","webpack:///./src/shared/RIGHTS.ts","webpack:///./src/shared/model/Person.ts","webpack:///./src/shared/model/migrations/PersonInit.ts","webpack:///./src/shared/model/migrations/models/v1/Person.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACvJa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,wDAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpgBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;ACzPa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,uBAAuB,mBAAO,CAAC,kFAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;ACvJa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,kFAAgB;AACjC,SAAS,mBAAO,CAAC,4EAAa;AAC9B,SAAS,mBAAO,CAAC,sGAA0B;AAC3C,kD;;;;;;;;;;;;ACRa;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,yGAA2B;AAChD,aAAa,mBAAO,CAAC,+FAAsB;AAC3C,aAAa,mBAAO,CAAC,6GAA6B;AAClD,aAAa,mBAAO,CAAC,yGAA2B;AAChD,aAAa,mBAAO,CAAC,qHAAiC;AACtD,aAAa,mBAAO,CAAC,qIAAyC;AAC9D,aAAa,mBAAO,CAAC,iIAAuC;AAC5D,aAAa,mBAAO,CAAC,mGAAwB;AAC7C,aAAa,mBAAO,CAAC,uFAAkB;AACvC,aAAa,mBAAO,CAAC,+FAAsB;AAC3C,aAAa,mBAAO,CAAC,uIAA0C;AAC/D,aAAa,mBAAO,CAAC,uHAAkC;AACvD,kC;;;;;;;;;;;;ACxBa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,4BAA4B,mBAAO,CAAC,4GAA6B;AACjE,8BAA8B,mBAAO,CAAC,8HAAkC;AACxE,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,sBAAsB,mBAAO,CAAC,8GAA0B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,4C;;;;;;;;;;;;AClEa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AClHa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,4BAA4B,mBAAO,CAAC,4GAA6B;AACjE,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8C;;;;;;;;;;;;ACrIa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F,sBAAsB,mBAAO,CAAC,wFAAe;AAC7C,4BAA4B,mBAAO,CAAC,4GAA6B;AACjE,+BAA+B,mBAAO,CAAC,kHAAgC;AACvE,6BAA6B,mBAAO,CAAC,sGAAsB;AAC3D,qBAAqB,mBAAO,CAAC,8FAAsB;AACnD,2BAA2B,mBAAO,CAAC,kGAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,4C;;;;;;;;;;;;AChDa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,4BAA4B,mBAAO,CAAC,+GAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,wDAAwD,iCAAiC;AACzF;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uC;;;;;;;;;;;;ACzCa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,sBAAsB,mBAAO,CAAC,mGAAe;AAC7C,sBAAsB,mBAAO,CAAC,4GAA0C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+C;;;;;;;;;;;;ACtCa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6C;;;;;;;;;;;;AC9Ba;AACb,8CAA8C,cAAc;AAC5D;AACA,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iCAAiC;AACjC,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;AClCa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,wBAAwB,mBAAO,CAAC,4FAAiB;AACjD,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD,2BAA2B,mBAAO,CAAC,kGAAoB;AACvD,gBAAgB,mBAAO,CAAC,wDAAS;AACjC,4BAA4B,mBAAO,CAAC,4GAA6B;AACjE,2BAA2B,mBAAO,CAAC,kGAAoB;AACvD,qBAAqB,mBAAO,CAAC,8FAAsB;AACnD,uBAAuB,mBAAO,CAAC,4GAA0C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6HAA6H;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT,uGAAuG,iEAAiE,EAAE;AAC1K,uGAAuG,+DAA+D,EAAE;AACxK,wFAAwF,+BAA+B;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB,wIAAwI;AACxI;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;ACrXa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,wBAAwB,mBAAO,CAAC,4FAAiB;AACjD,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD,2BAA2B,mBAAO,CAAC,kGAAoB;AACvD,gBAAgB,mBAAO,CAAC,wDAAS;AACjC,+BAA+B,mBAAO,CAAC,kHAAgC;AACvE,4BAA4B,mBAAO,CAAC,4GAA6B;AACjE,2BAA2B,mBAAO,CAAC,kGAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,6GAA6G;AAC7G,mIAAmI;AACnI;AACA,6JAA6J;AAC7J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AC1Ua;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,mBAAmB,mBAAO,CAAC,sHAA+C;AAC1E,eAAe,mBAAO,CAAC,8FAAmC;AAC1D,oBAAoB,mBAAO,CAAC,0DAAW;AACvC,4BAA4B,mBAAO,CAAC,+GAAgC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,4C;;;;;;;;;;;;AC9Ia;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,kBAAkB,mBAAO,CAAC,wDAAS;AACnC,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACzDa;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,2GAA4B;AACjD,aAAa,mBAAO,CAAC,iHAA+B;AACpD,aAAa,mBAAO,CAAC,6FAAqB;AAC1C,aAAa,mBAAO,CAAC,2IAA4C;AACjE,kC;;;;;;;;;;;;AChBa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6C;;;;;;;;;;;;AC3Ja;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,4BAA4B,mBAAO,CAAC,oGAAqB;AACzD,iBAAiB,mBAAO,CAAC,wDAAS;AAClC,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,oBAAoB,mBAAO,CAAC,0FAAiC;AAC7D,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gD;;;;;;;;;;;;ACtKa;AACb,8CAA8C,cAAc;AAC5D;AACA,4BAA4B,mBAAO,CAAC,oGAAqB;AACzD,uBAAuB,mBAAO,CAAC,4GAA0C;AACzE,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;AC9Ca;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,oBAAoB,mBAAO,CAAC,0DAAW;AACvC,qBAAqB,mBAAO,CAAC,uFAAe;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,kD;;;;;;;;;;;;ACjCa;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,qHAA8B;AACnD,aAAa,mBAAO,CAAC,mIAAqC;AAC1D,aAAa,mBAAO,CAAC,yJAAgD;AACrE,aAAa,mBAAO,CAAC,uIAAuC;AAC5D,aAAa,mBAAO,CAAC,yHAAgC;AACrD,aAAa,mBAAO,CAAC,2HAAiC;AACtD,aAAa,mBAAO,CAAC,mIAAqC;AAC1D,aAAa,mBAAO,CAAC,iHAA4B;AACjD,aAAa,mBAAO,CAAC,2HAAiC;AACtD,aAAa,mBAAO,CAAC,+HAAmC;AACxD,aAAa,mBAAO,CAAC,2GAAyB;AAC9C,aAAa,mBAAO,CAAC,mHAA6B;AAClD,kC;;;;;;;;;;;ACxBA,iBAAiB,qBAAuB,gC;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,8B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,kC;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,yB;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,8B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,gC;;;;;;;;;;;;ACA3B;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,sBAAsB,mBAAO,CAAC,kGAAgB;AAC9C,oBAAoB,mBAAO,CAAC,wGAAmB;AAC/C,yBAAyB,mBAAO,CAAC,kHAAwB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oC;;;;;;;;;;;;AC1Ea;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,gHAA4C;AACrE,uBAAuB,mBAAO,CAAC,8GAA2C;AAC1E,sBAAsB,mBAAO,CAAC,4GAA0C;AACxE,qBAAqB,mBAAO,CAAC,4FAAkC;AAC/D,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,aAAa,mBAAO,CAAC,2IAAyC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oHAAoH,kDAAkD;AACtK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,4C;;;;;;;;;;;;AC3Da;AACb,8CAA8C,cAAc;AAC5D;AACA,yBAAyB,mBAAO,CAAC,kHAAkB;AACnD,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mD;;;;;;;;;;;;ACpBa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,sBAAsB,mBAAO,CAAC,kGAAgB;AAC9C,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;AC3Ba;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,kGAAqC;AAC9D,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,sBAAsB,mBAAO,CAAC,iGAAe;AAC7C,eAAe,mBAAO,CAAC,6GAA4B;AACnD,eAAe,mBAAO,CAAC,6GAA4B;AACnD,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,cAAc;AACxD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD,qCAAqC,uBAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iEAAiE,eAAe;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;;;ACnKa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,mBAAmB,mBAAO,CAAC,sHAA+C;AAC1E,mBAAmB,mBAAO,CAAC,4GAAqB;AAChD,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,sBAAsB,mBAAO,CAAC,4GAA0C;AACxE,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,qBAAqB,mBAAO,CAAC,4FAAkC;AAC/D,yBAAyB,mBAAO,CAAC,8HAA8B;AAC/D,oBAAoB,mBAAO,CAAC,kGAAa;AACzC,2BAA2B,mBAAO,CAAC,0HAA4B;AAC/D,aAAa,mBAAO,CAAC,uIAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA,uIAAuI,gCAAgC;AACvK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mBAAmB;AACpE,SAAS;AACT;AACA;AACA,CAAC;AACD,0C;;;;;;;;;;;;AClIa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,mBAAmB,mBAAO,CAAC,4GAAqB;AAChD,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,aAAa,mBAAO,CAAC,+IAA4C;AACjE,sBAAsB,mBAAO,CAAC,kGAAgB;AAC9C,oBAAoB,mBAAO,CAAC,kGAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,8C;;;;;;;;;;;;AC1Fa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,mBAAmB,mBAAO,CAAC,4GAAqB;AAChD,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,aAAa,mBAAO,CAAC,6HAAmC;AACxD,kCAAkC,mBAAO,CAAC,gJAAuC;AACjF,sBAAsB,mBAAO,CAAC,kGAAgB;AAC9C,yBAAyB,mBAAO,CAAC,8HAA8B;AAC/D,6BAA6B,mBAAO,CAAC,oHAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD,qC;;;;;;;;;;;;ACrEa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,mBAAmB,mBAAO,CAAC,sHAA+C;AAC1E,aAAa,mBAAO,CAAC,uIAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0C;;;;;;;;;;;;ACpCa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,aAAa,mBAAO,CAAC,2IAA0C;AAC/D,mBAAmB,mBAAO,CAAC,4GAAqB;AAChD,kCAAkC,mBAAO,CAAC,gJAAuC;AACjF,sBAAsB,mBAAO,CAAC,kGAAgB;AAC9C,eAAe,mBAAO,CAAC,gHAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4C;;;;;;;;;;;;AC/Da;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,eAAe,mBAAO,CAAC,6GAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iHAAiH,yCAAyC;AAC1J;AACA,SAAS;AACT;AACA;AACA;AACA,yEAAyE,eAAe;AACxF;AACA,SAAS;AACT;AACA;AACA;AACA,2EAA2E,mCAAmC;AAC9G;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AClQa;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,iBAAiB,mBAAO,CAAC,8EAA2B;AACpD,uBAAuB,mBAAO,CAAC,yGAAoB;AACnD,uBAAuB,mBAAO,CAAC,yGAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZa;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,6IAA0C;AAC/D,aAAa,mBAAO,CAAC,2IAAyC;AAC9D,aAAa,mBAAO,CAAC,6GAA0B;AAC/C,aAAa,mBAAO,CAAC,uIAAuC;AAC5D,aAAa,mBAAO,CAAC,yGAAwB;AAC7C,aAAa,mBAAO,CAAC,yGAAwB;AAC7C,aAAa,mBAAO,CAAC,2HAAiC;AACtD,aAAa,mBAAO,CAAC,yIAAwC;AAC7D,kC;;;;;;;;;;;;ACpBa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gD;;;;;;;;;;;;AClCa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,kBAAkB,mBAAO,CAAC,wDAAS;AACnC,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+C;;;;;;;;;;;;ACjXa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,kGAAqC;AAC9D,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACrBa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,kGAAqC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,+C;;;;;;;;;;;;ACVa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,kGAAqC;AAC9D,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F,iBAAiB,mBAAO,CAAC,6FAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACrEa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,kGAAqC;AAC9D,iCAAiC,mBAAO,CAAC,gIAAoD;AAC7F,eAAe,mBAAO,CAAC,yFAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B,+BAA+B;AAC/B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACnEa;AACb,8CAA8C,cAAc;AAC5D;AACA,8BAA8B,mBAAO,CAAC,uHAAuB;AAC7D,eAAe,mBAAO,CAAC,yFAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACtBa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,kGAAqC;AAC9D,eAAe,mBAAO,CAAC,yFAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;;;;;;;;;;;;ACtBa;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,2EAAiB;AACtC,aAAa,mBAAO,CAAC,+HAA2C;AAChE,aAAa,mBAAO,CAAC,qHAAsC;AAC3D,aAAa,mBAAO,CAAC,6GAAkC;AACvD,aAAa,mBAAO,CAAC,+GAAmC;AACxD,aAAa,mBAAO,CAAC,mGAA6B;AAClD,aAAa,mBAAO,CAAC,+HAA2C;AAChE,aAAa,mBAAO,CAAC,2HAAyC;AAC9D,aAAa,mBAAO,CAAC,mJAAqD;AAC1E,aAAa,mBAAO,CAAC,mJAAqD;AAC1E,aAAa,mBAAO,CAAC,6HAA0C;AAC/D,aAAa,mBAAO,CAAC,uGAA+B;AACpD,aAAa,mBAAO,CAAC,2IAAiD;AACtE,aAAa,mBAAO,CAAC,yIAAgD;AACrE,aAAa,mBAAO,CAAC,uJAAuD;AAC5E,aAAa,mBAAO,CAAC,2JAAyD;AAC9E,aAAa,mBAAO,CAAC,2HAAyC;AAC9D,aAAa,mBAAO,CAAC,mJAAqD;AAC1E,aAAa,mBAAO,CAAC,iJAAoD;AACzE,aAAa,mBAAO,CAAC,yIAAgD;AACrE,aAAa,mBAAO,CAAC,6GAAkC;AACvD,aAAa,mBAAO,CAAC,qGAA8B;AACnD,aAAa,mBAAO,CAAC,2GAAiC;AACtD,aAAa,mBAAO,CAAC,qJAAsD;AAC3E,aAAa,mBAAO,CAAC,2IAAiD;AACtE,aAAa,mBAAO,CAAC,6GAAkC;AACvD,aAAa,mBAAO,CAAC,yHAAwC;AAC7D,aAAa,mBAAO,CAAC,2FAAyB;AAC9C,aAAa,mBAAO,CAAC,uHAAuC;AAC5D,aAAa,mBAAO,CAAC,2GAAiC;AACtD,aAAa,mBAAO,CAAC,6GAAkC;AACvD,aAAa,mBAAO,CAAC,+FAA2B;AAChD,aAAa,mBAAO,CAAC,mHAAqC;AAC1D,aAAa,mBAAO,CAAC,iHAAoC;AACzD,aAAa,mBAAO,CAAC,6EAAkB;AACvC,aAAa,mBAAO,CAAC,iGAA4B;AACjD,aAAa,mBAAO,CAAC,qIAA8C;AACnE,aAAa,mBAAO,CAAC,+FAA2B;AAChD,aAAa,mBAAO,CAAC,+FAA2B;AAChD,aAAa,mBAAO,CAAC,yGAAgC;AACrD,aAAa,mBAAO,CAAC,6GAAkC;AACvD,aAAa,mBAAO,CAAC,+FAA2B;AAChD,aAAa,mBAAO,CAAC,qHAAsC;AAC3D,aAAa,mBAAO,CAAC,uHAAuC;AAC5D,aAAa,mBAAO,CAAC,uFAAuB;AAC5C,aAAa,mBAAO,CAAC,qGAA8B;AACnD,aAAa,mBAAO,CAAC,yGAAgC;AACrD,aAAa,mBAAO,CAAC,2FAAyB;AAC9C,aAAa,mBAAO,CAAC,yGAAgC;AACrD,aAAa,mBAAO,CAAC,yFAAwB;AAC7C,aAAa,mBAAO,CAAC,6FAA0B;AAC/C,aAAa,mBAAO,CAAC,mGAA6B;AAClD,kC;;;;;;;;;;;AChEA,iBAAiB,qBAAuB,2B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,4B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,sC;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,sC;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,6B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,2B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,yB;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,wB;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,sB;;;;;;;;;;;ACAxC,sC;;;;;;;;;;;;ACAa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,qFAAiB;AAC1C,sBAAsB,mBAAO,CAAC,iGAAuB;AACrD;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,+B;;;;;;;;;;;;AC7Ha;AACb,8CAA8C,cAAc;AAC5D;AACA,oBAAoB,mBAAO,CAAC,8EAAc;AAC1C,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C;AACA;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;ACjFa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,kBAAkB,mBAAO,CAAC,iFAAW;AACrC,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;ACzEa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,kBAAkB,mBAAO,CAAC,iFAAW;AACrC,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C,qBAAqB,mBAAO,CAAC,gFAAe;AAC5C,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD,uBAAuB,mBAAO,CAAC,4HAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA,8EAA8E;AAC9E;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;ACzRa;AACb,8CAA8C,cAAc;AAC5D;AACA,uBAAuB,mBAAO,CAAC,2FAAgB;AAC/C,0BAA0B,mBAAO,CAAC,2HAAyC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACpBa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;AC1Na;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,uBAAuB,mBAAO,CAAC,4FAAiB;AAChD;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;ACjGa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,uBAAuB,mBAAO,CAAC,4FAAiB;AAChD,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,sC;;;;;;;;;;;;ACnGa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,oGAAqB;AACxD,uBAAuB,mBAAO,CAAC,uFAAoB;AACnD,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,qBAAqB,mBAAO,CAAC,4FAAkC;AAC/D,qBAAqB,mBAAO,CAAC,mFAAkB;AAC/C,iBAAiB,mBAAO,CAAC,kKAA8D;AACvF;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,wBAAwB;AACxB;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,kD;;;;;;;;;;;;AClPa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,oGAAqB;AACxD,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C,oBAAoB,mBAAO,CAAC,kKAA8D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kD;;;;;;;;;;;;ACpGa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,oGAAqB;AACxD,uBAAuB,mBAAO,CAAC,4IAAmD;AAClF,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C,uBAAuB,mBAAO,CAAC,uFAAoB;AACnD,qBAAqB,mBAAO,CAAC,mFAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AChHa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C,qBAAqB,mBAAO,CAAC,kHAAyB;AACtD,4BAA4B,mBAAO,CAAC,gIAAgC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;AC5Ma;AACb,8CAA8C,cAAc;AAC5D;AACA,qBAAqB,mBAAO,CAAC,uGAAc;AAC3C,iBAAiB,mBAAO,CAAC,4FAAwB;AACjD,qBAAqB,mBAAO,CAAC,sFAAqB;AAClD,kBAAkB,mBAAO,CAAC,iGAA+B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AC7Ca;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,4FAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,sC;;;;;;;;;;;;AC7Oa;AACb,8CAA8C,cAAc;AAC5D;AACA,qBAAqB,mBAAO,CAAC,uGAAc;AAC3C,iBAAiB,mBAAO,CAAC,4FAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6C;;;;;;;;;;;;ACnDa;AACb,8CAA8C,cAAc;AAC5D;AACA,qBAAqB,mBAAO,CAAC,uGAAc;AAC3C,cAAc,mBAAO,CAAC,wEAAc;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,+C;;;;;;;;;;;;ACxBa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,oGAAqB;AACxD,0BAA0B,mBAAO,CAAC,wHAAyC;AAC3E,qBAAqB,mBAAO,CAAC,kHAAyB;AACtD,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C,kBAAkB,mBAAO,CAAC,kFAAY;AACtC,eAAe,mBAAO,CAAC,gFAAQ;AAC/B,4BAA4B,mBAAO,CAAC,gIAAgC;AACpE,2BAA2B,mBAAO,CAAC,0HAA6B;AAChE,4BAA4B,mBAAO,CAAC,4HAA8B;AAClE,yBAAyB,mBAAO,CAAC,yHAAqC;AACtE,cAAc,mBAAO,CAAC,qEAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;AC/Za;AACb,8CAA8C,cAAc;AAC5D;AACA,4BAA4B,mBAAO,CAAC,iIAAiC;AACrE,uBAAuB,mBAAO,CAAC,yGAAgB;AAC/C,iBAAiB,mBAAO,CAAC,4FAAwB;AACjD,qBAAqB,mBAAO,CAAC,sFAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,6C;;;;;;;;;;;;AC/Ha;AACb,8CAA8C,cAAc;AAC5D;AACA,4BAA4B,mBAAO,CAAC,iIAAiC;AACrE,4BAA4B,mBAAO,CAAC,mHAAqB;AACzD,kBAAkB,mBAAO,CAAC,uFAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;ACpEa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,4FAAwB;AACjD,4BAA4B,mBAAO,CAAC,iIAAiC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AClHa;AACb,8CAA8C,cAAc;AAC5D;AACA,eAAe,mBAAO,CAAC,gFAAQ;AAC/B,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C,4BAA4B,mBAAO,CAAC,gIAAgC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;AChKa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,uBAAuB,mBAAO,CAAC,2FAAgB;AAC/C,4BAA4B,mBAAO,CAAC,yHAAwC;AAC5E,yBAAyB,mBAAO,CAAC,yGAAuB;AACxD,kBAAkB,mBAAO,CAAC,iFAAW;AACrC,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA,0BAA0B;AAC1B;AACA;AACA,oC;;;;;;;;;;;;ACnFa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C,uBAAuB,mBAAO,CAAC,2FAAgB;AAC/C,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD,kBAAkB,mBAAO,CAAC,iFAAW;AACrC,qBAAqB,mBAAO,CAAC,gFAAe;AAC5C,sBAAsB,mBAAO,CAAC,kFAAgB;AAC9C,yBAAyB,mBAAO,CAAC,wFAAmB;AACpD,uBAAuB,mBAAO,CAAC,4HAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gGAAgG,iCAAiC,EAAE;AACnI;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACtVa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,oGAAqB;AACxD,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;;;AC5Ca;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,oGAAqB;AACxD,6BAA6B,mBAAO,CAAC,qHAAsB;AAC3D,iBAAiB,mBAAO,CAAC,yFAAqB;AAC9C,aAAa,mBAAO,CAAC,gJAAqD;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACrGa;AACb,8CAA8C,cAAc;AAC5D;AACA,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD,qBAAqB,mBAAO,CAAC,yGAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wC;;;;;;;;;;;;AC7Ba;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,qFAAiB;AAC1C,yBAAyB,mBAAO,CAAC,+GAA8B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,gDAAgD;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACzOa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;ACVa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAAU;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8C;;;;;;;;;;;;ACba;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAAU;AACnC,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD,aAAa,mBAAO,CAAC,uIAA+C;AACpE,qBAAqB,mBAAO,CAAC,gFAAe;AAC5C,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;ACxCa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAAU;AACnC,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACpCa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C,qBAAqB,mBAAO,CAAC,gFAAe;AAC5C,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;AChLa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,8EAAU;AACnC,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD,aAAa,mBAAO,CAAC,uIAA+C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;AC7Ba;AACb,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,kGAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2C;;;;;;;;;;;;AChBa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,sBAAsB,mBAAO,CAAC,iFAAe;AAC7C,iBAAiB,mBAAO,CAAC,qFAAiB;AAC1C,qBAAqB,mBAAO,CAAC,+EAAc;AAC3C,gBAAgB,mBAAO,CAAC,iFAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uHAAuH,UAAU,qBAAqB,MAAM;AAC5J;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;AC7Ra;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,qFAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;AClLa;AACb,8CAA8C,cAAc;AAC5D;AACA,2BAA2B,mBAAO,CAAC,wEAAkB;AACrD;AACA;AACA;AACA,wC;;;;;;;;;;;;ACPa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,CAAC,gFAAe;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU,gBAAgB;AAChD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,mBAAmB;AACnB,iBAAiB;AACjB,iBAAiB;AACjB,mBAAmB;AACnB,mBAAmB;AACnB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA,4CAA4C,IAAI,EAAE;AAClD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;AC1Va;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,oBAAoB,mBAAO,CAAC,0DAAW;AACvC,+BAA+B,mBAAO,CAAC,oGAAyB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACzHa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,oBAAoB,mBAAO,CAAC,0DAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uC;;;;;;;;;;;;AChGa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,qBAAqB,mBAAO,CAAC,4FAAkC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gD;;;;;;;;;;;;AC9Ka;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,qFAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,yC;;;;;;;;;;;;AC5Da;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C,uBAAuB,mBAAO,CAAC,oFAAiB;AAChD,aAAa,mBAAO,CAAC,iHAAoC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,uC;;;;;;;;;;;;ACzBa;AACb,8CAA8C,cAAc;AAC5D;AACA,sBAAsB,mBAAO,CAAC,8FAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;ACrBa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;AChBa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sC;;;;;;;;;;;;ACtFa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,qBAAqB,mBAAO,CAAC,qFAAc;AAC3C,iBAAiB,mBAAO,CAAC,oFAA8B;AACvD,cAAc,mBAAO,CAAC,kEAAQ;AAC9B,sBAAsB,mBAAO,CAAC,kFAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI;AACJ,wC;;;;;;;;;;;;ACtLa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C,uBAAuB,mBAAO,CAAC,yFAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;AC1Da;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sFAAkB;AAC3C,qBAAqB,mBAAO,CAAC,gFAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AC5Ea;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,+BAA+B,mBAAO,CAAC,mGAAwB;AAC/D,iBAAiB,mBAAO,CAAC,qFAAiB;AAC1C,qBAAqB,mBAAO,CAAC,uFAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uIAAuI,8BAA8B,EAAE;AACvK;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,kBAAkB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACnPa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD,sBAAsB,mBAAO,CAAC,iFAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AC3Ja;AACb,8CAA8C,cAAc;AAC5D,cAAc,mBAAO,CAAC,iEAAO;AAC7B,qBAAqB,mBAAO,CAAC,+EAAc;AAC3C,uBAAuB,mBAAO,CAAC,yFAAoB;AACnD,uBAAuB,mBAAO,CAAC,yFAAoB;AACnD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACba;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,mFAAqB;AAC1C,kC;;;;;;;;;;;;ACba;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,sEAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI,uBAAuB,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACzJa;AACb;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,SAAS,mBAAO,CAAC,0FAAuB;;;;;;;;;;;;;ACL3B;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,0DAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA,iBAAiB;;AAEjB;AACA;AACA;;;;;;;;;;;;;ACJa;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,qFAAwB;AAC7C,aAAa,mBAAO,CAAC,+EAAqB;AAC1C,kC;;;;;;;;;;;;ACda;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;AClDa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACtCa;AACb;AACA;AACA,kCAAkC,oCAAoC,aAAa,EAAE,EAAE;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D,aAAa,mBAAO,CAAC,yEAAkB;AACvC,aAAa,mBAAO,CAAC,+EAAqB;AAC1C,aAAa,mBAAO,CAAC,uEAAiB;AACtC,aAAa,mBAAO,CAAC,+EAAqB;AAC1C,aAAa,mBAAO,CAAC,yFAA0B;AAC/C,aAAa,mBAAO,CAAC,iFAAsB;AAC3C,aAAa,mBAAO,CAAC,uEAAiB;AACtC,aAAa,mBAAO,CAAC,6EAAoB;AACzC,kC;;;;;;;;;;;;ACpBa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,gEAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;ACrBa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,gEAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,sC;;;;;;;;;;;;ACnEa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA,qBAAqB,mBAAO,CAAC,wEAAc;AAC3C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU,gBAAgB;AAChD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,mBAAmB;AACnB,iBAAiB;AACjB,iBAAiB;AACjB,mBAAmB;AACnB,mBAAmB;AACnB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA,4CAA4C,IAAI,EAAE;AAClD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,4DAA4D,EAAE;AACjJ;AACA;AACA;AACA,kC;;;;;;;;;;;;AC1Qa;AACb,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,gEAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;AClEa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,kBAAkB,mBAAO,CAAC,wDAAS;AACnC,iBAAiB,mBAAO,CAAC,gEAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,mJAAmJ;AACnJ,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,mJAAmJ;AACnJ,mEAAmE;AACnE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2C;;;;;;;;;;;;ACzMa;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,8CAA8C,cAAc;AAC5D;AACA,iBAAiB,mBAAO,CAAC,gEAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uC;;;;;;;;;;;;AClHa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;;;;;ACtBa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,sBAAsB;AACtB,sBAAsB;AACtB,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB,kBAAkB;AAC5D,SAAS;AACT;AACA;AACA;AACA,qC;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEY;;AAEZ,aAAa,mBAAO,CAAC,oDAAW;AAChC,cAAc,mBAAO,CAAC,gDAAS;AAC/B,cAAc,mBAAO,CAAC,gDAAS;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC5vDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;ACvLtC;AACA,CAAC;;AAED;AACA,mBAAmB,KAA0B;AAC7C;AACA,kBAAkB,KAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,SAAS;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,KAAK;AACL,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mCAAmC;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB,yCAAyC,qBAAqB;;AAE9D;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;;AAEtD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc,iBAAiB;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE,IAEU;AACZ;AACA,EAAE,mCAAmB;AACrB;AACA,GAAG;AAAA,oGAAC;AACJ,EAAE,MAAM,EAaN;;AAEF,CAAC;;;;;;;;;;;;;;ACphBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpFa;;AAEb,iCAAiC,mBAAO,CAAC,0DAAU;AACnD,qCAAqC,mBAAO,CAAC,0DAAU;;;;;;;;;;;;ACHvD;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,mDAAmD;AAC3G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,6BAA6B,gBAAgB,kBAAkB;AAC/D;AACA;AACA;AACA;AACA,+BAA+B,4CAA4C;AAC3E;AACA,mCAAmC,wBAAwB,kBAAkB,EAAE;AAC/E,mCAAmC,yBAAyB,EAAE,EAAE;AAChE;AACA,uCAAuC,8BAA8B;AACrE,uCAAuC,mBAAmB,EAAE;AAC5D;AACA,uCAAuC,qDAAqD;AAC5F,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjsCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,aAAa;AAChF,qEAAqE,aAAa;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B,EAAE;AAClE;AACA;AACA,iBAAiB;AACjB,oDAAoD,+CAA+C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,0DAA0D;AAC5G,oDAAoD,4DAA4D;AAChH,qDAAqD,4DAA4D;AACjH,2DAA2D,uBAAuB;AAClF,6DAA6D,uBAAuB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uBAAuB,EAAE;AAC/D;AACA;AACA,iBAAiB;AACjB,sDAAsD,6BAA6B;AACnF,sDAAsD,0CAA0C;AAChG,yDAAyD,gCAAgC;AACzF,mDAAmD,mBAAmB;AACtE,kDAAkD,yBAAyB;AAC3E,oDAAoD,2BAA2B;AAC/E,qDAAqD,4BAA4B;AACjF,2DAA2D,oBAAoB;AAC/E,6DAA6D,oBAAoB;AACjF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0BAA0B;AACtF;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,0BAA0B;;;;;;;;;;;;;AC1mC3B;AACA,aAAa,mBAAO,CAAC,6EAAQ;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7DA,aAAa,mBAAO,CAAC,wDAAa;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB,iBAAiB;AACvC;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;AChFA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,cAAc,mBAAO,CAAC,2CAAO;AAC7B,eAAe,mBAAO,CAAC,6CAAQ;AAC/B,iBAAiB,mBAAO,CAAC,iDAAU;AACnC,iBAAiB,mBAAO,CAAC,iDAAU;AACnC,iBAAiB,mBAAO,CAAC,iDAAU;AACnC,iBAAiB,mBAAO,CAAC,iDAAU;;;;;;;;;;;;ACdnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,mBAAO,CAAC,6DAAU;AACjC,WAAW,mBAAO,CAAC,6CAAQ;AAC3B,aAAa,mBAAO,CAAC,wDAAa;;AAElC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB,QAAQ,QAAQ;;AAEhB,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,mBAAO,CAAC,6DAAU;AACjC,WAAW,mBAAO,CAAC,6CAAQ;AAC3B,aAAa,mBAAO,CAAC,wDAAa;;AAElC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB,QAAQ,QAAQ;;AAEhB,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,mBAAO,CAAC,6DAAU;AACjC,aAAa,mBAAO,CAAC,iDAAU;AAC/B,WAAW,mBAAO,CAAC,6CAAQ;AAC3B,aAAa,mBAAO,CAAC,wDAAa;;AAElC;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,mBAAO,CAAC,6DAAU;AACjC,WAAW,mBAAO,CAAC,6CAAQ;AAC3B,aAAa,mBAAO,CAAC,wDAAa;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB,QAAQ,QAAQ;;AAEhB,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACtIA,eAAe,mBAAO,CAAC,6DAAU;AACjC,aAAa,mBAAO,CAAC,iDAAU;AAC/B,WAAW,mBAAO,CAAC,6CAAQ;AAC3B,aAAa,mBAAO,CAAC,wDAAa;;AAElC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACxDA,eAAe,mBAAO,CAAC,6DAAU;AACjC,WAAW,mBAAO,CAAC,6CAAQ;AAC3B,aAAa,mBAAO,CAAC,wDAAa;;AAEliBAAiB,QAAQ;AACzB;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;;;;ACnQA,sKAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H;;AAE1Q;;AAEA,CAAC;AACD,MAAM,MAA8B,GAAG,SAAW;AAClD;AACA,EAAE,UAAU,IAA0C;AACtD,EAAE,oCAAO,OAAO;AAAA;AAAA;AAAA;AAAA,oGAAC;AACjB,EAAE,MAAM,EAEN;AACF,CAAC;;AAED;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA,oDAAoD;;;AAGpD;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;;AAEA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA,oDAAoD;;;AAGpD;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;;AAEA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;;AAEA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,uBAAuB,0BAA0B;;AAEjD;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA,GAAG;AACH;;AAEA;;AAEA,qBAAqB;;;AAGrB;;AAEA;;AAEA,4CAA4C;;;AAG5C,yBAAyB;;;AAGzB,oBAAoB;;;AAGpB,2BAA2B;;;AAG3B,2BAA2B;;;AAG3B;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA,MAAM;;AAEN;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;;AAGA,kDAAkD,kCAAkC;;;AAGpF;;;AAGA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,OAAO;;AAEP;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,OAAO;;AAEP;;AAEA;AACA,QAAQ;;AAER;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA,IAAI;;AAEJ;;;AAGA;AACA,IAAI;;AAEJ;;;AAGA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;;AAEH;;;AAGA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,wBAAwB;;AAExB,uBAAuB;;AAEvB,uBAAuB;;AAEvB,oBAAoB;;AAEpB,kBAAkB;;AAElB,sCAAsC;;AAEtC;;AAEA;;AAEA,gDAAgD;;AAEhD;;AAEA,uBAAuB;;AAEvB,qBAAqB;;AAErB,sBAAsB;;;AAGtB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB;;;AAGpB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,oBAAoB;;AAEpB,wBAAwB;;AAExB,uBAAuB;;AAEvB,2BAA2B;;AAE3B,0BAA0B;;;AAG1B,sBAAsB;;;AAGtB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;AACN,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI,GAAG,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA,MAAM;AACN;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;AACL,IAAI,GAAG,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA,sDAAsD;AACtD,KAAK;AACL,IAAI;;AAEJ,6CAA6C;AAC7C;AACA,GAAG;;AAEH;;AAEA;;AAEA,mFAAmF;AACnF,KAAK;AACL,IAAI;;AAEJ,0EAA0E;AAC1E;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,aAAa;;AAE/B;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,cAAc;;AAEjC;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,oBAAoB,iBAAiB;;AAErC;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,iCAAiC;;AAEjC;;AAEA;;AAEA;;AAEA,2BAA2B;AAC3B;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA,MAAM;AACN,KAAK;;AAEL;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,4CAA4C;;AAE5C,gDAAgD;;AAEhD,+CAA+C;;AAE/C,4BAA4B;;AAE5B,kBAAkB;;;AAGlB,2BAA2B;;AAE3B,8BAA8B;;AAE9B,2BAA2B;;;AAG3B,iBAAiB;;AAEjB,uBAAuB;;AAEvB,2BAA2B;;;AAG3B,wBAAwB;;AAExB,4BAA4B;;;AAG5B;;AAEA;;AAEA,0BAA0B;;;AAG1B,mBAAmB;;AAEnB,sBAAsB;;;AAGtB,4BAA4B;;AAE5B,+BAA+B;;;AAG/B,sBAAsB;;AAEtB,yBAAyB;;;AAGzB,+BAA+B;;;AAG/B,4BAA4B;;;AAG5B,mCAAmC;;AAEnC,mCAAmC;;;AAGnC,2BAA2B;;AAE3B,8BAA8B;;;AAG9B,4BAA4B;;;AAG5B,2BAA2B;;AAE3B,wCAAwC;;AAExC,0CAA0C;AAC1C;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;;AAEH;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,OAAO;;AAEP;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,OAAO;;AAEP;AACA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA,MAAM;AACN;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,qDAAqD,qCAAqC;AAC1F;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA,IAAI;;AAEJ;AACA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,uDAAuD,2FAA2F;AAClJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,yBAAyB,YAAY;;AAErC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG,uBAAuB;AAC1B;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,qDAAqD,sBAAsB;AAC3E,IAAI;;AAEJ,qDAAqD,sBAAsB;AAC3E,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,qDAAqD,sBAAsB;AAC3E,IAAI;;AAEJ,qDAAqD,sBAAsB;AAC3E,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,6BAA6B,sBAAsB;;AAEnD;;AAEA;;AAEA;;AAEA;AACA,OAAO;;AAEP;;AAEA;;AAEA;AACA,QAAQ;;AAER;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,8BAA8B,sBAAsB;;AAEpD;;AAEA;;AAEA;;AAEA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA,mBAAmB;;AAEnB;;AAEA,oBAAoB;;AAEpB;;AAEA,kBAAkB;;AAElB,yBAAyB;;AAEzB,4BAA4B;;AAE5B,uBAAuB;;AAEvB,2BAA2B;;AAE3B,iCAAiC;;;AAGjC;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI,GAAG,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA,MAAM;AACN;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;AACL,IAAI,GAAG,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,mBAAmB;AACnB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA,0BAA0B,uBAAuB;;AAEjD;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,0BAA0B,QAAQ;;AAElC;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA,gEAAgE,qDAAqD;AACrH;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,mBAAmB,iBAAiB;;AAEpC;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ,GAAG;;AAEH;;AAEA;;AAEA;;AAEA,aAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI,GAAG,gBAAgB;;AAEvB;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA,MAAM;AACN;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL,IAAI,GAAG,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,yDAAyD,gDAAgD;AACzG;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC;;AAEtC;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA,4BAA4B;;AAE5B,yBAAyB;;AAEzB,4BAA4B;;AAE5B,oBAAoB;;AAEpB,2BAA2B;;AAE3B,6BAA6B;;;AAG7B,oBAAoB;;;AAGpB;;AAEA,sCAAsC;;AAEtC;;AAEA,2CAA2C;AAC3C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA,gDAAgD;;AAEhD,gDAAgD;;AAEhD,wDAAwD;;;AAGxD;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA,oBAAoB;;AAEpB;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,wDAAwD;;AAExD,0DAA0D;;AAE1D;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,iBAAiB;;;AAGjB;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;;AAGH;;AAEA;;;AAGA;;;AAGA;;;AAGA;;AAEA,WAAW;;AAEX;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,wBAAwB;;AAExB,4BAA4B;;AAE5B;;;AAGA;;AAEA;;AAEA,gBAAgB;;AAEhB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,gEAAgE;;AAEhE,gDAAgD;;AAEhD,4DAA4D;;AAE5D,8DAA8D;;AAE9D,oEAAoE;;AAEpE,wDAAwD;;AAExD,oEAAoE;;AAEpE,kEAAkE;;AAElE,8DAA8D;;AAE9D;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,4CAA4C;;AAE5C,sCAAsC;;AAEtC;;AAEA,4CAA4C;;AAE5C,8CAA8C;;AAE9C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kCAAkC;;AAElC,sCAAsC;;AAEtC,kCAAkC;;AAElC,sCAAsC;;AAEtC,wDAAwD;;AAExD,wCAAwC;;AAExC,4CAA4C;;AAE5C,sCAAsC;;AAEtC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,wCAAwC;;AAExC,sCAAsC;;AAEtC,oDAAoD;;AAEpD;;AAEA;;AAEA,4CAA4C;;AAE5C,sDAAsD;;AAEtD,gEAAgE;;AAEhE;;AAEA,4CAA4C;;AAE5C,0CAA0C;;AAE1C;;AAEA,wCAAwC;;AAExC,sCAAsC;;AAEtC,sCAAsC;;AAEtC;;AAEA,8CAA8C;;AAE9C;;AAEA,oCAAoC;;AAEpC;;AAEA;;AAEA;;AAEA;;AAEA,wCAAwC;;AAExC,sCAAsC;;AAEtC;;AAEA;;AAEA;;AAEA,0CAA0C;;AAE1C;;AAEA,8DAA8D;;AAE9D;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC;;AAEtC;;AAEA,oCAAoC;;AAEpC;;AAEA;;AAEA,kDAAkD;;AAElD;;AAEA,wCAAwC;;AAExC,wCAAwC;;AAExC;;AAEA,kDAAkD;;AAElD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA,iEAAiE;;AAEjE;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA,sFAAsF,sBAAsB;AAC5G,KAAK;;AAEL;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA,IAAI;;AAEJ;;AAEA,gEAAgE,sBAAsB;AACtF,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,6CAA6C;;;AAG7C;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA,MAAM;AACN;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,sBAAsB;;AAEtB;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP,MAAM;;AAEN;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA,KAAK;AACL,IAAI;AACJ,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,IAAI;AACJ,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA,IAAI;AACJ,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA,MAAM;AACN,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA,mDAAmD,sBAAsB;AACzE,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,oBAAoB,oBAAoB;;AAExC;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA,KAAK;AACL,IAAI;;AAEJ;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;;AAEH;;;AAGA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;;AAEH;;;AAGA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA,GAAG;;AAEH;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;;;AAGA;;AAEA;;AAEA,mDAAmD;;;AAGnD,sBAAsB;;;AAGtB,qBAAqB;;;AAGrB,yBAAyB;;;AAGzB,wBAAwB;;;AAGxB,wBAAwB;;;AAGxB,+BAA+B;;;AAG/B,2BAA2B;;;AAG3B,yBAAyB;;;AAGzB,mBAAmB;;;AAGnB;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA,MAAM;;AAEN;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA,MAAM;AACN;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,QAAQ;;AAER;AACA;AACA,MAAM;;AAEN;;AAEA;;AAEA;;AAEA,OAAO;;AAEP;AACA;AACA;AACA,IAAI;;AAEJ;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA,qBAAqB;;AAErB,0BAA0B;;AAE1B,oBAAoB;;AAEpB,qBAAqB;AACrB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,4EAA4E;;AAE5E;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,cAAc;;AAEd;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ,gBAAgB;;AAEhB;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB,mFAAmF;AACnF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D;;AAE/D;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,EAAE;;AAEF;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB,sBAAsB;AACtB,gBAAgB;AAChB;AACA,sBAAsB;;AAEtB,kDAAkD;AAClD,4CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,0DAA0D,sBAAsB;AAChF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,IAAI;AACJ;AACA,IAAI;AACJ,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH,gBAAgB,2BAA2B;AAC3C;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,iBAAiB;AAChD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA,iDAAiD;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA,GAAG;;AAEH;AACA,8DAA8D;AAC9D,uEAAuE;AACvE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA,KAAK;;AAEL;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA,oDAAoD;AACpD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,+BAA+B,aAAa;AAC5C;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,wCAAwC;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB,iBAAiB,KAAK,aAAa,MAAM;AACzC;AACA,OAAO,0BAA0B;;AAEjC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qBAAqB,KAAK,aAAa,MAAM,8CAA8C,EAAE;AAC7F;AACA,OAAO;AACP;AACA;AACA,MAAM;;AAEN;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA,KAAK;AACL;;AAEA,kCAAkC,kDAAkD;;AAEpF;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,qBAAqB;AACrB,2BAA2B;AAC3B,0BAA0B;AAC1B,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA,qBAAqB,qBAAqB;AAC1C;AACA;AACA,QAAQ;AACR;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA,IAAI;;AAEJ;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA,IAAI;;AAEJ;;AAEA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,sBAAsB;AACvC;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,OAAO;AACP;AACA;AACA,iDAAiD;;AAEjD;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ;;AAER;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR,OAAO;;AAEP;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAqB,WAAW;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL,IAAI;;AAEJ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,QAAQ;AACR,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,iBAAiB,sBAAsB;AACvC,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,eAAe;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,qBAAqB,qBAAqB;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAqB;;AAErB,uBAAuB;AACvB,0BAA0B;AAC1B,gCAAgC;;AAEhC;AACA,wCAAwC;;AAExC,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,iEAAiE;AACnG,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,oFAAoF;;AAEpF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa,yDAAyD;AACtE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,yDAAyD;AACtE;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA,0GAA0G;AAC1G;AACA,KAAK;AACL;AACA,kGAAkG;AAClG;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,YAAY;;AAEZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,uFAAuF;AACvG;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,yCAAyC;AACtD;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,yCAAyC;AACtD;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,+DAA+D,EAAE;AACjF;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf,cAAc;AACd,cAAc;AACd,gBAAgB;AAChB,eAAe;AACf,gBAAgB;AAChB,gBAAgB;AAChB,gBAAgB;AAChB;;AAEA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,EAAE;;AAErB;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ,kBAAkB;AAClB;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;;AAEJ;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,kBAAkB,eAAe;AACjC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;;AAEhB;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,IAAI,GAAG,gBAAgB;;AAEvB;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,GAAG,gBAAgB;;AAEvB;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;;AAEnC;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA,iBAAiB,oCAAoC;AACrD;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,qBAAqB;;AAErB,8BAA8B;AAC9B;AACA;AACA,GAAG,EAAE;AACL;AACA;AACA,GAAG;AACH,sBAAsB;AACtB;AACA,mBAAmB;AACnB,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG,EAAE;;AAEL;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qEAAqE;AACrE;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,WAAW;AACX;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA,cAAc;;AAEd;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,qCAAqC;AACrC,QAAQ;AACR;AACA;AACA,SAAS;AACT,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB,qBAAqB;AACrB,0BAA0B;AAC1B,kBAAkB;AAClB,6BAA6B;AAC7B,0BAA0B;AAC1B,iCAAiC;AACjC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ,GAAG,GAAG,gBAAgB;;AAEtB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,GAAG,gBAAgB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAqB;AACrB;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,yBAAyB;AACzB,sBAAsB;AACtB,qBAAqB;AACrB,0BAA0B;AAC1B,yBAAyB;AACzB,kBAAkB;AAClB,kBAAkB;;AAElB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ,GAAG,GAAG,gBAAgB;AACtB;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB,wDAAwD;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,qBAAqB;;AAErB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA,uBAAuB,UAAU;AACjC;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;;AAEA,2CAA2C;AAC3C;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,sCAAsC,sBAAsB;AAC5D,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA,uCAAuC,sBAAsB;AAC7D,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;;AAEL;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,8FAA8F;AAC9F;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;;AAEJ;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,2CAA2C,sBAAsB;AACjE,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,0CAA0C,sBAAsB;AAChE;AACA;AACA;AACA,IAAI;AACJ;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA,sEAAsE;AACtE;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA,uBAAuB;AACvB,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,OAAO;AACP;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD,gBAAgB;;AAEtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,gBAAgB;;AAE9E;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB;;AAEtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,gBAAgB;;AAErE;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,gBAAgB;;AAE7E;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,sBAAsB;;AAEtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mDAAmD,gBAAgB;AACnE;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA,gLAAgL;AAChL;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B;AAC/B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB,yBAAyB;AACzB,8BAA8B;AAC9B,uBAAuB;AACvB,yBAAyB;AACzB,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAqB,iBAAiB;AACtC;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;;AAEL;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yJAAyJ;AACzJ;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH,yJAAyJ;AACzJ;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB,qBAAqB;AACrB,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,sBAAsB,2BAA2B;AACjD;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,mFAAmF;AACrG;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,6BAA6B;AAC7C;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B,QAAQ;AACpC;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;;AAEJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI;AACJ;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC,E;;;;;;;;;;;;AC/6wBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;;AAEO;AACP;AACA,mBAAmB,sBAAsB;AACzC;AACA;;AAEO;AACP;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;;AAEO;AACP,mCAAmC,oCAAoC;AACvE;;AAEO;AACP;AACA;;AAEO;AACP,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;;AAEO;AACP,aAAa,6BAA6B,0BAA0B,aAAa,EAAE,qBAAqB;AACxG,gBAAgB,qDAAqD,oEAAoE,aAAa,EAAE;AACxJ,sBAAsB,sBAAsB,qBAAqB,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kCAAkC,SAAS;AAC3C,kCAAkC,WAAW,UAAU;AACvD,yCAAyC,cAAc;AACvD;AACA,6GAA6G,OAAO,UAAU;AAC9H,gFAAgF,iBAAiB,OAAO;AACxG,wDAAwD,gBAAgB,QAAQ,OAAO;AACvF,8CAA8C,gBAAgB,gBAAgB,OAAO;AACrF;AACA,iCAAiC;AACjC;AACA;AACA,SAAS,YAAY,aAAa,OAAO,EAAE,UAAU,WAAW;AAChE,mCAAmC,SAAS;AAC5C;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM,gBAAgB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;;AAEO;AACP,4BAA4B,sBAAsB;AAClD;AACA;AACA;;AAEO;AACP,iDAAiD,QAAQ;AACzD,wCAAwC,QAAQ;AAChD,wDAAwD,QAAQ;AAChE;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,iBAAiB,sFAAsF,aAAa,EAAE;AACtH,sBAAsB,gCAAgC,qCAAqC,0CAA0C,EAAE,EAAE,GAAG;AAC5I,2BAA2B,MAAM,eAAe,EAAE,YAAY,oBAAoB,EAAE;AACpF,sBAAsB,oGAAoG;AAC1H,6BAA6B,uBAAuB;AACpD,4BAA4B,wBAAwB;AACpD,2BAA2B,yDAAyD;AACpF;;AAEO;AACP;AACA,iBAAiB,4CAA4C,SAAS,EAAE,qDAAqD,aAAa,EAAE;AAC5I,yBAAyB,6BAA6B,oBAAoB,gDAAgD,gBAAgB,EAAE,KAAK;AACjJ;;AAEO;AACP;AACA;AACA,2GAA2G,sFAAsF,aAAa,EAAE;AAChN,sBAAsB,8BAA8B,gDAAgD,uDAAuD,EAAE,EAAE,GAAG;AAClK,4CAA4C,sCAAsC,UAAU,oBAAoB,EAAE,EAAE,UAAU;AAC9H;;AAEO;AACP,gCAAgC,uCAAuC,aAAa,EAAE,EAAE,OAAO,kBAAkB;AACjH;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,4CAA4C;AAC5C;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC4B;AACO;AACE;AAChB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,iEAAK;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC;AAC3G;AACA;AACA,qCAAqC;AACrC;AACA;AACA,oEAAoE,+CAA+C;AACnH;AACA,qCAAqC;AACrC;AACA;AACA,oEAAoE,yCAAyC;AAC7G;AACA;AACA,qCAAqC;AACrC;AACA;AACA,oEAAoE,6CAA6C;AACjH;AACA;AACA,qCAAqC;AACrC;AACA;AACA,oEAAoE,0CAA0C;AAC9G;AACA;AACA,qCAAqC;AACrC;AACA;AACA,oEAAoE,2CAA2C;AAC/G;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+CAA+C,2EAAe,OAAO,+EAAc,uDAAuD;AAC1K;AACA;AACA;AACA,kDAAkD,wEAAY;AAC9D;AACA,mHAAmH,uBAAuB;AAC1I;AACA;AACA;AACA;AACA,gCAAgC,0CAA0C,2EAAe,OAAO,+EAAc,6CAA6C;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,8DAA8D,2EAAe,GAAG;AAChF;AACA,gDAAgD,+EAAc;AAC9D,0CAA0C,+EAAc;AACxD,8CAA8C,+EAAc;AAC5D,2CAA2C,+EAAc;AACzD,4CAA4C,+EAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,uCAAuC;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,wEAAY;AAC1E,qFAAqF,kCAAkC;AACvH;AACA;AACA,4EAA4E,kCAAkC;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,oFAAoF,yBAAyB;AAC7G;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6B;;AAE9B;;;;;;;;;;;;;AC3PA;AAAA;AAAA;AAAA;AAAgE;AACN;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0JAA0J,wCAAwC;AAClM;AACA;AACA;AACA;AACA;AACA,uBAAuB,4EAAqB;AAC5C;AACA;AACA,uBAAuB,sEAAkB;AACzC;AACA;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAiC;AACyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qEAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;AAEjC;;;;;;;;;;;;;ACjNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACgD;AACQ;AACQ;AACd;AAChB;AACP;AACc;AACY;AACqB;AAC7B;AACtB;AACgB;AACC;AACjB;AACmB;AACD;AACT;AACI;AAClC;AACmC;AACZ;AACR;AACf;AACiD;AAChC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAa;AACvC,0BAA0B,oEAAa;AACvC;AACA,4DAA4D,4FAAqB;AACjF,oDAAoD,uFAAuB;AAC3E,kCAAkC,6EAAc;AAChD,oCAAoC,iFAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8EAAkB;AAC5D;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,sFAAkB;AAC5D;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,4GAAkC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAAW,eAAe,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,sDAAsD;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAAW,eAAe,qBAAqB;AACvE;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wBAAwB;AAChE,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,2EAAe,2BAA2B,uEAAW,2BAA2B,gGAAmB;AACxJ;AACA;AACA;AACA;AACA,yBAAyB;AACzB,6CAA6C,+CAAY,iDAAiD,4CAA4C,EAAE;AACxJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE,gDAAgD,8EAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE,gDAAgD,8EAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE;AACA,gDAAgD,8EAAiB;AACjE;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8FAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uEAAW;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,4CAA4C,8EAAkB;AAC9D;AACA;AACA,sCAAsC,sHAAuC;AAC7E;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,8EAAkB;AAC9C;AACA;AACA;AACA,uBAAuB,qFAAkB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,qFAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yFAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+CAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4CAA4C,qFAAyB;AACrE,0CAA0C,iGAAuB;AACjE;AACA;AACA,QAAQ,8DAAW,eAAe,2BAA2B;AAC7D;AACA;AACA,QAAQ,8DAAW,eAAe,mCAAmC;AACrE;AACA;AACA,QAAQ,8DAAW,eAAe,yBAAyB;AAC3D;AACA;AACA,8FAA8F,sCAAsC,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gEAAW;AAClC;AACA,uBAAuB,gEAAW;AAClC;AACA;AACA;AACA,CAAC;AACqB;;AAEtB;;;;;;;;;;;;;ACpgBA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACiC;AACgB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,iCAAiC,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,sEAAsE,iCAAiC,EAAE;AACzG;AACA,sBAAsB,sFAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,wDAAwD,EAAE;AACrI;AACA;AACA;AACA,0BAA0B,sGAA+B;AACzD;AACA;AACA;AACA;AACA,6BAA6B,sDAAU;AACvC;AACA;AACA;AACA;AACA,CAAC;AAC4B;;AAE7B;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACqD;AAC1C;AACI;AACE;AACgC;AACC;AACtB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAc,CAAC,uDAAQ;AACxC,kCAAkC,8CAAgB,mBAAmB,yGAA4B;AACjG,kEAAkE,QAAQ,mEAAgB,iBAAiB,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAc,CAAC,uDAAQ;AACxC,mCAAmC,8CAAgB,oBAAoB,yGAA4B;AACnG,eAAe,qEAAsB;AACrC;AACA,sCAAsC,QAAQ,mEAAgB,kBAAkB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAc,CAAC,uDAAQ;AACxC,kFAAkF,gCAAgC,wEAAY,YAAY,EAAE;AAC5I,kFAAkF,+BAA+B,wEAAY,CAAC,EAAE;AAChI,+BAA+B,8CAAgB,gBAAgB,yGAA4B;AAC3F;AACA,uCAAuC,wEAAY;AACnD;AACA;AACA;AACA,SAAS;AACT,2CAA2C,6FAAqB,kBAAkB,qEAAsB;AACxG,gDAAgD,8FAAuB;AACvE,wCAAwC,6FAAqB;AAC7D,eAAe,8CAAgB;AAC/B;AACA;AACA,CAAC;AACoC;;AAErC;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACyB;AAC+B;AACA;AACA;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,4EAA4E,uEAAuE,EAAE;AACrJ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,uEAAuE,EAAE;AACrJ;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,+EAA+E,8CAA8C,EAAE;AAC/H;AACA,mCAAmC,qEAAa;AAChD,yBAAyB;AACzB;AACA;AACA,qCAAqC,qEAAa;AAClD,2CAA2C,0BAA0B;AACrE;AACA,iCAAiC,qEAAa;AAC9C,qCAAqC,qEAAa;AAClD,2CAA2C,eAAe;AAC1D;AACA;AACA,8BAA8B,qEAAa,yCAAyC,qEAAa;AACjG,gDAAgD,qGAA0B;AAC1E;AACA;AACA;AACA,6CAA6C,qEAAa;AAC1D;AACA;AACA;AACA;AACA;AACA,6CAA6C,qEAAa;AAC1D;AACA;AACA;AACA;AACA;AACA,4CAA4C,qEAAa;AACzD;AACA;AACA;AACA,gDAAgD,qGAA0B;AAC1E;AACA;AACA;AACA,gDAAgD,qGAA0B;AAC1E;AACA;AACA;AACA,iDAAiD,qGAA0B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kDAAkD,qBAAqB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kDAAkD,2BAA2B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kDAAkD,yBAAyB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qEAAa;AAChC,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;AC3OA;AAAA;AAAA;AAAA;AAA6D;AACd;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAa,0CAA0C,qEAAa,iCAAiC,qEAAa;AACpI,iBAAiB,qEAAa;AAC9B,kBAAkB,qEAAa;AAC/B,kBAAkB,qEAAa;AAC/B,sBAAsB,qEAAa;AACnC,sBAAsB,qEAAa;AACnC,sBAAsB,qEAAa;AACnC,iBAAiB,qEAAa;AAC9B,oBAAoB,qEAAa;AACjC,mBAAmB,qEAAa,qDAAqD,qEAAa;AAClG,yBAAyB,uDAAQ,WAAW,qEAAa;AACzD,wBAAwB,uDAAQ,WAAW,qEAAa;AACxD,2BAA2B,uDAAQ,WAAW,qEAAa;AAC3D,yCAAyC,qEAAa;AACtD,2CAA2C,qEAAa;AACxD,iCAAiC,qEAAa;AAC9C,4CAA4C,qEAAa;AACzD,2CAA2C,qEAAa;AACxD,oBAAoB,qEAAa;AACjC,0BAA0B,qEAAa;AACvC,mCAAmC,qEAAa;AAChD,mBAAmB,qEAAa;AAChC;AACA,6BAA6B,qEAAa;AAC1C,+BAA+B,qEAAa;AAC5C,gCAAgC,qEAAa;AAC7C,aAAa;AACb;AACA,2BAA2B,qEAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAa,sDAAsD,qEAAa;AACzG,+BAA+B,qEAAa;AAC5C,mCAAmC,qEAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB,EAAE;AAC5E;AACA;AACA,CAAC;AACqC;;AAEtC;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAiC;AAC4B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAa;AACrC,0BAA0B;AAC1B;AACA,sBAAsB,qEAAa,yDAAyD,qCAAqC,EAAE;AACnI,SAAS;AACT;AACA;AACA,CAAC;AACqC;;AAEtC;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAa;AACrC,wCAAwC,qEAAa;AACrD;AACA,kCAAkC,uBAAuB;AACzD,SAAS;AACT;AACA;AACA,CAAC;AACqC;;AAEtC;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,6BAA6B,EAAE;AACxF;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAA6C;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAA6C;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAA6C;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,8BAA8B,wBAAwB;AACtD;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAA6C;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAkD;AAClD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAsB;AAC9B;AACA;;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAgD;AACgC;AAChF;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,YAAY,gEAAsB;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,cAAc;AACd;AACA;AACA,0BAA0B,wFAAwB;AAClD;AACA;AACA,gBAAgB,gEAAsB,iBAAiB,sDAAsD;AAC7G,YAAY,gEAAsB;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,gEAAsB;AACtC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACgC;AACoB;AACpG;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wFAAwB;AAC9C;AACA;AACA,sBAAsB,4GAAkC;AACxD;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,gEAAsB;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACO;AACP;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,gEAAsB;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,sFAAsF,uBAAuB;AAC7G,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAgD;AAC6B;AAC7E;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,kBAAkB,qFAAkB;AACpC,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAgD;AAC6B;AAC7E;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,kBAAkB,qFAAkB;AACpC,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAgD;AAC6B;AAC7E;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,kBAAkB,qFAAkB;AACpC,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAgD;AAC6B;AAC7E;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,kBAAkB,qFAAkB;AACpC,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAgD;AAC6B;AAC7E;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,kBAAkB,qFAAkB;AACpC,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAgD;AAC6B;AAC7E;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,kBAAkB,qFAAkB;AACpC,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAgD;AAC6B;AAC7E;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,kBAAkB,qFAAkB;AACpC,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA,iHAAiH;AACjH;AACA,YAAY,gEAAsB;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAiC;AAC2E;AACrG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,gEAAsB;AAC9E;AACA;AACA,qDAAqD,gEAAsB;AAC3E;AACA;AACA;AACA;AACA,wEAAwE,8CAAgB;AACxF;AACA;AACA;AACA,qBAAqB;AACrB;AACA,uEAAuE;AACvE,wEAAwE,8CAAgB;AACxF;AACA;AACA,wEAAwE,8CAAgB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAU;AACvC;AACA;AACA,6BAA6B,iDAAe;AAC5C;AACA;AACA,6BAA6B,gDAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,uBAAuB,uDAAa;AACpC;AACA;AACA,uBAAuB,uDAAa;AACpC;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpFA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAgD;AAC0D;AAC1G;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kHAAqC;AAC3D;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B,EAAE;AAC5D;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACO;AACP;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAgD;AAChD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,gEAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B,EAAE;AAC5D;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE;AACD;AACZ;AACU;AACT;AACA;AACG;AACa;AACE;AACrB;AACA;AACS;AACZ;AAC6B;AAChC;AAC4B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gEAAW;AACtC;AACA,2BAA2B,mEAAc;AACzC;AACA,2BAA2B,4EAAe;AAC1C;AACA,2BAA2B,8DAAS;AACpC;AACA,2BAA2B,gEAAW;AACtC;AACA,2BAA2B,iEAAY;AACvC;AACA,2BAA2B,oEAAa;AACxC;AACA,2BAA2B,mFAAkB;AAC7C;AACA,2BAA2B,iFAAiB;AAC5C;AACA,2BAA2B,8DAAW;AACtC;AACA,2BAA2B,iEAAY;AACvC;AACA,2BAA2B,oEAAe;AAC1C;AACA,2BAA2B,gEAAW;AACtC;AACA,2BAA2B,2DAAU;AACrC;AACA,2BAA2B,wFAAmB;AAC9C;AACA,2BAA2B,gFAA2B;AACtD;AACA,0BAA0B,4EAAkB;AAC5C;AACA;AACA;AACA,CAAC;AACwB;;AAEzB;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAiC;AACU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8DAAI,mBAAmB,yBAAyB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;;AAEvB;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgB;;AAEjB;;;;;;;;;;;;;ACZA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;;AAEvB;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACY;AACyB;AACrB;AACY;AACgwBAAwB,cAAc;AACtC,yBAAyB,cAAc;AACvC,iCAAiC,cAAc;AAC/C,qBAAqB,YAAY;AACjC,uBAAuB,YAAY;AACnC,0BAA0B,cAAc;AACxC,wBAAwB,0BAA0B;AAClD,oBAAoB,0BAA0B;AAC9C,wBAAwB,0BAA0B;AAClD,sBAAsB,0BAA0B;AAChD,sBAAsB,gBAAgB;AACtC,uBAAuB,gBAAgB;AACvC,qBAAqB,eAAe;AACpC,yBAAyB,eAAe;AACxC,0BAA0B,eAAe;AACzC,oBAAoB,WAAW;AAC/B,oBAAoB,YAAY;AAChC,wBAAwB,YAAY;AACpC,wBAAwB,WAAW;AACnC,yBAAyB,WAAW;AACpC,0BAA0B,WAAW;AACrC,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yKAAyK,4DAA4D,EAAE;AACvO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C,mBAAmB,kFAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,8BAA8B,EAAE;AAClH;AACA;AACA,qEAAqE,8CAA8C,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mFAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mFAAsB;AACtE;AACA;AACA;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mFAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,8EAA8E,EAAE;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,uDAAQ;AAC3B,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,+CAA+C,EAAE;AAC/G;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,uDAAQ,yEAAyE,iBAAiB,EAAE;AACpK;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe,wDAAW,kCAAkC;AAClG;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qBAAqB;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC,wCAAwC;AACxC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,yEAAyE,EAAE;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC8B;;AAE/B;;;;;;;;;;;;;;AC1tBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC2D;AACR;AACf;AACZ;AACoB;AACV;AAC2B;AACxC;AACrB;AACc;AACsB;AACA;AACV;AAChB;AAC3C;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC,wCAAwC;AACxC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,4FAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,4FAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,sGAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD,gDAAgD,QAAQ,+CAAiB;AACzE;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,uDAAuD,6EAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,qEAAqE,4CAAK,UAAU,4CAAK;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,qEAAqE,4CAAK,UAAU,4CAAK;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD,2CAA2C,0BAA0B;AACrE,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,2DAA2D,EAAE;AAC7H;AACA;AACA;AACA,6EAA6E,qEAAqE,EAAE;AACpJ;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iEAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,mEAAmE,EAAE;AAClJ,gEAAgE,yDAAyD,EAAE;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,8DAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,wDAAwD,iEAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA;AACA;AACA,uFAAuF,2BAA2B,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4FAA4F,2BAA2B,EAAE;AACzH,gHAAgH,2BAA2B,EAAE;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA;AACA,0FAA0F,wEAAwE,EAAE;AACpK;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,gFAAgF,gCAAgC,EAAE;AAClH,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA,gFAAgF,gCAAgC,EAAE;AAClH,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,iFAAiF,+EAA+E,EAAE;AAClK;AACA;AACA;AACA;AACA;AACA,8CAA8C,2EAAU;AACxD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yDAAyD,8EAAW;AACpE;AACA;AACA,6BAA6B;AAC7B,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,oDAAY,2CAA2C,6CAA6C,EAAE;AACvJ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,6EAAW,2DAA2D,wCAAwC,EAAE;AACpL;AACA;AACA;AACA,4DAA4D,6EAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,6EAAW;AAC1E;AACA,oEAAoE,wCAAwC,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA;AACA,2FAA2F,2BAA2B,EAAE;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,gGAAgG,2BAA2B,EAAE;AAC7H,oHAAoH,2BAA2B,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,6BAA6B;AAC7B,yFAAyF,uCAAuC,EAAE;AAClI;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA,0FAA0F,wEAAwE,EAAE;AACpK;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA;AACA,oFAAoF,gCAAgC,EAAE;AACtH,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA,qFAAqF,uCAAuC,EAAE;AAC9H;AACA,oFAAoF,gCAAgC,EAAE;AACtH,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,kFAAkF,kCAAkC,EAAE;AACtH;AACA,qFAAqF,uCAAuC,EAAE;AAC9H;AACA;AACA;AACA,wFAAwF,gCAAgC,EAAE;AAC1H,uDAAuD,4CAAK;AAC5D,yDAAyD,4CAAK;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA;AACA,kDAAkD,2EAAU;AAC5D;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6DAA6D,8EAAW;AACxE;AACA;AACA,iCAAiC;AACjC,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA,wJAAwJ,sCAAsC,EAAE;AAChM,iCAAiC;AACjC;AACA,0FAA0F,2CAA2C,EAAE;AACvI;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,oDAAY,yDAAyD,0FAA0F,EAAE;AAClN;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,6EAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,wEAAwE,EAAE;AACpK;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA,mGAAmG,uCAAuC,EAAE;AAC5I,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA,yGAAyG,uCAAuC,EAAE;AAClJ,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,iFAAiF,+EAA+E,EAAE;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,qCAAqC,EAAE;AAC7H;AACA;AACA;AACA,oFAAoF,mCAAmC,EAAE;AACzH;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,oDAAY,2CAA2C,8CAA8C,EAAE;AACxJ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mCAAmC,EAAE;AAC7G;AACA,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,oBAAoB,EAAE;AAC3F;AACA;AACA,sFAAsF,wEAAwE,EAAE;AAChK;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA,kFAAkF,gCAAgC,EAAE;AACpH,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA,uDAAuD,gDAAgD,EAAE;AACzG,wDAAwD,gCAAgC,EAAE;AAC1F,mFAAmF,+BAA+B,EAAE;AACpH,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD,wHAAwH,wEAAwE,EAAE;AAClM;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD,iGAAiG,uDAAuD,EAAE;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,oBAAoB,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,0EAA0E,wDAAwD,EAAE;AACpI;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qFAAe,4DAA4D,qCAAqC,EAAE;AACnL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,0EAA0E,sDAAsD,EAAE;AAClI;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,iEAAiE,8CAA8C,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2EAAU,kDAAkD,+BAA+B,EAAE;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,iEAAiE,4CAA4C,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,gCAAgC,EAAE;AAC7H;AACA;AACA,mFAAmF;AACnF;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,oCAAoC,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8DAAI;AACnD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA;AACA;AACA,2FAA2F,QAAQ,+CAAiB;AACpH;AACA;AACA,uCAAuC,iDAAmB;AAC1D,gDAAgD,iEAAK;AACrD,qFAAqF,wDAAwD,EAAE;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mHAAmH,EAAE;AAC1L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,uHAAuH,0CAA0C,EAAE;AACnK;AACA,oEAAoE,sFAAsF,EAAE;AAC5J;AACA,mFAAmF,wHAAwH,EAAE;AAC7M;AACA,8DAA8D,6EAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iEAAiE,wDAAQ;AACzE;AACA,qCAAqC,4BAA4B,wCAAwC,EAAE;AAC3G;AACA,gGAAgG,oEAAoE,EAAE;AACtK;AACA;AACA;AACA,mDAAmD,qFAAe;AAClE;AACA,0FAA0F,4BAA4B,EAAE;AACxH;AACA,oGAAoG,uCAAuC,EAAE;AAC7I;AACA;AACA,yCAAyC;AACzC,qCAAqC;AACrC,4DAA4D,wDAAQ;AACpE;AACA,qCAAqC,uBAAuB,8BAA8B,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,mDAAmD,2EAAU;AAC7D;AACA;AACA,mFAAmF,yBAAyB,EAAE;AAC9G;AACA;AACA;AACA,yCAAyC;AACzC,qCAAqC;AACrC;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iDAAiD,EAAE;AACxH;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB,EAAE;AACjE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,uCAAuC,2EAAU;AACjD;AACA;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA,uEAAuE,mCAAmC,EAAE;AAC5G;AACA,2CAA2C,2EAAU;AACrD;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,+EAA+E,+BAA+B,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4EAA4E,+BAA+B,EAAE;AAC7G;AACA;AACA,gGAAgG,+BAA+B,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0EAA0E,gCAAgC,EAAE;AAC5G;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA,qCAAqC,4EAA4E;AACjH;AACA,kDAAkD,4CAAK;AACvD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,yDAAyD,8DAAI;AAC7D;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA,2EAA2E,0BAA0B;AACrG,uEAAuE,iBAAiB;AACxF;AACA,kDAAkD,4CAAK;AACvD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mEAAmE,+BAA+B,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,+CAA+C,2EAAU;AACzD,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,uEAAuE,+BAA+B,EAAE;AACxG,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,wEAAwE,2BAA2B,EAAE;AACrG,4FAA4F,2BAA2B,EAAE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,yDAAyD,qFAAe;AACxE,mBAAmB,4CAAK;AACxB;AACA;AACA,0CAA0C,iEAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAK,sBAAsB,8DAAI;AACzE,sDAAsD,0CAA0C,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,0BAA0B,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8EAAe;AACmB;;AAEpC;;;;;;;;;;;;;AC99DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6C;AACc;AAC/C;AACI;AACY;AACgB;AAC9B;AACe;AACaqBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,qEAAqE,sFAAuB;AAC5F;AACA;AACA;AACA,2FAA2F,+BAA+B,EAAE;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C,mBAAmB,0EAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mFAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA,iBAAiB,8CAAgB;AACjC;AACA;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mFAAsB;AACtE;AACA,qEAAqE,kCAAkC,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,mFAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,8BAA8B,EAAE;AAChH;AACA;AACA,qEAAqE,8CAA8C,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjiEAAiE,4DAA4D,EAAE;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAQ;AACxB;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,+CAA+C,EAAE;AAC/G;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qEAAa;AAChC;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAa;AACzC;AACA,+BAA+B,qEAAa;AAC5C;AACA;AACA;AACA,uBAAuB;AACvB;AACA,mBAAmB;AACnB,sBAAsB,oGAA8B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC,8CAA8C,eAAe,wDAAW,kCAAkC;AAC1G,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA,kFAAkF,sEAAsE,EAAE;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,oHAAoH,8BAA8B,EAAE;AACpJ;AACA;AACA;AACA,yDAAyD,+BAA+B,EAAE;AAC1F,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC0B;;AAE3B;;;;;;;;;;;;;AC1qBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC2D;AACR;AACf;AACZ;AACU;AACU;AACiB;AACxC;AACrB;AAC+B;AACL;AACU;AACA;AACtB;AACT;AAC6B;AACQ;AAC3E;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAAc;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,cAAc;AACd;AACA,yBAAyB,4CAAc;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,4FAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAAY,2CAA2C,2CAA2C,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,4FAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD,gDAAgD,QAAQ,+CAAiB;AACzE;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uCAAuC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yEAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD,gDAAgD,QAAQ,+CAAiB;AACzE;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,qEAAqE,4CAAK,UAAU,4CAAK;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,qEAAqE,4CAAK,UAAU,4CAAK;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,qEAAqE,4CAAK,UAAU,4CAAK;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,qEAAqE,4CAAK,UAAU,4CAAK;AACzF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD,2CAA2C,0BAA0B;AACrE,uCAAuC,sBAAsB;AAC7D,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wEAAwE,EAAE;AACjI;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,6EAA6E,qEAAqE,EAAE;AACpJ;AACA;AACA,0DAA0D,wBAAwB,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE,qCAAqC,oBAAoB;AACzD,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iEAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,mEAAmE,EAAE;AAClJ;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,uDAAuD,wEAAwE,EAAE;AACjI;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,8DAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,wDAAwD,iEAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA;AACA,yFAAyF,oBAAoB,EAAE;AAC/G;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,iJAAiJ,oBAAoB,EAAE;AACvK,sFAAsF,kCAAkC,EAAE;AAC1H,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,2IAA2I,oBAAoB,EAAE;AACjK,gFAAgF,kCAAkC,EAAE;AACpH,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA,iFAAiF,+EAA+E,EAAE;AAClK;AACA;AACA;AACA,6CAA6C,8EAAW;AACxD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8EAAW;AAC9D;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,2CAA2C,6CAA6C,EAAE;AACvJ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,6EAAW,2DAA2D,wCAAwC,EAAE;AACpL;AACA;AACA,4DAA4D,6EAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,6EAAW;AAC/E;AACA,oEAAoE,6CAA6C,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA,oFAAoF,oBAAoB,EAAE;AAC1G;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,6BAA6B;AAC7B,yFAAyF,uCAAuC,EAAE;AAClI;AACA;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA;AACA,+IAA+I,oBAAoB,EAAE;AACrK,oFAAoF,kCAAkC,EAAE;AACxH,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA,qFAAqF,uCAAuC,EAAE;AAC9H;AACA,+IAA+I,oBAAoB,EAAE;AACrK,oFAAoF,kCAAkC,EAAE;AACxH,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,kFAAkF,kCAAkC,EAAE;AACtH;AACA,qFAAqF,uCAAuC,EAAE;AAC9H;AACA;AACA;AACA,mJAAmJ,oBAAoB,EAAE;AACzK,wFAAwF,kCAAkC,EAAE;AAC5H,uDAAuD,4CAAK;AAC5D,yDAAyD,4CAAK;AAC9D;AACA;AACA;AACA;AACA;AACA,uDAAuD,8EAAW;AAClE;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+HAA+H,sCAAsC,EAAE;AACvK,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,4CAAK;AAC5D,yDAAyD,4CAAK;AAC9D;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD;AACA,yDAAyD,4CAAK;AAC9D;AACA;AACA,yDAAyD,4CAAK;AAC9D;AACA;AACA;AACA,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,yDAAyD,0FAA0F,EAAE;AAClN;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,6EAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uJAAuJ,oBAAoB,EAAE;AAC7K,mGAAmG,yCAAyC,EAAE;AAC9I,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA,6JAA6J,oBAAoB,EAAE;AACnL,yGAAyG,yCAAyC,EAAE;AACpJ,mDAAmD,4CAAK;AACxD,qDAAqD,4CAAK;AAC1D;AACA;AACA,iFAAiF,+EAA+E,EAAE;AAClK;AACA;AACA;AACA;AACA;AACA,gFAAgF,sGAAsG,EAAE;AACxL;AACA;AACA;AACA;AACA;AACA,mFAAmF,iFAAiF,EAAE;AACtK;AACA;AACA,wFAAwF;AACxF;AACA;AACA,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,2CAA2C,8CAA8C,EAAE;AACxJ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mCAAmC,EAAE;AAC7G;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,oBAAoB,EAAE;AAC3F;AACA;AACA;AACA;AACA,6IAA6I,oBAAoB,EAAE;AACnK,wFAAwF,kCAAkC,EAAE;AAC5H,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA,uDAAuD,gDAAgD,EAAE;AACzG,wDAAwD,gCAAgC,EAAE;AAC1F;AACA,mFAAmF,iCAAiC,EAAE;AACtH,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,oBAAoB,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,+DAA+D,oEAAoE,EAAE;AAClM;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,8EAAW,mDAAmD,gCAAgC,EAAE;AACnK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,+DAA+D,kEAAkE,EAAE;AAChM;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,oFAAoF,kEAAkE,EAAE;AACxJ;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,4EAAU,iDAAiD,+BAA+B,EAAE;AAC7J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,oFAAoF,gEAAgE,EAAE;AACtJ;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,mDAAmD,wDAAwD,EAAE;AAC1K;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qFAAe,4DAA4D,qCAAqC,EAAE;AACnL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,mDAAmD,sDAAsD,EAAE;AACxK;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8EAAW;AAChD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,0CAA0C,8CAA8C,EAAE;AACvJ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2EAAU,kDAAkD,+BAA+B,EAAE;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+CAAY,0CAA0C,4CAA4C,EAAE;AACrJ;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,yDAAyD,wBAAwB,EAAE;AACnF;AACA,kFAAkF,mCAAmC,EAAE;AACvH;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oIAAoI;AACpI;AACA;AACA;AACA;AACA,2FAA2F,gCAAgC,EAAE;AAC7H;AACA;AACA,qIAAqI;AACrI;AACA;AACA;AACA,uFAAuF,gCAAgC,EAAE;AACzH;AACA;AACA,oIAAoI;AACpI;AACA;AACA;AACA,+FAA+F,gCAAgC,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8DAAI;AACnD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAc;AACnD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA;AACA;AACA,2FAA2F,QAAQ,+CAAiB;AACpH;AACA;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA,wDAAwD,iEAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,wGAAwG,EAAE;AAC3L,8EAA8E,QAAQ,+CAAiB;AACvG;AACA;AACA,2DAA2D,iDAAmB;AAC9E;AACA;AACA,yDAAyD;AACzD,0EAA0E,6EAAW;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH,aAAa;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gIAAgI,oDAAoD,EAAE;AACtL,yHAAyH,mDAAmD,EAAE;AAC9K;AACA,4GAA4G;AAC5G;AACA,2HAA2H,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA,qDAAqD;AACrD,iDAAiD,EAAE,EAAE;AACrD;AACA;AACA;AACA,qEAAqE,wDAAQ;AAC7E;AACA;AACA,6CAA6C,4BAA4B,wCAAwC,EAAE;AACnH;AACA,mGAAmG,iEAAiE,EAAE;AACtK,2DAA2D,8EAAW;AACtE;AACA,2FAA2F,yBAAyB,EAAE;AACtH,iDAAiD;AACjD,6CAA6C;AAC7C,oEAAoE,wDAAQ;AAC5E;AACA;AACA,6CAA6C,4BAA4B,wCAAwC,EAAE;AACnH;AACA,kGAAkG,iEAAiE,EAAE;AACrK,2DAA2D,4EAAU;AACrE;AACA,0FAA0F,yBAAyB,EAAE;AACrH;AACA,iDAAiD;AACjD,6CAA6C;AAC7C,wEAAwE,wDAAQ;AAChF;AACA;AACA,6CAA6C,4BAA4B,wCAAwC,EAAE;AACnH;AACA,2DAA2D,oFAAc;AACzE;AACA;AACA,iDAAiD;AACjD,6CAA6C;AAC7C,yEAAyE,wDAAQ;AACjF;AACA,6CAA6C,4BAA4B,wCAAwC,EAAE;AACnH;AACA,wGAAwG,oEAAoE,EAAE;AAC9K;AACA;AACA;AACA,2DAA2D,qFAAe;AAC1E;AACA,kGAAkG,4BAA4B,EAAE;AAChI;AACA,4GAA4G,uCAAuC,EAAE;AACrJ;AACA;AACA,iDAAiD;AACjD,6CAA6C;AAC7C,oEAAoE,wDAAQ;AAC5E;AACA,6CAA6C,uBAAuB,mCAAmC,EAAE;AACzG;AACA,iGAAiG,mEAAmE,EAAE;AACtK,2DAA2D,2EAAU;AACrE;AACA;AACA,2FAA2F,yBAAyB,EAAE;AACtH;AACA;AACA,2FAA2F,+DAA+D,EAAE;AAC5J;AACA,iDAAiD;AACjD,6CAA6C;AAC7C;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,kDAAkD,EAAE;AACzH;AACA;AACA,uCAAuC,wBAAwB,EAAE;AACjE;AACA,sEAAsE,iFAAiF,EAAE;AACzJ;AACA,uCAAuC,8EAAW;AAClD;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA,sCAAsC,uBAAuB,EAAE;AAC/D;AACA,mCAAmC,8EAAW;AAC9C;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gFAAgF,iCAAiC,EAAE;AACnH;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4EAA4E,iCAAiC,EAAE;AAC/G;AACA;AACA,gGAAgG,iCAAiC,EAAE;AACnI;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qEAAqE,yBAAyB,EAAE;AAChG;AACA,iIAAiI,oBAAoB,EAAE;AACvJ,oEAAoE,kCAAkC,EAAE;AACxG;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA,qCAAqC,8DAA8D;AACnG;AACA,kDAAkD,4CAAK;AACvD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,yDAAyD,8DAAI;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA,2EAA2E,iBAAiB;AAC5F,uEAAuE,aAAa;AACpF;AACA,kDAAkD,4CAAK;AACvD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,iCAAiC,EAAE;AACtG,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,gDAAgD,2EAAU,2BAA2B,8EAAW;AAChG,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,iCAAiC,EAAE;AAC1G,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,sEAAsE,oBAAoB,EAAE;AAC5F;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,8EAA8E,6BAA6B,EAAE;AAC7G,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,iDAAiD,8EAAW;AAC5D,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,+CAA+C,4EAAU;AACzD,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,wEAAwE,6BAA6B,EAAE;AACvG,4FAA4F,6BAA6B,EAAE;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,yDAAyD,qFAAe;AACxE,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,iDAAiD,6EAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAK,sBAAsB,8DAAI;AACzE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0CAA0C,iEAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,8EAAe;AACe;;AAEhC;;;;;;;;;;;;;AC/zEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC8C;AACrB;AACoB;AACc;AAC5F;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sFAAuB;AAC7C;AACA,sBAAsB,sFAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA,mCAAmC,sEAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oGAA8B;AACpD;AACA;AACA;AACA,CAAC,CAAC,0FAAoB;AACG;;AAEzB;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6D;AAC9B;AACyB;AAC9B;AAC3D;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD,gDAAgD,QAAQ,+CAAiB;AACzE;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qCAAqC,wEAAgB;AACrD,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA,0DAA0D,UAAU,IAAI,QAAQ,YAAY,OAAO,sBAAsB,UAAU;AACnI;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;;AAErB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD,qEAAqE,iCAAiC,EAAE;AACxG;AACA;AACA,CAAC,CAAC,oGAAyB;AACG;;AAE9B;;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC8C;AAC3B;AAC0B;AAC9E;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sFAAuB;AAC7C;AACA,sBAAsB,sFAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA,mCAAmC,gEAAe;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,qBAAqB;AACrB,8BAA8B,6BAA6B;AAC3D,qBAAqB;AACrB,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC,CAAC,0FAAoB;AACA;;AAEtB;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6D;AAC9B;AACyB;AACG;AACR;AACzB;AAC3D;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,8BAA8B,oGAA8B;AAC5D;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,8BAA8B,4FAA0B;AACxD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,8BAA8B,4FAA0B;AACxD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD,gDAAgD,QAAQ,+CAAiB;AACzE;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yCAAyC,wEAAgB;AACzD,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA,CAAC,CAAC,oGAAyB;AACA;;AAE3B;;;;;;;;;;;;;AC7IA;AAAA;AAAgF;;AAEhF;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC8C;AACX;AACU;AACc;AAC5F;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sFAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA,mCAAmC,gFAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oGAA8B;AACpD;AACA;AACA;AACA,CAAC,CAAC,0FAAoB;AACQ;;AAE9B;;;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6D;AAC9B;AACyB;AAC9B;AAC3D;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wEAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD,qEAAqE,iCAAiC,EAAE;AACxG;AACA;AACA,CAAC,CAAC,oGAAyB;AACQ;;AAEnC;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC8C;AACb;AACY;AACc;AAC5F;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sFAAuB;AAC7C;AACA,sBAAsB,sFAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA,mCAAmC,8EAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mBAAO,CAAC,qJAA6B;AAC/D;AACA;AACA,sBAAsB,oGAA8B;AACpD;AACA;AACA;AACA,CAAC,CAAC,0FAAoB;AACO;;AAE7B;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6D;AAC9B;AACyB;AAC9B;AAC3D;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD,gDAAgD,QAAQ,+CAAiB;AACzE;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qCAAqC,wEAAgB;AACrD,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD,qEAAqE,iCAAiC,EAAE;AACxG;AACA;AACA,CAAC,CAAC,oGAAyB;AACO;;AAElC;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACgeAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,uEAAuE,+BAA+B,EAAE;AACxG,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,qFAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mFAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA,mBAAmB,yDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mFAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,yDAAS;AAC7B;AACA;AACA,oBAAoB,mFAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qEAAqE,8CAA8C,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,4DAA4D,EAAE;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,mBAAmB,uDAAQ;AAC3B,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,+CAA+C,EAAE;AAC/G;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC+B;;AAEhC;;;;;;;;;;;;;ACvfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC2D;AACR;AACf;AACN;AACN;AACU;AACU;AACvB;AACrB;AACoC;AACA;AACtB;AACoB;AACnE;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,oGAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,4FAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,4FAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,2DAA2D,iEAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,2DAA2D,iEAAK;AAChE;AACA;AACA;AACA;AACA,gFAAgF,sCAAsC,EAAE;AACxH;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD,2CAA2C,0BAA0B;AACrE,uCAAuC,sBAAsB;AAC7D,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE,qCAAqC,oBAAoB;AACzD,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,8DAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,wDAAwD,iEAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAK;AACtC,mCAAmC,4CAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,uCAAuC,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,6EAAW,2DAA2D,wCAAwC,EAAE;AACpL;AACA;AACA;AACA,4DAA4D,6EAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,6EAAW,2DAA2D,wCAAwC,EAAE;AACpL;AACA;AACA,yEAAyE,6CAA6C;AACtH;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,8FAA8F,wDAAwD,EAAE;AACxJ;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,6EAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,oDAAoD,EAAE;AACpJ,6FAA6F,wCAAwC,EAAE;AACvI,8FAA8F,0CAA0C,EAAE;AAC1I,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,6CAA6C,EAAE;AACtI,sFAAsF,iCAAiC,EAAE;AACzH,uFAAuF,mCAAmC,EAAE;AAC5H,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mCAAmC,EAAE;AAC7G;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,wEAAwE,mCAAmC,EAAE;AAC7G;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,2DAA2D,EAAE;AAC5I;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,8EAAW,mDAAmD,gCAAgC,EAAE;AACnK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,8DAA8D,EAAE;AAC/I;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,yDAAyD,EAAE;AACxI;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,4EAAU,iDAAiD,+BAA+B,EAAE;AAC7J;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,4DAA4D,EAAE;AAC3I;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,+CAA+C,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qFAAe,4DAA4D,qCAAqC,EAAE;AACnL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,kDAAkD,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,iEAAiE,8CAA8C,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qDAAqD,iEAAK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2EAAU,kDAAkD,+BAA+B,EAAE;AACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,iEAAiE,4CAA4C,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA,2FAA2F,gCAAgC,EAAE;AAC7H;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA,4FAA4F,gCAAgC,EAAE;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,yBAAyB,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8DAAI;AACnD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,gFAAgF,8BAA8B,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,QAAQ,+CAAiB;AACpH;AACA;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA,wDAAwD,iEAAK,EAAE,wBAAwB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4CAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,6EAAW;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH,2BAA2B,EAAE;AAC/I;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,yEAAyE,wDAAQ,8CAA8C,2BAA2B,EAAE;AAC5J;AACA,mHAAmH,iGAAiG,EAAE;AACtN,8GAA8G,6BAA6B,EAAE;AAC7I,wHAAwH,2BAA2B,EAAE;AACrJ;AACA;AACA,2DAA2D,qFAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,6CAA6C;AAC7C;AACA,4EAA4E,kCAAkC,EAAE;AAChH,yEAAyE,wBAAwB,EAAE;AACnG,uFAAuF,sCAAsC,EAAE;AAC/H,6EAA6E,QAAQ,+CAAiB;AACtG;AACA,uDAAuD,iDAAmB;AAC1E;AACA;AACA,yGAAyG,wCAAwC,EAAE;AACnJ;AACA;AACA;AACA;AACA,yGAAyG,sEAAsE,EAAE;AACjL,2FAA2F,0BAA0B,EAAE;AACvH;AACA;AACA,uHAAuH,oCAAoC,EAAE;AAC7J,iEAAiE;AACjE;AACA;AACA;AACA;AACA,sFAAsF,8EAAW;AACjG;AACA;AACA,iEAAiE;AACjE;AACA,iDAAiD;AACjD,6CAA6C,EAAE,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,4EAAU,EAAE,yCAAyC;AAC3H;AACA;AACA,4EAA4E,kCAAkC,EAAE;AAChH,yEAAyE,wBAAwB,EAAE;AACnG,uFAAuF,sCAAsC,EAAE;AAC/H,6EAA6E,QAAQ,+CAAiB;AACtG;AACA,uDAAuD,iDAAmB;AAC1E;AACA;AACA,gHAAgH,2CAA2C,EAAE;AAC7J;AACA,yGAAyG,wCAAwC,EAAE;AACnJ;AACA;AACA;AACA;AACA,yGAAyG,sEAAsE,EAAE;AACjL,2FAA2F,0BAA0B,EAAE;AACvH;AACA,sFAAsF,2EAAU;AAChG;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,iDAAiD;AACjD,6CAA6C,EAAE,EAAE;AACjD;AACA;AACA;AACA,6FAA6F,gBAAgB,EAAE;AAC/G;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,yBAAyB,EAAE;AAChG,sEAAsE,wEAAwE,EAAE;AAChJ;AACA;AACA;AACA,qEAAqE,wDAAwD,EAAE;AAC/H;AACA;AACA;AACA,uCAAuC,wBAAwB,EAAE;AACjE;AACA,sEAAsE,iFAAiF,EAAE;AACzJ;AACA,uCAAuC,8EAAW;AAClD;AACA;AACA,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA,gFAAgF,iCAAiC,EAAE;AACnH;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4EAA4E,iCAAiC,EAAE;AAC/G;AACA;AACA,gGAAgG,iCAAiC,EAAE;AACnI;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oEAAoE,kCAAkC,EAAE;AACxG;AACA;AACA;AACA,sFAAsF,0CAA0C,EAAE;AAClI;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,+CAA+C,iEAAK;AACpD;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA;AACA;AACA,iBAAiB,4CAAc;AAC/B;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,6CAA6C,8DAAI;AACjD,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,6CAA6C,8DAAI;AACjD;AACA,iBAAiB,4CAAc;AAC/B;AACA;AACA,uDAAuD,iBAAiB;AACxE;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,mEAAmE,iCAAiC,EAAE;AACtG,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA,+CAA+C,2EAAU;AACzD,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,wBAAwB,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,kCAAkC,EAAE;AACzH,qFAAqF,kCAAkC,EAAE;AACzH;AACA;AACA,+EAA+E,+BAA+B,EAAE;AAChH,iCAAiC,yBAAyB,kCAAkC,EAAE;AAC9F;AACA;AACA;AACA,+EAA+E,+BAA+B,EAAE;AAChH,iCAAiC,yBAAyB,kCAAkC,EAAE;AAC9F;AACA,+CAA+C,4CAAK;AACpD,iDAAiD,4CAAK;AACtD;AACA;AACA;AACA;AACA;AACA,2CAA2C,4CAAK;AAChD,6CAA6C,4CAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC,CAAC,8EAAe;AACoB;;AAErC;;;;;;;;;;;;;ACnqDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC2D;AACpC;AACsB;AACjB;AACkB;AAC/E;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sFAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,uEAAuE,+BAA+B,EAAE;AACxG,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA,mCAAmC,oEAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qEAAa;AACvC;AACA;AACA,sBAAsB,oGAA8B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAa;AAClC,mBAAmB,qEAAa;AAChC;AACA;AACA;AACA,CAAC,CAAC,0FAAoB;AACE;;AAExB;;;;;;;;;;;;;;ACpIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6D;AAC9B;AACyB;AAC9B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sGAA+B;AACrD;AACA,gDAAgD,QAAQ,+CAAiB;AACzE;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wEAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA,CAAC,CAAC,oGAAyB;AACE;;AAE7B;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC8C;AACzB;AACsC;AACd;AACjB;AACd;AAC/C;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sFAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA,mCAAmC,kEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,wCAAwC;AACjG,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,8BAA8B,qEAAa;AAC3C;AACA;AACA,4BAA4B,qEAAa;AACzC,uCAAuC,qEAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qEAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qEAAa;AAC3C;AACA;AACA;AACA;AACA,6CAA6C,qEAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAa;AACrC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAa;AACzB;AACA;AACA;AACA;AACA,8BAA8B,qEAAa;AAC3C;AACA;AACA,0BAA0B,oGAA8B;AACxD;AACA;AACA;AACA;AACA,CAAC,CAAC,0FAAoB;AACC;;AAEvB;;;;;;;;;;;;;;AC9TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC6D;AACL;AAC9B;AACK;AAChE;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA,sBAAsB,sGAA+B;AACrD,gDAAgD,QAAQ,+CAAiB;AACzE;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wEAAgB;AAC7C;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA,CAAC,CAAC,oGAAyB;AACC;;AAE5B;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACyB;;AAE1B;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACkC;AACwC;AACZ;AACjC;AACR;AACc;AAC+C;AACU;AACtC;AACvB;AACM;AAC+C;AACzD;AACe;AACF;AACL;AACuB;AACd;AACT;AACP;AACX;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8HAAiC;AACnF;AACA;AACA;AACA;AACA,YAAY,8DAAW,2BAA2B,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,wEAAW;AACzE;AACA;AACA,sCAAsC,sHAAuC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mDAAmD,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,+CAA+C,0FAA0F,EAAE;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,qEAAqE,wIAAsC;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,oDAAY;AAC3H;AACA;AACA,8BAA8B,oDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,mBAAmB,yFAAqB;AACxC;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yFAAqB;AACxC;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,oDAAY;AAC3H;AACA;AACA,8BAA8B,oDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,mBAAmB,yFAAqB;AACxC;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,oDAAY;AAC3H;AACA;AACA,8BAA8B,oDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,mBAAmB,yFAAqB;AACxC;AACA,+BAA+B,eAAe,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,gFAAY;AAClF,gEAAgE,yEAAY;AAC5E,uFAAuF,qCAAqC,EAAE;AAC9H;AACA;AACA,8FAA8F,4CAA4C,EAAE,IAAI;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbeAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,0DAA0D,+EAAgB;AAC1E,sCAAsC,+EAAgB;AACtD,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,0DAA0D,+EAAgB;AAC1E,qBAAqB,+EAAgB;AACrC,oBAAoB,+EAAgB;AACpC,sCAAsC,+EAAgB;AACtD,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,0DAA0D,+EAAgB;AAC1E,qBAAqB,+EAAgB;AACrC,oBAAoB,+EAAgB;AACpC,sCAAsC,+EAAgB;AACtD,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,0DAA0D,+EAAgB;AAC1E,gBAAgB,+EAAgB;AAChC,qBAAqB,+EAAgB;AACrC,oBAAoB,+EAAgB;AACpC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,oBAAoB,+EAAgB;AACpC;AACA;AACA,yCAAyC,+EAAgB;AACzD;AACA;AACA;AACA,kEAAkE,+EAAgB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+EAAgB;AACzD;AACA;AACA;AACA;AACA,oBAAoB,+EAAgB;AACpC;AACA;AACA,kCAAkC,8CAAgB,GAAG,oBAAoB,IAAI,UAAU;AACvF;AACA,gBAAgB,+EAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA,sDAAsD,8EAAmB;AACzE;AACA;AACA,qBAAqB;AACrB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,iBAAiB,eAAe,4EAA4E,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,iBAAiB,eAAe,4EAA4E,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uFAAuB;AAC7C;AACA;AACA,uEAAuE,yCAAyC,EAAE;AAClH;AACA;AACA;AACA,gCAAgC,gFAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uGAA+B;AACrD;AACA;AACA,oCAAoC,yEAAc;AAClD,sBAAsB,qFAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sEAAsB;AACjE;AACA,SAAS;AACT;AACA,sBAAsB,kGAA6B;AACnD;AACA;AACA;AACA;AACA,gDAAgD,kFAAkB;AAClE;AACA;AACA;AACA,gDAAgD,iEAAU;AAC1D;AACA,0BAA0B,iIAA4C;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,8BAA8B,0GAAiC;AAC/D;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACwB;;AAEzB;;;;;;;;;;;;;ACvuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACU;AACE;AACF;AACA;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+DAAW;AACpD,uBAAuB,sEAAkB;AACzC,yCAAyC,qEAAW;AACpD,uBAAuB,sEAAkB;AACzC,mBAAmB,4DAAa;AAChC;AACA;AACA,CAAC;AAC+B;;AAEhC;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAiC;AACe;AAChD;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,4DAAa;AACe;;AAE9B;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sFAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gEAAgE;AACtH,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;AC7NA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0C;;AAE3C;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC8C;;AAE/C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6C;;AAE9C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA,CAAC;AACuC;;AAExC;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqC;;AAEtC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACyC;;AAE1C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgD;;AAEjD;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiC;;AAElC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmC;;AAEpC;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuD;;AAExD;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiD;;AAElD;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACwC;;AAEzC;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAiC;AACjC;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoC;;AAErC;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACyC;;AAE1C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC+B;;AAEhC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAiC;AACO;AACxC;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsC;;AAEvC;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAiC;AACO;AACxC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,CAAC;AAC8B;;AAE/B;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,+BAA+B,EAAE;AACvH;AACA;AACA;AACA;AACA,CAAC;AACqC;;AAEtC;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmC;;AAEpC;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmC;;AAEpC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACyC;;AAE1C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6C;;AAE9C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuC;;AAExC;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6B;;AAE9B;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoC;;AAErC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;;AAE7B;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4C;;AAE7C;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC2C;;AAE5C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC8C;;AAE/C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0C;;AAE3C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6C;;AAE9C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkD;;AAEnD;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6C;;AAE9C;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAiC;AACiB;AAClD;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAW,eAAe,8CAAgB,GAAG,gBAAgB,uEAAuE;AAC5I;AACA;AACA;AACA,CAAC;AAC2B;;AAE5B;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0C;;AAE3C;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkD;;AAEnD;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAiC;AACO;AACxC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAiC;AACO;AACxC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiC;;AAElC;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC8C;;AAE/C;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACwC;;AAEzC;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACwC;;AAEzC;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACyC;;AAE1C;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqC;;AAEtC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAiC;AACjC;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0C;;AAE3C;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmC;;AAEpC;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D,4CAA4C,4BAA4B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,wEAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;AC7GA;AAAA;AAAA;AAAA;AAAiF;AACnC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0EAA0E,iBAAiB,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA,0BAA0B,4FAA0B;AACpD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iCAAiC,EAAE;AAChF,0CAA0C,uCAAuC,EAAE;AACnF,6CAA6C,wDAAwD,EAAE;AACvG;AACA;AACA,4EAA4E,wDAAwD,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAO;AACvC;AACA;AACA;AACA;AACA;AACA,2EAA2E,2CAA2C,EAAE;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,4CAA4C,EAAE;AAC3H;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AAC2B;;AAE5B;;;;;;;;;;;;;ACxNA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAA+C;AAC/C;AACA;AACA,aAAa;AACb;AACO;AACP,eAAe,0DAAY;AAC3B;;AAEA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACjC;AACA;AAC0B;AACyC;AACO;AAC3B;AACU;AACsB;AAC5B;AACnD;AACA;AACA;AAC4B;AACa;AACE;AACU;AACA;AACM;AACT;AACG;AACH;AACH;AACI;AACD;AACF;AACE;AACA;AACC;AACA;AACA;AACG;AACL;AACD;AACC;AACD;AACA;AACD;AACK;AACH;AACP;AACK;AACK;AACD;AACC;AACO;AACG;AACb;AACL;AACE;AACR;AACJ;AACC;AACD;AACI;AACA;AACO;AACD;AACI;AACF;AACH;AACI;AACE;AACO;AACX;AACI;AACO;AACZ;AACA;AACA;AACI;AACD;AACF;AACT;AACM;AACK;AACC;AACR;AACA;AACI;AACC;AACK;AACC;AACG;AACC;AACL;AACC;AACN;AACJ;AACS;AAC6B;AAC1B;AACc;AACP;AACY;AACA;AACA;AACA;AACI;AACxB;AACe;AACA;AACA;AACJ;AACU;AACvB;AACgB;AACc;AAC3B;AACQ;AACE;AACV;AACO;AACT;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAa;AACnC;AACA,qDAAqD,sFAAmB;AACxE;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE,WAAW,+CAAiB;AAC5B,eAAe,iDAAmB;AAClC,sCAAsC,2FAAuB;AAC7D,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACO;AACP,WAAW,mEAAgB,CAAC,+EAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,+CAAiB;AAC5B;AACA,eAAe,iDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,+CAAiB;AAC5B;AACA,eAAe,iDAAmB;AAClC;AACA;AACA;AACA,6CAA6C,2FAAuB;AACpE;AACA;AACA;AACA;AACA,kEAAkE,+CAA+C,EAAE;AACnH,0CAA0C,+DAAY,mDAAmD,6BAA6B,EAAE;AACxI;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACvRA;AAAA;AAAA;AAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAa,mBAAmB,qEAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAa,2BAA2B,qEAAa;AACjE,YAAY,qEAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAa,2BAA2B,qEAAa;AAC7D,QAAQ,qEAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAa;AACjC;AACA;AACA;AACA,oBAAoB,qEAAa;AACjC;AACA;AACA;AACA,iCAAiC,qEAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,CAAC;AACgC;;AAEjC;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qEAAa,yBAAyB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAa,yBAAyB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qEAAa,yBAAyB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;;AAEvB;;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAa;AACpC,8CAA8C,mDAAmD,EAAE;AACnG,QAAQ,qEAAa,0EAA0E;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,CAAC;AACqB;;AAEtB;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACI;AACtB;AACE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wEAAmB;AAClD;AACA,+BAA+B,sDAAU;AACzC;AACA,+BAA+B,4EAAqB;AACpD;AACA,+BAA+B,wDAAW;AAC1C;AACA;AACA,mBAAmB,4EAAqB;AACxC;AACA;AACA,CAAC;AACwB;;AAEzB;;;;;;;;;;;;;AClCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,CAAC;AAC8B;;AAE/B;;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAkE;AAClmBAAmB,6EAAa;AAChC;AACA,SAAS;AACT;AACA;AACA,8DAA8D,sCAAsC,EAAE;AACtG;AACA;AACA,4EAA4E,6CAA6C,EAAE;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mDAAmD,EAAE;AAC5G;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AAC8B;;AAE/B;;;;;;;;;;;;;AC7KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACA;AACQ;AACV;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uEAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+CAA+C,uEAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+CAA+C,uEAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,gBAAgB,qEAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gBAAgB,qEAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+CAA+C,uEAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,+EAAkB;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb,gBAAgB,+EAAkB;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AAC+C;;AAEhD;;;;;;;;;;;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACuC;AACpB;AACQ;AACA;AACF;AACM;AACA;AACI;AACM;AAC1B;AACgC;AACc;AACtB;AACI;AAChB;AACF;AACA;AACY;AACH;AACD;AACkB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6FAA6B;AAC9E,wDAAwD,2GAAoC;AAC5F,6CAA6C,qFAAyB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,uHAAuH,EAAE;AACrL;AACA,mEAAmE,8CAA8C,EAAE;AACnH;AACA,2DAA2D,2EAA2E,EAAE;AACxI;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,aAAa;AACb,SAAS;AACT;AACA;AACA,+CAA+C,oDAAoD,EAAE;AACrG,gDAAgD,+BAA+B,EAAE;AACjF;AACA;AACA,+CAA+C,oDAAoD,EAAE;AACrG,gDAAgD,+BAA+B,EAAE;AACjF;AACA;AACA,+CAA+C,oDAAoD,EAAE;AACrG,gDAAgD,0EAA0E,EAAE;AAC5H;AACA;AACA,+CAA+C,oDAAoD,EAAE;AACrG,gDAAgD,0EAA0E,EAAE;AAC5H;AACA,2DAA2D,yDAAyD,EAAE;AACtH;AACA,2DAA2D,wEAAwE,EAAE;AACrI;AACA;AACA,+CAA+C,oDAAoD,EAAE;AACrG;AACA;AACA,iEAAiE,oDAAoD,EAAE;AACvH;AACA,0JAA0J;AAC1J;AACA,6DAA6D;AAC7D;AACA;AACA;AACA,2DAA2D,iEAAW,uCAAuC,gGAAmB;AAChI,8DAA8D,qEAAe,uCAAuC,+DAAS;AAC7H,wCAAwC,qEAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,+DAA+D,qEAAe;AAC9E;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mFAAe;AACpF,oCAAoC,qEAAa;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iEAAiE,8BAA8B,EAAE;AACjG;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,6DAA6D,8CAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,2GAA2G,kCAAkC,EAAE;AAC/I,uHAAuH,mDAAmD,EAAE;AAC5K,SAAS;AACT;AACA;AACA,yCAAyC,8CAA8C,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yCAAyC,8EAA8E,EAAE;AACzH,gDAAgD,4DAA4D,EAAE;AAC9G;AACA;AACA,6DAA6D,qDAAqD,EAAE;AACpH,SAAS;AACT;AACA;AACA,8DAA8D,sDAAsD,EAAE;AACtH,SAAS;AACT;AACA;AACA,4DAA4D,qDAAqD,EAAE;AACnH,SAAS;AACT;AACA;AACA,oEAAoE,yDAAyD,EAAE;AAC/H,SAAS;AACT;AACA;AACA,yCAAyC,4CAA4C,EAAE;AACvF;AACA;AACA,6CAA6C,wBAAwB,EAAE;AACvE;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6DAAa;AAC3B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oBAAoB,EAAE;AAC5D,2CAA2C,mCAAmC,EAAE;AAChF,wDAAwD,8CAAgB;AACxE;AACA,mBAAmB,uEAAc;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uHAAuH;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8FAA8F,kDAAkD,EAAE;AAClJ,6BAA6B,uEAAc,EAAE,2EAA2E;AACxH;AACA,4GAA4G,uGAAuG,EAAE;AACrN;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wFAAwF,0DAA0D,EAAE;AACpJ;AACA,0CAA0C,uEAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,+BAA+B,EAAE;AAChJ,4FAA4F,yCAAyC,EAAE;AACvI;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,uEAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+CAA+C,uEAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,+CAA+C,uEAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kGAAkG,oDAAoD,EAAE;AACxJ,uBAAuB,2EAAgB,EAAE,6CAA6C;AACtF,SAAS;AACT;AACA;AACA;AACA,mGAAmG,sDAAsD,EAAE;AAC3J,uBAAuB,+EAAkB,EAAE,6CAA6C;AACxF,SAAS;AACT;AACA;AACA;AACA,yGAAyG,yDAAyD,EAAE;AACpK,uBAAuB,qFAAqB,EAAE,6CAA6C;AAC3F,SAAS;AACT;AACA,uBAAuB,wFAAsB,EAAE,6CAA6C;AAC5F,SAAS;AACT;AACA,uBAAuB,sEAAa,EAAE,6CAA6C;AACnF,SAAS;AACT;AACA,8CAA8C,oEAAc;AAC5D;AACA,2BAA2B,8EAAiB,EAAE,6CAA6C;AAC3F,aAAa;AACb;AACA,8CAA8C,mFAAe;AAC7D;AACA,yCAAyC,qBAAqB,EAAE;AAChE;AACA,2BAA2B,qEAAa,EAAE,6CAA6C;AACvF,aAAa;AACb;AACA,yCAAyC,oBAAoB,EAAE;AAC/D;AACA,2BAA2B,wEAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,4DAA4D,8CAAgB;AAC5E;AACA;AACA;AACA,2BAA2B,qEAAa,EAAE,6CAA6C;AACvF,aAAa;AACb;AACA;AACA,8CAA8C,iEAAW,sCAAsC,gGAAmB,sCAAsC,+DAAS;AACjK;AACA,2BAA2B,qEAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,4DAA4D,8CAAgB;AAC5E;AACA;AACA;AACA,2BAA2B,wEAAc,EAAE,6CAA6C;AACxF,aAAa;AACb,4DAA4D,8CAAgB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2EAAgB,EAAE,qDAAqD;AAC9G,0BAA0B,6DAAa;AACvC;AACA,2BAA2B,uEAAc,EAAE,+GAA+G;AAC1J,aAAa;AACb;AACA,2BAA2B,2EAAgB,EAAE,iFAAiF;AAC9H,aAAa;AACb;AACA,2BAA2B,wFAAsB,EAAE,iFAAiF;AACpI,aAAa;AACb;AACA,2BAA2B,qEAAa,EAAE,iFAAiF;AAC3H,aAAa;AACb;AACA,2BAA2B,wEAAc,EAAE,iFAAiF;AAC5H,aAAa;AACb;AACA,2BAA2B,+EAAkB,EAAE,6CAA6C;AAC5F,aAAa;AACb;AACA,2BAA2B,qFAAqB,EAAE,6CAA6C;AAC/F,aAAa;AACb;AACA,uEAAuE,8DAA8D,EAAE;AACvI;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,yCAAyC,EAAE;AACzG;AACA,gEAAgE,uCAAuC,EAAE;AACzG,oEAAoE,yBAAyB,EAAE;AAC/F,SAAS;AACT,6DAA6D,uCAAuC,EAAE;AACtG,iEAAiE,yBAAyB,EAAE;AAC5F,mGAAmG,qDAAqD,EAAE;AAC1J,6FAA6F,yBAAyB,EAAE;AACxH,4FAA4F,wBAAwB,EAAE;AACtH,gGAAgG,4BAA4B,EAAE;AAC9H,iGAAiG,6BAA6B,EAAE;AAChI,iGAAiG,6BAA6B,EAAE;AAChI,kGAAkG,8BAA8B,EAAE;AAClI,qGAAqG,iCAAiC,EAAE;AACxI,uGAAuG,mCAAmC,EAAE;AAC5I,+FAA+F,8BAA8B,EAAE;AAC/H,iGAAiG,gCAAgC,EAAE;AACnI,+FAA+F,iDAAiD,EAAE;AAClJ,iGAAiG,mDAAmD,EAAE;AACtJ,iGAAiG,uCAAuC,EAAE;AAC1I,mGAAmG,yCAAyC,EAAE;AAC9I,mGAAmG,yCAAyC,EAAE;AAC9I,mGAAmG,yCAAyC,EAAE;AAC9I,oGAAoG,0CAA0C,EAAE;AAChJ,oGAAoG,0CAA0C,EAAE;AAChJ,oGAAoG,0CAA0C,EAAE;AAChJ,+FAA+F,iDAAiD,EAAE;AAClJ,+FAA+F,iDAAiD,EAAE;AAClJ,yFAAyF,yBAAyB,EAAE;AACpH,4FAA4F,0BAA0B,EAAE;AACxH,0FAA0F,0CAA0C,EAAE;AACtI,4FAA4F,4CAA4C,EAAE;AAC1I;AACA,2FAA2F,gDAAgD,EAAE;AAC7I,kGAAkG,mEAAmE,EAAE;AACvK,yFAAyF,4BAA4B,EAAE;AACvH,yFAAyF,4BAA4B,EAAE;AACvH,yFAAyF,4BAA4B,EAAE;AACvH,sFAAsF,yBAAyB,EAAE;AACjH,4FAA4F,+BAA+B,EAAE;AAC7H,wFAAwF,2BAA2B,EAAE;AACrH,4FAA4F,+BAA+B,EAAE;AAC7H,6FAA6F,gCAAgC,EAAE;AAC/H,+FAA+F,kCAAkC,EAAE;AACnI,uFAAuF,0BAA0B,EAAE;AACnH,kEAAkE,0DAA0D,EAAE;AAC9H;AACA,kEAAkE,2BAA2B,EAAE;AAC/F,wEAAwE,8BAA8B,EAAE;AACxG;AACA,wEAAwE,2BAA2B,EAAE;AACrG,8EAA8E,8BAA8B,EAAE;AAC9G,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,4GAA4G,EAAE;AACzL;AACA;AACA;AACA;AACA;AACA,sGAAsG,wEAAwE,EAAE;AAChL,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wCAAwC,qEAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACgC;;AAEjC;;;;;;;;;;;;;ACtlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+E;AACN;AAC7B;AACmC;AACnB;AACU;AACZ;AACiB;AACE;AACO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gEAAgE,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0FAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,uEAAW;AAC3C;AACA;AACA;AACA,8BAA8B,0FAAyB;AACvD;AACA;AACA,aAAa;AACb;AACA,8BAA8B,uEAAW,sBAAsB,+FAAmB;AAClF,oFAAoF,mEAAmE,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAAW;AACzC,uFAAuF,0BAA0B,EAAE;AACnH;AACA,0BAA0B,sFAAuB;AACjD;AACA,8BAA8B,2EAAe;AAC7C,kFAAkF,uBAAuB,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wFAAwB;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,KAAK,yBAAyB;AAC9I;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,EAAE;AACX;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAQ;AAChC;AACA;AACA,SAAS;AACT;AACA;AACA,6CAA6C,6BAA6B,EAAE;AAC5E;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,sBAAsB,oFAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;AClNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACyB;AACE;AACA;AACQ;AACV;AAC0B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uEAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,uEAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,qEAAW,uCAAuC,+FAAmB;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,uEAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,qEAAW,uCAAuC,+FAAmB;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,oCAAoC,8CAAgB;AACpD,6DAA6D,2CAA2C,EAAE;AAC1G;AACA;AACA,gBAAgB,+EAAkB;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gBAAgB,+EAAkB;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,qEAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gBAAgB,qEAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH,0CAA0C,EAAE;AAC/J;AACA,6EAA6E,yBAAyB,EAAE;AACxG;AACA;AACA;AACA,+FAA+F,gEAAgE,EAAE;AACjK;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iIAAiI,0CAA0C,EAAE;AAC7K;AACA;AACA;AACA;AACA;AACA,yGAAyG,gEAAgE,EAAE;AAC3K;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACwC;;AAEzC;;;;;;;;;;;;;ACvNA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2DAA2D,EAAE;AAC1G;AACA;AACA,CAAC;AACwB;;AAEzB;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACE;AACA;AACQ;AACP;AACuB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA,gBAAgB,gCAAgC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,uDAAuD;AAChE,SAAS,uDAAuD;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sDAAsD;AAC1E;AACA,6BAA6B,+EAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,8CAA8C,sEAAY,qCAAqC,yBAAyB,EAAE;AAC1H,oBAAoB;AACpB;AACA;AACA,uCAAuC,uEAAc;AACrD;AACA;AACA;AACA,wJAAwJ,uBAAuB,EAAE;AACjL;AACA;AACA,aAAa;AACb;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,8CAA8C,EAAE;AACrI;AACA;AACA,wFAAwF;AACxF;AACA;AACA,cAAc;AACd;AACA,yGAAyG,gEAAgE,EAAE,EAAE;AAC7K;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,8FAA8F,+CAA+C,EAAE;AAC/I;AACA,uCAAuC,uEAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,qEAAW,uCAAuC,+FAAmB;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iEAAiE;AACjE,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACoC;;AAErC;;;;;;;;;;;;;AC/JA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACwB;;AAEzB;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACW;AACgB;AACR;AACQ;AACY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB,EAAE;AAClE,yCAAyC,uCAAuC,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oEAAoE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oEAAoE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ,eAAe,YAAY,UAAU,EAAE,EAAE,EAAE;AACnE;AACA,gCAAgC,8CAAgB;AAChD;AACA,sFAAsF,OAAO;AAC7F,qBAAqB,QAAQ,cAAc,EAAE,QAAQ,QAAQ,eAAe,WAAW,EAAE,EAAE;AAC3F,qBAAqB,QAAQ,eAAe,wFAAwF,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,cAAc;AACd;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ,KAAK,iBAAiB,GAAG,YAAY,UAAU,EAAE,GAAG,QAAQ,eAAe,YAAY,UAAU,EAAE,EAAE;AACrH;AACA;AACA;AACA;AACA,gCAAgC,0DAA0D;AAC1F;AACA;AACA;AACA;AACA,gBAAgB,QAAQ,eAAe,YAAY,UAAU,EAAE,EAAE,EAAE;AACnE;AACA,gCAAgC,8CAAgB;AAChD;AACA,sFAAsF,OAAO;AAC7F,qBAAqB,QAAQ,cAAc,EAAE,QAAQ,QAAQ,eAAe,WAAW,EAAE,EAAE;AAC3F,qBAAqB,QAAQ,eAAe,wFAAwF,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAQ;AACnC,iBAAiB,IAAI;AACrB;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,uEAAY;AACnH,qEAAqE,+DAAY;AACjF;AACA,wKAAwK,uEAAY;AACpL,qEAAqE,+DAAY;AACjF;AACA;AACA,gCAAgC,+DAAY;AAC5C;AACA;AACA;AACA,iEAAiE,+DAAY;AAC7E;AACA;AACA,4BAA4B,+DAAY;AACxC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,mGAAmG,uEAAY;AAC/G,iEAAiE,+DAAY;AAC7E;AACA,4IAA4I,uEAAY;AACxJ,iEAAiE,+DAAY;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,+DAAY;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mFAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8CAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uEAAW;AACpD;AACA;AACA;AACA;AACA,CAAC;AACyB;;AAE1B;;;;;;;;;;;;;AC3dA;AAAA;AAAA;AAAA;AAAiC;AAC2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,mCAAmC,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uEAAW;AACpD;AACA;AACA;AACA;AACA,sCAAsC,8CAAgB;AACtD,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,wDAAwD,EAAE;AAC7H;AACA;AACA,qEAAqE,4DAA4D,EAAE;AACnI;AACA;AACA,qEAAqE,4DAA4D,EAAE;AACnI;AACA;AACA,qEAAqE,0DAA0D,EAAE;AACjI;AACA;AACA,qEAAqE,0DAA0D,EAAE;AACjI;AACA;AACA,qEAAqE,8DAA8D,EAAE;AACrI;AACA;AACA,qEAAqE,iEAAiE,EAAE;AACxI;AACA;AACA,CAAC;AAC2B;;AAE5B;;;;;;;;;;;;;ACjMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAmI;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiC;;AAElC;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACkC;AACf;AACkB;AACe;AACzmFAAmF,EAAE;AACjJ;AACA;AACA;AACA;AACA,wDAAwD,yFAAyF,EAAE;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gGAA4B;AAClD;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB,qCAAqC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,kBAAkB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,oDAAoD,6CAA6C,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA,oDAAoD,6CAA6C,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA,0DAA0D,6CAA6C,EAAE;AACzG;AACA;AACA;AACA;AACA,gEAAgE,+CAA+C,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,6CAA6C,EAAE;AACzG;AACA;AACA;AACA;AACA,gEAAgE,+CAA+C,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,+CAA+C,EAAE;AACzG;AACA;AACA;AACA;AACA;AACA,2DAA2D,+CAA+C,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA,2DAA2D,+CAA+C,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,sFAAsF,EAAE;AAC3I;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA,uCAAuC,iCAAiC;AACxE;AACA;AACA;AACA,wCAAwC,8CAAgB;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,QAAQ,uDAAQ,qCAAqC,EAAE;AACrH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,uDAAQ;AAC3E,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,iEAAO,+BAA+B,mCAAmC;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kKAAkK;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iDAAiD,EAAE;AAC9H,qEAAqE,yBAAyB,EAAE;AAChG;AACA,8EAA8E,mEAAmE,EAAE;AACnJ;AACA;AACA,yEAAyE,8CAA8C,EAAE;AACzH;AACA;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA,qBAAqB,0CAA0C,gBAAgB,sBAAsB;AACrG;AACA,QAAQ,0BAA0B,8BAA8B;AAChE;AACA;AACA;AACA,gDAAgD,QAAQ,uDAAQ,4DAA4D,EAAE;AAC9H,oDAAoD,QAAQ,uDAAQ,gEAAgE,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8EAAc,wCAAwC,+EAAe,wCAAwC,yEAAS;AACrL;AACA;AACA,iEAAiE,8EAAc;AAC/E,kEAAkE,+EAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,8EAAc;AAClF;AACA;AACA,CAAC;AACyB;;AAE1B;;;;;;;;;;;;;AC3iBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;;AAE7B;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,4BAA4B,EAAE;AAC7F,mFAAmF,4BAA4B,EAAE;AACjH;AACA;AACA;AACA;AACA,CAAC;AAC6B;;AAE9B;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,qEAAqE,8BAA8B,EAAE;AACrG;AACA,kBAAkB;AAClB;AACA;AACA;AACA,8EAA8E,kBAAkB,EAAE;AAClG,iEAAiE,sBAAsB,EAAE;AACzF;AACA;AACA,2FAA2F,kBAAkB,EAAE;AAC/G,kFAAkF,wDAAwD,EAAE;AAC5I;AACA;AACA;AACA,8FAA8F,6CAA6C,EAAE;AAC7I;AACA;AACA;AACA,oGAAoG,4EAA4E,EAAE;AAClL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,oBAAoB,EAAE;AAC/D;AACA;AACA,8EAA8E,oCAAoC,EAAE;AACpH;AACA;AACA;AACA,SAAS,IAAI;AACb,kJAAkJ,4BAA4B,EAAE;AAChL;AACA;AACA;AACA,CAAC;AACwB;;AAEzB;;;;;;;;;;;;;ACxHA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;AAEjC;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B,4CAA4C,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6B;;AAE9B;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAiC;AACiB;AACluEAAuE,oCAAoC,EAAE;AAC7G;AACA;AACA,eAAe,8DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,oCAAoC,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sCAAsC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8CAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ,eAAe,YAAY,UAAU,EAAE,EAAE,EAAE;AACnE;AACA,gCAAgC,8CAAgB;AAChD;AACA,sFAAsF,OAAO;AAC7F,qBAAqB,QAAQ,cAAc,EAAE,QAAQ,QAAQ,eAAe,WAAW,EAAE,EAAE;AAC3F,qBAAqB,QAAQ,eAAe,wFAAwF,EAAE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA,cAAc;AACd,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,+CAA+C,8CAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC2B;;AAE5B;;;;;;;;;;;;;ACtXA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,qEAAqE,8BAA8B,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA,8EAA8E,kBAAkB,EAAE;AAClG,iEAAiE,sBAAsB,EAAE;AACzF;AACA;AACA,2FAA2F,kBAAkB,EAAE;AAC/G,kFAAkF,wDAAwD,EAAE;AAC5I;AACA;AACA;AACA,8FAA8F,6CAA6C,EAAE;AAC7I;AACA;AACA;AACA,oGAAoG,4EAA4E,EAAE;AAClL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yCAAyC,oBAAoB,EAAE;AAC/D;AACA;AACA,8EAA8E,oCAAoC,EAAE;AACpH;AACA;AACA;AACA,SAAS,IAAI;AACb,6JAA6J,4BAA4B,EAAE;AAC3L;AACA;AACA;AACA,CAAC;AACyB;;AAE1B;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6B;;AAE9B;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;;AAErB;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACqB;AACd;AACY;AACkB;AACF;AACR;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC,mFAAmF,QAAQ,+CAAiB;AAC5G,+BAA+B,iDAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB,EAAE,EAAE;AACzB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC,mFAAmF,QAAQ,+CAAiB;AAC5G,+BAA+B,iDAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB,EAAE,EAAE;AACzB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G,kDAAkD,EAAE;AAC9J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8CAAgB,4DAA4D,yBAAyB;AACxJ;AACA;AACA;AACA;AACA,uCAAuC,QAAQ,gBAAgB;AAC/D;AACA;AACA;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G,kDAAkD,EAAE;AAC9J;AACA;AACA;AACA;AACA,2EAA2E,eAAe;AAC1F;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+DAAY,wDAAwD,QAAQ,+CAAiB;AAC1I;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,QAAQ,+CAAiB;AAC5F,uDAAuD,iDAAmB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,6CAA6C,EAAE,EAAE;AACjD;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,0DAA0D,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,8DAA8D,6EAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,iEAAK;AAC9E;AACA;AACA;AACA;AACA,oFAAoF,2DAA2D;AAC/I;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,oFAAoF,kEAAkE;AACtJ;AACA;AACA,qCAAqC;AACrC;AACA;AACA,oFAAoF,6DAA6D;AACjJ;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,gEAAgE,6EAAW;AAC3E;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oDAAS;AACpD,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oDAAS;AAChC,SAAS;AACT;AACA;AACA,gDAAgD,kCAAkC,EAAE;AACpF;AACA;AACA,kEAAkE,uBAAuB,EAAE;AAC3F,mGAAmG,sDAAsD,EAAE;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,kBAAkB,EAAE,wBAAwB,yCAAyC,EAAE;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,8DAA8D,iFAAe;AAC7E,sDAAsD,+EAAc,4DAA4D,kEAAkE;AAClM,iDAAiD,+EAAc,uDAAuD,6DAA6D;AACnL;AACA;AACA;AACA;AACA;AACA,gEAAgE,6EAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,8DAA8D,iFAAe;AAC7E,0DAA0D,+EAAc,4DAA4D,kEAAkE;AACtM,qDAAqD,+EAAc,uDAAuD,6DAA6D;AACvL;AACA;AACA;AACA;AACA;AACA,gEAAgE,6EAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC4B;;AAE7B;;;;;;;;;;;;;ACtnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACyB;AACY;AAChB;AACtD;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mEAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAS,+BAA+B,mEAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAAgB;AAChD;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA,uBAAuB,qEAAe;AACtC;AACA;AACA;AACA,gCAAgC,8CAAgB;AAChD;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA,uBAAuB,qEAAe;AACtC;AACA;AACA;AACA,gCAAgC,8CAAgB;AAChD;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA;AACA;AACA,wBAAwB,qEAAe;AACvC;AACA;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA,uBAAuB,qEAAe;AACtC;AACA;AACA;AACA,gCAAgC,8CAAgB;AAChD;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA,uBAAuB,qEAAe;AACtC;AACA;AACA;AACA,gCAAgC,8CAAgB;AAChD;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA;AACA;AACA,wBAAwB,qEAAe;AACvC;AACA;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA,wBAAwB,qEAAe;AACvC;AACA;AACA,+CAA+C,iEAAK;AACpD;AACA;AACA,wBAAwB,qEAAe;AACvC;AACA;AACA,eAAe,mEAAS;AACxB;AACA;AACA,eAAe,mEAAS;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,mEAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;AAEjC;;;;;;;;;;;;;ACxIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC8B;AACX;AAC6B;AAC7C;AACgD;AACoB;AAClB;AACV;AACM;AACtC;AACQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0EAAiB;AACvD;AACA,mDAAmD,QAAQ,+CAAiB;AAC5E;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G,wDAAQ;AAClH,mGAAmG,QAAQ,+CAAiB;AAC5H;AACA;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,4FAA0B;AACxF,kEAAkE,gDAAO;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,6CAA6C;AAC7C,yEAAyE,8FAAsB;AAC/F;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,qEAAqE,wFAA2B;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gGAAuB;AAC3E,oDAAoD,oHAAiC;AACrF,oDAAoD,kGAAwB;AAC5E;AACA;AACA;AACA;AACA,4DAA4D,kGAAwB;AACpF;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,sEAAsE,gEAAe;AACrF;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA,kGAAkG,yCAAyC,EAAE;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gEAAY,uEAAuE,2BAA2B,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,EAAE,EAAE;AACb;AACA;AACA,CAAC;AACgC;;AAEjC;;;;;;;;;;;;;AClLA;AAAA;AAAA;AAAA;AAAiC;AACW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8CAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ,2DAA2D;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,kDAAkD;AACtG;AACA,sBAAsB;AACtB;AACA,oDAAoD,6CAA6C;AACjG;AACA;AACA,YAAY,uDAAQ;AACpB;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;;AAEnB;;;;;;;;;;;;;AC7OA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACF;AAC4B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,oCAAoC,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yDAAS;AACvD;AACA;AACA;AACA;AACA;AACA,8CAA8C,yDAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yDAAS;AACvD,4CAA4C,yDAAS;AACrD;AACA;AACA;AACA;AACA,0DAA0D,gDAAgD;AAC1G,kEAAkE,8CAA8C;AAChH,gCAAgC,uDAAQ;AACxC;AACA;AACA;AACA,8CAA8C,yDAAS;AACvD,4CAA4C,yDAAS;AACrD;AACA;AACA,8CAA8C,yDAAS;AACvD,4CAA4C,yDAAS;AACrD;AACA;AACA,8CAA8C,yDAAS;AACvD,4CAA4C,yDAAS;AACrD;AACA;AACA;AACA,0CAA0C,mFAAsB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uDAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,mEAAmE,EAAE;AACzI;AACA;AACA;AACA,0EAA0E,wCAAwC,EAAE;AACpH,4BAA4B;AAC5B;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,CAAC;AACwC;;AAEzC;;;;;;;;;;;;;ACjLA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,4FAA4F,QAAQ,+CAAiB;AACrH;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD,6CAA6C;AAC7C;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,uEAAuE,8CAAgB,gFAAgF,8BAA8B,EAAE;AACvM;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,yCAAyC;AACzC;AACA;AACA,iEAAiE,8CAAgB,sDAAsD,uBAAuB;AAC9J;AACA;AACA;AACA;AACA,uDAAuD,QAAQ,gBAAgB;AAC/E;AACA;AACA;AACA;AACA,qDAAqD,0BAA0B;AAC/E;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,wDAAwD,EAAE;AAChH;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACsC;;AAEvC;;;;;;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACmB;AACA;AACkB;AACU;AACO;AACA;AACjB;AACV;AACQ;AACP;AACc;AACJ;AACkB;AAC7C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,4BAA4B,EAAE;AAC1G,4EAA4E,4BAA4B,EAAE;AAC1G,4EAA4E,4BAA4B,EAAE;AAC1G,gFAAgF,4BAA4B,EAAE;AAC9G,6EAA6E,4BAA4B,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kFAAwB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,8BAA8B,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kFAAwB;AAC1E;AACA;AACA;AACA;AACA;AACA,8FAA8F,kCAAkC,EAAE;AAClI;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,gCAAgC,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kGAA6B;AACvD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,4FAA6B;AACzC,0EAA0E,+BAA+B,EAAE;AAC3G,0EAA0E,8BAA8B,EAAE;AAC1G,0EAA0E,8BAA8B,EAAE;AAC1G,8EAA8E,kCAAkC,EAAE;AAClH,2EAA2E,gCAAgC,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+EAAiB;AAC1C;AACA,4DAA4D,2GAA2G,EAAE;AACzK;AACA,4DAA4D,+KAA+K,EAAE;AAC7O;AACA,4DAA4D,mIAAmI,EAAE;AACjM;AACA,gEAAgE,+KAA+K,EAAE;AACjP;AACA,6DAA6D,+KAA+K,EAAE;AAC9O;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+EAAiB;AAC1C;AACA,4DAA4D,0GAA0G,EAAE;AACxK;AACA,4DAA4D,8KAA8K,EAAE;AAC5O;AACA,4DAA4D,kIAAkI,EAAE;AAChM;AACA,gEAAgE,8KAA8K,EAAE;AAChP;AACA,6DAA6D,8KAA8K,EAAE;AAC7O;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA,6CAA6C,+DAAY,+DAA+D,QAAQ,+CAAiB;AACjJ;AACA;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,iEAAW;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,mGAAmG,kEAAY;AAC/G;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,kEAAY;AACnH,uGAAuG,+DAAS;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,8EAA8E,sEAAgB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,iEAAiE,+DAAY,yDAAyD,QAAQ,+CAAiB;AAC/J,2DAA2D,iDAAmB;AAC9E;AACA;AACA,mIAAmI;AACnI;AACA,yFAAyF,uFAAwB;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA,yFAAyF,mFAAsB;AAC/G;AACA;AACA;AACA;AACA;AACA,yFAAyF,sGAA+B;AACxH;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,iDAAiD,EAAE,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,6CAA6C;AAC7C;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,yGAAyG,QAAQ,+CAAiB;AAClI;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA;AACA,sDAAsD,kGAA6B;AACnF,0EAA0E,sEAAgB;AAC1F,wDAAwD,wDAAQ,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,6BAA6B,4CAAc;AAC3C,6CAA6C,+DAAY,+DAA+D,QAAQ,+CAAiB;AACjJ;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA,8DAA8D,kGAA6B;AAC3F;AACA,6CAA6C;AAC7C,8EAA8E,sEAAgB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,6GAA6G,QAAQ,+CAAiB;AACtI;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA;AACA,sDAAsD,kGAA6B;AACnF,0EAA0E,sEAAgB;AAC1F,wDAAwD,wDAAQ,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,0GAA0G,QAAQ,+CAAiB;AACnI;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA;AACA,sDAAsD,kGAA6B;AACnF,0EAA0E,sEAAgB;AAC1F,wDAAwD,wDAAQ,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,6CAA6C,sEAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uIAAuI,wBAAwB,EAAE;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AAC0B;;AAE3B;;;;;;;;;;;;;AChwBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8CAAgB,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,mDAAmD,EAAE;AACjI,sDAAsD,8CAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,2DAA2D,EAAE;AAC9I,sDAAsD,8CAAgB;AACtE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,2DAA2D,EAAE;AAC9I,sDAAsD,8CAAgB;AACtE;AACA,SAAS;AACT;AACA,kDAAkD,8CAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmC;;AAEpC;;;;;;;;;;;;;ACpKA;AAAA;AAAA;AAAA;AAAiC;AACI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4CAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gDAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACiC;;AAElC;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAqC;AACU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gDAAO;AACjD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,6BAA6B,GAAG,sBAAsB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAQ;AAC/B,aAAa;AACb;AACA;AACA;AACA,mGAAmG;AACnG,qGAAqG;AACrG;AACA,sCAAsC,gDAAO;AAC7C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,uDAAQ;AAC/B,aAAa;AACb,SAAS;AACT;AACA;AACA,sCAAsC,gDAAO;AAC7C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAQ;AACpB,SAAS;AACT;AACA,YAAY,uDAAQ;AACpB,SAAS;AACT;AACA;AACA;AACA,CAAC;AACmC;;AAEpC;;;;;;;;;;;;;AC3MA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACU;AACgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,6DAA6D;AAC1J;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,6BAA6B,GAAG,sBAAsB;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAQ;AAC/B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gDAAO;AACtD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,uEAAc;AACtB;AACA;AACA;AACA;AACA;AACA,kDAAkD,gDAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,CAAC;AACkC;;AAEnC;;;;;;;;;;;;;AC7JA;AAAA;AAAA;AAAA;AAAqC;AACU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gDAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yFAAyF,6DAA6D;AACtJ;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,6BAA6B,GAAG,sBAAsB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+EAA+E,uDAAQ;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,gDAAO;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;AAC4C;;AAE7C;;;;;;;;;;;;;ACnJA;AAAA;AAAA;AAAA;AAAiC;AACqE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,0DAA0D;AAC/G;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,uGAAuG,wDAAwD,EAAE;AACjK;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,0CAA0C,8GAAmC;AAC7E;AACA;AACA;AACA,yBAAyB;AACzB,wGAAwG,8CAAgB;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACiC;;AAElC;;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,4CAA4C,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC0C;;AAE3C;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAiC;AACc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,mDAAmD,0DAA0D;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAQ;AAChC;AACA;AACA,wBAAwB,uDAAQ;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACmC;;AAEpC;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC2B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC6B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACyB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mIAAmI,KAAK;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACwB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;AACxB;AACA;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA,oBAAoB,mBAAO,CAAC,8EAAS;AACrC;AACA;AACA;AACA,oBAAoB,mBAAO,CAAC,8EAAS;AACrC;;AAEA;;;;;;;;;;;;;;ACxJA;AAAA;AAAA;AAAkD;AAClD;AACA;AACA;AACA;AACA,QAAQ,6DAAW,yBAAyB;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACgB;;AAEjB;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmB;;AAEpB;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACuC;AACX;AACf;AACwB;AACH;AACd;AAC8C;AACzC;AACA;AACU;AAC5B;AAC4C;AACpF;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iEAAY;AACvD;AACA;AACA;AACA;AACA,8CAA8C,uEAAW,sBAAsB,+FAAmB;AAClG;AACA;AACA;AACA,mDAAmD,2EAAe,sBAAsB,0EAAc,sBAAsB,mFAAe;AAC3I;AACA;AACA;AACA;AACA,mDAAmD,wEAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qEAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mDAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4DAA4D;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAA2D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8GAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,0EAAc,sCAAsC,mFAAe;AACzI;AACA;AACA,iFAAiF,2EAAe;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAY;AACgB;;AAE9B;;;;;;;;;;;;;AChPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACuC;AACpB;AACN;AACwB;AACH;AACT;AACA;AACL;AAC8C;AACtB;AACG;AACM;AAC5B;AACU;AACP;AACA;AACuB;AACpF;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gFAAiB;AACjE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,4FAA6B;AACzF;AACA;AACA,yHAAyH,qEAAe;AACxI;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C,2CAA2C,iEAAY;AACvD;AACA;AACA,iGAAiG,oBAAoB,EAAE,SAAS;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gFAAiB;AACjE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,sEAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,yEAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8GAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,iCAAiC,EAAE;AAC9H;AACA,kDAAkD,iEAAW,sCAAsC,gGAAmB;AACtH,mGAAmG,6CAA6C,EAAE;AAClJ;AACA,uDAAuD,oEAAc,sCAAsC,iGAAoB,sCAAsC,mFAAe;AACpL,mGAAmG,yCAAyC,EAAE;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA,8CAA8C,iEAAW,sCAAsC,gGAAmB;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,iEAAW,sCAAsC,gGAAmB;AAC5I;AACA;AACA;AACA,qEAAqE,qEAAe;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iEAAW,sCAAsC,gGAAmB,GAAG;AACzH;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,oEAAc,sCAAsC,iGAAoB,sCAAsC,mFAAe;AAC3K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iEAAW,sCAAsC,gGAAmB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,oEAAc,sCAAsC,kEAAY,sCAAsC,mFAAe;AAC3L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,kEAAY;AACpE,wDAAwD,iGAAoB;AAC5E,wDAAwD,iEAAW;AACnE,wDAAwD,gGAAmB;AAC3E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,0CAA0C,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA,4EAA4E,iCAAiC,EAAE;AAC/G;AACA;AACA,2EAA2E,iCAAiC,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,YAAY,QAAQ,EAAE,0BAA0B;AACpG;AACA,+GAA+G;AAC/G;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,sFAAsF,gBAAgB,gBAAgB,UAAU;AAChI;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,sFAAsF,gBAAgB,gBAAgB,UAAU;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,gCAAgC,qEAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,iGAAoB,uCAAuC,+DAAS,GAAG;AACtI,+DAA+D;AAC/D;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,qEAAe;AAC9E;AACA;AACA;AACA;AACA;AACA,gEAAgE,iEAAW,uCAAuC,gGAAmB;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oEAAc;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,qEAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,iGAAoB,uCAAuC,+DAAS;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wFAAwB;AAC1C;AACA;AACA,CAAC,CAAC,0DAAY;AACgB;;AAE9B;;;;;;;;;;;;;ACjhBA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACuB;AACN;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAW,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,+FAA+F,0EAA0E,EAAE;AAC3K,oCAAoC;AACpC;AACA;AACA,sCAAsC,8CAAgB,mDAAmD,UAAU;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,gBAAgB;AAC3D;AACA;AACA;AACA;AACA,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oEAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;;AAE9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACwB;;AAEzB;;;;;;;;;;;;;AChNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACyB;AACpB;AACsB;AACF;AACY;AACT;AAC1B;AACyB;AACX;AACoB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sEAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,UAAU,uBAAuB,EAAE,EAAE;AAClH;AACA;AACA,2CAA2C,sDAAsD;AACjG;AACA;AACA,oCAAoC,mBAAO,CAAC,gGAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAO,CAAC,gGAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,8CAAY;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAO,CAAC,gGAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAO,CAAC,gGAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mBAAO,CAAC,wGAA0B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mBAAO,CAAC,wGAA0B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,oGAAwB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wDAAwD,iDAAiD,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,sDAAsD,0CAA0C,EAAE;AAClG,mDAAmD,yCAAyC,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qEAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE,iEAAiE,EAAE;AAClH;AACA,8CAA8C,EAAE,iEAAiE,EAAE;AACnH;AACA,aAAa;AACb;AACA,gBAAgB,8CAAgB;AAChC,iDAAiD,EAAE,sHAAsH,EAAE;AAC3K,kKAAkK;AAClK,iBAAiB;AACjB;AACA,iDAAiD,EAAE,mEAAmE,EAAE;AACxH,+KAA+K;AAC/K;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8CAAgB;AACxD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sCAAsC,iFAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC,8EAAY;AAC9C;AACA;AACA,2EAA2E;AAC3E;AACA,iBAAiB;AACjB;AACA,kCAAkC,iFAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8CAAgB;AAChE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,uCAAuC,EAAE;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,uDAAuD,oEAAE,+BAA+B,kDAAkD,EAAE;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,6DAA6D,gCAAgC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uEAAc;AACtD;AACA;AACA;AACA,sCAAsC,gFAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA,4HAA4H,oCAAoC,EAAE;AAClK;AACA;AACA;AACA,+DAA+D,uEAAY;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gCAAgC,qBAAqB,EAAE;AAChF,qBAAqB,gCAAgC,qBAAqB,EAAE;AAC5E,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,2DAA2D,0BAA0B,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;ACrpBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAc,6DAA6D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;;AAE7B;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACD;AACgB;AACwB;AACS;AACjiBAAiB,IAAI;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4CAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA,6HAA6H;AAC7H;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,eAAe,EAAE;AAC3E;AACA;AACA,+CAA+C,6BAA6B,4CAAK,SAAS,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,YAAY,4DAAa,gCAAgC,EAAE;AACjI,wFAAwF,YAAY,oFAAmB,oBAAoB,EAAE;AAC7I,iGAAiG,YAAY,6FAAsB,uBAAuB,EAAE;AAC5J,uDAAuD,SAAS,8CAAgB,GAAG,UAAU,EAAE;AAC/F,0DAA0D,SAAS,8CAAgB,GAAG,WAAW,EAAE;AACnG,uCAAuC;AACvC,6DAA6D,gBAAgB,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,CAAC;AAC6B;;AAE9B;;;;;;;;;;;;;AC9SA;AAAA;AAAA;AAAA;AAAiC;AAC+B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC,gDAAgD,2EAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,UAAU,mDAAmD,EAAE,EAAE;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G,gCAAgC,EAAE;AAC9I,iHAAiH,gCAAgC,EAAE;AACnJ;AACA;AACA,0GAA0G,gCAAgC,EAAE;AAC5I,mHAAmH,gCAAgC,EAAE;AACrJ;AACA;AACA,kFAAkF,gCAAgC,EAAE;AACpH;AACA;AACA;AACA;AACA,yGAAyG,gCAAgC,EAAE;AAC3I;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uEAAuE,2DAA2D,EAAE;AACpI,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,4BAA4B,8BAA8B,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA,kFAAkF,kEAAkE,EAAE;AACtJ,oGAAoG;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,4BAA4B,8BAA8B,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sEAAsE,yEAAyE,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,4BAA4B,8BAA8B,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sEAAsE,wEAAwE,EAAE;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,4BAA4B,8BAA8B,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC2B;;AAE5B;;;;;;;;;;;;;AChSA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,0CAA0C,EAAE;AACvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,4BAA4B,8BAA8B,EAAE;AACzE;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,2DAA2D,EAAE;AACpK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,4BAA4B,8BAA8B,EAAE;AACzE;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,kFAAkF,2DAA2D,EAAE;AAC/I;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA,6CAA6C,8CAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,kFAAkF,2DAA2D,EAAE;AAC/I;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA,6CAA6C,8CAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,uEAAuE;AACvE,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0EAA0E,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,yEAAyE,EAAE;AACjL;AACA,aAAa;AACb;AACA,+CAA+C;AAC/C;AACA;AACA,sBAAsB;AACtB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,CAAC;AACyB;;AAE1B;;;;;;;;;;;;;ACvNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACa;AACM;AACA;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH,wCAAwC;AACjK,8BAA8B,gEAAe;AAC7C;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH,wCAAwC;AACjK,8BAA8B,gEAAe;AAC7C;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gEAAe;AAC7C;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC,+EAA+E,mBAAmB,EAAE;AACpG,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC,CAAC,0DAAY;AACkB;;AAEhC;;;;;;;;;;;;;ACrLA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,kEAAkE,8CAAgB;AAClF,uCAAuC,8CAAgB;AACvD;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,qEAAqE,wBAAwB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,8CAAgB;AAClF,uCAAuC,8CAAgB;AACvD;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,qEAAqE,wBAAwB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC0B;;AAE3B;;;;;;;;;;;;;ACvGA;AAAA;AAAA;AAAA;AAAiC;AACmB;AACS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qEAAqE,wBAAwB,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA,6EAA6E,kEAAY,mDAAmD,+DAAS;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC0B;;AAE3B;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACW;AACiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sGAAsG,QAAQ,+CAAiB;AAC/H;AACA;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA;AACA,8FAA8F,wEAAY;AAC1G;AACA;AACA;AACA,iDAAiD,IAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G,wDAAwD,EAAE;AACrK,yHAAyH,wDAAwD,EAAE;AACnL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,+EAA+E,wEAAY;AAC3F;AACA;AACA;AACA,iCAAiC,IAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uDAAQ;AAChD;AACA,iCAAiC;AACjC;AACA,mGAAmG;AACnG;AACA,yBAAyB;AACzB;AACA,sGAAsG,QAAQ,+CAAiB;AAC/H;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA,2GAA2G,wDAAwD,EAAE;AACrK,uGAAuG,wDAAwD,EAAE;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2KAA2K;AAC3K,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACwC;;AAEzC;;;;;;;;;;;;;ACxLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACmB;AAC8C;AAC5B;AACqC;AACd;AACI;AACN;AAC3C;AACwB;AACS;AACf;AACgD;AACvC;AACgD;AAC7E;AACmD;AACvC;AACS;AACN;AACyB;AACa;AAC/B;AAClB;AACE;AACgC;AACpF;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,UAAU,uBAAuB,EAAE,EAAE;AAClH;AACA;AACA;AACA;AACA,6CAA6C,uEAAuE;AACpH;AACA;AACA,2CAA2C,sDAAsD;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,UAAU,uBAAuB,EAAE,EAAE;AACpJ;AACA;AACA;AACA;AACA,6CAA6C,uEAAuE;AACpH;AACA;AACA,6CAA6C,sDAAsD;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oFAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6FAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4DAA4D;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAA2D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B,GAAG,0BAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B,GAAG,0BAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B,GAAG,0BAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oCAAoC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iCAAiC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gCAAgC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,cAAc,6BAA6B;AACrG;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,sGAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,4GAAkC;AAChF;AACA;AACA;AACA;AACA,8CAA8C,4GAAkC;AAChF;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,sGAA+B;AACrE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,sGAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,sCAAsC,sGAA+B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,gCAAgC,4DAAa;AAC7C;AACA;AACA;AACA,0DAA0D;AAC1D,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,8CAAgB;AAC9D,wDAAwD,8CAAgB;AACxE;AACA;AACA;AACA;AACA;AACA,kDAAkD,8CAAgB;AAClE,4DAA4D,8CAAgB;AAC5E;AACA;AACA,uFAAuF,6CAA6C,EAAE;AACtI;AACA,qCAAqC,kDAAkD;AACvF,6FAA6F,6CAA6C,EAAE;AAC5I;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC,+CAA+C,EAAE;AACxF,wCAAwC,yBAAyB,uFAAuF,EAAE,EAAE;AAC5J;AACA;AACA,6BAA6B,iBAAiB;AAC9C;AACA,8CAA8C,qEAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qEAAqE,EAAE;AAC7G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0DAA0D,6FAA6F,EAAE;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oEAAc;AAC5C,0EAA0E,uCAAuC,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qEAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iEAAW,sCAAsC,gGAAmB,sCAAsC,+DAAS;AACtK;AACA;AACA;AACA;AACA;AACA,0BAA0B,+GAAmC;AAC7D;AACA,mDAAmD,kGAAoB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,kEAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iEAAW,sBAAsB,gGAAmB;AAC1F;AACA;AACA,2CAA2C,oEAAc;AACzD;AACA;AACA,2CAA2C,kEAAY;AACvD;AACA;AACA,2CAA2C,qEAAe;AAC1D;AACA;AACA;AACA,8BAA8B,6GAAkC;AAChE;AACA;AACA,sCAAsC,iEAAW,sBAAsB,gGAAmB,sBAAsB,oEAAc,sBAAsB,kEAAY;AAChK;AACA;AACA,2CAA2C,qEAAe;AAC1D;AACA;AACA;AACA,8BAA8B,6GAAkC;AAChE;AACA;AACA,sCAAsC,oEAAc;AACpD;AACA;AACA;AACA,8BAA8B,6GAAkC;AAChE;AACA;AACA,sCAAsC,oEAAc;AACpD;AACA;AACA;AACA,8BAA8B,6GAAkC;AAChE;AACA;AACA,sCAAsC,oEAAc;AACpD;AACA;AACA;AACA,8BAA8B,6GAAkC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,uCAAuC,EAAE;AACvH;AACA;AACA,wCAAwC,8CAAgB,4CAA4C,iCAAiC,EAAE;AACvI;AACA,oCAAoC,8CAAgB;AACpD,uEAAuE,mEAAmE,EAAE;AAC5I,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kIAAkI,8CAA8C,EAAE;AAClL,yBAAyB,8CAAgB;AACzC;AACA,gFAAgF,mEAAmE,EAAE;AACrJ;AACA;AACA,uDAAuD,iEAAW,uCAAuC,gGAAmB;AAC5H;AACA;AACA;AACA;AACA,uDAAuD,oEAAc;AACrE;AACA;AACA,uDAAuD,qEAAe;AACtE;AACA;AACA;AACA;AACA,oFAAoF,gEAAW;AAC/F;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,4EAA4E,uCAAuC,EAAE;AACrH;AACA;AACA;AACA,4DAA4D,mEAAmE,EAAE;AACjI,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,kGAAoB;AACtF;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA,sCAAsC,sHAAuC;AAC7E;AACA;AACA;AACA,0CAA0C,wGAAgC;AAC1E;AACA,+CAA+C,+EAAgB;AAC/D,kDAAkD,wFAAmB;AACrE,4DAA4D,+HAAwC;AACpG;AACA,+DAA+D,wIAA2C;AAC1G;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA;AACA;AACA,2DAA2D,gEAAW;AACtE;AACA;AACA,sFAAsF,gEAAW;AACjG,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,oEAAoE,wBAAwB,gEAAW,wGAAwG,EAAE;AACjN,qEAAqE,+BAA+B,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,4CAA4C;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8GAAgC;AAC1E;AACA;AACA,8CAA8C,gFAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAAc;AACvC;AACA;AACA,sEAAsE,gEAAW;AACjF;AACA;AACA,wEAAwE,iFAAiF,EAAE;AAC3J;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,4CAAc;AACvC;AACA;AACA,6EAA6E,gEAAW;AACxF;AACA;AACA,wEAAwE,iFAAiF,EAAE;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,6BAA6B,4CAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,2DAAY;AACgB;;AAE9B;;;;;;;;;;;;;ACzjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACuC;AAC1B;AACwB;AACH;AACd;AAC8C;AACnB;AACtB;AACA;AACU;AACkB;AACG;AACJ;AACxB;AACgB;AAChB;AAC7D;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,4FAA6B;AACzF;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C,2CAA2C,iEAAY;AACvD;AACA;AACA;AACA;AACA,8CAA8C,gFAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qEAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,yEAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4DAA4D;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAA2D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8GAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,cAAc,6BAA6B;AACrG;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iGAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqH;AACrH;AACA,sBAAsB,yFAAwB;AAC9C;AACA;AACA;AACA,8CAA8C,6EAAW;AACzD,8CAA8C,8EAAY;AAC1D,8CAA8C,iGAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,gFAAc,sCAAsC,8EAAY,sCAAsC,mFAAe;AAC3L;AACA;AACA,0EAA0E,iFAAe;AACzF;AACA;AACA;AACA,yIAAyI;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,6EAAW;AAC7D;AACA;AACA;AACA,0BAA0B,qGAA8B;AACxD;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,0DAAY;AACoB;;AAElC;;;;;;;;;;;;;AC3YA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACuC;AACpB;AACN;AACwB;AACH;AACP;AACP;AAC8C;AACnB;AACtB;AACA;AACU;AACkB;AACG;AAC5B;AACgB;AACR;AACe;AACpF;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,4FAA6B;AACzF;AACA;AACA;AACA;AACA,yHAAyH,qEAAe;AACxI;AACA;AACA;AACA;AACA,6BAA6B,4CAAc;AAC3C,2CAA2C,iEAAY;AACvD;AACA,iGAAiG,oBAAoB,EAAE,SAAS;AAChI;AACA;AACA,8DAA8D,oEAAc;AAC5E;AACA;AACA;AACA,mEAAmE,iEAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qEAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4DAA4D;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAA2D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8GAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,cAAc,6BAA6B;AACrG;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,iEAAW;AAC3E,8CAA8C,gGAAmB;AACjE,8CAA8C,kEAAY;AAC1D,8CAA8C,kGAAoB;AAClE,8CAA8C,+DAAS;AACvD;AACA;AACA,YAAY,uEAAc;AAC1B;AACA;AACA;AACA,8BAA8B,iFAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA,gEAAgE,+DAAS;AACzE;AACA;AACA;AACA,+DAA+D,qEAAe;AAC9E;AACA,gCAAgC;AAChC;AACA;AACA,+DAA+D,iEAAW;AAC1E,+DAA+D,gGAAmB;AAClF,+DAA+D,kEAAY;AAC3E,+DAA+D,kGAAoB;AACnF,+DAA+D,+DAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,iEAAW,uCAAuC,gGAAmB;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oEAAc;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,qEAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,4DAA4D,+DAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iEAAW;AACtE,2DAA2D,gGAAmB;AAC9E,2DAA2D,kEAAY;AACvE,2DAA2D,kGAAoB;AAC/E,2DAA2D,+DAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,sBAAsB,yFAAwB;AAC9C;AACA;AACA;AACA,8CAA8C,iEAAW;AACzD,8CAA8C,gGAAmB;AACjE,8CAA8C,kEAAY;AAC1D,8CAA8C,kGAAoB;AAClE,8CAA8C,+DAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,oEAAc,sCAAsC,kEAAY,sCAAsC,mFAAe;AAC3L;AACA;AACA,0EAA0E,qEAAe;AACzF;AACA;AACA;AACA,yIAAyI;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,iEAAW,sCAAsC,gGAAmB;AACtH;AACA;AACA;AACA,0BAA0B,qGAA8B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yFAAwB;AAC1C;AACA;AACA,CAAC,CAAC,0DAAY;AACgB;;AAE9B;;;;;;;;;;;;;AChgBA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACwB;AACJ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAW,0CAA0C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,4CAAc;AACnC;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA,qBAAqB,4CAAc;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACiC;;AAElC;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,0FAA0F,QAAQ,+CAAiB;AACnH;AACA,2BAA2B,iDAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,+EAA+E,EAAE;AAChJ,8DAA8D,gBAAgB,EAAE;AAChF;AACA;AACA;AACA;AACA,2DAA2D,yDAAyD;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,+EAA+E,EAAE;AAChJ,8DAA8D,gBAAgB,EAAE;AAChF;AACA;AACA;AACA;AACA,2DAA2D,yDAAyD;AACpH;AACA;AACA;AACA;AACA,0JAA0J,8CAA8C,EAAE;AAC1M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,EAAE,EAAE;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC8B;;AAE/B;;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,8EAAsB;AACzC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACsD;;AAEvD;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACwB;AACJ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6DAAW,uCAAuC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qBAAqB,4CAAc;AACnC;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AAC8B;;AAE/B;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAiC;AACsB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC,oFAAoF,QAAQ,+CAAiB;AAC7G;AACA;AACA,2BAA2B,iDAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iIAAiI,+DAAW;AAC5I,qCAAqC;AACrC;AACA,oIAAoI,+DAAW;AAC/I,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,+DAAW;AAC3F;AACA,qCAAqC;AACrC,iCAAiC,4BAA4B,8BAA8B,EAAE;AAC7F;AACA;AACA;AACA;AACA,2DAA2D,mDAAmD;AAC9G;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,+DAAW;AAC5F;AACA,qCAAqC,IAAI;AACzC,iCAAiC;AACjC;AACA;AACA;AACA,2DAA2D,mDAAmD;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8CAAgB;AACpD;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qBAAqB;AACrB,iBAAiB,EAAE,EAAE;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC2B;;AAE5B;;;;;;;;;;;;;ACnKA;AAAA;AAAA;AAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,wEAAmB;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACmD;;AAEpD;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,kDAAkD,EAAE;AAC/G,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,2DAA2D,uEAAuE,EAAE;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sDAAsD,4CAA4C,EAAE;AACpG;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,8CAA8C,EAAE;AAC1G;AACA,yCAAyC,4CAAc;AACvD;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,6DAA6D,EAAE;AAC9H,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACiD;;AAElD;;;;;;;;;;;;;ACtIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sCAAsC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sCAAsC;AAC5F;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;AAC4C;;AAE7C;;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACc;AACQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8CAAgB,+CAA+C,QAAQ,+DAAW,iEAAiE,EAAE;AACvL;AACA;AACA,kCAAkC,8CAAgB,sDAAsD,QAAQ,+DAAW,iEAAiE,EAAE;AAC9L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,0EAA0E,eAAe,+DAAW,8FAA8F,EAAE;AACpM;AACA,sEAAsE,yDAAyD,EAAE;AACjI,aAAa;AACb;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,mCAAmC,EAAE,eAAe;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH,wBAAwB,EAAE;AAC7I;AACA,sCAAsC,+DAAW;AACjD;AACA;AACA;AACA;AACA,qEAAqE,uGAAuG,EAAE;AAC9K;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,mCAAmC,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,kBAAkB;AAClB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAQ;AAC5B;AACA;AACA;AACA,8EAA8E,mBAAmB,EAAE;AACnG;AACA;AACA,uGAAuG,mBAAmB,EAAE;AAC5H,uHAAuH;AACvH;AACA,sBAAsB;AACtB;AACA,yFAAyF,mBAAmB,EAAE;AAC9G;AACA;AACA,kGAAkG,mBAAmB,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uDAAQ;AACvC;AACA;AACA;AACA;AACA,+BAA+B,uDAAQ;AACvC;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4BAA4B,eAAe,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,iFAAiF,EAAE;AAC1I;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA;AACA,wDAAwD,+DAAW,kEAAkE;AACrI;AACA;AACA;AACA,+CAA+C,oDAAoD,EAAE;AACrG;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,mBAAmB,EAAE;AAC7G;AACA;AACA,sFAAsF,mBAAmB,EAAE;AAC3G;AACA;AACA;AACA,0EAA0E,mBAAmB,EAAE;AAC/F;AACA;AACA,iGAAiG,mBAAmB,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA,mGAAmG,+DAAW;AAC9G;AACA;AACA,mGAAmG,+DAAW;AAC9G;AACA,aAAa;AACb;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA,wFAAwF,mBAAmB,EAAE;AAC7G;AACA;AACA,sFAAsF,mBAAmB,EAAE;AAC3G;AACA;AACA;AACA,0EAA0E,mBAAmB,EAAE;AAC/F;AACA;AACA,iGAAiG,mBAAmB,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,CAAC;AAC2C;;AAE5C;;;;;;;;;;;;;;AC7UA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACO;AACY;AACA;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,+DAA+D,uDAAuD,EAAE;AACrL;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,6EAA6E,2DAA2D,EAAE;AACvM;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,sEAAsE,+BAA+B,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,yEAAyE,iCAAiC,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wEAAwE,wCAAwC,EAAE;AACleAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,iDAAiD,mDAAK;AACtD;AACA,mDAAmD,mDAAK;AACxD;AACA,yEAAyE,8CAAgB;AACzF,2EAA2E,8CAAgB;AAC3F;AACA;AACA;AACA,6CAA6C,+DAAY,8CAA8C,uDAAuD,EAAE;AAChK;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC0B;;AAE3B;;;;;;;;;;;;;AClZA;AAAA;AAAA;AAAA;AAAA;AAAyG;AACvD;AACqC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oHAAsC;AAChE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oHAAsC;AAChE;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oHAAsC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qEAAsB;AACjE;AACA,SAAS;AACT;AACA,sBAAsB,kGAA6B;AACnD;AACA;AACA;AACA,CAAC;AAC6B;;AAE9B;;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACQ;AACS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6DAAW;AACnC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,4DAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,2DAA2D,8CAAgqB;;AAEtB;;;;;;;;;;;;;ACjPA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,mDAAmD,8CAAgB;AACnqB;;AAEtB;;;;;;;;;;;;;ACnNA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACR;AACkB;AACR;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAAc;AAC/C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,uEAAW;AAChE,iCAAiC,2EAAe;AAChD;AACA;AACA,iCAAiC,sDAAU;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AAC4B;;AAE7B;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACS;AAC4C;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+CAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,oFAAoF,wCAAwC,EAAE;AAC9H;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sDAAsD;AAClG,8CAA8C,uDAAuD;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sDAAsD;AAC7F;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,iGAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,iGAAoB;AACnF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4EAA4E,gDAAgD,EAAE;AAC9H,6EAA6E,uBAAuB,EAAE;AACtG,mEAAmE,gCAAgC,EAAE;AACrG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0EAA0E,oCAAoC,EAAE;AAChH;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,sDAAU;AACc;;AAE1B;;;;;;;;;;;;;ACpRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACuC;AAClC;AACY;AACQ;AACV;AACI;AACL;AACoB;AACT;AACR;AACF;AACQ;AACrB;AACiD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,iEAAiE,mFAAe;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,2BAA2B,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,mFAAe;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,mFAAe;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,2BAA2B,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,uGAAuG,EAAE;AACxL,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+EAA+E,8DAA8D,EAAE;AAC/I,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA,sHAAsH,8DAA8D,EAAE;AACtL;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,wLAAwL,0BAA0B,EAAE;AACpN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ,mCAAmC,iDAAmB;AACtD;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA;AACA,wGAAwG,uCAAuC,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,mEAAmE,EAAE;AAC5K;AACA;AACA,yCAAyC;AACzC,wEAAwE,QAAQ,+CAAiB;AACjG,mDAAmD,iDAAmB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,yCAAyC,EAAE,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,8DAA8D,2EAAW,sCAAsC,gGAAmB;AAClI;AACA,6CAA6C,+DAAY,gEAAgE,QAAQ,+CAAiB;AAClJ;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA,yGAAyG,0CAA0C,EAAE;AACrJ;AACA;AACA;AACA,uGAAuG,+CAA+C,EAAE;AACxJ,6CAA6C;AAC7C;AACA;AACA,sJAAsJ,iCAAiC,EAAE;AACzL;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA,2IAA2I,iDAAiD,EAAE;AAC9L,yCAAyC;AACzC;AACA;AACA,2JAA2J,kCAAkC,EAAE;AAC/L;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,gEAAgE,8EAAc;AAC9E;AACA,6CAA6C,+DAAY,gEAAgE,QAAQ,+CAAiB;AAClJ;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA,yGAAyG,0CAA0C,EAAE;AACrJ;AACA;AACA;AACA,+GAA+G,uDAAuD,EAAE;AACxK,6CAA6C;AAC7C;AACA;AACA,kKAAkK,qCAAqC,EAAE;AACzM;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,gDAAgD,kDAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,oEAAoE,QAAQ,+CAAiB;AAC1J;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,+CAA+C,gDAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,8DAA8D,QAAQ,+CAAiB;AACpJ;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA,qGAAqG,yDAAyD,EAAE;AAChK,yCAAyC;AACzC;AACA;AACA,qKAAqK,oBAAoB,EAAE;AAC3L;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA,+FAA+F,yDAAyD,EAAE;AAC1J,yCAAyC;AACzC;AACA;AACA;AACA,uGAAuG,YAAY,8DAAW,SAAS,EAAE;AACzI;AACA;AACA,gJAAgJ,4BAA4B,EAAE;AAC9K;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA,4GAA4G,yBAAyB,EAAE;AACvI,sGAAsG,yBAAyB,EAAE;AACjI;AACA;AACA,uDAAuD,8DAAW,CAAC,2DAAU;AAC7E,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,+DAAY,yDAAyD,8FAA8F,EAAE;AAClO;AACA;AACA;AACA;AACA,6DAA6D,+DAAY,yDAAyD,yFAAyF,EAAE;AAC7N;AACA;AACA;AACA,iFAAiF,2EAAW,sCAAsC,gGAAmB;AACrJ,6DAA6D,+DAAY,yDAAyD,yFAAyF,EAAE;AAC7N;AACA;AACA;AACA;AACA;AACA,uGAAuG,mDAAmD,EAAE;AAC5J,wEAAwE,2DAAU;AAClF,qEAAqE,8DAAW;AAChF;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,8KAA8K,4BAA4B,EAAE;AAC5M;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA,8EAA8E,mDAAmD,+CAA+C,EAAE,wCAAwC,EAAE;AAC5N,2EAA2E,QAAQ,4DAAU,uBAAuB,EAAE;AACtH;AACA;AACA,uIAAuI,iCAAiC,EAAE;AAC1K;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,8DAA8D,2EAAW,sCAAsC,gGAAmB;AAClI;AACA,6CAA6C,+DAAY,gEAAgE,QAAQ,+CAAiB;AAClJ;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA,yGAAyG,0CAA0C,EAAE;AACrJ;AACA;AACA;AACA,kFAAkF,kDAAkD,+CAA+C,EAAE,EAAE,EAAE;AACzL,+EAA+E,QAAQ,6DAAU,uBAAuB,EAAE;AAC1H;AACA;AACA,qJAAqJ,iCAAiC,EAAE;AACxL;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA,+EAA+E,yFAAyF,iDAAiD,EAAE,EAAE,EAAE;AAC/N,4EAA4E,QAAQ,8DAAW,wBAAwB,EAAE;AACzH;AACA;AACA,0JAA0J,kCAAkC,EAAE;AAC9L;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA,gEAAgE,8EAAc;AAC9E;AACA,6CAA6C,+DAAY,gEAAgE,QAAQ,+CAAiB;AAClJ;AACA,uCAAuC,iDAAmB;AAC1D;AACA;AACA,yGAAyG,0CAA0C,EAAE;AACrJ;AACA;AACA;AACA,sFAAsF,0DAA0D,uDAAuD,EAAE,EAAE,EAAE;AAC7M,mFAAmF,QAAQ,qEAAc,2BAA2B,EAAE;AACtI;AACA;AACA,iKAAiK,qCAAqC,EAAE;AACxM;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA,iDAAiD,+DAAY,gEAAgE,QAAQ,+CAAiB;AACtJ;AACA,mCAAmC,iDAAmB;AACtD;AACA;AACA,qGAAqG,0CAA0C,EAAE;AACjJ;AACA;AACA;AACA,oGAAoG,mDAAmD,EAAE;AACzJ,yCAAyC;AACzC;AACA;AACA,mGAAmG,QAAQ,sEAAe,4BAA4B,EAAE;AACxJ,wIAAwI,iBAAiB,EAAE;AAC3J;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qFAAqF,iCAAiC,EAAE;AACxH;AACA;AACA;AACA,yFAAyF,0DAA0D,EAAE;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,uFAAuF,uDAAuD,EAAE;AAChJ;AACA,yBAAyB;AACzB;AACA,6CAA6C,+DAAY;AACzD,0LAA0L,wBAAwB,EAAE;AACpN;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qFAAqF,iCAAiC,EAAE;AACxH;AACA;AACA,gFAAgF,qFAAqF,EAAE;AACvK;AACA;AACA,kLAAkL,mBAAmB,EAAE;AACvM;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA,qFAAqF,iCAAiC,EAAE;AACxH;AACA;AACA,iFAAiF,uFAAuF,EAAE;AAC1K;AACA;AACA,8LAA8L,oBAAoB,EAAE;AACpN;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ,2DAAU,mEAAmE,EAAE;AAC7I;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAiB;AAChC;AACA,mBAAmB,iDAAmB;AACtC;AACA;AACA;AACA;AACA,8EAA8E,kDAAK;AACnF;AACA;AACA;AACA;AACA,oFAAoF,4DAA4D;AAChJ;AACA,qCAAqC;AACrC;AACA;AACA,oFAAoF,gEAAgE;AACpJ;AACA,qCAAqC;AACrC;AACA;AACA,oFAAoF,8DAA8D;AAClJ;AACA,qCAAqC;AACrC;AACA;AACA,oFAAoF,6DAA6D;AACjJ;AACA,qCAAqC;AACrC;AACA;AACA,oFAAoF,4DAA4D;AAChJ;AACA,qCAAqC;AACrC;AACA;AACA,oFAAoF,6DAA6D;AACjJ;AACA,qCAAqC;AACrC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AAC6B;AAC9B;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC1pCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACF;AACU;AACJ;AACJ;AACF;AACQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,YAAY,wDAAW,SAAS,EAAE;AACxG;AACA,qEAAqE,YAAY,sDAAU,QAAQ,EAAE;AACrG;AACA,kFAAkF,YAAY,gEAAe,aAAa,EAAE;AAC5H;AACA,sEAAsE,YAAY,wDAAW,SAAS,EAAE;AACxG;AACA,mEAAmE,YAAY,sDAAU,QAAQ,EAAE;AACnG;AACA,+EAA+E,YAAY,8DAAc,YAAY,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,yBAAyB,EAAE;AACrF,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,uBAAuB,EAAE;AAClF,6DAA6D,2BAA2B,EAAE;AAC1F,qEAAqE,2BAA2B,EAAE;AAClG,6DAA6D,2BAA2B,EAAE;AAC1F,2DAA2D,2BAA2B,EAAE;AACxF,mEAAmE,2BAA2B,EAAE;AAChG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,+BAA+B,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,wDAAwD,EAAE;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,2CAA2C,EAAE;AAC5G;AACA;AACA;AACA,wEAAwE,mDAAmD,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,yCAAyC,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,iDAAiD,EAAE;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,mDAAmD,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA,yDAAyD,wCAAwC,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD,wDAAwD,uCAAuC,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA,+DAA+D,wCAAwC,EAAE;AACzG;AACA,0EAA0E,iGAAiG,EAAE;AAC7K;AACA;AACA;AACA;AACA,oDAAoD,6BAA6B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mCAAmC,EAAE;AACxG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mCAAmC,EAAE;AAC7G,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,mCAAmC,EAAE;AACzG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mCAAmC,EAAE;AACxG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe,EAAE;AAC5D,wCAAwC,QAAQ,2DAAU,0CAA0C,EAAE;AACtG;AACA,0CAA0C,mCAAmC,EAAE;AAC/E,uCAAuC,QAAQ,sDAAU,eAAe,EAAE;AAC1E,mEAAmE,QAAQ,wDAAW,gBAAgB,EAAE;AACxG,gEAAgE,QAAQ,sDAAU,eAAe,EAAE;AACnG,4EAA4E,QAAQ,8DAAc,mBAAmB,EAAE;AACvH;AACA;AACA;AACA;AACA,CAAC;AACgB;;AAEjB;;;;;;;;;;;;;AC5QA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8CAAgB;AAC5D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACqB;;AAEtsB;;AAEvB;;;;;;;;;;;;;AC7GA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACyB;;AAE1B;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAgB;AACzC,mCAAmC,8CAAgB;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AAC0B;;AAE3B;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,4BAA4B,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACqB;;AAEtB;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAgB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,4BAA4B,EAAE;AACrG,SAAS;AACT;AACA;AACA,CAAC;AACsB;;AAEvB;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,iBAAiB,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;;AAEtB;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACe;;AAEhB;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;;AAEvB;;;;;;;;;;;;;AC3TA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;;AAE7B;;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AACiC;;AAElC;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4CAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D;AACA;AACA;AACA,mCAAmC,qCAAqC,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;;AAErB;;;;;;;;;;;;;ACpMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AACmB;;AAEpB;;;;;;;;;;;;;ACjOA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAClB;AACxC;AACA;AACA;AACO;AACP,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA,kEAAkE,mDAAY;AAC9E;AACA;AACA;AACA,2CAA2C,sCAAsC,EAAE;AACnF;AACA;AACA,0DAA0D,kDAAkD,EAAE;AAC9G;AACA;AACA;AACA;AACA,8BAA8B,qEAAa,mBAAmB,qEAAa;AAC3E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qEAAa;AAC5C,KAAK;AACL,8BAA8B,QAAQ,qEAAa,MAAM,qEAAa,oBAAoB,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACO;AACP,4BAA4B,kBAAkB;AAC9C;AACA,8BAA8B,qEAAa,mBAAmB,qEAAa;AAC3E,KAAK;AACL;AACA,iCAAiC,QAAQ,qEAAa,8BAA8B,EAAE;AACtF,8BAA8B,QAAQ,qEAAa,MAAM,qEAAa,oBAAoB,EAAE;AAC5F;;AAEA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA,iCAAiC,8CAAgB,0CAA0C,mBAAmB;AAC9G;AACA;AACA,kCAAkC,8CAAgB,qDAAqD,UAAU;AACjH;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,gBAAgB;AACvD;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,CAAC;AACsB;;AAEvB;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACP;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qDAAqD,gCAAgC,EAAE;AACvF,qDAAqD,gCAAgC,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA,0DAA0D,qBAAqB,EAAE;AACjF;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,uDAAuD,EAAE;AAC3H;AACA;AACA,kEAAkE,oEAAoE,EAAE;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uCAAG;AAC7C;AACA,sDAAsD;AACtD;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA,0CAA0C,8CAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,yCAAyC,OAAO;AAChD,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uCAAG,iBAAiB,uCAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmB;;AAEpB;;;;;;;;;;;;;;ACvPA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,8CAA8C;AACpG;AACA;AACA,SAAS,EAAE,EAAE,gBAAgB;AAC7B;AACA;AACA,SAAS,EAAE,EAAE,EAAE,EAAE;AACjB,2DAA2D,oCAAoC,EAAE;AACjG;AACA;AACA,kDAAkD,qBAAqB,EAAE;AACzE,SAAS;AACT;AACA;AACA,CAAC;AACuB;;AAExB;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D,uBAAuB,QAAQ;AAC/B;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AAC0B;;AAE3B;;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AAC3B;AACA;AACA;AACA;AACA;AACO;AACP,kCAAkC,sBAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iDAAiD,kEAAkE,EAAE;AACrH;AACA;AACA;AACA;AACO;AACP,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM,2CAA2C;AACjD;AACO;AACP,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,+BAA+B,EAAE;AAC9F;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,6BAA6B,cAAc;AAC3C,uBAAuB,6CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb,eAAe,mBAAO,CAAC,oFAAU;AACjC,WAAW,mBAAO,CAAC,0CAAQ;;AAE3B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAK;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,2CAA2C,KAAK;AAChD,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kBAAkB,mBAAO,CAAC,4DAAa;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3tBa;;AAEb;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;ACfA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;ACrBA,iBAAiB,qBAAuB,oC;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,6B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,6B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,8B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,8B;;;;;;;;;;;ACAxC,iBAAiB,qBAAuB,gC;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuF;;AAEtB;AACnB;AACc;AACR;AACiB;AACD;AAChB;;AAE7C,mCAAmC,sGAAgB;AAC1D;AACA,oBAAoB,+EAAI;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,0BAA0B,6CAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB,sGAAsG;AACvH,iBAAiB,oFAAoF;AACrG,iBAAiB,qFAAqF;AACtG,iBAAiB,2FAA2F;AAC5G,iBAAiB,iGAAiG;AAClH,iBAAiB,mFAAmF;AACpG,iBAAiB,kFAAkF;AACnG,iBAAiB,wFAAwF;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2EAAU;AAC7C,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB,yFAAyF;AAC1G,oBAAoB,oEAAoE;AACxF,oBAAoB,uCAAuC;AAC3D,oBAAoB,yEAAyE;AAC7F;AACA;AACA;AACA,2BAA2B,2DAAM;AACjC,iBAAiB;;AAEjB,aAAa;AACb,qBAAqB,oFAAW,UAAU,mFAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA,2BAA2B,2DAAM;AACjC;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;;AAEA;;AAEA,sCAAsC,oFAAW;AACjD,oBAAoB,oFAAW;AAC/B;AACA;AACA,qBAAqB;AACrB;AACA,wBAAwB;AACxB,aAAa;AACb,4CAA4C;AAC5C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AClKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;;AAElB;AACA;AACgB;AACd;AACK;AACG;AACH;;AAErD,4BAA4B,sFAAQ;AAC3C;AACA,2BAA2B,oEAAI;AAC/B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,sEAAI;AAChB;AACA,8BAA8B,oFAAW,gBAAgB,+BAA+B;AACxF,iBAAiB,2EAAU,oBAAoB;AAC/C;AACA,aAAa;AACb,0BAA0B,8EAAK;AAC/B;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,2EAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oFAAW;AACnD;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB,gCAAgC,8EAAK;AACrC;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,oEAAG;AACH;AACA,CAAC,C;;;;;;;;;;;;ACpGD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACe;AACE;AACxB;AACuB;AACV;AACd;AACyC;;AAEhF,2BAA2B,sFAAQ;AAC1C;AACA,2BAA2B,oEAAI;AAC/B,kCAAkC,mFAAoB;AACtD,mCAAmC,mFAAoB;AACvD,mCAAmC,mFAAoB;;AAEvD;AACA;AACA;;AAEA,6BAA6B,sGAAQ,OAAO,qDAAM;AAClD;;AAEA;AACA;;AAEA;AACA,8BAA8B,oFAAW,gBAAgB,oFAAW,aAAa,oCAAoC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,oFAAW;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,oFAAW;AACnC;AACA;AACA;AACA,SAAS;AACT,YAAY,2EAAU,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAuB,kDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,oFAAW;AACvC;AACA,oBAAoB,mDAAK,kBAAkB,mDAAK;AAChD,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA,iDAAG;AACH;AACA,CAAC,C;;;;;;;;;;;;AChJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqG;;AAE/C;AACF;AACA;AACiB;AACD;AACR;AACd;AACyC;AAClC;AACP;AACT;;AAE9B,6BAA6B,oHAAgB;;AAEpD;AACA,2BAA2B,qEAAI,EAAE,2DAAM;AACvC,6BAA6B,sGAAQ,OAAO,qDAAM;AAClD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,0BAA0B,oFAAW;;AAErC,QAAQ,2EAAU;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,YAAY,mEAAM;AAClB,kCAAkC,oFAAW,MAAM,mFAAO;AAC1D,gBAAgB,oFAAW;AAC3B;AACA,+BAA+B,2DAAM;AACrC,gCAAgC,8BAA8B;AAC9D,qBAAqB;AACrB,iBAAiB;AACjB;;AAEA,gCAAgC,2DAAM;AACtC;AACA;AACA;AACA;;AAEA,YAAY,mEAAM;AAClB,yBAAyB,2DAAM;AAC/B;;AAEA,kCAAkC,oFAAW,sBAAsB,oFAAW,aAAa,sBAAsB;;AAEjH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA,oBAAoB;AACpB,wBAAwB,oFAAW,MAAM,2DAAM;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,qDAAU;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;AAC5C;AACA;;AAEA,oEAAG;AACH;AACA,CAAC,C;;;;;;;;;;;;AC3HD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;;AAEe;AACqC;AAC7C;AACuB;AACzB;AACmB;AACV;AACD;AAC4B;AAClC;AACyC;;AAEhF,6BAA6B,sDAAQ;AAC5C;AACA,2BAA2B,qEAAI;AAC/B;;AAEA,6BAA6B,uGAAQ,OAAO,sDAAM;AAClD;;AAEA;AACA,6BAA6B,0GAAU;AACvC,2CAA2C,0DAAY;AACvD;AACA;AACA,oBAAoB,8EAAK;AACzB;AACA,SAAS;AACT;AACA;;AAEA;AACA,sBAAsB,+FAAa;AACnC;AACA,kBAAkB,oFAAW,sBAAsB,0CAA0C;AAC7F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,0BAA0B,6CAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB,+FAA+F;AAChH,iBAAiB,4FAA4F;AAC7G;AACA,qBAAqB,oFAAW;AAChC;AACA;AACA;AACA;AACA;AACA,sCAAsC,oFAAW;AACjD,oBAAoB,oFAAW;AAC/B;AACA;AACA,qBAAqB;AACrB;AACA,2BAA2B,mEAAM;AACjC,wBAAwB;AACxB,aAAa;AACb,4CAA4C;AAC5C;AACA,+CAA+C,0DAAY,GAAG,OAAO;AACrE;AACA;AACA,wBAAwB,8EAAK;AAC7B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA,oEAAG;AACH;AACA,CAAC,C;;;;;;;;;;;;AChHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuE;;AAEf;AACR;AAC2C;AACkB;AAC7D;AACe;AACO;AACU;AACX;AACkB;AACzC;;AAEvC,+BAA+B,sFAAQ;AAC9C;AACA,2BAA2B,uEAAI;AAC/B,2BAA2B,mFAAoB;AAC/C;AACA;AACA;AACA,2CAA2C,8DAAc,GAAG,OAAO;AACnE;AACA;AACA,oBAAoB,8EAAK;AACzB;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,6BAA6B,uGAAQ,OAAO,sDAAM;;AAElD;AACA;;AAEA;AACA,sBAAsB,+FAAa;AACnC;AACA,kBAAkB,oFAAW,wBAAwB,kCAAkC;AACvF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,0GAAU;AACvC,2CAA2C,8DAAc;AACzD;AACA;AACA;AACA,oBAAoB,8EAAK;AACzB;AACA,SAAS;AACT,6BAA6B,0GAAU;AACvC;AACA;AACA,2BAA2B;AAC3B;AACA,gCAAgC,oFAAW;AAC3C,iBAAiB;AACjB;AACA,wBAAwB,8EAAK;AAC7B,iBAAiB;AACjB,wBAAwB,8EAAK;AAC7B;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,6BAA6B,4HAAmB,UAAU,8DAAc;AACxE;AACA;AACA,C;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACJ;AAC0B;;AAET;AAChB;;AAE2B;AAC6C;AACH;AAC3C;AACO;AACE;AAC/B;AAC+B;AACP;;AAE/B;;AAEC;AACkC;;AAErF;AACA;;AAEA,qGAAgB,cAAc,wGAAiB;;AAE/C,6DAAG;AACH,IAAI,oEAAU;AACd;AACA,kBAAkB,kDAAiB;AACnC,kBAAkB,kDAAa;AAC/B,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA,IAAI,wGAAc;;AAElB,UAAU,qGAAW;;AAErB;AACA;AACA;;;AAGA,CAAC;;AAED,qEAAW,aAAa,oCAAgB;AACxC,qEAAW,kBAAkB,IAAmB;AAChD,qEAAW;AACX;AACA,YAAY,+DAAK;AACjB;AACA;;AAEA;AACA;AACA;AACA,cAAc,+FAAY;AAC1B;AACA;AACA;AACA;AACA,QAAQ,2IAAiC;AACzC,QAAQ,yIAAgC;AACxC,QAAQ,8FAA0B;AAClC,QAAQ,4FAAuB;AAC/B;AACA,CAAC;;AAED,cAAc,6DAAG;AACjB,UAAU,wEAAgB;AAC1B;AACA,wBAAwB,qGAAgB;AACxC;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,CAAC,E;;;;;;;;;;;AC5FD,iBAAiB,qBAAuB,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAxC;AAAA;AAAO,MAAM,MAAM;;AACR,gBAAS,GAAG,aAAa,CAAC;AACjC,8BAA8B;AACvB,gBAAS,GAAG,eAAe,CAAC;AACnC,8BAA8B;AACvB,gBAAS,GAAG,WAAW,CAAC;AAC/B,8BAA8B;AACvB,gBAAS,GAAG,aAAa,CAAC;;;;;;;;;;;;;ACPrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8E;AACE;AAEzE,MAAM,MAAO,SAAQ,6FAAmB;IAA/C;;QAEI,cAAS,GAAW,IAAI,CAAC;QACzB,YAAO,GAAW,EAAE,CAAC;QACrB,cAAS,GAAW,EAAE,CAAC;QACvB,UAAK,GAAW,EAAE,CAAC;QACnB,WAAM,GAAW,EAAE,CAAC;QACpB,gBAAW,GAAW,EAAE,CAAC;QACzB,kBAAa,GAAW,EAAE,CAAC;QAC3B,gBAAW,GAAW,EAAE,CAAC;QACzB,YAAO,GAAW,EAAE,CAAC;QACrB,SAAI,GAAW,EAAE,CAAC;QAClB,aAAQ,GAAS,IAAI,CAAC;QACtB,YAAO,GAAW,EAAE,CAAC;IAsDzB,CAAC;IAlDG,MAAM,CAAC,oBAAoB;QACvB,IAAI,OAAO,GAAG,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC3C,OAAO,CAAC,WAAW,CAAC,GAAG;YACnB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,SAAS,CAAC,GAAG;YACjB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;SAClC,CAAC;QACF,OAAO,CAAC,WAAW,CAAC,GAAG;YACnB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;SAClC,CAAC;QACF,OAAO,CAAC,OAAO,CAAC,GAAG;YACf,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,MAAM,EAAE,IAAI;SACf,CAAC;QACF,OAAO,CAAC,QAAQ,CAAC,GAAG;YAChB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,aAAa,CAAC,GAAG;YACrB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,eAAe,CAAC,GAAG;YACvB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,aAAa,CAAC,GAAG;YACrB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,SAAS,CAAC,GAAG;YACjB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,MAAM,CAAC,GAAG;YACd,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,UAAU,CAAC,GAAG;YAClB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,IAAI;YAC7B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,SAAS,CAAC,GAAG;YACjB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,UAAU;YACnC,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,OAAO,CAAC;IACnB,CAAC;;AAnDM,gBAAS,GAAW,eAAe,CAAC;AAqD/C,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC;AAG7B,+FAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEwC;AAC5B;AAEnC,MAAM,uBAAuB;IAEhC,SAAS;QACL,OAAO,CAAC,OAAO,QAAQ,KAAK,QAAQ,CAAC;IACzC,CAAC;IAEK,IAAI,CAAC,WAAwB;;YAC/B,OAAO,SAAS;QACpB,CAAC;KAAA;IAEK,EAAE,CAAC,WAAwB;;YAC7B,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;gBAClB,MAAM,WAAW,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;gBAC9E,MAAM,WAAW,CAAC,KAAK,CAAC,0EAA0E,CAAC,CAAC;gBACpG,MAAM,WAAW,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;gBAC7F,MAAM,WAAW,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;gBACnG,MAAM,WAAW,CAAC,KAAK,CAAC,0EAA0E,CAAC,CAAC;gBACpG,MAAM,WAAW,CAAC,KAAK,CAAC,6EAA6E,CAAC,CAAC;gBACvG,MAAM,WAAW,CAAC,KAAK,CAAC,qEAAqE,CAAC,CAAC;gBAC/F,MAAM,WAAW,CAAC,KAAK,CAAC,+DAA+D,CAAC,CAAC;gBAEzF,MAAM,WAAW,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;gBACnG,MAAM,WAAW,CAAC,KAAK,CAAC,yEAAyE,CAAC,CAAC;gBACnG,MAAM,WAAW,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;gBAC5F,MAAM,WAAW,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;gBAChG,MAAM,WAAW,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;aAChG;iBACI;gBACD,IAAI,KAAK,GAAG,qFAAe,CAAC,yBAAyB,CAAC,wDAAM,CAAC,CAAC;gBAC9D,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACxC;QACL,CAAC;KAAA;CACJ;;;;;;;;;;;;;ACpCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8E;AACE;AAEzE,MAAM,MAAO,SAAQ,6FAAmB;IAA/C;;QAEI,cAAS,GAAW,IAAI,CAAC;QACzB,YAAO,GAAW,EAAE,CAAC;QACrB,cAAS,GAAW,EAAE,CAAC;QACvB,UAAK,GAAW,EAAE,CAAC;QACnB,WAAM,GAAW,EAAE,CAAC;QACpB,gBAAW,GAAW,EAAE,CAAC;QACzB,kBAAa,GAAW,EAAE,CAAC;QAC3B,gBAAW,GAAW,EAAE,CAAC;QACzB,YAAO,GAAW,EAAE,CAAC;QACrB,SAAI,GAAW,EAAE,CAAC;QAClB,aAAQ,GAAS,IAAI,CAAC;QACtB,YAAO,GAAW,EAAE,CAAC;IAoDzB,CAAC;IAlDG,MAAM,CAAC,oBAAoB;QACvB,IAAI,OAAO,GAAG,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC3C,OAAO,CAAC,WAAW,CAAC,GAAG;YACnB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,SAAS,CAAC,GAAG;YACjB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;SAClC,CAAC;QACF,OAAO,CAAC,WAAW,CAAC,GAAG;YACnB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;SAClC,CAAC;QACF,OAAO,CAAC,OAAO,CAAC,GAAG;YACf,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,MAAM,EAAE,IAAI;SACf,CAAC;QACF,OAAO,CAAC,QAAQ,CAAC,GAAG;YAChB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,aAAa,CAAC,GAAG;YACrB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,eAAe,CAAC,GAAG;YACvB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,aAAa,CAAC,GAAG;YACrB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,SAAS,CAAC,GAAG;YACjB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,MAAM,CAAC,GAAG;YACd,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,MAAM;YAC/B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,UAAU,CAAC,GAAG;YAClB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,IAAI;YAC7B,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,CAAC,SAAS,CAAC,GAAG;YACjB,IAAI,EAAE,+FAAY,CAAC,KAAK,CAAC,UAAU;YACnC,QAAQ,EAAE,IAAI;SACjB,CAAC;QACF,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ;AACD,MAAM,CAAC,aAAa,GAAG,KAAK,CAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _typeorm = require(\"typeorm\");\nlet typeorm = _typeorm;\nclass BaseDatabase {\n    constructor(database) {\n        let options = this._createConnectionOptions(database);\n        this._connectionPromise = this._createConnection(options);\n    }\n    _createConnection(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (options.type === \"sqljs\") {\n                //wait for SQL to be initialized\n                window[\"SQL\"] = yield window[\"initSqlJs\"]();\n            }\n            return typeorm.createConnection(options).catch(e => {\n                console.error(e);\n                return Promise.reject(e);\n            });\n        });\n    }\n    _createConnectionOptions(database) {\n        let options = BaseDatabase.CONNECTION_OPTIONS;\n        if (typeof device === \"undefined\" || device.platform !== \"browser\") {\n            options.type = \"cordova\";\n            options.database = database;\n        }\n        else {\n            let saveTimeout = null;\n            options.type = \"sqljs\";\n            options.location = database;\n            options.autoSave = true;\n            options.useLocalForage = true;\n            //Deactivated delay of saving since PRAGMA foreign_keys = ON is not saved with delay (why ever!)\n            // options.autoSaveCallback = function () {\n            //     clearTimeout(saveTimeout);\n            //     saveTimeout = setTimeout(() => {\n            //         typeorm.getSqljsManager().saveDatabase();\n            //     }, 150);\n            // }\n        }\n        options.entities = this.getEntityDefinitions();\n        // options.migrations = this.constructor._migrations;\n        return options;\n    }\n    getEntityDefinitions() {\n        let entities = [];\n        Object.keys(BaseDatabase._models).forEach(modelName => {\n            BaseDatabase._models[modelName]._database = this;\n            entities.push(new typeorm.EntitySchema(BaseDatabase._models[modelName].getSchemaDefinition()));\n        });\n        // console.log(\"entities\", entities);\n        return entities;\n    }\n    saveEntity(entity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let repository = null;\n            if (Array.isArray(entity)) {\n                if (entity.length === 0) {\n                    return entity;\n                }\n                repository = yield this._getRepository(entity[0].constructor);\n            }\n            else {\n                repository = yield this._getRepository(entity.constructor);\n            }\n            return repository.save(entity);\n        });\n    }\n    static _buildQuery(where, order, limit, offset, relations) {\n        let query = {};\n        if (where) {\n            query[\"where\"] = where;\n        }\n        if (order) {\n            query[\"order\"] = order;\n        }\n        if (limit) {\n            query[\"take\"] = limit;\n        }\n        if (offset) {\n            query[\"skip\"] = offset;\n        }\n        if (relations) {\n            query[\"relations\"] = relations;\n        }\n        return query;\n    }\n    static _setLoaded(models) {\n        return __awaiter(this, void 0, void 0, function* () {\n            models = yield models;\n            if (models === null || models === undefined) {\n                return null;\n            }\n            let isArray = Array.isArray(models);\n            if (!isArray) {\n                models = [models];\n            }\n            models.forEach(models => models.setLoaded(true));\n            return (isArray) ? models : models[0];\n        });\n    }\n    findEntities(model, where, order, limit, offset, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let repository = yield this._getRepository(model);\n            return BaseDatabase._setLoaded(repository.find(BaseDatabase._buildQuery(where, order, limit, offset, relations)));\n        });\n    }\n    findAndCountEntities(model, where, order, limit, offset, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let repository = yield this._getRepository(model);\n            return BaseDatabase._setLoaded(repository.findAndCount(BaseDatabase._buildQuery(where, order, limit, offset, relations)));\n        });\n    }\n    findOneEntity(model, where, order, offset, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let repository = yield this._getRepository(model);\n            return BaseDatabase._setLoaded(repository.findOne(BaseDatabase._buildQuery(where, order, undefined, offset, relations)));\n        });\n    }\n    findById(model, id, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let repository = yield this._getRepository(model);\n            return BaseDatabase._setLoaded(repository.findOne(id, BaseDatabase._buildQuery(undefined, undefined, undefined, undefined, relations)));\n        });\n    }\n    findByIds(model, ids, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let repository = yield this._getRepository(model);\n            return BaseDatabase._setLoaded(repository.findByIds(ids, BaseDatabase._buildQuery(undefined, undefined, undefined, undefined, relations)));\n        });\n    }\n    clearModel(model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let repository = yield this._getRepository(model);\n            return repository.clear();\n        });\n    }\n    _getRepository(model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let connection = yield this._connectionPromise;\n            return connection.getRepository(model);\n        });\n    }\n    createQueryBuilder(model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (model) {\n                let repo = yield this._getRepository(model);\n                return repo.createQueryBuilder(model.getSchemaName());\n            }\n            else {\n                let connection = yield this._connectionPromise;\n                return connection.createQueryBuilder();\n            }\n        });\n    }\n    createQueryRunner() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let connection = yield this._connectionPromise;\n            return connection.createQueryRunner();\n        });\n    }\n    deleteEntity(entity, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Array.isArray(entity)) {\n                if (entity.length === 0) {\n                    return entity;\n                }\n                if (!model) {\n                    model = entity[0].constructor;\n                }\n                if (typeof entity[0] !== \"number\") {\n                    let ids = [];\n                    entity.forEach(ent => ids.push(ent.id));\n                    entity = ids;\n                }\n            }\n            else {\n                if (!model) {\n                    model = entity.constructor;\n                }\n                if (typeof entity !== \"number\") {\n                    entity = entity.id;\n                }\n            }\n            let repository = yield this._getRepository(model);\n            return repository.delete(entity);\n        });\n    }\n    rawQuery(sql, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this._connectionPromise).query(sql, params);\n        });\n    }\n    waitForConnection() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._connectionPromise;\n        });\n    }\n    /**\n     * @return {BaseDatabase}\n     */\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new this();\n        }\n        return this.instance;\n    }\n    static addModel(model) {\n        BaseDatabase._models[model.getSchemaName()] = model;\n    }\n    static getModel(modelName) {\n        if (modelName) {\n            return this._models[modelName];\n        }\n        else {\n            return this._models;\n        }\n    }\n}\nexports.BaseDatabase = BaseDatabase;\nBaseDatabase._models = {};\nBaseDatabase.CONNECTION_OPTIONS = {\n    location: \"default\",\n    // autoSave: true,\n    logging: [\"error\", \"warn\"],\n    synchronize: true,\n};\nBaseDatabase.TYPES = {\n    INTEGER: \"int\",\n    FLOAT: \"float\",\n    DATE: \"datetime\",\n    STRING: \"varchar\",\n    TEXT: \"text\",\n    MEDIUMTEXT: \"mediumtext\",\n    BOOLEAN: \"boolean\",\n    JSON: \"json\",\n    SIMPLE_JSON: \"simple-json\",\n    MY_JSON: \"my-json\",\n};\n//# sourceMappingURL=BaseDatabase.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseDatabase_1 = require(\"./BaseDatabase\");\nclass BaseModel {\n    constructor() {\n        this.id = null;\n        this._isLoaded = false;\n    }\n    getId() {\n        return this.id;\n    }\n    setId(id) {\n        this.id = id;\n    }\n    static getColumnDefinitions() {\n        return {\n            id: {\n                primary: true,\n                type: BaseDatabase_1.BaseDatabase.TYPES.INTEGER,\n                generated: true\n            },\n        };\n    }\n    static getRelationDefinitions() {\n        return {};\n    }\n    static getRelations() {\n        return Object.keys(this.getRelationDefinitions());\n    }\n    static getSchemaDefinition() {\n        let columns = this.getColumnDefinitions();\n        Object.keys(columns).forEach(column => {\n            if (typeof columns[column] === \"string\") {\n                columns[column] = { type: columns[column] };\n            }\n            if (columns[column].type === BaseDatabase_1.BaseDatabase.TYPES.MY_JSON && !columns[column].transformer) {\n                columns[column].type = BaseDatabase_1.BaseDatabase.TYPES.MEDIUMTEXT;\n                columns[column].transformer = {\n                    from: text => {\n                        return (text ? JSON.parse(text) : null);\n                    },\n                    to: json => {\n                        return (json ? JSON.stringify(json) : \"\");\n                    }\n                };\n            }\n        });\n        return {\n            name: this.getSchemaName(),\n            target: this,\n            columns: columns,\n            relations: this.getRelationDefinitions()\n        };\n    }\n    static getSchemaName() {\n        if (!this.SCHEMA_NAME) {\n            this.SCHEMA_NAME = this.name;\n        }\n        return this.SCHEMA_NAME;\n    }\n    setLoaded(isLoaded) {\n        this._isLoaded = isLoaded;\n    }\n    save() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.constructor._database.saveEntity(this);\n        });\n    }\n    delete() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.constructor._database.deleteEntity(this);\n        });\n    }\n    static deleteMany(entities) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.deleteEntity(entities);\n        });\n    }\n    static saveMany(entities) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.saveEntity(entities);\n        });\n    }\n    static find(where, order, limit, offset, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.findEntities(this, where, order, limit, offset, relations);\n        });\n    }\n    static findAndCount(where, order, limit, offset, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.findAndCountEntities(this, where, order, limit, offset, relations);\n        });\n    }\n    static findOne(where, order, offset, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.findOneEntity(this, where, order, offset, relations);\n        });\n    }\n    static findById(id, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.findById(this, id, relations);\n        });\n    }\n    static findByIds(ids, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.findByIds(this, ids, relations);\n        });\n    }\n    static clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._database.clearModel(this);\n        });\n    }\n    static equals(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (a === null || b === null) {\n            return false;\n        }\n        if (Array.isArray(a) && Array.isArray(b) && a.length === b.length) {\n            return a.every((subA, index) => {\n                this.equals(subA, b[index]);\n            });\n        }\n        else if (a instanceof this && b instanceof this) {\n            return a.constructor === b.constructor && a.getId() === b.getId();\n        }\n    }\n}\nexports.BaseModel = BaseModel;\n/**\n * @type {null | BaseDatabase}\n * @private\n */\nBaseModel._database = null;\nBaseModel.RELATION = {\n    MANY_TO_MANY: \"many-to-many\",\n    MANY_TO_ONE: \"many-to-one\",\n    ONE_TO_MANY: \"one-to-many\",\n    ONE_TO_ONE: \"one-to-one\"\n};\n//# sourceMappingURL=BaseModel.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./BaseDatabase\"));\n__export(require(\"./BaseModel\"));\n__export(require(\"./cordova-sites-database\"));\n//# sourceMappingURL=cordova-sites-database.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client/ClientFileMedium\"), exports);\n__exportStar(require(\"./client/ClientModel\"), exports);\n__exportStar(require(\"./client/ClientPartialModel\"), exports);\n__exportStar(require(\"./client/EasySyncClientDb\"), exports);\n__exportStar(require(\"./client/FileWriter/FilePromise\"), exports);\n__exportStar(require(\"./client/FileWriter/FileTransferPromise\"), exports);\n__exportStar(require(\"./client/FileWriter/FileWriterPromise\"), exports);\n__exportStar(require(\"./client/LastSyncDates\"), exports);\n__exportStar(require(\"./client/SyncJob\"), exports);\n__exportStar(require(\"./client/SyncJob_old\"), exports);\n__exportStar(require(\"./client/editEntitySite/ModifyEntitySite\"), exports);\n__exportStar(require(\"./client/migration/SetupEasySync\"), exports);\n//# sourceMappingURL=client.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientFileMedium = void 0;\nconst EasySyncBaseModel_1 = require(\"../shared/EasySyncBaseModel\");\nconst FileTransferPromise_1 = require(\"./FileWriter/FileTransferPromise\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst FilePromise_1 = require(\"./FileWriter/FilePromise\");\nclass ClientFileMedium extends EasySyncBaseModel_1.EasySyncBaseModel {\n    constructor() {\n        super(...arguments);\n        this.saveOffline = true;\n        this._isDownloaded = true;\n    }\n    setLoaded(isLoaded) {\n        // @ts-ignore\n        super.setLoaded(isLoaded);\n        this._isDownloaded = true;\n        FilePromise_1.FilePromise.open(this.src, { create: false }).then(() => this._isDownloaded = true).catch(e => {\n            console.log(\"not downloaded, yet!\");\n            this._isDownloaded = false;\n            ClientFileMedium._handleImages(this);\n        });\n    }\n    save() {\n        const _super = Object.create(null, {\n            save: { get: () => super.save }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield ClientFileMedium._handleImages(this);\n            return _super.save.call(this);\n        });\n    }\n    static saveMany(entities) {\n        const _super = Object.create(null, {\n            saveMany: { get: () => super.saveMany }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield ClientFileMedium._handleImages(entities);\n            return _super.saveMany.call(this, entities);\n        });\n    }\n    static _handleImages(entities) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let isArray = Array.isArray(entities);\n            if (!isArray) {\n                entities = [entities];\n            }\n            yield Helper_1.Helper.asyncForEach(entities, (entity) => __awaiter(this, void 0, void 0, function* () {\n                if (entity.saveOffline && device.platform !== \"browser\" && !entity.src.startsWith(\"data\") && !entity.src.startsWith(\"http\") && !entity.src.startsWith(\"//\")) {\n                    yield new FileTransferPromise_1.FileTransferPromise(entity.getServerUrl(false), entity.src).download().catch(e => console.log(e));\n                    entity._isDownloaded = true;\n                }\n            }), true);\n        });\n    }\n}\nexports.ClientFileMedium = ClientFileMedium;\n//# sourceMappingURL=ClientFileMedium.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientModel = void 0;\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst shared_1 = require(\"js-helper/dist/shared\");\nclass ClientModel extends cordova_sites_database_1.BaseModel {\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        if (columns[\"id\"] && columns[\"id\"][\"generated\"]) {\n            columns[\"id\"][\"generated\"] = false;\n        }\n        return columns;\n    }\n    static _fromJson(jsonObjects, models, includeRelations) {\n        return __awaiter(this, void 0, void 0, function* () {\n        });\n    }\n    toJSON(includeFull) {\n    }\n    ;\n    save(local) {\n        const _super = Object.create(null, {\n            save: { get: () => super.save }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!local) {\n                let values = this.toJSON();\n                let data = yield client_1.DataManager.send(this.constructor.SAVE_PATH, {\n                    \"model\": this.constructor.getSchemaName(),\n                    \"values\": values\n                });\n                if (data.success === false) {\n                    throw new Error(data.errors);\n                }\n                yield this.constructor._fromJson(data, this, true);\n            }\n            return _super.save.call(this);\n        });\n    }\n    delete(local) {\n        const _super = Object.create(null, {\n            delete: { get: () => super.delete }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!local) {\n                let data = yield client_1.DataManager.send(this.constructor.DELETE_PATH, {\n                    \"model\": this.constructor.getSchemaName(),\n                    \"id\": this.id\n                });\n                if (data.success === false) {\n                    throw new Error(data.errors);\n                }\n            }\n            return _super.delete.call(this);\n        });\n    }\n    static saveMany(entities, local) {\n        const _super = Object.create(null, {\n            saveMany: { get: () => super.saveMany }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!local) {\n                let values = [];\n                entities.forEach(entity => {\n                    values.push(entity.toJSON());\n                });\n                let data = yield client_1.DataManager.send(this.SAVE_PATH, {\n                    \"model\": this.getSchemaName(),\n                    \"values\": values\n                });\n                if (data.success === false) {\n                    throw new Error(data.errors);\n                }\n                entities = yield this._fromJson(data, undefined, true);\n            }\n            return _super.saveMany.call(this, entities);\n        });\n    }\n    static getSchemaDefinition() {\n        const TYPES_FOR_DEFAULT_ESCAPING = [\n            cordova_sites_database_1.BaseDatabase.TYPES.MEDIUMTEXT,\n            cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n            cordova_sites_database_1.BaseDatabase.TYPES.TEXT,\n        ];\n        let definitions = super.getSchemaDefinition();\n        let columns = definitions[\"columns\"];\n        Object.keys(columns).forEach(column => {\n            if (columns[column].type === cordova_sites_database_1.BaseDatabase.TYPES.MEDIUMTEXT) {\n                columns[column].type = cordova_sites_database_1.BaseDatabase.TYPES.TEXT;\n            }\n            if (columns[column].type === cordova_sites_database_1.BaseDatabase.TYPES.JSON) {\n                columns[column].type = cordova_sites_database_1.BaseDatabase.TYPES.SIMPLE_JSON;\n            }\n            if (TYPES_FOR_DEFAULT_ESCAPING.indexOf(columns[column].type) !== -1) {\n                columns[column].escapeJS = shared_1.Helper.nonNull(columns[column].escapeJS, true);\n                columns[column].escapeHTML = shared_1.Helper.nonNull(columns[column].escapeHTML, true);\n            }\n        });\n        return definitions;\n    }\n}\nexports.ClientModel = ClientModel;\nClientModel.SAVE_PATH = \"/sync\";\nClientModel.DELETE_PATH = \"/sync/delete\";\n//# sourceMappingURL=ClientModel.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientPartialModel = void 0;\nconst EasySyncBaseModel_1 = require(\"../shared/EasySyncBaseModel\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nclass ClientPartialModel extends EasySyncBaseModel_1.EasySyncBaseModel {\n    constructor() {\n        super();\n        this.clientId = null;\n    }\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        if (columns[\"id\"]) {\n            columns[\"id\"][\"primary\"] = false;\n            columns[\"id\"][\"generated\"] = false;\n            columns[\"id\"][\"nullable\"] = true;\n            columns[\"id\"][\"unique\"] = true;\n        }\n        columns[\"clientId\"] = {\n            type: \"integer\",\n            primary: true,\n            generated: true,\n        };\n        return columns;\n    }\n    toJSON(includeFull) {\n        let relations = this.constructor.getRelationDefinitions();\n        let columns = this.constructor.getColumnDefinitions();\n        let obj = {};\n        Object.keys(columns).forEach(attribute => {\n            if (attribute !== \"clientId\") {\n                obj[attribute] = this[attribute];\n            }\n        });\n        Object.keys(relations).forEach(relationName => {\n            if (includeFull === true) {\n                obj[relationName] = this[relationName];\n            }\n            else {\n                if (Array.isArray(this[relationName])) {\n                    let ids = [];\n                    this[relationName].forEach(child => (child && ids.push(child.id)));\n                    obj[relationName] = ids;\n                }\n                else if (this[relationName] instanceof cordova_sites_database_1.BaseModel) {\n                    obj[relationName] = this[relationName].id;\n                }\n                else {\n                    obj[relationName] = null;\n                }\n            }\n        });\n        return obj;\n    }\n    save(local) {\n        const _super = Object.create(null, {\n            save: { get: () => super.save }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            local = Helper_1.Helper.nonNull(local, true);\n            if (typeof this.clientId !== \"number\") {\n                this.clientId = undefined;\n            }\n            if (!local) {\n                let values = this.toJSON();\n                let data = yield client_1.DataManager.send(this.constructor.SAVE_PATH, {\n                    \"model\": this.constructor.getSchemaName(),\n                    \"values\": values\n                });\n                if (data.success !== false) {\n                    yield this.constructor._fromJson(data, this, true);\n                }\n            }\n            return _super.save.call(this, true);\n        });\n    }\n    delete(local) {\n        const _super = Object.create(null, {\n            delete: { get: () => super.delete }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!local) {\n                let data = yield client_1.DataManager.send(this.constructor.DELETE_PATH, {\n                    \"model\": this.constructor.getSchemaName(),\n                    \"id\": this.id\n                });\n                if (data.success === false) {\n                    throw new Error(data.errors);\n                }\n            }\n            return _super.delete.call(this, true);\n        });\n    }\n    static saveMany(entities, local) {\n        const _super = Object.create(null, {\n            saveMany: { get: () => super.saveMany }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            local = Helper_1.Helper.nonNull(local, true);\n            entities.forEach(entity => {\n                if (typeof entity.clientId !== \"number\") {\n                    entity.clientId = undefined;\n                }\n            });\n            if (!local) {\n                let values = [];\n                entities.forEach(entity => {\n                    values.push(entity.toJSON());\n                });\n                let data = yield client_1.DataManager.send(this.SAVE_PATH, {\n                    \"model\": this.getSchemaName(),\n                    \"values\": values\n                });\n                if (data.success !== false) {\n                    entities = yield this._fromJson(data, entities, true);\n                }\n            }\n            return _super.saveMany.call(this, entities, true);\n        });\n    }\n}\nexports.ClientPartialModel = ClientPartialModel;\n//# sourceMappingURL=ClientPartialModel.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EasySyncClientDb = void 0;\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nconst ClientModel_1 = require(\"./ClientModel\");\nconst EasySyncBaseModel_1 = require(\"../shared/EasySyncBaseModel\");\nconst EasySyncPartialModel_1 = require(\"../shared/EasySyncPartialModel\");\nconst ClientPartialModel_1 = require(\"./ClientPartialModel\");\nconst FileMedium_1 = require(\"../shared/FileMedium\");\nconst ClientFileMedium_1 = require(\"./ClientFileMedium\");\nclass EasySyncClientDb extends cordova_sites_database_1.BaseDatabase {\n    constructor(dbName) {\n        super(dbName || \"EasySync\");\n    }\n    _createConnectionOptions(database) {\n        JSObject.setPrototypeOf(EasySyncBaseModel_1.EasySyncBaseModel, ClientModel_1.ClientModel);\n        JSObject.setPrototypeOf(EasySyncPartialModel_1.EasySyncPartialModel, ClientPartialModel_1.ClientPartialModel);\n        JSObject.setPrototypeOf(EasySyncBaseModel_1.EasySyncBaseModel.prototype, ClientModel_1.ClientModel.prototype);\n        JSObject.setPrototypeOf(EasySyncPartialModel_1.EasySyncPartialModel.prototype, ClientPartialModel_1.ClientPartialModel.prototype);\n        JSObject.setPrototypeOf(FileMedium_1.FileMedium, ClientFileMedium_1.ClientFileMedium);\n        JSObject.setPrototypeOf(FileMedium_1.FileMedium.prototype, ClientFileMedium_1.ClientFileMedium.prototype);\n        let options = super._createConnectionOptions(database);\n        options[\"migrationsTableName\"] = \"migrations\";\n        return options;\n    }\n}\nexports.EasySyncClientDb = EasySyncClientDb;\nEasySyncClientDb.BASE_MODEL = null;\nclient_1.App.addInitialization(() => __awaiter(void 0, void 0, void 0, function* () {\n    yield EasySyncClientDb.getInstance()._connectionPromise.catch(function (e) {\n        if (typeof EasySyncClientDb.errorListener === \"function\") {\n            return EasySyncClientDb.errorListener(...arguments);\n        }\n        else {\n            throw (e);\n        }\n    });\n}));\n//# sourceMappingURL=EasySyncClientDb.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FilePromise = void 0;\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst FileWriterPromise_1 = require(\"./FileWriterPromise\");\nclass FilePromise {\n    constructor(fileEntry) {\n        this.fileEntry = fileEntry;\n    }\n    createWriter() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((res) => {\n                this.fileEntry.createWriter(writer => {\n                    res(new FileWriterPromise_1.FileWriterPromise(writer));\n                });\n            });\n        });\n    }\n    static open(file, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            options = Helper_1.Helper.nonNull(options, { create: true, exclusive: false });\n            return new Promise((r, rej) => {\n                window[\"resolveLocalFileSystemURL\"](\"cdvfile://localhost/persistent/\", dirEntry => {\n                    dirEntry.getFile(file, options, fileEntry => {\n                        r(new FilePromise(fileEntry));\n                    }, rej);\n                }, rej);\n            });\n        });\n    }\n}\nexports.FilePromise = FilePromise;\n//# sourceMappingURL=FilePromise.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileTransferPromise = void 0;\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst FilePromise_1 = require(\"./FilePromise\");\nconst DataManager_1 = require(\"cordova-sites/dist/client/js/DataManager\");\nclass FileTransferPromise {\n    constructor(downloadUrl, storagePath) {\n        this.downloadUrl = downloadUrl;\n        if (Helper_1.Helper.isNull(storagePath)) {\n            let parts = this.downloadUrl.split(\"/\");\n            if (parts.length > 0) {\n                storagePath = parts[parts.length - 1];\n            }\n        }\n        this.storagePath = storagePath;\n    }\n    download() {\n        return __awaiter(this, void 0, void 0, function* () {\n            debugger;\n            let blob = DataManager_1.DataManager.fetchBlob(this.downloadUrl);\n            let filePromise = yield FilePromise_1.FilePromise.open(this.storagePath);\n            let fileWriter = yield filePromise.createWriter();\n            // blob = await blob;\n            yield fileWriter.write(yield blob);\n        });\n    }\n}\nexports.FileTransferPromise = FileTransferPromise;\n//# sourceMappingURL=FileTransferPromise.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileWriterPromise = void 0;\nclass FileWriterPromise {\n    constructor(fileWriter) {\n        this.fileWriter = fileWriter;\n        this._isWritingPromise = Promise.resolve();\n    }\n    write(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let promise = this._isWritingPromise.then(() => new Promise((res, rej) => {\n                this.fileWriter.onwriteend = res;\n                this.fileWriter.onerror = rej;\n                this.fileWriter.write(data);\n            }));\n            this._isWritingPromise = promise.catch(console.error);\n            return promise;\n        });\n    }\n}\nexports.FileWriterPromise = FileWriterPromise;\n//# sourceMappingURL=FileWriterPromise.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LastSyncDates = void 0;\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nclass LastSyncDates extends cordova_sites_database_1.BaseModel {\n    constructor() {\n        super();\n        this.model = \"\";\n        this.lastSynced = 0;\n        this.where = {};\n    }\n    getModel() {\n        return this.model;\n    }\n    setModel(model) {\n        this.model = model;\n    }\n    getLastSynced() {\n        return this.lastSynced;\n    }\n    setLastSynced(lastSynced) {\n        this.lastSynced = lastSynced;\n    }\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"model\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING, nullable: true };\n        columns[\"lastSynced\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER, nullable: true };\n        columns[\"where\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.SIMPLE_JSON };\n        return columns;\n    }\n}\nexports.LastSyncDates = LastSyncDates;\nLastSyncDates.SCHEMA_NAME = \"easy-sync-last-sync-dates\";\ncordova_sites_database_1.BaseDatabase.addModel(LastSyncDates);\n//# sourceMappingURL=LastSyncDates.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SyncJob = void 0;\nconst LastSyncDates_1 = require(\"./LastSyncDates\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst shared_1 = require(\"js-helper/dist/shared\");\nconst EasySyncClientDb_1 = require(\"./EasySyncClientDb\");\nconst typeorm = require(\"typeorm\");\nconst EasySyncBaseModel_1 = require(\"../shared/EasySyncBaseModel\");\nconst ClientFileMedium_1 = require(\"./ClientFileMedium\");\nconst FileMedium_1 = require(\"../shared/FileMedium\");\nconst BaseDatabase_1 = require(\"cordova-sites-database/dist/BaseDatabase\");\nclass SyncJob {\n    constructor() {\n        this._syncedModels = {};\n        this._modelNames = [];\n        this._relationshipModels = {};\n        this._lastSyncDates = {};\n        this._keyedModelClasses = {};\n        this._savePromise = Promise.resolve();\n        this._queryRunner = null;\n        this._finalRes = {};\n        this._manyToManyRelations = {};\n    }\n    syncInBackgroundIfDataExists(queries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._keyedModelClasses = EasySyncClientDb_1.EasySyncClientDb.getModel();\n            let copiedQuery = shared_1.JsonHelper.deepCopy(queries);\n            let requestQueries = this._buildRequestQuery(copiedQuery);\n            this._lastSyncDates = yield this._getLastSyncModels(this._modelNames, requestQueries);\n            this._syncPromise = this.sync(queries);\n            if (Object[\"values\"](this._lastSyncDates).some(lastSync => {\n                return lastSync[\"getLastSynced\"]() === 0;\n            })) {\n                yield this._syncPromise;\n            }\n        });\n    }\n    getSyncPromise() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._syncPromise;\n        });\n    }\n    sync(queries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._keyedModelClasses = EasySyncClientDb_1.EasySyncClientDb.getModel();\n            let requestQueries = this._buildRequestQuery(queries);\n            if (Object.keys(this._lastSyncDates).length === 0) {\n                this._lastSyncDates = yield this._getLastSyncModels(this._modelNames, requestQueries);\n            }\n            yield this._doRuns(requestQueries);\n            //Save new lastSync models\n            let lastSyncPromises = [];\n            Object.keys(this._lastSyncDates).forEach(model => {\n                lastSyncPromises.push(this._lastSyncDates[model].save());\n            });\n            yield Promise.all(lastSyncPromises);\n            //disabled in doRuns. Cannot be reenabled sooner, but since lastSyncDates should not have any relations, it should be okay\n            yield EasySyncClientDb_1.EasySyncClientDb.getInstance().rawQuery(\"PRAGMA foreign_keys = ON;\");\n            if (this._finalRes[\"FileMedium\"] && this._finalRes[\"FileMedium\"][\"changed\"]) {\n                yield ClientFileMedium_1.ClientFileMedium._handleImages(yield FileMedium_1.FileMedium.findByIds(this._finalRes[\"FileMedium\"][\"changed\"]));\n            }\n            return this._finalRes;\n        });\n    }\n    _doRuns(requestQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //Initialize some variables\n            let newLastSynced = null;\n            let response = null;\n            let offset = 0;\n            //startTransaction maybe allow read, but not write?\n            this._queryRunner = yield EasySyncClientDb_1.EasySyncClientDb.getInstance().createQueryRunner();\n            this._savePromise = this._queryRunner.query(\"PRAGMA foreign_keys = OFF;\").then(() => {\n                return this._queryRunner.startTransaction();\n            });\n            //Ask for next run until no more runs needed\n            let shouldAskAgain;\n            do {\n                shouldAskAgain = false;\n                response = yield SyncJob._fetchModel(requestQueries, offset);\n                offset = response[\"nextOffset\"];\n                //Update newLastSynced\n                if (shared_1.Helper.isNull(newLastSynced)) {\n                    newLastSynced = parseInt(response[\"newLastSynced\"]);\n                    Object.keys(this._lastSyncDates).forEach(key => {\n                        this._lastSyncDates[key].setLastSynced(newLastSynced);\n                    });\n                }\n                //create new request query and save changes\n                let newRequestQueries = [];\n                response.results.forEach((res, i) => {\n                    if (res && res.shouldAskAgain) {\n                        shouldAskAgain = true;\n                        newRequestQueries.push(requestQueries[i]);\n                    }\n                    //Extract entities\n                    this._extractEntities(res);\n                });\n                requestQueries = newRequestQueries;\n            } while (shouldAskAgain);\n            yield this._handleManyToManyRelations();\n            //wait for savePromises, stop transaction\n            return this._savePromise.then(() => __awaiter(this, void 0, void 0, function* () {\n                yield this._queryRunner.commitTransaction();\n            })).catch((e) => __awaiter(this, void 0, void 0, function* () {\n                console.error(e);\n                yield this._queryRunner.rollbackTransaction();\n            })).finally(() => __awaiter(this, void 0, void 0, function* () {\n                yield this._queryRunner.release();\n            }));\n        });\n    }\n    /**\n     * Extract the Entities and saves them(?) for one model\n     *\n     * @param modelRes\n     * @private\n     */\n    _extractEntities(modelRes) {\n        if (!modelRes) {\n            return;\n        }\n        let modelClass = this._keyedModelClasses[modelRes[\"model\"]];\n        let modelName = modelClass.getSchemaName();\n        let deletedModelsIds = [];\n        let changedEntities = [];\n        //split result into deleted and changed/new entities\n        modelRes[\"entities\"].forEach(entity => {\n            if (entity.deleted) {\n                deletedModelsIds.push(entity.id);\n            }\n            else {\n                changedEntities.push(entity);\n            }\n        });\n        this._syncedModels[modelName] = shared_1.Helper.nonNull(this._syncedModels[modelName], {});\n        //convert json to entity and save it\n        let schemaDefinition = modelClass.getSchemaDefinition();\n        let relations = schemaDefinition[\"relations\"];\n        let columns = schemaDefinition[\"columns\"];\n        let changedEntityIds = [];\n        changedEntities.forEach(entity => {\n            Object.keys(relations).forEach(relation => {\n                if (relations[relation].type === \"many-to-many\" && Array.isArray(entity[relation])) {\n                    let table = relations[relation].joinTable;\n                    let ownName;\n                    if (table.joinColumn && table.joinColumn.name) {\n                        ownName = table.joinColumn.name;\n                    }\n                    else {\n                        ownName = modelClass.getSchemaName();\n                        ownName = ownName.substr(0, 1).toLowerCase() + ownName.substr(1) + \"Id\";\n                    }\n                    let otherName;\n                    if (table.inverseJoinColumn && table.inverseJoinColumn.name) {\n                        otherName = table.inverseJoinColumn.name;\n                    }\n                    else {\n                        otherName = relations[relation].target;\n                        otherName = otherName.substr(0, 1).toLowerCase() + otherName.substr(1) + \"Id\";\n                    }\n                    this._manyToManyRelations[table.name] = shared_1.Helper.nonNull(this._manyToManyRelations[table.name], {});\n                    this._manyToManyRelations[table.name][\"values\"] = shared_1.Helper.nonNull(this._manyToManyRelations[table.name][\"values\"], []);\n                    this._manyToManyRelations[table.name][\"delete_\" + ownName] = shared_1.Helper.nonNull(this._manyToManyRelations[table.name][\"delete_\" + ownName], []);\n                    this._manyToManyRelations[table.name][\"delete_\" + ownName].push(entity.id);\n                    let otherIdsAlreadyInserted = [];\n                    let insertedRelations = this._manyToManyRelations[table.name][\"values\"].filter(relValue => relValue[ownName] === entity.id);\n                    insertedRelations.forEach(relValue => otherIdsAlreadyInserted.push(relValue[otherName]));\n                    entity[relation].forEach(otherId => {\n                        let index = otherIdsAlreadyInserted.indexOf(otherId);\n                        if (index === -1) {\n                            let value = {};\n                            value[ownName] = entity.id;\n                            value[otherName] = otherId;\n                            this._manyToManyRelations[table.name][\"values\"].push(value);\n                        }\n                    });\n                }\n                else if ((relations[relation].type === \"many-to-one\"\n                    || (relations[relation].type === \"one-to-one\" && relations[relation].joinColumn))\n                //DO not check for a value of the relation here. Else If the first entity has no value set, the field\n                // will not be set and therefore ignored for all other entites too\n                ) {\n                    let fieldName;\n                    if (relations[relation].joinColumn && relations[relation].joinColumn.name) {\n                        fieldName = relations[relation].joinColumn.name;\n                    }\n                    else {\n                        fieldName = relation + \"Id\";\n                    }\n                    entity[fieldName] = entity[relation];\n                }\n                delete entity[relation];\n            });\n            Object.keys(columns).forEach(columnName => {\n                if (columns[columnName].escapeHTML) {\n                    entity[columnName] = shared_1.XSSHelper.escapeHTML(entity[columnName]);\n                }\n                if (columns[columnName].escapeJS) {\n                    entity[columnName] = shared_1.XSSHelper.escapeJS(entity[columnName]);\n                }\n            });\n            changedEntityIds.push(entity.id);\n        });\n        this._savePromise = this._savePromise.then(() => __awaiter(this, void 0, void 0, function* () { return yield this._insertOrReplace(modelClass, changedEntities); }));\n        this._savePromise = this._savePromise.then(() => __awaiter(this, void 0, void 0, function* () { return yield this._deleteModels(modelClass, deletedModelsIds); }));\n        this._finalRes[modelName] = shared_1.Helper.nonNull(this._finalRes[modelName], { \"deleted\": [], \"changed\": [] });\n        this._finalRes[modelName][\"deleted\"].push(...deletedModelsIds);\n        this._finalRes[modelName][\"changed\"].push(...changedEntityIds);\n    }\n    _buildRequestQuery(queries) {\n        let requestQueries = [];\n        //initializing query\n        queries.forEach(query => {\n            if (query.prototype instanceof EasySyncBaseModel_1.EasySyncBaseModel) {\n                query = {\n                    model: query,\n                    where: {}\n                };\n            }\n            query.model = query.model.getSchemaName();\n            this._modelNames.push(query.model);\n            requestQueries.push(query);\n            let key = \"\" + query.model + JSON.stringify(query.where);\n            if (shared_1.Helper.isNotNull(this._lastSyncDates[key])) {\n                query[\"lastSynced\"] = this._lastSyncDates[key].getLastSynced();\n            }\n        });\n        return requestQueries;\n    }\n    _getLastSyncModels(modelNames, requestQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //Load syncModels\n            let lastSyncModelsArray = yield LastSyncDates_1.LastSyncDates.find({\n                \"model\": typeorm.In(modelNames)\n            });\n            let lastSyncDates = shared_1.Helper.arrayToObject(lastSyncModelsArray, model => \"\" + model.getModel() + JSON.stringify(model.where));\n            requestQueries.forEach(query => {\n                let key = \"\" + query.model + JSON.stringify(query.where);\n                if (shared_1.Helper.isNull(lastSyncDates[key])) {\n                    let lastSyncDate = new LastSyncDates_1.LastSyncDates();\n                    lastSyncDate.setModel(query.model);\n                    lastSyncDate.where = query.where;\n                    lastSyncDate.setLastSynced(0);\n                    lastSyncDates[key] = lastSyncDate;\n                }\n                query[\"lastSynced\"] = lastSyncDates[key].getLastSynced();\n            });\n            return lastSyncDates;\n        });\n    }\n    static _fetchModel(query, offset) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield client_1.DataManager.load(SyncJob.SYNC_PATH_PREFIX +\n                client_1.DataManager.buildQuery({\n                    \"queries\": JSON.stringify(query),\n                    \"offset\": offset\n                }));\n        });\n    }\n    _insertOrReplace(modelClass, changedEntities) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const MAX_INSERT_IN_ONE_GO = 300;\n            if (changedEntities.length === 0) {\n                return;\n            }\n            let schemaDefinition = modelClass.getSchemaDefinition();\n            let tableName = schemaDefinition.name;\n            tableName = shared_1.Helper.toSnakeCase(tableName);\n            let columns = schemaDefinition.columns;\n            //Get fields from entity for including relation fields\n            const fields = Object.keys(changedEntities[0]);\n            let values = [];\n            let valueStrings = [];\n            yield shared_1.Helper.asyncForEach(changedEntities, (entity) => __awaiter(this, void 0, void 0, function* () {\n                let valueString = [];\n                //Stellt die reihenfolge sicher\n                fields.forEach(field => {\n                    let val = entity[field];\n                    if (columns[field] && columns[field].transformer) {\n                        val = columns[field].transformer.to(val);\n                    }\n                    if (columns[field] && columns[field].type === BaseDatabase_1.BaseDatabase.TYPES.SIMPLE_JSON) {\n                        val = JSON.stringify(val);\n                    }\n                    values.push(val);\n                    valueString.push(\"?\");\n                });\n                valueStrings.push(\"(\" + valueString.join(\",\") + \")\");\n                if (valueStrings.length >= MAX_INSERT_IN_ONE_GO) {\n                    let sql = \"INSERT OR REPLACE INTO \" + tableName + \" (\" + fields.join(\",\") + \") VALUES \" + valueStrings.join(\",\");\n                    yield this._queryRunner.query(sql, values);\n                    valueStrings = [];\n                    values = [];\n                }\n            }));\n            if (valueStrings.length > 0) {\n                let sql = \"INSERT OR REPLACE INTO \" + tableName + \" (\" + fields.join(\",\") + \") VALUES \" + valueStrings.join(\",\");\n                yield this._queryRunner.query(sql, values);\n            }\n        });\n    }\n    _deleteModels(modelClass, deletedModelsIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const MAX_DELETES_IN_ONE_GO = 300;\n            if (deletedModelsIds.length === 0) {\n                return;\n            }\n            let tableName = modelClass.getSchemaName();\n            tableName = shared_1.Helper.toSnakeCase(tableName);\n            let ids = [];\n            let valueStrings = [];\n            yield shared_1.Helper.asyncForEach(deletedModelsIds, (entityId) => __awaiter(this, void 0, void 0, function* () {\n                ids.push(entityId);\n                valueStrings.push(\"?\");\n                if (valueStrings.length >= MAX_DELETES_IN_ONE_GO) {\n                    let sql = \"DELETE FROM \" + tableName + \" WHERE id IN (\" + ids.join(\",\") + \")\";\n                    yield this._queryRunner.query(sql);\n                    valueStrings = [];\n                    ids = [];\n                }\n            }));\n            if (valueStrings.length > 0) {\n                let sql = \"DELETE FROM \" + tableName + \" WHERE id IN (\" + ids.join(\",\") + \")\";\n                yield this._queryRunner.query(sql);\n            }\n        });\n    }\n    _handleManyToManyRelations() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._savePromise;\n            let promises = [];\n            Object.keys(this._manyToManyRelations).forEach(table => {\n                let sql = \"DELETE FROM \" + table + \" WHERE \";\n                let deleteSqls = [];\n                Object.keys(this._manyToManyRelations[table]).forEach(field => {\n                    if (field.startsWith(\"delete_\")) {\n                        deleteSqls.push(field.substr(7) + \" IN (\" + this._manyToManyRelations[table][field].join(\",\") + \")\");\n                    }\n                });\n                sql += deleteSqls.join(\" OR \") + \";\";\n                promises.push(this._queryRunner.query(sql).then(() => {\n                    if (this._manyToManyRelations[table].values.length > 0) {\n                        let fields = Object.keys(this._manyToManyRelations[table].values[0]);\n                        let valueStrings = [];\n                        this._manyToManyRelations[table].values.forEach(valuePair => {\n                            let values = [];\n                            fields.forEach(field => {\n                                values.push(valuePair[field]);\n                            });\n                            valueStrings.push(\"(\" + values.join(\",\") + \")\");\n                        });\n                        let sql = \"INSERT OR REPLACE INTO \" + table + \"(\" + fields.join(\",\") + \") VALUES \" + valueStrings.join(\",\") + \";\";\n                        return this._queryRunner.query(sql);\n                    }\n                }));\n            });\n            yield Promise.all(promises);\n        });\n    }\n}\nexports.SyncJob = SyncJob;\nSyncJob.SYNC_PATH_PREFIX = \"sync\";\n//# sourceMappingURL=SyncJob.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SyncJob_old = void 0;\nconst LastSyncDates_1 = require(\"./LastSyncDates\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst shared_1 = require(\"js-helper/dist/shared\");\nconst EasySyncClientDb_1 = require(\"./EasySyncClientDb\");\nconst typeorm = require(\"typeorm\");\nconst EasySyncPartialModel_1 = require(\"../shared/EasySyncPartialModel\");\nconst EasySyncBaseModel_1 = require(\"../shared/EasySyncBaseModel\");\nconst ClientFileMedium_1 = require(\"./ClientFileMedium\");\nclass SyncJob_old {\n    constructor() {\n        this._syncedModels = {};\n        this._modelNames = [];\n        this._relationshipModels = {};\n        this._lastSyncDates = {};\n        this._keyedModelClasses = {};\n        this._savePromises = [];\n    }\n    syncInBackgroundIfDataExists(queries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._keyedModelClasses = EasySyncClientDb_1.EasySyncClientDb.getModel();\n            let copiedQuery = shared_1.JsonHelper.deepCopy(queries);\n            let requestQueries = this._buildRequestQuery(copiedQuery);\n            this._lastSyncDates = yield this._getLastSyncModels(this._modelNames, requestQueries);\n            this._syncPromise = this.sync(queries);\n            if (Object[\"values\"](this._lastSyncDates).some(lastSync => {\n                return lastSync[\"getLastSynced\"]() === 0;\n            })) {\n                yield this._syncPromise;\n            }\n        });\n    }\n    getSyncPromise() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._syncPromise;\n        });\n    }\n    sync(queries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._keyedModelClasses = EasySyncClientDb_1.EasySyncClientDb.getModel();\n            let requestQueries = this._buildRequestQuery(queries);\n            if (shared_1.Helper.isNull(this._lastSyncDates)) {\n                this._lastSyncDates = yield this._getLastSyncModels(this._modelNames, requestQueries);\n            }\n            let saveResults = yield this._doRuns(requestQueries);\n            yield this._handleRelations();\n            //Save new lastSync models\n            let lastSyncPromises = [];\n            Object.keys(this._lastSyncDates).forEach(model => {\n                lastSyncPromises.push(this._lastSyncDates[model].save());\n            });\n            yield Promise.all(lastSyncPromises);\n            //Calculate final result and give it back\n            let finalRes = {};\n            saveResults.forEach(res => {\n                if (res) {\n                    if (!finalRes[res.model]) {\n                        finalRes[res.model] = {\n                            \"deleted\": [],\n                            \"changed\": []\n                        };\n                    }\n                    if (res.deleted) {\n                        finalRes[res.model][\"deleted\"] = finalRes[res.model][\"deleted\"].concat(res.entities);\n                    }\n                    else {\n                        finalRes[res.model][\"changed\"] = finalRes[res.model][\"changed\"].concat(res.entities);\n                    }\n                }\n            });\n            if (finalRes[\"FileMedium\"] && finalRes[\"FileMedium\"][\"changed\"]) {\n                yield ClientFileMedium_1.ClientFileMedium._handleImages(finalRes[\"FileMedium\"][\"changed\"]);\n            }\n            return finalRes;\n        });\n    }\n    _doRuns(requestQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //Initialize some variables\n            let newLastSynced = null;\n            let response = null;\n            let offset = 0;\n            let shouldAskAgain = false;\n            //Ask for next run until no more runs needed\n            do {\n                shouldAskAgain = false;\n                response = yield SyncJob_old._fetchModel(requestQueries, offset);\n                offset = response[\"nextOffset\"];\n                //Update newLastSynced\n                if (shared_1.Helper.isNull(newLastSynced)) {\n                    newLastSynced = parseInt(response[\"newLastSynced\"]);\n                    Object.keys(this._lastSyncDates).forEach(key => {\n                        this._lastSyncDates[key].setLastSynced(newLastSynced);\n                    });\n                }\n                //create new request query\n                let newRequestQueries = [];\n                response.results.forEach((res, i) => {\n                    if (this._extractEntities(res)) {\n                        shouldAskAgain = true;\n                        newRequestQueries.push(requestQueries[i]);\n                    }\n                });\n                requestQueries = newRequestQueries;\n            } while (shouldAskAgain);\n            return Promise.all(this._savePromises);\n        });\n    }\n    _handleRelations() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let mergedRelations = {};\n            let relationPromises = [];\n            Object.keys(this._relationshipModels).forEach(modelClassName => {\n                let relationDefinitions = this._keyedModelClasses[modelClassName].getRelationDefinitions();\n                Object.keys(this._relationshipModels[modelClassName]).forEach(id => {\n                    let entity = this._relationshipModels[modelClassName][id][\"entity\"];\n                    let relations = this._relationshipModels[modelClassName][id][\"relations\"];\n                    let entityRelationPromises = [];\n                    Object.keys(relations).forEach(relation => {\n                        //foreach relation load other models and save them here\n                        let valuePromise = this._handleSingleRelation(relationDefinitions, relation, relations, mergedRelations, entity);\n                        entityRelationPromises.push(valuePromise.then(value => {\n                            entity[relation] = value;\n                        }));\n                    });\n                    //Save after all relationships has been set\n                    relationPromises.push(Promise.all(entityRelationPromises).then(() => {\n                        return entity.save(true);\n                    }));\n                });\n            });\n            //Wait for relation-promises\n            yield Promise.all(relationPromises);\n            yield shared_1.Helper.asyncForEach(Object.keys(mergedRelations), (model) => __awaiter(this, void 0, void 0, function* () {\n                let entities = shared_1.Helper.arrayToObject(yield this._keyedModelClasses[model].findByIds(Object.keys(mergedRelations[model]), this._keyedModelClasses[model].getRelations()), e => e.id);\n                Object.keys(mergedRelations[model]).forEach(id => {\n                    if (entities[id]) {\n                        Object.keys(mergedRelations[model][id]).forEach(relation => {\n                            if (Array.isArray(mergedRelations[model][id][relation])) {\n                                entities[id][relation] = shared_1.Helper.nonNull(entities[id][relation], []);\n                                entities[id][relation].push.apply(entities[id][relation], mergedRelations[model][id][relation]);\n                            }\n                            else {\n                                entities[id][relation] = mergedRelations[model][id][relation];\n                            }\n                        });\n                    }\n                });\n                yield EasySyncClientDb_1.EasySyncClientDb.getInstance().saveEntity(Object.values(entities));\n            }), true);\n        });\n    }\n    _handleSingleRelation(relationDefinitions, relationName, relations, mergedRelations, entity) {\n        let valuePromise = Promise.resolve(undefined);\n        let target = relationDefinitions[relationName][\"target\"];\n        let shouldSync = (relationDefinitions[relationName].sync !== false);\n        //is relation a *-to-many relation?\n        if (Array.isArray(relations[relationName])) {\n            if (shouldSync || relations[relationName].every(id => !shared_1.Helper.isSet(this._syncedModels, target, id))) {\n                valuePromise = this._keyedModelClasses[target].findByIds(relations[relationName]);\n            }\n            else {\n                let targetRelationDefinition = this._keyedModelClasses[target].getRelationDefinitions()[relationDefinitions[relationName][\"inverseSide\"]];\n                relations[relationName].filter(id => !shared_1.Helper.isSet(this._relationshipModels, target, id)).forEach(id => {\n                    mergedRelations[target] = shared_1.Helper.nonNull(mergedRelations[target], {});\n                    mergedRelations[target][id] = shared_1.Helper.nonNull(mergedRelations[target][id], {});\n                    let otherRelationValue = null;\n                    if (targetRelationDefinition.type === \"many-to-many\" || targetRelationDefinition.type === \"one-to-many\") {\n                        otherRelationValue = shared_1.Helper.nonNull(mergedRelations[target][id][relationDefinitions[relationName][\"inverseSide\"]], []);\n                        otherRelationValue.push(entity);\n                    }\n                    else {\n                        otherRelationValue = entity;\n                    }\n                    mergedRelations[target][id][relationDefinitions[relationName][\"inverseSide\"]] = otherRelationValue;\n                });\n            }\n        }\n        else if (shouldSync || !shared_1.Helper.isSet(this._syncedModels, target, relations[relationName])) {\n            valuePromise = this._keyedModelClasses[target].findById(relations[relationName]);\n        }\n        return valuePromise;\n    }\n    /**\n     * Extract the Entities and saves them(?) for one model\n     *\n     * @param modelRes\n     * @private\n     */\n    _extractEntities(modelRes) {\n        if (!modelRes) {\n            return false;\n        }\n        let shouldAskAgain = false;\n        let modelClass = this._keyedModelClasses[modelRes[\"model\"]];\n        let modelName = modelClass.getSchemaName();\n        let deletedModelsIds = [];\n        let changedModels = [];\n        //split result into deleted and changed/new entities\n        modelRes[\"entities\"].forEach(entity => {\n            if (entity.deleted) {\n                deletedModelsIds.push(entity.id);\n            }\n            else {\n                changedModels.push(entity);\n            }\n        });\n        this._syncedModels[modelName] = shared_1.Helper.nonNull(this._syncedModels[modelName], {});\n        //convert json to entity and save it\n        this._savePromises.push(modelClass._fromJson(changedModels).then((changedEntities) => __awaiter(this, void 0, void 0, function* () {\n            let relations = modelClass.getRelationDefinitions();\n            let newIds = [];\n            changedEntities.forEach(entity => {\n                this._syncedModels[modelName][entity.id] = entity;\n                newIds.push(entity.id);\n                Object.keys(relations).forEach(relation => {\n                    if (entity[relation]) {\n                        this._addRelation(modelName, entity, relation);\n                        //clear relation\n                        entity[relation] = null;\n                    }\n                });\n            });\n            //Handle partial Models (different ids on client than server)\n            if (modelClass.prototype instanceof EasySyncPartialModel_1.EasySyncPartialModel) {\n                let oldObjects = yield modelClass.findByIds(newIds);\n                let keyedEntities = shared_1.Helper.arrayToObject(changedEntities, changedEntities => changedEntities.id);\n                oldObjects.forEach(old => {\n                    keyedEntities[old.id].clientId = old.clientId;\n                });\n            }\n            return EasySyncClientDb_1.EasySyncClientDb.getInstance().saveEntity(changedEntities).then(res => {\n                return {\n                    \"model\": modelName,\n                    \"entities\": res,\n                    \"deleted\": false\n                };\n            }).catch(e => {\n                console.error(e);\n                return Promise.reject(e);\n            });\n        })));\n        //Deletion of the entities\n        this._savePromises.push(EasySyncClientDb_1.EasySyncClientDb.getInstance().deleteEntity(deletedModelsIds, modelClass).then(res => {\n            return {\n                \"model\": modelName,\n                \"entities\": res,\n                \"deleted\": true\n            };\n        }).catch(e => {\n            console.error(e);\n            return Promise.reject(e);\n        }));\n        if (modelRes.shouldAskAgain) {\n            shouldAskAgain = true;\n        }\n        return shouldAskAgain;\n    }\n    _buildRequestQuery(queries) {\n        let requestQueries = [];\n        //initializing query\n        queries.forEach(query => {\n            if (query.prototype instanceof EasySyncBaseModel_1.EasySyncBaseModel) {\n                query = {\n                    model: query,\n                    where: {}\n                };\n            }\n            query.model = query.model.getSchemaName();\n            this._modelNames.push(query.model);\n            requestQueries.push(query);\n            let key = \"\" + query.model + JSON.stringify(query.where);\n            if (shared_1.Helper.isNotNull(this._lastSyncDates[key])) {\n                query[\"lastSynced\"] = this._lastSyncDates[key].getLastSynced();\n            }\n        });\n        return requestQueries;\n    }\n    _getLastSyncModels(modelNames, requestQueries) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //Load syncModels\n            let lastSyncModelsArray = yield LastSyncDates_1.LastSyncDates.find({\n                \"model\": typeorm.In(modelNames)\n            });\n            let lastSyncDates = shared_1.Helper.arrayToObject(lastSyncModelsArray, model => \"\" + model.getModel() + JSON.stringify(model.where));\n            requestQueries.forEach(query => {\n                let key = \"\" + query.model + JSON.stringify(query.where);\n                if (shared_1.Helper.isNull(lastSyncDates[key])) {\n                    let lastSyncDate = new LastSyncDates_1.LastSyncDates();\n                    lastSyncDate.setModel(query.model);\n                    lastSyncDate.where = query.where;\n                    lastSyncDate.setLastSynced(0);\n                    lastSyncDates[key] = lastSyncDate;\n                }\n                query[\"lastSynced\"] = lastSyncDates[key].getLastSynced();\n            });\n            return lastSyncDates;\n        });\n    }\n    _addRelation(modelName, entity, relation) {\n        this._relationshipModels[modelName] = shared_1.Helper.nonNull(this._relationshipModels[modelName], {});\n        this._relationshipModels[modelName][entity.id] = shared_1.Helper.nonNull(this._relationshipModels[modelName][entity.id], {});\n        this._relationshipModels[modelName][entity.id][\"entity\"] = entity;\n        this._relationshipModels[modelName][entity.id][\"relations\"] = shared_1.Helper.nonNull(this._relationshipModels[modelName][entity.id][\"relations\"], {});\n        this._relationshipModels[modelName][entity.id][\"relations\"][relation] = entity[relation];\n        return this._relationshipModels;\n    }\n    static _fetchModel(query, offset) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield client_1.DataManager.load(SyncJob_old.SYNC_PATH_PREFIX +\n                client_1.DataManager.buildQuery({\n                    \"queries\": JSON.stringify(query),\n                    \"offset\": offset\n                }));\n        });\n    }\n}\nexports.SyncJob_old = SyncJob_old;\nSyncJob_old.SYNC_PATH_PREFIX = \"sync\";\n//# sourceMappingURL=SyncJob_old.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ModifyEntitySite = void 0;\nconst MenuSite_1 = require(\"cordova-sites/dist/client/js/Context/MenuSite\");\nconst Form_1 = require(\"cordova-sites/dist/client/js/Form\");\nconst js_helper_1 = require(\"js-helper\");\nconst EasySyncBaseModel_1 = require(\"../../shared/EasySyncBaseModel\");\nclass ModifyEntitySite extends MenuSite_1.MenuSite {\n    constructor(siteManager, view, model, menuTemplate) {\n        super(siteManager, view, menuTemplate);\n        this._formSelector = \".entity-form\";\n        this._ckEditorConfig = {\n            \".editor\": {\n                toolbar: ['bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote'],\n                removePlugins: [\"Heading\", \"Image\", \"ImageCaption\", \"ImageStyle\", \"ImageToolbar\", \"ImageUpload\", \"Table\", \"TableToolbar\", \"MediaEmbed\", \"CKFinderUploadAdapter\"],\n                language: \"de\"\n            }\n        };\n        this._entity = null;\n        this._model = model;\n    }\n    getEntityFromParameters(constructParameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(this._model.prototype instanceof EasySyncBaseModel_1.EasySyncBaseModel)) {\n                throw {\n                    \"error\": \"wrong class given! Expected EasySyncBaseModel, given \" + this._model.name\n                };\n            }\n            let entity = null;\n            if (js_helper_1.Helper.isSet(constructParameters, \"id\")) {\n                entity = this._model.findById(constructParameters[\"id\"], this._model.getRelations());\n            }\n            if (js_helper_1.Helper.isNull(entity)) {\n                entity = new this._model();\n            }\n            return entity;\n        });\n    }\n    onConstruct(constructParameters) {\n        const _super = Object.create(null, {\n            onConstruct: { get: () => super.onConstruct }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onConstruct.call(this, constructParameters);\n            let entity = yield this.getEntityFromParameters(constructParameters);\n            if (entity !== null) {\n                this.setEntity(entity);\n            }\n            return res;\n        });\n    }\n    setEntity(entity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._entity = entity;\n            yield this._viewLoadedPromise;\n            let values = yield this.dehydrate(this._entity);\n            if (js_helper_1.Helper.isNotNull(values)) {\n                yield this._form.setValues(values);\n            }\n        });\n    }\n    hydrate(values, entity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let schemaDefinition = entity.constructor.getSchemaDefinition();\n            Object.keys(schemaDefinition.columns).forEach(column => {\n                if (js_helper_1.Helper.isSet(values, column)) {\n                    entity[column] = values[column];\n                }\n            });\n            return entity;\n        });\n    }\n    dehydrate(entity) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let values = {};\n            let schemaDefinition = entity.constructor.getSchemaDefinition();\n            Object.keys(schemaDefinition.columns).forEach(column => {\n                if (js_helper_1.Helper.isSet(entity, column)) {\n                    values[column] = entity[column];\n                }\n            });\n            return values;\n        });\n    }\n    validate(values, form) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return true;\n        });\n    }\n    saveListener() {\n        this.finish();\n    }\n    save(values) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let entity = yield this.hydrate(values, this._entity);\n            yield entity.save();\n        });\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            this._form = new Form_1.Form(this.findBy(this._formSelector), (values) => __awaiter(this, void 0, void 0, function* () {\n                this.showLoadingSymbol();\n                try {\n                    yield this.save(values);\n                    this.saveListener();\n                }\n                catch (e) {\n                    console.error(e);\n                    this._form.setErrors({ \"error\": e.message });\n                }\n                finally {\n                    this.removeLoadingSymbol();\n                }\n            }));\n            if (js_helper_1.Helper.isNotNull(window[\"CKEditor\"])) {\n                Object.keys(this._ckEditorConfig).forEach(selector => {\n                    this.findBy(selector, true).forEach((e) => __awaiter(this, void 0, void 0, function* () {\n                        this._form.addEditor(yield CKEditor.create(e, this._ckEditorConfig[selector]));\n                    }));\n                });\n            }\n            this._form.addValidator((values) => __awaiter(this, void 0, void 0, function* () {\n                return yield this.validate(values, this._form);\n            }));\n            return res;\n        });\n    }\n}\nexports.ModifyEntitySite = ModifyEntitySite;\n//# sourceMappingURL=ModifyEntitySite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetupEasySync1000000000500 = void 0;\nconst typeorm_1 = require(\"typeorm\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nclass SetupEasySync1000000000500 {\n    up(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield queryRunner.dropTable(\"last_sync_dates\", true);\n            yield this._addLastSyncDates(queryRunner);\n        });\n    }\n    _addLastSyncDates(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let lastSyncDatesTable = new typeorm_1.Table({\n                name: \"last_sync_dates\",\n                columns: [\n                    {\n                        name: \"id\",\n                        type: \"Integer\",\n                        isPrimary: true,\n                        isGenerated: true,\n                        generationStrategy: \"increment\",\n                    },\n                    {\n                        name: \"model\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n                        isNullable: true\n                    },\n                    {\n                        name: \"lastSynced\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.DATE,\n                        isNullable: true\n                    },\n                    {\n                        name: \"where\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.TEXT,\n                    }\n                ]\n            });\n            return yield queryRunner.createTable(lastSyncDatesTable, true);\n        });\n    }\n    down(queryRunner) {\n        return undefined;\n    }\n}\nexports.SetupEasySync1000000000500 = SetupEasySync1000000000500;\n//# sourceMappingURL=SetupEasySync.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./shared/EasySyncBaseModel\"), exports);\n__exportStar(require(\"./shared/EasySyncPartialModel\"), exports);\n__exportStar(require(\"./shared/FileMedium\"), exports);\n__exportStar(require(\"./shared/migrations/AddFileMediumMigration\"), exports);\n//# sourceMappingURL=shared.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EasySyncBaseModel = void 0;\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nconst shared_1 = require(\"js-helper/dist/shared\");\nclass EasySyncBaseModel extends cordova_sites_database_1.BaseModel {\n    constructor() {\n        super();\n        this._delegate = null;\n        this.createdAt = new Date();\n        this.updatedAt = new Date();\n        this.version = 1;\n        this.deleted = false;\n    }\n    toJSON(includeFull) {\n        let relations = this.constructor.getRelationDefinitions();\n        let columns = this.constructor.getColumnDefinitions();\n        let obj = {};\n        Object.keys(columns).forEach(attribute => {\n            obj[attribute] = this[attribute];\n        });\n        Object.keys(relations).forEach(relationName => {\n            if (includeFull === true) {\n                obj[relationName] = this[relationName];\n            }\n            else {\n                if (Array.isArray(this[relationName])) {\n                    let ids = [];\n                    this[relationName].forEach(child => (child && ids.push(child.id)));\n                    obj[relationName] = ids;\n                }\n                else if (this[relationName] instanceof cordova_sites_database_1.BaseModel) {\n                    obj[relationName] = this[relationName].id;\n                }\n                else {\n                    obj[relationName] = null;\n                }\n            }\n        });\n        return obj;\n    }\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"createdAt\"] = {\n            type: cordova_sites_database_1.BaseDatabase.TYPES.DATE\n        };\n        columns[\"updatedAt\"] = {\n            type: cordova_sites_database_1.BaseDatabase.TYPES.DATE\n        };\n        columns[\"version\"] = {\n            type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER\n        };\n        columns[\"deleted\"] = {\n            type: cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN\n        };\n        return columns;\n    }\n    static _fromJson(jsonObjects, entities, includeRelations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            entities = entities || [];\n            let isArray = Array.isArray(jsonObjects);\n            if (!isArray) {\n                jsonObjects = [jsonObjects];\n            }\n            if (!Array.isArray(entities)) {\n                entities = [entities];\n            }\n            let loadPromises = [];\n            let addLoadPromises = [];\n            jsonObjects.forEach((jsonObject, index) => {\n                addLoadPromises.push(new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                    let entity = null;\n                    if (entities.length > index) {\n                        entity = entities[index];\n                    }\n                    else if (shared_1.Helper.isNotNull(jsonObject.id)) {\n                        entity = yield this.findById(jsonObject.id, this.getRelations());\n                    }\n                    if (entity === null) {\n                        entity = new this();\n                    }\n                    if (!jsonObject.version && jsonObject.version !== 0) {\n                        jsonObject.version = 1;\n                    }\n                    entities[index] = Object.assign(entity, jsonObject);\n                    this._handleColumns(entities[index]);\n                    this._handleRelations(entities[index], includeRelations, loadPromises);\n                    resolve();\n                })));\n            });\n            //addLoadPromises adds other loadPromises. Therefore wait until done, then wait for other\n            yield Promise.all(addLoadPromises);\n            yield Promise.all(loadPromises);\n            if (!isArray) {\n                entities = (entities.length > 0) ? entities[0] : null;\n            }\n            return entities;\n        });\n    }\n    static _handleRelations(entity, includeRelations, loadPromises) {\n        let relations = this.getRelationDefinitions();\n        Object.keys(relations).forEach(relationName => {\n            let values = entity[relationName];\n            if (typeof values === \"number\" || (Array.isArray(values) && values.length >= 1 && typeof values[0] === \"number\")) {\n                if (includeRelations === true) {\n                    let loadPromise = null;\n                    if (Array.isArray(values)) {\n                        loadPromise = cordova_sites_database_1.BaseDatabase.getModel(relations[relationName].target).findByIds(values);\n                    }\n                    else {\n                        loadPromise = cordova_sites_database_1.BaseDatabase.getModel(relations[relationName].target).findById(values);\n                    }\n                    loadPromises.push(loadPromise.then(value => {\n                        entity[relationName] = value;\n                    }));\n                }\n                else if (includeRelations === false) {\n                    if (relations[relationName].type === \"many-to-many\" || relations[relationName].type === \"one-to-many\") {\n                        entity[relationName] = [];\n                    }\n                    else {\n                        entity[relationName] = null;\n                    }\n                }\n            }\n        });\n    }\n    static _handleColumns(entity) {\n        let schemaDefinition = this.getSchemaDefinition();\n        let columns = schemaDefinition[\"columns\"];\n        Object.keys(columns).forEach(columnName => {\n            if (columns[columnName].escapeHTML) {\n                entity[columnName] = shared_1.XSSHelper.escapeHTML(entity[columnName]);\n            }\n            if (columns[columnName].escapeJS) {\n                entity[columnName] = shared_1.XSSHelper.escapeJS(entity[columnName]);\n            }\n        });\n    }\n    static prepareSync(entities) {\n        return entities;\n    }\n}\nexports.EasySyncBaseModel = EasySyncBaseModel;\nEasySyncBaseModel.delegateClass = null;\nEasySyncBaseModel.CAN_BE_SYNCED = true;\n//# sourceMappingURL=EasySyncBaseModel.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EasySyncPartialModel = void 0;\nconst EasySyncBaseModel_1 = require(\"./EasySyncBaseModel\");\nconst _typeorm = require(\"typeorm\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst XSSHelper_1 = require(\"js-helper/dist/shared/XSSHelper\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nlet typeorm = _typeorm;\n// if (typeorm.default) {\n//     typeorm = typeorm.default;\n// }\nclass EasySyncPartialModel extends EasySyncBaseModel_1.EasySyncBaseModel {\n    static findByIds(ids, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.find({\n                \"id\": typeorm.In(ids)\n            }, null, null, null, relations);\n        });\n    }\n    static findById(id, relations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.findOne({\n                \"id\": id\n            }, null, null, relations);\n        });\n    }\n    static findByClientId(id, relations) {\n        const _super = Object.create(null, {\n            findById: { get: () => super.findById }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.findById.call(this, id, relations);\n        });\n    }\n    static findByClientIds(ids, relations) {\n        const _super = Object.create(null, {\n            findById: { get: () => super.findById }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.findById.call(this, ids, relations);\n        });\n    }\n    toJSON(includeFull) {\n        let relations = this.constructor.getRelationDefinitions();\n        let columns = this.constructor.getColumnDefinitions();\n        let obj = {};\n        Object.keys(columns).forEach(attribute => {\n            if (attribute !== \"clientId\") {\n                obj[attribute] = this[attribute];\n            }\n        });\n        Object.keys(relations).forEach(relationName => {\n            if (includeFull === true) {\n                obj[relationName] = this[relationName];\n            }\n            else {\n                if (Array.isArray(this[relationName])) {\n                    let ids = [];\n                    this[relationName].forEach(child => (child && ids.push(child.id)));\n                    obj[relationName] = ids;\n                }\n                else if (this[relationName] instanceof cordova_sites_database_1.BaseModel) {\n                    obj[relationName] = this[relationName].id;\n                }\n                else {\n                    obj[relationName] = null;\n                }\n            }\n        });\n        return obj;\n    }\n    static _fromJson(jsonObjects, entities, includeRelations) {\n        return __awaiter(this, void 0, void 0, function* () {\n            entities = entities || [];\n            let isArray = Array.isArray(jsonObjects);\n            if (!isArray) {\n                jsonObjects = [jsonObjects];\n            }\n            if (!Array.isArray(entities)) {\n                entities = [entities];\n            }\n            let loadPromises = [];\n            let addLoadPromises = [];\n            jsonObjects.forEach((jsonObject, index) => {\n                addLoadPromises.push(new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                    let entity = null;\n                    if (entities.length > index) {\n                        entity = entities[index];\n                    }\n                    else if (Helper_1.Helper.isNotNull(jsonObject.id)) {\n                        entity = yield this.findById(jsonObject.id, this.getRelations());\n                    }\n                    if (entity === null) {\n                        entity = new this();\n                    }\n                    if (!jsonObject.version) {\n                        jsonObject.version = 1;\n                    }\n                    entities[index] = Object.assign(entity, jsonObject);\n                    this._handleColumns_(entities[index]);\n                    this._handleRelations_(entities[index], includeRelations, loadPromises);\n                    resolve();\n                })));\n            });\n            //addLoadPromises adds other loadPromises. Therefore wait until done, then wait for other\n            yield Promise.all(addLoadPromises);\n            yield Promise.all(loadPromises);\n            if (!isArray) {\n                entities = (entities.length > 0) ? entities[0] : null;\n            }\n            return entities;\n        });\n    }\n    static _handleRelations_(entity, includeRelations, loadPromises) {\n        let relations = this.getRelationDefinitions();\n        Object.keys(relations).forEach(relationName => {\n            let values = entity[relationName];\n            if (typeof values === \"number\" || (Array.isArray(values) && values.length >= 1 && typeof values[0] === \"number\")) {\n                if (includeRelations === true) {\n                    let loadPromise = null;\n                    if (Array.isArray(values)) {\n                        loadPromise = cordova_sites_database_1.BaseDatabase.getModel(relations[relationName].target).findByIds(values);\n                    }\n                    else {\n                        loadPromise = cordova_sites_database_1.BaseDatabase.getModel(relations[relationName].target).findById(values);\n                    }\n                    loadPromises.push(loadPromise.then(value => {\n                        entity[relationName] = value;\n                    }));\n                }\n                else if (includeRelations === false) {\n                    if (relations[relationName].type === \"many-to-many\" || relations[relationName].type === \"one-to-many\") {\n                        entity[relationName] = [];\n                    }\n                    else {\n                        entity[relationName] = null;\n                    }\n                }\n            }\n        });\n    }\n    static _handleColumns_(entity) {\n        let schemaDefinition = this.getSchemaDefinition();\n        let columns = schemaDefinition[\"columns\"];\n        Object.keys(columns).forEach(columnName => {\n            if (columns[columnName].escapeHTML) {\n                entity[columnName] = XSSHelper_1.XSSHelper.escapeHTML(entity[columnName]);\n            }\n            if (columns[columnName].escapeJS) {\n                entity[columnName] = XSSHelper_1.XSSHelper.escapeJS(entity[columnName]);\n            }\n        });\n    }\n}\nexports.EasySyncPartialModel = EasySyncPartialModel;\nEasySyncPartialModel.CAN_BE_SYNCED = true;\n//# sourceMappingURL=EasySyncPartialModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileMedium = void 0;\nconst EasySyncBaseModel_1 = require(\"./EasySyncBaseModel\");\nconst BaseDatabase_1 = require(\"cordova-sites-database/dist/BaseDatabase\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nclass FileMedium extends EasySyncBaseModel_1.EasySyncBaseModel {\n    constructor() {\n        super(...arguments);\n        this.saveOffline = true;\n        this._isDownloaded = true;\n    }\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"src\"] = BaseDatabase_1.BaseDatabase.TYPES.MEDIUMTEXT;\n        columns[\"saveOffline\"] = { type: BaseDatabase_1.BaseDatabase.TYPES.BOOLEAN, default: 1 };\n        return columns;\n    }\n    getServerUrl(appendDate) {\n        appendDate = Helper_1.Helper.nonNull(appendDate, true);\n        if (!this.src.startsWith(\"http\") && !this.src.startsWith(\"//\") && !this.src.startsWith(\"data\")) {\n            let path = FileMedium.PUBLIC_PATH + this.src;\n            if (appendDate) {\n                path += \"?t=\" + new Date(this.updatedAt).getTime();\n            }\n            return path;\n        }\n        return this.src;\n    }\n    getUrl() {\n        if (device.platform !== \"browser\" && this.saveOffline && this._isDownloaded && Helper_1.Helper.isNotNull(this.id) && !this.src.startsWith(\"data\") && !this.src.startsWith(\"http\")) {\n            return \"cdvfile://localhost/persistent/\" + this.src;\n        }\n        else {\n            return this.getServerUrl();\n        }\n    }\n    toString() {\n        console.warn(\"to string called on FileMedium. Only for dependency. Please look inside your sourcecode\");\n        return this.getUrl();\n    }\n}\nexports.FileMedium = FileMedium;\nFileMedium.PUBLIC_PATH = \"./\";\nFileMedium.SCHEMA_NAME = \"FileMedium\";\nBaseDatabase_1.BaseDatabase.addModel(FileMedium);\n//# sourceMappingURL=FileMedium.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AddFileMediumMigration1000000011000 = void 0;\nconst js_helper_1 = require(\"js-helper\");\nconst FileMedium_1 = require(\"../FileMedium\");\nclass AddFileMediumMigration1000000011000 {\n    down(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve(undefined);\n        });\n    }\n    up(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let table = js_helper_1.MigrationHelper.createTableFromModelClass(FileMedium_1.FileMedium);\n            table.columns.forEach(column => {\n                if (column.name === \"src\") {\n                    column.type = js_helper_1.MigrationHelper.isServer() ? \"MEDIUMTEXT\" : \"TEXT\";\n                }\n            });\n            yield queryRunner.createTable(table);\n        });\n    }\n}\nexports.AddFileMediumMigration1000000011000 = AddFileMediumMigration1000000011000;\n//# sourceMappingURL=AddFileMediumMigration.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client/js/Context/UserSite\"), exports);\n__exportStar(require(\"./client/js/Dialog/SelectUserDialog\"), exports);\n__exportStar(require(\"./client/js/MenuAction/StartUserSiteMenuAction\"), exports);\n__exportStar(require(\"./client/js/MenuAction/UserMenuAction\"), exports);\n__exportStar(require(\"./client/js/OfflineUserManager\"), exports);\n__exportStar(require(\"./client/js/Site/ChangeUserSite\"), exports);\n__exportStar(require(\"./client/js/Site/ForgotPasswordSite\"), exports);\n__exportStar(require(\"./client/js/Site/LoginSite\"), exports);\n__exportStar(require(\"./client/js/Site/NotAllowedSite\"), exports);\n__exportStar(require(\"./client/js/Site/RegistrationSite\"), exports);\n__exportStar(require(\"./client/js/UserManager\"), exports);\n__exportStar(require(\"./client/js/translationInit\"), exports);\n//# sourceMappingURL=client.js.map","module.exports = __webpack_public_path__ + \"html/selectUserDialog.html\";","module.exports = __webpack_public_path__ + \"html/changeUserSite.html\";","module.exports = __webpack_public_path__ + \"html/forgotPasswordSite.html\";","module.exports = __webpack_public_path__ + \"html/loginSite.html\";","module.exports = __webpack_public_path__ + \"html/notAllowedSite.html\";","module.exports = __webpack_public_path__ + \"html/registrationSite.html\";","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserSite = void 0;\nconst shared_1 = require(\"js-helper/dist/shared\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst UserManager_1 = require(\"../UserManager\");\nconst LoginSite_1 = require(\"../Site/LoginSite\");\nconst NotAllowedSite_1 = require(\"../Site/NotAllowedSite\");\nclass UserSite extends client_1.DelegateSite {\n    constructor(site, access, allowOfflineAccess) {\n        super(site);\n        this._access = access;\n        this._allowOfflineAccess = shared_1.Helper.nonNull(allowOfflineAccess, false);\n    }\n    onConstruct(constructParameters) {\n        const _super = Object.create(null, {\n            onConstruct: { get: () => super.onConstruct }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield UserManager_1.UserManager.getInstance().waitForGetMe();\n            if (yield this._checkRights()) {\n                let res = yield _super.onConstruct.call(this, constructParameters);\n                UserManager_1.UserManager.getInstance().addLoginChangeCallback(() => __awaiter(this, void 0, void 0, function* () {\n                    yield this._checkRights();\n                }), false);\n                return res;\n            }\n        });\n    }\n    _checkRights() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(UserManager_1.UserManager.getInstance().hasAccess(this._access) || (this._allowOfflineAccess && (yield UserManager_1.UserManager.getInstance().hasOfflineAccess(this._access))))) {\n                // if (this.isShowing() && !this.isDestroying()) {\n                //     await this.startSite(NotAllowedSite);\n                // }\n                if (UserManager_1.UserManager.getInstance().isOnline() && !UserManager_1.UserManager.getInstance().isLoggedIn() && !(this._site instanceof LoginSite_1.LoginSite)) {\n                    this.startSite(LoginSite_1.LoginSite, {\n                        deepLink: this._site._siteManager.getDeepLinkFor(this._site),\n                        args: this._site.getParameters()\n                    });\n                }\n                else if (this._site._siteManager.getCurrentSite() === this._site && !this.isDestroying()) {\n                    new client_1.Toast(\"wrong rights\").show();\n                    yield this.startSite(NotAllowedSite_1.NotAllowedSite);\n                }\n                if (!this.isDestroying()) {\n                    yield this.finish();\n                }\n                return false;\n            }\n            return true;\n        });\n    }\n    onStart(args) {\n        const _super = Object.create(null, {\n            onStart: { get: () => super.onStart }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (yield this._checkRights()) {\n                yield _super.onStart.call(this, args);\n            }\n        });\n    }\n}\nexports.UserSite = UserSite;\n//# sourceMappingURL=UserSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectUserDialog = void 0;\nconst Dialog_1 = require(\"cordova-sites/dist/client/js/Dialog/Dialog\");\nconst ViewInflater_1 = require(\"cordova-sites/dist/client/js/ViewInflater\");\nconst DataManager_1 = require(\"cordova-sites/dist/client/js/DataManager\");\nconst ViewHelper_1 = require(\"js-helper/dist/client/ViewHelper\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst view = require(\"../../html/dialog/selectUserDialog.html\");\nclass SelectUserDialog extends Dialog_1.Dialog {\n    constructor() {\n        super(ViewInflater_1.ViewInflater.getInstance().load(view).then((view) => __awaiter(this, void 0, void 0, function* () {\n            this._loadUserTimeout = null;\n            this._usernameInput =\n                view.querySelector(\"#username-input\");\n            this._usernameInput.addEventListener(\"keydown\", () => {\n                clearTimeout(this._loadUserTimeout);\n                this._loadUserTimeout = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                    yield this._loadUsers(this._usernameInput.value);\n                }), 500);\n            });\n            this._userContainer = view.querySelector(\"#user-container\");\n            this._userTemplate = view.querySelector(\"#user-template\");\n            this._userTemplate.remove();\n            this._userTemplate.removeAttribute(\"id\");\n            this._loadUsers();\n            return view;\n        })), \"select user\");\n    }\n    _loadUsers(username) {\n        return __awaiter(this, void 0, void 0, function* () {\n            debugger;\n            let res = yield DataManager_1.DataManager.load(\"user/listUsers\" + DataManager_1.DataManager.buildQuery({ username: Helper_1.Helper.nonNull(username, \"\") }));\n            if (res[\"success\"]) {\n                ViewHelper_1.ViewHelper.removeAllChildren(this._userContainer);\n                let users = res[\"data\"];\n                users.forEach(user => {\n                    let userElement = this._userTemplate.cloneNode(true);\n                    userElement.querySelector(\".name\").innerText = user.username;\n                    userElement.addEventListener(\"click\", () => {\n                        this._result = user;\n                        this.close();\n                    });\n                    this._userContainer.appendChild(userElement);\n                });\n            }\n        });\n    }\n}\nexports.SelectUserDialog = SelectUserDialog;\n//# sourceMappingURL=SelectUserDialog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StartUserSiteMenuAction = void 0;\nconst UserMenuAction_1 = require(\"./UserMenuAction\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nclass StartUserSiteMenuAction extends UserMenuAction_1.UserMenuAction {\n    constructor(name, access, site, showFor, order, icon) {\n        super(name, access, () => {\n            if (client_1.StartSiteMenuAction._app) {\n                if (Array.isArray(site) && site.length >= 2) {\n                    client_1.StartSiteMenuAction._app.startSite(site[0], site[1]);\n                }\n                else {\n                    client_1.StartSiteMenuAction._app.startSite(site);\n                }\n            }\n        }, showFor, order, icon);\n    }\n}\nexports.StartUserSiteMenuAction = StartUserSiteMenuAction;\n//# sourceMappingURL=StartUserSiteMenuAction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserMenuAction = void 0;\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst UserManager_1 = require(\"../UserManager\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nclass UserMenuAction extends client_1.MenuAction {\n    constructor(name, access, action, showFor, order, icon) {\n        super(name, action, showFor, order, icon);\n        this._access = access;\n        this._loginChangedCallbackId = UserManager_1.UserManager.getInstance().addLoginChangeCallback(() => {\n            this.redraw();\n        });\n    }\n    isVisible() {\n        return (super.isVisible() && UserManager_1.UserManager.getInstance().hasAccess(this._access));\n    }\n    isActivated() {\n        return (super.isActivated() && UserManager_1.UserManager.getInstance().hasAccess(this._access));\n    }\n    copy(action) {\n        let copiedAction = Helper_1.Helper.nonNull(action, new UserMenuAction());\n        copiedAction._access = this._access;\n        return super.copy(copiedAction);\n    }\n}\nexports.UserMenuAction = UserMenuAction;\n//# sourceMappingURL=UserMenuAction.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OfflineUserManager = void 0;\nconst client_1 = require(\"cordova-sites-easy-sync/dist/client\");\nconst client_2 = require(\"cordova-sites/dist/client\");\nconst UserManager_1 = require(\"./UserManager\");\nconst Role_1 = require(\"../../shared/v1/model/Role\");\nconst User_1 = require(\"../../shared/v1/model/User\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nclass OfflineUserManager extends UserManager_1.UserManager {\n    constructor() {\n        super();\n        this._userData = {\n            id: null,\n            loggedIn: false,\n            online: true,\n            username: null,\n            email: null,\n            accesses: OfflineUserManager.LOGGED_OUT_ACCESSES,\n        };\n    }\n    _doGetMe() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let userId = yield client_2.NativeStoragePromise.getItem(\"user-manager-user-id\");\n            if (Helper_1.Helper.isNotNull(userId)) {\n                let user = yield User_1.User.findById(userId, User_1.User.getRelations());\n                if (Helper_1.Helper.isNotNull(user) && user.activated && !user.blocked) {\n                    yield this._handleLoginFromUser(user);\n                }\n            }\n            return this._userData;\n        });\n    }\n    _handleLoginFromUser(user) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let accesses = [];\n            let roles = user.roles;\n            let roleIds = [];\n            roles.forEach(role => {\n                roleIds.push(role.id);\n            });\n            roles = yield Role_1.Role.findByIds(roleIds, [\"accesses\"]);\n            yield Helper_1.Helper.asyncForEach(roles, (role) => __awaiter(this, void 0, void 0, function* () {\n                accesses.push(...yield this._getAccessesFromRole(role));\n            }));\n            let accessNames = [];\n            accesses.forEach(access => {\n                accessNames.push(access.name);\n            });\n            this._userData = {\n                id: user.id,\n                loggedIn: true,\n                online: true,\n                username: user.username,\n                email: user.email,\n                accesses: accessNames,\n            };\n        });\n    }\n    _doLogin(email, password, saveLogin) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let user = yield User_1.User.findOne({\n                \"email\": email,\n                \"password\": this._hashPassword(password),\n                \"activated\": true,\n                \"blocked\": false,\n            }, undefined, undefined, User_1.User.getRelations());\n            if (user) {\n                yield this._handleLoginFromUser(user);\n                if (saveLogin) {\n                    yield client_2.NativeStoragePromise.setItem(\"user-manager-user-id\", user.id);\n                }\n                return true;\n            }\n            return false;\n        });\n    }\n    _doLogout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._userData = {\n                id: null,\n                loggedIn: false,\n                online: true,\n                username: null,\n                email: null,\n                accesses: OfflineUserManager.LOGGED_OUT_ACCESSES,\n            };\n            yield client_2.NativeStoragePromise.remove(\"user-manager-user-id\");\n            return false;\n        });\n    }\n    _getAccessesFromRole(role) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let accesses = role.accesses;\n            let repo = yield client_1.EasySyncClientDb.getInstance()._getRepository(Role_1.Role.getSchemaName());\n            let parents = yield repo.createQueryBuilder(Role_1.Role.getSchemaName())\n                .leftJoinAndSelect(Role_1.Role.getSchemaName() + '.accesses', \"access\")\n                .leftJoinAndSelect(Role_1.Role.getSchemaName() + '.children', \"child\")\n                .where('child.id = :id', { id: role.id })\n                .getMany();\n            yield Helper_1.Helper.asyncForEach(parents, (role) => __awaiter(this, void 0, void 0, function* () {\n                let otherAccesses = yield this._getAccessesFromRole(role);\n                accesses.push(...otherAccesses);\n            }));\n            return accesses;\n        });\n    }\n    _doRegister(email, username, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let errors = {};\n            let users = yield Promise.all([\n                User_1.User.findOne({ \"email\": email }),\n                User_1.User.findOne({ \"username\": username }),\n            ]);\n            if (Helper_1.Helper.isNotNull(users[0])) {\n                errors[\"email\"] = \"email is already in use.\";\n            }\n            if (Helper_1.Helper.isNotNull(users[1])) {\n                errors[\"username\"] = \"username is already in use.\";\n            }\n            if (Object.keys(errors).length > 0) {\n                return errors;\n            }\n            let user = new User_1.User();\n            user.id = yield OfflineUserManager._getNewId();\n            user.email = email;\n            user.password = this._hashPassword(password);\n            user.username = username;\n            user.roles = OfflineUserManager.DEFAULT_ROLES;\n            user.activated = true;\n            yield user.save();\n            // user.roles\n            yield this.login(email, password);\n            return user;\n        });\n    }\n    static _getNewId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Helper_1.Helper.isNull(OfflineUserManager._lastId)) {\n                let user = yield User_1.User.findOne(undefined, { \"id\": \"DESC\" });\n                OfflineUserManager._lastId = user.id;\n            }\n            OfflineUserManager._lastId++;\n            return OfflineUserManager._lastId;\n        });\n    }\n    _hashPassword(pw) {\n        return pw;\n    }\n}\nexports.OfflineUserManager = OfflineUserManager;\nOfflineUserManager.LOGGED_OUT_ACCESSES = UserManager_1.UserManager.OFFLINE_ACCESSES;\nOfflineUserManager.DEFAULT_ROLES = [];\nOfflineUserManager._lastId = null;\n//# sourceMappingURL=OfflineUserManager.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChangeUserSite = void 0;\nconst MenuSite_1 = require(\"cordova-sites/dist/client/js/Context/MenuSite\");\nconst UserSite_1 = require(\"../Context/UserSite\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst DataManager_1 = require(\"cordova-sites/dist/client/js/DataManager\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst ViewHelper_1 = require(\"js-helper/dist/client/ViewHelper\");\nconst UserMenuAction_1 = require(\"../MenuAction/UserMenuAction\");\nconst LoginSite_1 = require(\"./LoginSite\");\nconst SelectUserDialog_1 = require(\"../Dialog/SelectUserDialog\");\nconst view = require(\"./../../html/sites/changeUserSite.html\");\nclass ChangeUserSite extends MenuSite_1.MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n        this.addDelegate(new UserSite_1.UserSite(this, ChangeUserSite.ACCESS));\n    }\n    onConstruct(constructParameters) {\n        const _super = Object.create(null, {\n            onConstruct: { get: () => super.onConstruct }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onConstruct.call(this, constructParameters);\n            let data;\n            if (Helper_1.Helper.isSet(constructParameters, \"id\")) {\n                data = yield DataManager_1.DataManager.load(ChangeUserSite.LOAD_USER_INFOS_URL + DataManager_1.DataManager.buildQuery({ id: constructParameters[\"id\"] }));\n            }\n            if (!data || data.success !== true) {\n                new client_1.Toast(data.message).show();\n                this.finish();\n            }\n            this._roles = data.roles;\n            this._userData = data.userData;\n            return res;\n        });\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            this.findBy(\"#username\").innerText = this._userData.username;\n            this._hasRoleContainer = this.findBy(\"#has-role-container\");\n            this._availableRoleContainer = this.findBy(\"#available-role-container\");\n            this._hasRoleTemplate = this.findBy(\"#has-role-template\");\n            this._availableRoleTemplate = this.findBy(\"#available-role-template\");\n            this._hasRoleTemplate.removeAttribute(\"id\");\n            this._availableRoleTemplate.removeAttribute(\"id\");\n            this._hasRoleTemplate.remove();\n            this._availableRoleTemplate.remove();\n            this.updateRoles();\n            return res;\n        });\n    }\n    updateRoles() {\n        let userRoles = [];\n        let availableRoles = [];\n        this._roles.forEach(role => {\n            if (this._userData.roleIds.indexOf(role.id) !== -1) {\n                userRoles.push(role);\n            }\n            else {\n                availableRoles.push(role);\n            }\n        });\n        ViewHelper_1.ViewHelper.removeAllChildren(this._hasRoleContainer);\n        userRoles.forEach((role, i) => {\n            let elem = this._hasRoleTemplate.cloneNode(true);\n            elem.querySelector(\".role-name\").innerText = role.name;\n            elem.querySelector(\".remove-role\").addEventListener(\"click\", () => __awaiter(this, void 0, void 0, function* () {\n                this.showLoadingSymbol();\n                let res = yield DataManager_1.DataManager.send(ChangeUserSite.CHANGE_USER_ROLE_URL, {\n                    id: this._userData.id,\n                    roleId: role.id,\n                    addRole: false\n                });\n                if (res.success) {\n                    this._userData.roleIds.splice(this._userData.roleIds.indexOf(role.id), 1);\n                    this.updateRoles();\n                }\n                this.removeLoadingSymbol();\n            }));\n            this._hasRoleContainer.appendChild(elem);\n        });\n        ViewHelper_1.ViewHelper.removeAllChildren(this._availableRoleContainer);\n        availableRoles.forEach(role => {\n            let elem = this._availableRoleTemplate.cloneNode(true);\n            elem.querySelector(\".role-name\").innerText = role.name;\n            elem.querySelector(\".add-role\").addEventListener(\"click\", () => __awaiter(this, void 0, void 0, function* () {\n                this.showLoadingSymbol();\n                let res = yield DataManager_1.DataManager.send(ChangeUserSite.CHANGE_USER_ROLE_URL, {\n                    id: this._userData.id,\n                    roleId: role.id,\n                    addRole: true\n                });\n                if (res.success) {\n                    this._userData.roleIds.push(role.id);\n                    this.updateRoles();\n                }\n                this.removeLoadingSymbol();\n            }));\n            this._availableRoleContainer.appendChild(elem);\n        });\n    }\n}\nexports.ChangeUserSite = ChangeUserSite;\nChangeUserSite.ACCESS = \"admin\";\nChangeUserSite.LOAD_USER_INFOS_URL = \"/user/userRoles\";\nChangeUserSite.CHANGE_USER_ROLE_URL = \"/user/changeUserRole\";\nChangeUserSite.ADD_CHANGE_USER_ACTION = true;\nclient_1.App.addInitialization(app => {\n    if (ChangeUserSite.ADD_CHANGE_USER_ACTION) {\n        client_1.NavbarFragment.defaultActions.push(new UserMenuAction_1.UserMenuAction(\"change user\", ChangeUserSite.ACCESS, () => __awaiter(void 0, void 0, void 0, function* () {\n            let user = yield new SelectUserDialog_1.SelectUserDialog().show();\n            yield app.startSite(ChangeUserSite, { \"id\": user[\"id\"] });\n        })));\n    }\n    app.addDeepLink(\"login\", LoginSite_1.LoginSite);\n});\n//# sourceMappingURL=ChangeUserSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForgotPasswordSite = void 0;\nconst UserSite_1 = require(\"../Context/UserSite\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst view = require(\"./../../html/sites/forgotPasswordSite.html\");\nconst UserManager_1 = require(\"../UserManager\");\nconst LoginSite_1 = require(\"./LoginSite\");\nclass ForgotPasswordSite extends client_1.MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n        this.addDelegate(new UserSite_1.UserSite(this, LoginSite_1.LoginSite.ACCESS));\n    }\n    onConstruct(constructParameters) {\n        const _super = Object.create(null, {\n            onConstruct: { get: () => super.onConstruct }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onConstruct.call(this, constructParameters);\n            if (client_1.Helper.isSet(constructParameters[\"t\"])) {\n                this._token = constructParameters[\"t\"];\n            }\n            return res;\n        });\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            let form = new client_1.Form(this.findBy(\"#forgot-password-form\"), (data) => __awaiter(this, void 0, void 0, function* () {\n                if (yield UserManager_1.UserManager.getInstance().sendForgotPasswordEmail(data[\"email\"])) {\n                    new client_1.Toast(\"forgot-password-mail sent\").show();\n                    yield this.finish();\n                }\n                else {\n                    form.setErrors({\n                        \"email\": \"email is not in our database\"\n                    });\n                }\n            }));\n            let resetForm = new client_1.Form(this.findBy(\"#reset-password-form\"), (data) => __awaiter(this, void 0, void 0, function* () {\n                if (yield UserManager_1.UserManager.getInstance().resetPassword(this._token, data[\"password1\"])) {\n                    new client_1.Toast(\"password resetted\").show();\n                    yield this.finish();\n                }\n                else {\n                    yield new client_1.Toast(\"token is not valid!\").show();\n                }\n            }));\n            resetForm.addValidator(data => {\n                let errors = {};\n                let hasErrors = false;\n                if (data[\"password1\"].trim() === \"\") {\n                    hasErrors = true;\n                    errors[\"password1\"] = \"no password set\";\n                }\n                if (data[\"password1\"] !== data[\"password2\"]) {\n                    hasErrors = true;\n                    errors[\"password2\"] = \"not equal to password1\";\n                }\n                if (hasErrors) {\n                    return errors;\n                }\n                else {\n                    return true;\n                }\n            });\n            if (this._token) {\n                this.findBy(\"#reset-password\").classList.remove(\"hidden\");\n                this.findBy(\"#forgot-password\").classList.add(\"hidden\");\n            }\n            return res;\n        });\n    }\n}\nexports.ForgotPasswordSite = ForgotPasswordSite;\nclient_1.App.addInitialization(app => {\n    app.addDeepLink(\"forgotPW\", ForgotPasswordSite);\n});\n//# sourceMappingURL=ForgotPasswordSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoginSite = void 0;\nconst UserSite_1 = require(\"../Context/UserSite\");\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst view = require(\"./../../html/sites/loginSite.html\");\nconst StartUserSiteMenuAction_1 = require(\"../MenuAction/StartUserSiteMenuAction\");\nconst UserManager_1 = require(\"../UserManager\");\nconst UserMenuAction_1 = require(\"../MenuAction/UserMenuAction\");\nconst ForgotPasswordSite_1 = require(\"./ForgotPasswordSite\");\nclass LoginSite extends client_1.MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n        this.addDelegate(new UserSite_1.UserSite(this, LoginSite.ACCESS));\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            let form = new client_1.Form(this.findBy(\"#login-form\"), (data) => __awaiter(this, void 0, void 0, function* () {\n                // await this.showLoadingSymbol();\n                if (yield UserManager_1.UserManager.getInstance().login(data[\"email\"], data[\"password\"], client_1.Helper.isNotNull(data[\"saveLogin\"]))) {\n                    new client_1.Toast(\"welcome back\").show();\n                    yield this.finish();\n                }\n                else {\n                    form.setErrors({\n                        \"email\": \"email or password is wrong\"\n                    });\n                    // await this.removeLoadingSymbol();\n                }\n            }));\n            let listener = () => form.clearErrors();\n            this.findBy(\"#login-form [name=email]\").addEventListener(\"keydown\", listener);\n            this.findBy(\"#login-form [name=password]\").addEventListener(\"keydown\", listener);\n            this.findBy(\"#forgot-pw\").addEventListener(\"click\", () => __awaiter(this, void 0, void 0, function* () {\n                this.startSite(ForgotPasswordSite_1.ForgotPasswordSite);\n            }));\n            return res;\n        });\n    }\n}\nexports.LoginSite = LoginSite;\nLoginSite.ACCESS = \"loggedOut\";\nLoginSite.LOGOUT_ACCESS = \"loggedIn\";\nLoginSite.ADD_LOGIN_ACTION = true;\nLoginSite.ADD_LOGOUT_ACTION = true;\nclient_1.App.addInitialization(app => {\n    if (LoginSite.ADD_LOGIN_ACTION) {\n        client_1.NavbarFragment.defaultActions.push(new StartUserSiteMenuAction_1.StartUserSiteMenuAction(\"login\", LoginSite.ACCESS, LoginSite));\n    }\n    if (LoginSite.ADD_LOGOUT_ACTION) {\n        client_1.NavbarFragment.defaultActions.push(new UserMenuAction_1.UserMenuAction(\"logout\", LoginSite.LOGOUT_ACCESS, () => __awaiter(void 0, void 0, void 0, function* () {\n            yield UserManager_1.UserManager.getInstance().logout();\n        })));\n    }\n    app.addDeepLink(\"login\", LoginSite);\n});\n//# sourceMappingURL=LoginSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NotAllowedSite = void 0;\nconst MenuSite_1 = require(\"cordova-sites/dist/client/js/Context/MenuSite\");\nconst view = require(\"./../../html/sites/notAllowedSite.html\");\nclass NotAllowedSite extends MenuSite_1.MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n    }\n    onConstruct(constructParameters) {\n        return super.onConstruct(constructParameters);\n    }\n    onCreateMenu(navbar) {\n        return super.onCreateMenu(navbar);\n    }\n    onPause() {\n        const _super = Object.create(null, {\n            onPause: { get: () => super.onPause }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onPause.call(this);\n            yield this.finish();\n            return res;\n        });\n    }\n}\nexports.NotAllowedSite = NotAllowedSite;\n//# sourceMappingURL=NotAllowedSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RegistrationSite = void 0;\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst view = require(\"./../../html/sites/registrationSite.html\");\nconst UserSite_1 = require(\"../Context/UserSite\");\nconst StartUserSiteMenuAction_1 = require(\"../MenuAction/StartUserSiteMenuAction\");\nconst UserManager_1 = require(\"../UserManager\");\nconst User_1 = require(\"../../../shared/v1/model/User\");\nclass RegistrationSite extends client_1.MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n        this.addDelegate(new UserSite_1.UserSite(this, RegistrationSite.ACCESS));\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            let form = new client_1.Form(this.findBy(\"#registration-form\"), (data) => __awaiter(this, void 0, void 0, function* () {\n                let result = yield UserManager_1.UserManager.getInstance().register(data[\"email\"], data[\"username\"], data[\"password\"]);\n                if ((result instanceof User_1.User) || result === true) {\n                    yield new client_1.Toast(\"registration successful\").show();\n                    yield this.finish();\n                }\n                else {\n                    yield form.setErrors(result);\n                }\n            }));\n            form.addValidator(data => {\n                if (data[\"password\"] !== data[\"password2\"]) {\n                    return {\n                        \"password2\": \"the passwords do not match.\"\n                    };\n                }\n                return true;\n            });\n            // let listener = () => form.clearErrors();\n            // this.findBy(\"#login-form [name=email]\").addEventListener(\"keydown\", listener);\n            // this.findBy(\"#login-form [name=password]\").addEventListener(\"keydown\", listener);\n            return res;\n        });\n    }\n}\nexports.RegistrationSite = RegistrationSite;\nRegistrationSite.ACCESS = \"loggedOut\";\nRegistrationSite.ADD_REGISTRATION_ACTION = true;\nclient_1.App.addInitialization(app => {\n    if (RegistrationSite.ADD_REGISTRATION_ACTION) {\n        client_1.NavbarFragment.defaultActions.push(new StartUserSiteMenuAction_1.StartUserSiteMenuAction(\"registration\", RegistrationSite.ACCESS, RegistrationSite));\n    }\n    app.addDeepLink(\"registration\", RegistrationSite);\n});\n//# sourceMappingURL=RegistrationSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserManager = void 0;\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst User_1 = require(\"../../shared/v1/model/User\");\nclass UserManager {\n    constructor() {\n        this._defaultUserData = {\n            id: null,\n            loggedIn: false,\n            online: false,\n            username: null,\n            email: null,\n            accesses: UserManager.OFFLINE_ACCESSES,\n        };\n        this._userData = this._defaultUserData;\n        this._lastLoginChangeCallbackId = -1;\n        this._loginChangeCallbacks = {};\n        this._getMePromise = null;\n    }\n    addLoginChangeCallback(callback, callImmediately) {\n        this._lastLoginChangeCallbackId++;\n        this._loginChangeCallbacks[this._lastLoginChangeCallbackId] = callback;\n        if (client_1.Helper.nonNull(callImmediately, false)) {\n            callback(this._userData.loggedIn, this);\n        }\n        return this._lastLoginChangeCallbackId;\n    }\n    hasAccess(access) {\n        return (this._userData.accesses.indexOf(access) !== -1);\n    }\n    _checkChangedLogin(before) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._userData.loggedIn !== before.loggedIn || (this._userData.loggedIn === true && this._userData.id !== before.id)) {\n                yield this._callLoginChangeCallbacks();\n            }\n        });\n    }\n    _callLoginChangeCallbacks() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield client_1.Helper.asyncForEach(Object.keys(this._loginChangeCallbacks), callbackId => {\n                this._loginChangeCallbacks[callbackId](this._userData.loggedIn, this);\n            }, true);\n        });\n    }\n    getUserData() {\n        return this._userData;\n    }\n    getMe() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._getMePromise = new Promise((r) => __awaiter(this, void 0, void 0, function* () {\n                let before = this._userData;\n                let res = yield this._doGetMe();\n                yield this._checkChangedLogin(before);\n                r(res);\n            }));\n            return this._getMePromise;\n        });\n    }\n    waitForGetMe() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._getMePromise === null) {\n                this.getMe();\n            }\n            yield this._getMePromise;\n        });\n    }\n    login(email, password, saveLogin) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let before = this._userData;\n            let res = yield this._doLogin(email, password, saveLogin);\n            //do it after the result is returned\n            setTimeout(() => {\n                this._checkChangedLogin(before);\n            }, 1);\n            return res;\n        });\n    }\n    logout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let before = this._userData;\n            let res = yield this._doLogout();\n            yield this._checkChangedLogin(before);\n            if (!this._userData.loggedIn) {\n                yield new client_1.Toast(\"goodbye\").show();\n            }\n            return res;\n        });\n    }\n    register(email, username, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let before = this._userData;\n            let res = yield this._doRegister(email, username, password);\n            yield this._checkChangedLogin(before);\n            return res;\n        });\n    }\n    _doGetMe() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield UserManager.updateHeaders();\n            let data = yield client_1.DataManager.load(\"user\");\n            if (client_1.Helper.isSet(data, \"userData\")) {\n                yield client_1.NativeStoragePromise.setItem(\"user-data\", data.userData);\n                this._userData = data.userData;\n            }\n            else {\n                this._userData = this._defaultUserData;\n            }\n            this._updateAccessClasses();\n            if (client_1.Helper.isSet(data, \"token\")) {\n                client_1.DataManager.setHeader(\"Authorization\", \"Bearer \" + data.token);\n                sessionStorage.setItem(\"auth-token\", data.token);\n                if (client_1.Helper.isNotNull(yield client_1.NativeStoragePromise.getItem(\"auth-token\"))) {\n                    yield client_1.NativeStoragePromise.setItem(\"auth-token\", data.token);\n                }\n            }\n        });\n    }\n    _doLogin(email, password, saveLogin) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = yield client_1.DataManager.send(\"user/login\", {\n                \"email\": email,\n                \"password\": password\n            });\n            if (data.success) {\n                client_1.DataManager.setHeader(\"Authorization\", \"Bearer \" + data.token);\n                sessionStorage.setItem(\"auth-token\", data.token);\n                yield this._doGetMe();\n                if (saveLogin) {\n                    yield client_1.NativeStoragePromise.setItem(\"auth-token\", data.token);\n                }\n                return true;\n            }\n            else {\n                client_1.DataManager.setHeader(\"Authorization\", \"\");\n                sessionStorage.setItem(\"auth-token\", \"\");\n                yield client_1.NativeStoragePromise.setItem(\"auth-token\", \"\");\n                yield new client_1.Toast(data.message).show();\n                return false;\n            }\n        });\n    }\n    _doLogout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            client_1.DataManager.setHeader(\"Authorization\", \"\");\n            sessionStorage.setItem(\"auth-token\", \"\");\n            yield client_1.NativeStoragePromise.setItem(\"auth-token\", \"\");\n            yield this._doGetMe();\n            return true;\n        });\n    }\n    _doRegister(email, username, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = yield client_1.DataManager.send(\"user/register\", {\n                \"email\": email,\n                \"username\": username,\n                \"password\": password\n            });\n            if (data.success) {\n                client_1.DataManager.setHeader(\"Authorization\", \"Bearer \" + data.token);\n                sessionStorage.setItem(\"auth-token\", data.token);\n                yield this._doGetMe();\n                return true;\n            }\n            else {\n                client_1.DataManager.setHeader(\"Authorization\", \"\");\n                sessionStorage.setItem(\"auth-token\", \"\");\n                yield client_1.NativeStoragePromise.setItem(\"auth-token\", \"\");\n                yield new client_1.Toast(data.message).show();\n                return false;\n            }\n        });\n    }\n    /**\n     * @returns {UserManager}\n     */\n    static getInstance() {\n        if (!UserManager._instance) {\n            UserManager._instance = new UserManager();\n        }\n        return UserManager._instance;\n    }\n    static updateHeaders() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let token = client_1.Helper.nonNull(sessionStorage.getItem(\"auth-token\"), yield client_1.NativeStoragePromise.getItem(\"auth-token\"));\n            if (token) {\n                client_1.DataManager.setHeader(\"Authorization\", \"Bearer \" + token);\n            }\n        });\n    }\n    _updateAccessClasses() {\n        document.body.classList.forEach(cl => {\n            if (cl.startsWith(UserManager.ACCESS_CLASS_PREFIX)) {\n                document.body.classList.remove(cl);\n            }\n        });\n        this._userData.accesses.forEach(access => {\n            document.body.classList.add(UserManager.ACCESS_CLASS_PREFIX + access);\n        });\n    }\n    hasOfflineAccess(access) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.isOnline()) {\n                return false;\n            }\n            let offlineData = client_1.Helper.nonNull(yield client_1.NativeStoragePromise.getItem(\"user-data\"), { accesses: UserManager.OFFLINE_ACCESSES });\n            return (offlineData.accesses.indexOf(access) !== -1);\n        });\n    }\n    sendForgotPasswordEmail(email) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = yield client_1.DataManager.send(\"user/forgotPW\", { email: email });\n            return data.success;\n        });\n    }\n    resetPassword(token, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let data = yield client_1.DataManager.send(\"user/forgotPW/2\", { token: token, password: password });\n            return data.success;\n        });\n    }\n    isOnline() {\n        return this._userData.online;\n    }\n    isLoggedIn() {\n        return this._userData.loggedIn;\n    }\n    static syncParamFor(model) {\n        return {\n            model: model,\n            where: {\n                user: { id: this.getInstance().getUserData().id }\n            }\n        };\n    }\n    static userSyncParam() {\n        return {\n            model: User_1.User,\n            where: {\n                id: this.getInstance().getUserData().id\n            }\n        };\n    }\n}\nexports.UserManager = UserManager;\nUserManager.ACCESS_CLASS_PREFIX = \"access-\";\nUserManager.OFFLINE_ACCESSES = [\n    \"offline\"\n];\n//# sourceMappingURL=UserManager.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_1 = require(\"cordova-sites/dist/client\");\nconst shared_1 = require(\"cordova-sites/dist/shared\");\nconst deTranslations = require(\"../translations/de\");\nconst enTranslations = require(\"../translations/en\");\nclient_1.App.addInitialization(() => {\n    shared_1.Translator.addDynamicTranslations({\n        \"de\": deTranslations,\n        \"en\": enTranslations\n    });\n});\n//# sourceMappingURL=translationInit.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./shared/migrations/DeleteUserManagement\"), exports);\n__exportStar(require(\"./shared/migrations/SetupUserManagement\"), exports);\n__exportStar(require(\"./shared/v1/model/Access\"), exports);\n__exportStar(require(\"./shared/v1/model/AccessEasySyncModel\"), exports);\n__exportStar(require(\"./shared/v1/model/Role\"), exports);\n__exportStar(require(\"./shared/v1/model/User\"), exports);\n__exportStar(require(\"./shared/v1/model/UserSyncModel\"), exports);\n__exportStar(require(\"./shared/v1/model/UserSyncPartialModel\"), exports);\n//# sourceMappingURL=shared.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteUserManagement1000000000000 = void 0;\nclass DeleteUserManagement1000000000000 {\n    _isServer() {\n        return (typeof document !== \"object\");\n    }\n    up(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield queryRunner.dropTable(\"roleAccess\", true);\n            yield queryRunner.dropTable(\"roleChildren\", true);\n            yield queryRunner.dropTable(\"userRole\", true);\n            if (this._isServer()) {\n                yield queryRunner.dropTable(\"user_access\", true);\n            }\n            yield queryRunner.dropTable(\"access\", true);\n            yield queryRunner.dropTable(\"role\", true);\n            yield queryRunner.dropTable(\"user\", true);\n        });\n    }\n    down(queryRunner) {\n        return undefined;\n    }\n}\nexports.DeleteUserManagement1000000000000 = DeleteUserManagement1000000000000;\n//# sourceMappingURL=DeleteUserManagement.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetupUserManagement1000000001000 = void 0;\nconst typeorm_1 = require(\"typeorm\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nclass SetupUserManagement1000000001000 {\n    _isServer() {\n        return (typeof document !== \"object\");\n    }\n    up(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._addAccess(queryRunner);\n            yield this._addRole(queryRunner);\n            yield this._addUser(queryRunner);\n            yield this._addRoleAccess(queryRunner);\n            yield this._addRoleChildren(queryRunner);\n            yield this._addUserRole(queryRunner);\n            if (this._isServer()) {\n                yield this._addUserAccess(queryRunner);\n            }\n        });\n    }\n    _addAccess(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let accessTable = new typeorm_1.Table({\n                name: \"access\",\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                        isGenerated: this._isServer(),\n                        generationStrategy: \"increment\"\n                    },\n                    {\n                        name: \"createdAt\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.DATE,\n                    },\n                    {\n                        name: \"updatedAt\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.DATE,\n                    },\n                    {\n                        name: \"version\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                    },\n                    {\n                        name: \"deleted\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN,\n                    },\n                    {\n                        name: \"name\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n                        isUnique: true\n                    },\n                    {\n                        name: \"description\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING\n                    }\n                ]\n            });\n            return yield queryRunner.createTable(accessTable, true);\n        });\n    }\n    _addRole(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let roleTable = new typeorm_1.Table({\n                name: \"role\",\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                        isGenerated: this._isServer(),\n                        generationStrategy: \"increment\"\n                    },\n                    {\n                        name: \"createdAt\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.DATE,\n                    },\n                    {\n                        name: \"updatedAt\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.DATE,\n                    },\n                    {\n                        name: \"version\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                    },\n                    {\n                        name: \"deleted\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN,\n                    },\n                    {\n                        name: \"name\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n                    },\n                    {\n                        name: \"description\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING\n                    }\n                ]\n            });\n            return yield queryRunner.createTable(roleTable, true);\n        });\n    }\n    _addUser(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let userTable = new typeorm_1.Table({\n                name: \"user\",\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                        isGenerated: this._isServer(),\n                        generationStrategy: \"increment\"\n                    },\n                    {\n                        name: \"createdAt\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.DATE,\n                    },\n                    {\n                        name: \"updatedAt\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.DATE,\n                    },\n                    {\n                        name: \"version\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                    },\n                    {\n                        name: \"deleted\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN,\n                    },\n                    {\n                        name: \"username\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n                        isUnique: true\n                    },\n                    {\n                        name: \"email\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n                        isUnique: true\n                    },\n                    {\n                        name: \"password\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n                    },\n                    {\n                        name: \"activated\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN,\n                    },\n                    {\n                        name: \"blocked\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN,\n                    },\n                    {\n                        name: \"salt\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.STRING,\n                    },\n                ]\n            });\n            return yield queryRunner.createTable(userTable, true);\n        });\n    }\n    _addRoleAccess(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let roleAccessTable = new typeorm_1.Table({\n                name: \"roleAccess\",\n                columns: [\n                    {\n                        name: \"roleId\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER\n                    },\n                    {\n                        name: \"accessId\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                    }\n                ],\n                indices: [\n                    {\n                        name: \"IDX_38300dd4683a436f8db90b42bd\",\n                        columnNames: [\"roleId\"]\n                    },\n                    {\n                        name: \"IDX_bd55fc382ad2480f75a17e33cb\",\n                        columnNames: [\"accessId\"]\n                    }\n                ],\n                foreignKeys: [\n                    {\n                        name: \"FK_38300dd4683a436f8db90b42bd9\",\n                        columnNames: [\"roleId\"],\n                        referencedTableName: \"role\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                    {\n                        name: \"FK_bd55fc382ad2480f75a17e33cb5\",\n                        columnNames: [\"accessId\"],\n                        referencedTableName: \"access\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                ]\n            });\n            return yield queryRunner.createTable(roleAccessTable, true);\n        });\n    }\n    _addRoleChildren(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let roleChildrenTable = new typeorm_1.Table({\n                name: \"roleChildren\",\n                columns: [\n                    {\n                        name: \"childId\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER\n                    },\n                    {\n                        name: \"parentId\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                    }\n                ],\n                indices: [\n                    {\n                        name: \"IDX_030234c342756c67cefa480687\",\n                        columnNames: [\"childId\"]\n                    },\n                    {\n                        name: \"IDX_35741f2d68a65c2765047705f8\",\n                        columnNames: [\"parentId\"]\n                    }\n                ],\n                foreignKeys: [\n                    {\n                        name: \"FK_roleChildren_childId\",\n                        columnNames: [\"childId\"],\n                        referencedTableName: \"role\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                    {\n                        name: \"FK_roleChildren_parentId\",\n                        columnNames: [\"parentId\"],\n                        referencedTableName: \"role\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                ]\n            });\n            return yield queryRunner.createTable(roleChildrenTable, true);\n        });\n    }\n    _addUserRole(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let userRoleTable = new typeorm_1.Table({\n                name: \"userRole\",\n                columns: [\n                    {\n                        name: \"userId\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER\n                    },\n                    {\n                        name: \"roleId\",\n                        isPrimary: true,\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                    }\n                ],\n                indices: [\n                    {\n                        name: \"IDX_userRole_userId\",\n                        columnNames: [\"userId\"]\n                    },\n                    {\n                        name: \"IDX_userRole_roleId\",\n                        columnNames: [\"roleId\"]\n                    }\n                ],\n                foreignKeys: [\n                    {\n                        name: \"FK_userRole_userId\",\n                        columnNames: [\"userId\"],\n                        referencedTableName: \"user\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                    {\n                        name: \"FK_userRole_roleId\",\n                        columnNames: [\"roleId\"],\n                        referencedTableName: \"role\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                ]\n            });\n            return yield queryRunner.createTable(userRoleTable, true);\n        });\n    }\n    _addUserAccess(queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let userRoleTable = new typeorm_1.Table({\n                name: \"user_access\",\n                columns: [\n                    {\n                        name: \"id\",\n                        isPrimary: true,\n                        isGenerated: this._isServer(),\n                        generationStrategy: \"increment\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER\n                    },\n                    {\n                        name: \"userId\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                        isNullable: true\n                    },\n                    {\n                        name: \"accessId\",\n                        type: cordova_sites_database_1.BaseDatabase.TYPES.INTEGER,\n                        isNullable: true\n                    }\n                ],\n                indices: [\n                    {\n                        name: \"IDX_userAccess_userId\",\n                        columnNames: [\"userId\"]\n                    },\n                    {\n                        name: \"IDX_userAccess_accessId\",\n                        columnNames: [\"accessId\"]\n                    }\n                ],\n                foreignKeys: [\n                    {\n                        name: \"FK_userAccess_userId\",\n                        columnNames: [\"userId\"],\n                        referencedTableName: \"user\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                    {\n                        name: \"FK_userAccess_accessId\",\n                        columnNames: [\"accessId\"],\n                        referencedTableName: \"access\",\n                        referencedColumnNames: [\"id\"],\n                        onDelete: \"cascade\",\n                    },\n                ]\n            });\n            return yield queryRunner.createTable(userRoleTable, true);\n        });\n    }\n    down(queryRunner) {\n        return undefined;\n    }\n}\nexports.SetupUserManagement1000000001000 = SetupUserManagement1000000001000;\n//# sourceMappingURL=SetupUserManagement.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Access = void 0;\nconst shared_1 = require(\"cordova-sites-easy-sync/dist/shared\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nclass Access extends shared_1.EasySyncBaseModel {\n    constructor() {\n        super();\n        this.name = null;\n        this.description = null;\n    }\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"name\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING, unique: true };\n        columns[\"description\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING };\n        return columns;\n    }\n}\nexports.Access = Access;\nAccess.CAN_BE_SYNCED = false;\ncordova_sites_database_1.BaseDatabase.addModel(Access);\n//# sourceMappingURL=Access.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessEasySyncModel = void 0;\nconst shared_1 = require(\"cordova-sites-easy-sync/dist/shared\");\nclass AccessEasySyncModel extends shared_1.EasySyncBaseModel {\n}\nexports.AccessEasySyncModel = AccessEasySyncModel;\nAccessEasySyncModel.ACCESS_READ = true;\nAccessEasySyncModel.ACCESS_MODIFY = false;\nAccessEasySyncModel.CAN_BE_SYNCED = false;\n//# sourceMappingURL=AccessEasySyncModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Role = void 0;\nconst shared_1 = require(\"cordova-sites-easy-sync/dist/shared\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nconst Access_1 = require(\"./Access\");\nclass Role extends shared_1.EasySyncBaseModel {\n    constructor() {\n        super();\n        this.name = null;\n        this.description = null;\n        this.accesses = null;\n        this.parents = null;\n        this.children = null;\n    }\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"name\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING };\n        columns[\"description\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING };\n        return columns;\n    }\n    static getRelationDefinitions() {\n        let relations = super.getRelationDefinitions();\n        relations[\"accesses\"] = {\n            target: Access_1.Access.getSchemaName(),\n            type: \"many-to-many\",\n            joinTable: {\n                name: \"roleAccess\"\n            },\n            cascade: false\n        };\n        relations[\"parents\"] = {\n            target: Role.getSchemaName(),\n            type: \"many-to-many\",\n            joinTable: {\n                name: \"roleChildren\",\n                joinColumn: {\n                    name: \"childId\",\n                    referencedColumnName: \"id\"\n                },\n                inverseJoinColumn: {\n                    name: \"parentId\",\n                    referencedColumnName: \"id\"\n                }\n            },\n            cascade: false\n        };\n        relations[\"children\"] = {\n            target: Role.getSchemaName(),\n            type: \"many-to-many\",\n            joinTable: {\n                name: \"roleChildren\",\n                joinColumn: {\n                    name: \"parentId\",\n                    referencedColumnName: \"id\"\n                },\n                inverseJoinColumn: {\n                    name: \"childId\",\n                    referencedColumnName: \"id\"\n                }\n            },\n            cascade: false\n        };\n        return relations;\n    }\n}\nexports.Role = Role;\nRole.CAN_BE_SYNCED = false;\ncordova_sites_database_1.BaseDatabase.addModel(Role);\n//# sourceMappingURL=Role.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.User = void 0;\nconst shared_1 = require(\"cordova-sites-easy-sync/dist/shared\");\nconst cordova_sites_database_1 = require(\"cordova-sites-database/dist/cordova-sites-database\");\nconst Role_1 = require(\"./Role\");\nclass User extends shared_1.EasySyncBaseModel {\n    constructor() {\n        super();\n        this.username = null;\n        this.email = null;\n        this.password = null;\n        this.roles = null;\n        this.activated = false;\n        this.blocked = false;\n        this.salt = null;\n    }\n    toJSON() {\n        return {\n            id: this.id,\n            username: this.username,\n        };\n    }\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"username\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING, unique: true };\n        columns[\"email\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING, unique: true };\n        columns[\"password\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING };\n        columns[\"activated\"] = cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN;\n        columns[\"blocked\"] = cordova_sites_database_1.BaseDatabase.TYPES.BOOLEAN;\n        columns[\"salt\"] = { type: cordova_sites_database_1.BaseDatabase.TYPES.STRING };\n        return columns;\n    }\n    static getRelationDefinitions() {\n        let relations = super.getRelationDefinitions();\n        relations[\"roles\"] = {\n            target: Role_1.Role.getSchemaName(),\n            type: \"many-to-many\",\n            joinTable: {\n                name: \"userRole\"\n            },\n            cascade: false\n        };\n        return relations;\n    }\n    static prepareSync(entities) {\n        let jsonEntities = [];\n        entities.forEach(entity => {\n            let jsonEntity = {};\n            jsonEntity.id = entity.id;\n            jsonEntity.createdAt = new Date();\n            jsonEntity.updatedAt = new Date();\n            jsonEntity.username = \"\";\n            jsonEntity.email = \"\";\n            jsonEntity.password = \"\";\n            jsonEntity.salt = \"\";\n            jsonEntity.activated = 1;\n            jsonEntity.blocked = 1;\n            jsonEntity.version = 1;\n            jsonEntity.deleted = 0;\n            jsonEntities.push(jsonEntity);\n        });\n        return jsonEntities;\n    }\n}\nexports.User = User;\ncordova_sites_database_1.BaseDatabase.addModel(User);\n//# sourceMappingURL=User.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserSyncModel = void 0;\nconst AccessEasySyncModel_1 = require(\"./AccessEasySyncModel\");\nconst User_1 = require(\"./User\");\nclass UserSyncModel extends AccessEasySyncModel_1.AccessEasySyncModel {\n    static getRelationDefinitions() {\n        let relations = super.getRelationDefinitions();\n        relations[\"user\"] = {\n            target: User_1.User.getSchemaName(),\n            type: \"many-to-one\",\n            // joinColumn: {\n            //     name: \"userId\"\n            // },\n            cascade: false,\n            nullable: !this.NEED_USER\n        };\n        return relations;\n    }\n}\nexports.UserSyncModel = UserSyncModel;\nUserSyncModel.NEED_USER = false;\n//# sourceMappingURL=UserSyncModel.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UserSyncPartialModel = void 0;\nconst shared_1 = require(\"cordova-sites-easy-sync/dist/shared\");\nconst User_1 = require(\"./User\");\nclass UserSyncPartialModel extends shared_1.EasySyncPartialModel {\n    static getRelationDefinitions() {\n        let relations = super.getRelationDefinitions();\n        relations[\"user\"] = {\n            target: User_1.User.getSchemaName(),\n            type: \"many-to-one\",\n            // joinColumn: {\n            //     name: \"userId\"\n            // },\n            cascade: false,\n            nullable: !this.NEED_USER\n        };\n        return relations;\n    }\n}\nexports.UserSyncPartialModel = UserSyncPartialModel;\nUserSyncPartialModel.NEED_USER = false;\n//# sourceMappingURL=UserSyncPartialModel.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client/js/App\"), exports);\n__exportStar(require(\"./client/js/ColorIndicator/ColorIndicator\"), exports);\n__exportStar(require(\"./client/js/Context/AbstractFragment\"), exports);\n__exportStar(require(\"./client/js/Context/AbstractSite\"), exports);\n__exportStar(require(\"./client/js/Context/ContainerSite\"), exports);\n__exportStar(require(\"./client/js/Context/Context\"), exports);\n__exportStar(require(\"./client/js/Context/Delegate/DelegateSite\"), exports);\n__exportStar(require(\"./client/js/Context/Delegate/MasterSite\"), exports);\n__exportStar(require(\"./client/js/Context/Fragment/AbstractWindowFragment\"), exports);\n__exportStar(require(\"./client/js/Context/Fragment/AlphabeticListFragment\"), exports);\n__exportStar(require(\"./client/js/Context/Fragment/TabFragment\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/Menu\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/MenuAction/ErrorAction\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/MenuAction/MenuAction\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/MenuAction/OpenSubmenuAction\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/MenuAction/StartSiteMenuAction\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/NavbarFragment\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/Renderer/AccordionRenderer\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/Renderer/DropdownRenderer\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/Renderer/MenuRenderer\"), exports);\n__exportStar(require(\"./client/js/Context/Menu/Submenu\"), exports);\n__exportStar(require(\"./client/js/Context/MenuSite\"), exports);\n__exportStar(require(\"./client/js/Context/SiteManager\"), exports);\n__exportStar(require(\"./client/js/Context/SwipeFragment/SwipeChildFragment\"), exports);\n__exportStar(require(\"./client/js/Context/SwipeFragment/SwipeFragment\"), exports);\n__exportStar(require(\"./client/js/Context/TemplateSite\"), exports);\n__exportStar(require(\"./client/js/DataManager/NotOnlineError\"), exports);\n__exportStar(require(\"./client/js/DataManager\"), exports);\n__exportStar(require(\"./client/js/Dialog/ButtonChooseDialog\"), exports);\n__exportStar(require(\"./client/js/Dialog/ChooseDialog\"), exports);\n__exportStar(require(\"./client/js/Dialog/ConfirmDialog\"), exports);\n__exportStar(require(\"./client/js/Dialog/Dialog\"), exports);\n__exportStar(require(\"./client/js/Dialog/ElemChooseDialog\"), exports);\n__exportStar(require(\"./client/js/Dialog/ImgChooseDialog\"), exports);\n__exportStar(require(\"./client/js/Form\"), exports);\n__exportStar(require(\"./client/js/HistoryManager\"), exports);\n__exportStar(require(\"./client/js/Legacy/EventManager/EventManager\"), exports);\n__exportStar(require(\"./client/js/Legacy/Helper\"), exports);\n__exportStar(require(\"./client/js/Legacy/Matomo\"), exports);\n__exportStar(require(\"./client/js/Legacy/ScaleHelper\"), exports);\n__exportStar(require(\"./client/js/NativeStoragePromise\"), exports);\n__exportStar(require(\"./client/js/PromiseHelper\"), exports);\n__exportStar(require(\"./client/js/ShareManager/ShareDialog\"), exports);\n__exportStar(require(\"./client/js/ShareManager/ShareManager\"), exports);\n__exportStar(require(\"./client/js/Singleton\"), exports);\n__exportStar(require(\"./client/js/Sound/AudioChain\"), exports);\n__exportStar(require(\"./client/js/Sound/SoundManager\"), exports);\n__exportStar(require(\"./client/js/Toast/Toast\"), exports);\n__exportStar(require(\"./client/js/Toast/ToastManager\"), exports);\n__exportStar(require(\"./client/js/Translator\"), exports);\n__exportStar(require(\"./client/js/ViewInflater\"), exports);\n__exportStar(require(\"./client/js/translationInit\"), exports);\n//# sourceMappingURL=client.js.map","module.exports = __webpack_public_path__ + \"html/shareDialog.html\";","module.exports = __webpack_public_path__ + \"html/chooseDialog.html\";","module.exports = __webpack_public_path__ + \"html/abstractWindowTemplate.html\";","module.exports = __webpack_public_path__ + \"html/alphabeticListFragment.html\";","module.exports = __webpack_public_path__ + \"html/swipeFragment.html\";","module.exports = __webpack_public_path__ + \"html/tabFragment.html\";","module.exports = __webpack_public_path__ + \"html/container.html\";","module.exports = __webpack_public_path__ + \"html/menuSite.html\";","module.exports = __webpack_public_path__ + \"html/navbar.html\";","module.exports = \"/img/errorIcon.png\";","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.App = void 0;\n/**\n * Eine Klasse, welche als Ursprung für die App genutzt wird\n */\nconst Helper_1 = require(\"./Legacy/Helper\");\nconst SiteManager_1 = require(\"./Context/SiteManager\");\nclass App {\n    /**\n     * Erstellt eine neue App, speichert ein internes Promise, welches resolved wird, sobald das deviceready-Event gefeuert wird\n     */\n    constructor() {\n        this._resolver = { resolve: null, reject: null };\n        this._readyPromise = new Promise(r => document.addEventListener(\"deviceready\", r, false));\n        this._deepLinks = {};\n        this._siteManager = SiteManager_1.SiteManager.getInstance();\n    }\n    addDeepLink(link, siteConstructor) {\n        this._deepLinks[link] = siteConstructor;\n    }\n    startSite(site, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._siteManager) {\n                return this._siteManager.startSite(site, args);\n            }\n        });\n    }\n    static setLogo(logo) {\n        this._logo = logo;\n    }\n    static getLogo() {\n        return this._logo;\n    }\n    start(startSiteConstructor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready();\n            let initalSiteConstructor = startSiteConstructor;\n            let params = App._getStartParams();\n            if (Helper_1.Helper.isNotNull(params[\"s\"])) {\n                startSiteConstructor = Helper_1.Helper.nonNull(this._deepLinks[params[\"s\"]], startSiteConstructor);\n                delete params[\"s\"];\n            }\n            let siteManager = this._siteManager;\n            siteManager.init(\"site\", this._deepLinks);\n            Helper_1.Helper.removeAllChildren(document.getElementById(\"site\"));\n            siteManager.startSite(startSiteConstructor, params);\n            siteManager.setAppEndedListener(manager => {\n                manager.startSite(initalSiteConstructor);\n            });\n            // this._siteManager = siteManager;\n        });\n    }\n    /**\n     * Führt die Callback aus, sobald das interne Promise aufgelöst wird und App._promises fertig sind oder gibt das interne Promise zurück\n     *\n     * @param callback\n     * @returns {Promise<*>}\n     */\n    ready(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let promise = this._readyPromise.then(() => {\n                App._resolver.resolve(this);\n                return Promise.all(App._promises);\n            });\n            if (callback) {\n                return promise.then(callback);\n            }\n            else {\n                return promise;\n            }\n        });\n    }\n    static addInitialization(callbackOrPromise) {\n        if (typeof callbackOrPromise === \"function\") {\n            let promise = callbackOrPromise;\n            callbackOrPromise = App._mainPromise.then((app) => {\n                return promise(app);\n            });\n        }\n        App._promises.push(callbackOrPromise);\n    }\n    static _getStartParams() {\n        return Object.assign(App._extractParams(window.location.search.substr(1)), App._startParams);\n    }\n    static _extractParams(paramString) {\n        if (Helper_1.Helper.isNull(paramString)) {\n            return null;\n        }\n        let result = {}, tmp = [];\n        let items = paramString.split(\"&\");\n        for (let index = 0; index < items.length; index++) {\n            tmp = items[index].split(\"=\");\n            if (tmp[0].trim().length > 0) {\n                result[tmp[0]] = decodeURIComponent(tmp[1]);\n            }\n        }\n        return result;\n    }\n    static setStartParam(name, value) {\n        this._startParams[name] = value;\n    }\n}\nexports.App = App;\nApp._promises = [];\nApp._resolver = {\n    resolve: null,\n    reject: null,\n};\nApp._mainPromise = new Promise((res, rej) => {\n    App._resolver = {\n        resolve: res,\n        reject: rej,\n    };\n});\nApp._startParams = {};\n//# sourceMappingURL=App.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorIndicator = void 0;\nconst Singleton_1 = require(\"../Singleton\");\nconst Helper_1 = require(\"../Legacy/Helper\");\nclass ColorIndicator extends Singleton_1.Singleton {\n    getAverageImgColor(imgEl, areaWidth, areaHeight) {\n        //https://stackoverflow.com/questions/2541481/get-average-color-of-image-via-javascript\n        let blockSize = 5, // only visit every 5 pixels\n        defaultRGB = { r: 255, g: 255, b: 255 }, // for non-supporting envs\n        canvas = document.createElement('canvas'), context = canvas.getContext && canvas.getContext('2d'), data, width, height, i = -4 * blockSize, //start with first pixel\n        length, rgb = { r: 0, g: 0, b: 0 }, count = 0;\n        if (!context) {\n            return defaultRGB;\n        }\n        height = canvas.height = imgEl.naturalHeight || imgEl.offsetHeight || imgEl.height;\n        width = canvas.width = imgEl.naturalWidth || imgEl.offsetWidth || imgEl.width;\n        areaWidth = Helper_1.Helper.nonNull(areaWidth, width);\n        areaHeight = Helper_1.Helper.nonNull(areaWidth, height);\n        context.drawImage(imgEl, 0, 0);\n        try {\n            data = context.getImageData(0, 0, Math.min(width, areaWidth), Math.min(height, areaHeight));\n        }\n        catch (e) {\n            /* security error, img on diff domain */\n            console.error(e);\n            return defaultRGB;\n        }\n        length = data.data.length;\n        while ((i += blockSize * 4) < length) {\n            ++count;\n            rgb.r += data.data[i];\n            rgb.g += data.data[i + 1];\n            rgb.b += data.data[i + 2];\n        }\n        // ~~ used to floor values\n        rgb.r = ~~(rgb.r / count);\n        rgb.g = ~~(rgb.g / count);\n        rgb.b = ~~(rgb.b / count);\n        return rgb;\n    }\n    invertColorBW(r, g, b) {\n        return this.invertColor(r, g, b, true);\n    }\n    invertColor(r, g, b, bw) {\n        if (typeof r === \"object\") {\n            bw = g || bw;\n            g = r.g;\n            b = r.b;\n            r = r.r;\n        }\n        if (bw) {\n            // http://stackoverflow.com/a/3943023/112731\n            return (r * 0.299 + g * 0.587 + b * 0.114) > 186\n                ? { r: 0, g: 0, b: 0 }\n                : { r: 255, g: 255, b: 255 };\n        }\n        // invert color components\n        r = (255 - r);\n        g = (255 - g);\n        b = (255 - b);\n        // pad each with zeros and return\n        return {\n            r: r,\n            g: g,\n            b: b,\n        };\n    }\n    toHEX(r, g, b) {\n        if (typeof r === \"object\") {\n            g = r.g;\n            b = r.b;\n            r = r.r;\n        }\n        r = r.toString(16);\n        g = g.toString(16);\n        b = b.toString(16);\n        return \"#\" + Helper_1.Helper.padZero(r) + Helper_1.Helper.padZero(g) + Helper_1.Helper.padZero(b);\n    }\n}\nexports.ColorIndicator = ColorIndicator;\n//# sourceMappingURL=ColorIndicator.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractFragment = void 0;\nconst Context_1 = require(\"./Context\");\nconst Helper_1 = require(\"../Legacy/Helper\");\n/**\n * Ein Fragment ist ein TeilView einer Ansicht.\n */\nclass AbstractFragment extends Context_1.Context {\n    /**\n     * Erstellt ein neues Fragment\n     *\n     * @param site\n     * @param view\n     */\n    constructor(site, view) {\n        super(view);\n        this._site = site;\n        this._viewQuery = null;\n        this._active = true;\n    }\n    /**\n     * Gibt die zugehörige Seite zurück\n     *\n     * @returns {*}\n     */\n    getSite() {\n        if (this._site instanceof AbstractFragment) {\n            return this._site.getSite();\n        }\n        return this._site;\n    }\n    startSite(site, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._site.startSite(site, args);\n        });\n    }\n    /**\n     * Gibt zurück, ob das Fragment aktiv ist. Wenn nicht, wird es in der Seite nicht angezeigt\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n    setViewQuery(query) {\n        this._viewQuery = query;\n    }\n    getViewQuery() {\n        return this._viewQuery;\n    }\n    setActive(active) {\n        this._active = active;\n        if (Helper_1.Helper.isNotNull(this._view)) {\n            if (active) {\n                this._view.classList.remove(\"hidden\");\n            }\n            else {\n                this._view.classList.add(\"hidden\");\n            }\n        }\n    }\n}\nexports.AbstractFragment = AbstractFragment;\n//# sourceMappingURL=AbstractFragment.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractSite = void 0;\nconst Context_1 = require(\"./Context\");\nconst Helper_1 = require(\"../Legacy/Helper\");\nconst Translator_1 = require(\"../Translator\");\nconst ViewInflater_1 = require(\"../ViewInflater\");\nconst EventManager_1 = require(\"../Legacy/EventManager/EventManager\");\n/**\n * Basisklasse für eine Seite\n */\nclass AbstractSite extends Context_1.Context {\n    /**\n     * Construktor für eine Seite, sollte überladen werden und view sollte definiert werden. Seitenkonstruktoren bekommen NUR den siteManager übergebn\n     * @param siteManager\n     * @param view\n     */\n    constructor(siteManager, view) {\n        super(view);\n        this._isDestroying = false;\n        this._isDestroying = false;\n        //Promise und Resolver, welches erfüllt wird, wenn Seite beendet wird\n        this._finishPromiseResolver = {\n            resolve: null,\n            reject: null\n        };\n        this._finishPromise = new Promise((resolve, reject) => {\n            this._finishPromiseResolver = { resolve: resolve, reject: reject };\n        });\n        //Promise, welches erfüllt wird, wenn onConstruct-Promsise erfüllt wurde. Wird für onDestroy gebraucht\n        this._onConstructPromise = null;\n        this._parameters = {};\n        this._result = null;\n        this._siteManager = siteManager;\n        this._title = {\n            element: null,\n            text: null\n        };\n        this._loadingSymbol = null;\n        //Wird zum speichern der zugehörigen HistoryID genutzt\n        this._historyId = null;\n    }\n    getTitle() {\n        return this._title;\n    }\n    onConstruct(constructParameters) {\n        const _super = Object.create(null, {\n            onConstruct: { get: () => super.onConstruct }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onConstruct.call(this, constructParameters);\n            this.setParameters(Helper_1.Helper.nonNull(constructParameters, {}));\n            EventManager_1.EventManager.trigger(AbstractSite.EVENT.ON_CONSTRUCT, {\n                site: this, params: constructParameters\n            });\n            return res;\n        });\n    }\n    onStart(pauseArguments) {\n        const _super = Object.create(null, {\n            onStart: { get: () => super.onStart }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _super.onStart.call(this, pauseArguments);\n            this._updateTitle();\n            this.updateUrl(this._parameters);\n            EventManager_1.EventManager.trigger(AbstractSite.EVENT.ON_START, {\n                site: this, params: pauseArguments\n            });\n        });\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            EventManager_1.EventManager.trigger(AbstractSite.EVENT.ON_VIEW_LOADED, {\n                site: this\n            });\n            return res;\n        });\n    }\n    onPause() {\n        const _super = Object.create(null, {\n            onPause: { get: () => super.onPause }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onPause.call(this);\n            EventManager_1.EventManager.trigger(AbstractSite.EVENT.ON_PAUSE, {\n                site: this\n            });\n            return res;\n        });\n    }\n    onDestroy() {\n        const _super = Object.create(null, {\n            onDestroy: { get: () => super.onDestroy }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onDestroy.call(this);\n            EventManager_1.EventManager.trigger(AbstractSite.EVENT.ON_DESTROY, {\n                site: this\n            });\n            return res;\n        });\n    }\n    /**\n     * Setzt den Titel der Website\n     *\n     * @param titleElement\n     * @param title\n     */\n    setTitle(titleElement, title) {\n        if (typeof titleElement === \"string\") {\n            let args = title;\n            title = titleElement;\n            titleElement = Translator_1.Translator.makePersistentTranslation(title, args);\n        }\n        title = Helper_1.Helper.nonNull(title, titleElement.textContent);\n        this._title = {\n            element: titleElement,\n            text: title\n        };\n        this._updateTitle();\n    }\n    setParameter(name, value) {\n        this._parameters[name] = value;\n        this.updateUrl(this._parameters);\n    }\n    setParameters(parameters) {\n        this._parameters = parameters;\n        this.updateUrl(this._parameters);\n    }\n    getParameters() {\n        return this._parameters;\n    }\n    showLoadingSymbol() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Helper_1.Helper.isNull(this._loadingSymbol)) {\n                this._loadingSymbol = ViewInflater_1.ViewInflater.createLoadingSymbol(\"overlay\");\n                let view = yield this.getViewPromise();\n                if (Helper_1.Helper.isNotNull(this._loadingSymbol)) {\n                    view.appendChild(this._loadingSymbol);\n                }\n            }\n        });\n    }\n    removeLoadingSymbol() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Helper_1.Helper.isNotNull(this._loadingSymbol)) {\n                this._loadingSymbol.remove();\n                this._loadingSymbol = null;\n            }\n        });\n    }\n    onBeforeUnload(e) {\n        return null;\n    }\n    /**\n     * Updatet den Title der Webseite\n     * @protected\n     */\n    _updateTitle() {\n        if (this._state === Context_1.Context.STATE_RUNNING) {\n            this._siteManager.updateTitle(this._title.text);\n        }\n    }\n    updateUrl(args) {\n        if (this._state === Context_1.Context.STATE_RUNNING) {\n            this._siteManager.updateUrl(this, args);\n        }\n    }\n    /**\n     * Startet eine andere Seite mit den angegebenen Parametern\n     *\n     * @param site\n     * @param args\n     * @returns {*|Promise<*>}\n     */\n    startSite(site, args) {\n        return this._siteManager.startSite(site, args);\n    }\n    /**\n     * Alias für\n     *  this.startSite(...);\n     *  this.finish(...);\n     *\n     * @param site\n     * @param args\n     * @param result\n     * @returns {*|Promise<*>}\n     */\n    finishAndStartSite(site, args, result) {\n        let res = this.startSite(site, args);\n        this.finish(result);\n        return res;\n    }\n    /**\n     * Beendet die aktuelle Seite. Kann ein Ergebnis setzen\n     *\n     * @param result\n     */\n    finish(result) {\n        if (!(this._isDestroying || this._state === Context_1.Context.STATE_DESTROYED)) {\n            this._isDestroying = true;\n            if (Helper_1.Helper.isNotNull(result)) {\n                this.setResult(result);\n            }\n            return this._siteManager.endSite(this);\n        }\n    }\n    goBack() {\n        if (this._state === Context_1.Context.STATE_RUNNING) {\n            this._siteManager.goBack();\n        }\n    }\n    /**\n     * Wird aufgerufen, falls zurück gedrückt wird. Gib false zurück, um das beenden der Seite zu verhindern\n     */\n    onBackPressed() {\n    }\n    /**\n     * TODO Einbauen\n     */\n    onMenuPressed() {\n    }\n    /**\n     * TODO Einbauen\n     */\n    onSearchPressed() {\n    }\n    /**\n     * Gibt das FinishPromise zurück\n     * @returns {Promise<any>}\n     */\n    getFinishPromise() {\n        return this._finishPromise;\n    }\n    /**\n     * Setzt das Resultat. Letztes Setzen gilt\n     * @param result\n     */\n    setResult(result) {\n        this._result = result;\n    }\n    /**\n     * Gibt den FinishResolver zurück. Genutzt, um FinishPromise zu resolven order rejecten\n     * @returns {*}\n     */\n    getFinishResolver() {\n        return this._finishPromiseResolver;\n    }\n    addEventListener(siteEvent, listener) {\n        return EventManager_1.EventManager.getInstance().addListener(siteEvent, data => {\n            if (data.site && data.site instanceof this.constructor) {\n                listener(data);\n            }\n        });\n    }\n    isDestroying() {\n        return this._isDestroying;\n    }\n}\nexports.AbstractSite = AbstractSite;\nAbstractSite.EVENT = {\n    ON_CONSTRUCT: \"abstract-site-on-construct\",\n    ON_VIEW_LOADED: \"abstract-site-on-view-loaded\",\n    ON_START: \"abstract-site-on-start\",\n    ON_PAUSE: \"abstract-site-on-pause\",\n    ON_DESTROY: \"abstract-site-on-destroy\"\n};\n//# sourceMappingURL=AbstractSite.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerSite = void 0;\nconst TemplateSite_1 = require(\"./TemplateSite\");\nconst containerTemplate = require(\"../../html/siteTemplates/container.html\");\n/**\n * Seite, welche das Container-Template benutzt\n */\nclass ContainerSite extends TemplateSite_1.TemplateSite {\n    /**\n     * Constructor für die ContainerSite\n     *\n     * @param siteManager\n     * @param view\n     */\n    constructor(siteManager, view) {\n        super(siteManager, view, containerTemplate, \"#site-content\");\n    }\n}\nexports.ContainerSite = ContainerSite;\n//# sourceMappingURL=ContainerSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context = void 0;\nconst Helper_1 = require(\"../Legacy/Helper\");\nconst ViewInflater_1 = require(\"../ViewInflater\");\n/**\n * Basis-Klasse für Seiten und Fragmente\n */\nclass Context {\n    /**\n     * Erstellt einen neuen Context. Erwartet den Link zu einem HTML-File, welches vom ViewInflater geladen werden kann.\n     * Im Constructor sollten fragmente hinzugefügt werden (nachdem super.constructor(<>) aufgerufen wurde)\n     *\n     * @param view\n     */\n    constructor(view) {\n        this._pauseParameters = [];\n        this._view = null;\n        this._fragments = [];\n        this._state = Context.STATE_CREATED;\n        this._viewLoadedPromise = Helper_1.Helper.newPromiseWithResolve();\n        this._viewPromise = ViewInflater_1.ViewInflater.getInstance().load(view).then((siteContent) => {\n            this._view = siteContent;\n            return siteContent;\n        }).catch(e => {\n            this._viewLoadedPromise.reject(e);\n        });\n    }\n    getState() {\n        return this._state;\n    }\n    /**\n     * Wird von SiteManager aufgerufen, wenn Klasse erstellt wird. Das ViewPromise ist noch nicht zwangsweise geladen!\n     * Gibt ein Promise zurück. onViewLoaded wird erst aufgerufen, wenn onConstruct-Promise und view-Promise fullfilled sind.\n     *\n     * @param constructParameters, Object|Null\n     * @returns {Promise<any[]>}\n     */\n    onConstruct(constructParameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._state = Context.STATE_CONSTRUCTED;\n            let onConstructPromises = [];\n            for (let k in this._fragments) {\n                onConstructPromises.push(this._fragments[k].onConstruct.apply(this._fragments[k], [constructParameters]));\n                onConstructPromises.push(this._fragments[k]._viewPromise);\n            }\n            return Promise.all(onConstructPromises);\n        });\n    }\n    /**\n     * Methode wird aufgerufen, sobald onConstruct-Promise und view-Promise fullfilled sind.\n     * View ist hier noch nicht im Dokument hinzugefügt.\n     *\n     * Benutze diese Methode, um die View beim starten zu manipulieren.\n     */\n    onViewLoaded() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._state = Context.STATE_CONSTRUCTED;\n            let onViewLoadedPromises = [];\n            for (let k in this._fragments) {\n                onViewLoadedPromises.push(this._fragments[k]._viewPromise.then(() => this._fragments[k].onViewLoaded()).then(() => this._fragments[k]._viewLoadedPromise.resolve()));\n            }\n            return Promise.all(onViewLoadedPromises);\n        });\n    }\n    /**\n     * onViewLoaded-Promise ist erfüllt => View wird dem Document hinzugefügt => onStart wird aufgerufen\n     *\n     * Seite wird pausiert => onPause wird aufgerufen => View wird aus dem Document entfernt => - etwas passiert -\n     * => Seite wird fortgesetzt => View wird dem Document hinzugefügt => onStart wird mit dem Rückgabewert von onPause ausgeführt\n     *\n     * Zurückgegebenes Promise wird ignoriert!\n     * @param pauseArguments, Object|NULL\n     */\n    onStart(pauseArguments) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._state = Context.STATE_RUNNING;\n            for (let k in this._fragments) {\n                let fragment = this._fragments[k];\n                fragment.onStart.apply(this._fragments[k], [yield this._fragments[k]._pauseParameters]);\n                this._fragments[k]._viewPromise.then(function (fragmentView) {\n                    if (fragment.isActive()) {\n                        fragmentView.classList.remove(\"hidden\");\n                    }\n                    else {\n                        fragmentView.classList.add(\"hidden\");\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Seite wird pausiet => onPause wird ausgeführt => View wird aus dem Document entfernt\n     * Seite wird beendet => onPause wird ausgeführt (falls State === running) => View wird aus dem Document entfernt\n     * => onDestroy wird ausgeführt\n     *\n     * Rückgabe-Promise wird als Pause-Parameter gespeichert und wird beim Fortsetzen der Seite ausgeführt\n     * @returns {Promise<void>}\n     */\n    onPause(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._state = Context.STATE_PAUSED;\n            for (let k in this._fragments) {\n                let pauseParameters = this._fragments[k].onPause.apply(this._fragments[k], args);\n                this._fragments[k].setPauseParameters(pauseParameters);\n            }\n        });\n    }\n    /**\n     * Seite wird beendet => onPause wird ausgeführt (falls State === running) => View wird aus dem Document entfernt\n     * => onDestroy wird ausgeführt\n     *\n     * Rückgabe-Promise wird ignoriert\n     */\n    onDestroy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._state = Context.STATE_DESTROYED;\n            for (let k in this._fragments) {\n                this._fragments[k].onDestroy.apply(this._fragments[k], args);\n            }\n        });\n    }\n    isShowing() {\n        return this._state === Context.STATE_RUNNING;\n    }\n    /**\n     * Fügt ein neues Fragment hinzu.\n     *\n     * @param viewQuery\n     * @param fragment\n     */\n    addFragment(viewQuery, fragment) {\n        this._fragments.push(fragment);\n        fragment.setViewQuery(viewQuery);\n        this._viewPromise = Promise.all([this._viewPromise, fragment._viewPromise]).then(res => {\n            res[0].querySelector(viewQuery).appendChild(res[1]);\n            return res[0];\n        }).catch(e => console.error(e));\n    }\n    /**\n     * Findet ein Element anhand eines Selectors\n     *\n     * Wenn all = true, werden alle gefundenen Elemente zurückgegeben\n     *\n     * Wenn asPromise = true, wird das Ergebnis als Promise zurückgegeben. Hier wird gewartet, bis das _viewPromise fullfilled ist\n     * Nutze das, um die View in onConstruct zu manipulieren. Evtl entfernen\n     *\n     * @param query\n     * @param all\n     * @param asPromise\n     * @returns {*}\n     */\n    findBy(query, all, asPromise) {\n        all = Helper_1.Helper.nonNull(all, false);\n        asPromise = Helper_1.Helper.nonNull(asPromise, false);\n        let getVal = function (root) {\n            let res = null;\n            if (all) {\n                res = root.querySelectorAll(query);\n                if (root.matches(query)) {\n                    res.push(root);\n                }\n            }\n            else {\n                if (root.matches(query)) {\n                    res = root;\n                }\n                else {\n                    res = root.querySelector(query);\n                }\n            }\n            return res;\n        };\n        if (asPromise) {\n            return this._viewPromise.then(function (rootView) {\n                return getVal(rootView);\n            });\n        }\n        return getVal(this._view);\n    }\n    /**\n     * Setzt die PauseParameters\n     * @param pauseParameters\n     */\n    setPauseParameters(pauseParameters) {\n        this._pauseParameters = pauseParameters;\n    }\n    /**\n     * Gibt das ViewPromise zurück\n     * @returns {*}\n     */\n    getViewPromise() {\n        return this._viewPromise;\n    }\n}\nexports.Context = Context;\nContext.STATE_CREATED = 0;\nContext.STATE_CONSTRUCTED = 1;\nContext.STATE_RUNNING = 2;\nContext.STATE_PAUSED = 3;\nContext.STATE_DESTROYING = 4;\nContext.STATE_DESTROYED = 5;\n// Die States für den Context\nContext.STATE_CREATED = 0;\nContext.STATE_CONSTRUCTED = 1;\nContext.STATE_RUNNING = 2;\nContext.STATE_PAUSED = 3;\nContext.STATE_DESTROYING = 4;\nContext.STATE_DESTROYED = 5;\n//# sourceMappingURL=Context.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DelegateSite = void 0;\nconst AbstractSite_1 = require(\"../AbstractSite\");\nclass DelegateSite extends AbstractSite_1.AbstractSite {\n    constructor(site) {\n        super(undefined, document.createElement(\"span\"));\n        /** @var {AbstractSite} */\n        this._site = site;\n    }\n    setTitle(titleElement, title) {\n        return this._site.setTitle(titleElement, title);\n    }\n    setParameter(name, value) {\n        //Todo changing\n        // return this._site.setParameter(name, value);\n    }\n    setParameters(parameters) {\n        //TODO changing\n        // return this._site.setParameters(parameters)\n    }\n    getParameters() {\n        return this._site.getParameters();\n    }\n    showLoadingSymbol() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._site.showLoadingSymbol();\n        });\n    }\n    removeLoadingSymbol() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._site.removeLoadingSymbol();\n        });\n    }\n    _updateTitle() {\n        return this._site._updateTitle();\n    }\n    updateUrl(args) {\n        //todo\n        // return this._site.updateUrl(args);\n    }\n    startSite(site, args) {\n        return this._site.startSite(site, args);\n    }\n    finishAndStartSite(site, args, result) {\n        return this._site.finishAndStartSite(site, args, result);\n    }\n    finish(result) {\n        return this._site.finish(result);\n    }\n    goBack() {\n        return this._site.goBack();\n    }\n    getFinishPromise() {\n        return this._site.getFinishPromise();\n    }\n    setResult(result) {\n        return this._site.setResult(result);\n    }\n    getFinishResolver() {\n        return this._site.getFinishResolver();\n    }\n    addFragment(viewQuery, fragment) {\n        return this._site.addFragment(viewQuery, fragment);\n    }\n    findBy(query, all, asPromise) {\n        return this._site.findBy(query, all, asPromise);\n    }\n    setPauseParameters(pauseParameters) {\n        return this._site.setPauseParameters(pauseParameters);\n    }\n    getViewPromise() {\n        return this._site.getViewPromise();\n    }\n    getState() {\n        return this._site.getState();\n    }\n    getTitle() {\n        return this._site.getTitle();\n    }\n    isShowing() {\n        return this._site.isShowing();\n    }\n    isDestroying() {\n        return this._site.isDestroying();\n    }\n}\nexports.DelegateSite = DelegateSite;\n//# sourceMappingURL=DelegateSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MasterSite = void 0;\nconst AbstractSite_1 = require(\"../AbstractSite\");\nconst Helper_1 = require(\"../../Legacy/Helper\");\nclass MasterSite extends AbstractSite_1.AbstractSite {\n    constructor(siteManager, view) {\n        super(siteManager, view);\n        this._delegates = [];\n    }\n    addDelegate(delegateSite) {\n        this._delegates.push(delegateSite);\n    }\n    onConstruct(constructParameters) {\n        const _super = Object.create(null, {\n            onConstruct: { get: () => super.onConstruct }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onConstruct.call(this, constructParameters);\n            yield Helper_1.Helper.asyncForEach(this._delegates, (delegate) => __awaiter(this, void 0, void 0, function* () {\n                yield delegate.onConstruct(constructParameters);\n            }));\n            return res;\n        });\n    }\n    onStart(pauseArguments) {\n        const _super = Object.create(null, {\n            onStart: { get: () => super.onStart }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _super.onStart.call(this, pauseArguments);\n            yield Helper_1.Helper.asyncForEach(this._delegates, (delegate) => __awaiter(this, void 0, void 0, function* () {\n                yield delegate.onStart(pauseArguments);\n            }));\n        });\n    }\n    onBackPressed() {\n        super.onBackPressed();\n        this._delegates.forEach(delegate => {\n            delegate.onBackPressed();\n        });\n    }\n    onMenuPressed() {\n        super.onMenuPressed();\n        this._delegates.forEach(delegate => {\n            delegate.onMenuPressed();\n        });\n    }\n    onSearchPressed() {\n        super.onSearchPressed();\n        this._delegates.forEach(delegate => {\n            delegate.onSearchPressed();\n        });\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            yield Helper_1.Helper.asyncForEach(this._delegates, (delegate) => __awaiter(this, void 0, void 0, function* () {\n                yield delegate.onViewLoaded();\n            }));\n            return res;\n        });\n    }\n    onPause() {\n        const _super = Object.create(null, {\n            onPause: { get: () => super.onPause }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _super.onPause.call(this);\n            yield Helper_1.Helper.asyncForEach(this._delegates, (delegate) => __awaiter(this, void 0, void 0, function* () {\n                yield delegate.onPause();\n            }));\n        });\n    }\n    onDestroy() {\n        const _super = Object.create(null, {\n            onDestroy: { get: () => super.onDestroy }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            yield _super.onDestroy.call(this);\n            yield Helper_1.Helper.asyncForEach(this._delegates, (delegate) => __awaiter(this, void 0, void 0, function* () {\n                yield delegate.onDestroy();\n            }));\n        });\n    }\n}\nexports.MasterSite = MasterSite;\n//# sourceMappingURL=MasterSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractWindowFragment = void 0;\nconst AbstractFragment_1 = require(\"../AbstractFragment\");\nconst ViewInflater_1 = require(\"../../ViewInflater\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst ViewHelper_1 = require(\"js-helper/dist/client/ViewHelper\");\nconst Translator_1 = require(\"../../Translator\");\nconst template = require(\"../../../html/Framework/Fragment/abstractWindowTemplate.html\");\nclass AbstractWindowFragment extends AbstractFragment_1.AbstractFragment {\n    constructor(site, view, position, title) {\n        super(site, template);\n        this._position = { x: 0, y: 0 };\n        this._title = \"\";\n        this._margin = { x: 0, y: 0 };\n        this._position = position;\n        this._title = Helper_1.Helper.nonNull(title, \"&nbsp;\");\n        this._viewPromise = Promise.all([this._viewPromise, ViewInflater_1.ViewInflater.getInstance().load(view)]).then(res => {\n            res[0].querySelector(\"#child-view\").replaceWith(res[1]);\n            ViewInflater_1.ViewInflater.replaceWithChildren(res[1]);\n            this._view = res[0];\n            return res[0];\n        }).catch(e => console.error(e));\n    }\n    setTitle(title) {\n        if (this._titleElement) {\n            ViewHelper_1.ViewHelper.removeAllChildren(this._titleElement);\n            this._titleElement.appendChild(Translator_1.Translator.makePersistentTranslation(title));\n        }\n        this._title = title;\n    }\n    getDimension() {\n        let computedStyle = window.getComputedStyle(this._container);\n        let width = parseFloat(computedStyle.getPropertyValue(\"width\"));\n        let height = parseFloat(computedStyle.getPropertyValue(\"height\"));\n        return { x: Math.ceil(width) - this._margin.x, y: Math.ceil(height) - this._margin.y };\n    }\n    setDimension(x, y) {\n        x += this._margin.x;\n        y += this._margin.y;\n        this._container.style.width = x + \"px\";\n        this._container.style.height = y + \"px\";\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            this._container = this.findBy(\".window-container\");\n            this._window = this.findBy(\".window\");\n            let resizeStart = null;\n            let multiplier;\n            let dimension;\n            let resizeStartListener = (x, y, e) => {\n                if (e.target.classList.contains(\"window-resize\")) {\n                    e.stopPropagation();\n                    resizeStart = { x: x, y: y };\n                    let direction = e.target.dataset[\"direction\"].split(\",\");\n                    multiplier = { x: parseInt(direction[0]), y: parseInt(direction[1]) };\n                    dimension = this.getDimension();\n                }\n            };\n            this.findBy(\".window-resize\", true).forEach(element => {\n                element.addEventListener(\"mousedown\", (e) => {\n                    resizeStartListener(e.clientX, e.clientY, e);\n                });\n            });\n            let moveStartListener = (x, y, e) => {\n                if (e.target === this._container || e.target.closest(\"#title\") === this._titleElement) {\n                    mouseDownPos = { x: x, y: y };\n                    this._container.classList.add(\"moving\");\n                }\n                let activeWindow = document.querySelector(\".window-container.active-window\");\n                if (activeWindow && activeWindow !== this._container) {\n                    activeWindow.classList.remove(\"active-window\");\n                }\n                this._container.classList.add(\"active-window\");\n            };\n            let mouseDownPos = null;\n            this._container.addEventListener(\"mousedown\", (e) => {\n                moveStartListener(e.clientX, e.clientY, e);\n            });\n            this._container.addEventListener(\"touchstart\", (e) => {\n                if (e.touches.length === 1) {\n                    moveStartListener(e.touches[0].clientX, e.touches[0].clientY, e);\n                }\n            });\n            this._titleElement = this.findBy(\"#title\");\n            let moveListener = (x, y, e) => {\n                if (resizeStart !== null) {\n                    let diff = {\n                        x: (x - resizeStart.x) * (multiplier.x),\n                        y: (y - resizeStart.y) * (multiplier.y)\n                    };\n                    dimension = { x: dimension.x + diff.x, y: dimension.y + diff.y };\n                    this.setDimension(dimension.x, dimension.y);\n                    let moveDiff = { x: 0, y: 0 };\n                    if (multiplier.x < 0) {\n                        moveDiff.x = -diff.x;\n                    }\n                    if (multiplier.y < 0) {\n                        moveDiff.y = -diff.y;\n                    }\n                    this.moveAt(moveDiff.x, moveDiff.y);\n                    resizeStart = { x: x, y: y };\n                }\n                else if (mouseDownPos !== null) {\n                    let diff = {\n                        x: x - mouseDownPos.x,\n                        y: y - mouseDownPos.y,\n                    };\n                    mouseDownPos = { x: x, y: y };\n                    this.moveAt(diff.x, diff.y);\n                }\n            };\n            window.addEventListener(\"mousemove\", (e) => {\n                moveListener(e.clientX, e.clientY, e);\n            });\n            window.addEventListener(\"touchmove\", (e) => {\n                if (e.touches.length === 1) {\n                    moveListener(e.touches[0].clientX, e.touches[0].clientY, e);\n                }\n            });\n            let endListener = (x, y, e) => {\n                mouseDownPos = null;\n                resizeStart = null;\n                this._container.classList.remove(\"moving\");\n            };\n            window.addEventListener(\"mouseup\", (e) => {\n                endListener(e.clientX, e.clientY, e);\n            });\n            window.addEventListener(\"touchend\", (e) => {\n                if (e.touches.length === 0 && e.changedTouches.length === 1) {\n                    moveListener(e.changedTouches[0].clientX, e.changedTouches[0].clientY, e);\n                }\n            });\n            this._container.addEventListener(\"dblclick\", (e) => {\n                if (e.target === this._container || e.target.closest(\"#title\") === this._titleElement) {\n                    this._container.classList.toggle(\"minimized\");\n                }\n            });\n            window.addEventListener(\"resize\", () => {\n                this._checkPositionAndDimension();\n            });\n            this._resizeElements = {\n                x: [\n                    this._window,\n                    this.findBy(\".window-resize.left\"),\n                    this.findBy(\".window-resize.right\")\n                ],\n                y: [\n                    this._window,\n                    this._titleElement,\n                    this.findBy(\".window-resize.top\"),\n                    this.findBy(\".window-resize.bottom\")\n                ],\n            };\n            this.moveTo(this._position.x, this._position.y);\n            this.setTitle(this._title);\n            return res;\n        });\n    }\n    resizeToContent() {\n        if (this._window) {\n            let diff = {\n                x: this._window.scrollWidth - this._window.clientWidth,\n                y: this._window.scrollHeight - this._window.clientHeight,\n            };\n            let dimension = this.getDimension();\n            if (diff.x === 0) {\n                let sum = 0;\n                this._resizeElements.x.forEach(e => sum += parseFloat(window.getComputedStyle(e).getPropertyValue(\"width\")));\n                diff.x = Math.ceil(sum) - dimension.x;\n            }\n            if (diff.y === 0) {\n                let sum = 0;\n                this._resizeElements.y.forEach(e => sum += parseFloat(window.getComputedStyle(e).getPropertyValue(\"height\")));\n                diff.y = Math.ceil(sum) - dimension.y;\n            }\n            dimension.x += diff.x;\n            dimension.y += diff.y;\n            if (!this._container.classList.contains(\"minimized\")) {\n                this.setDimension(dimension.x, dimension.y);\n            }\n            this._checkPositionAndDimension();\n        }\n    }\n    _checkPositionAndDimension() {\n        let dimension = this.getDimension();\n        if (isNaN(dimension.x) || isNaN(dimension.y)) {\n            return;\n        }\n        let maxPosition = { x: window.innerWidth - dimension.x, y: window.innerHeight - dimension.y };\n        this._position = {\n            x: Math.min(this._position.x, maxPosition.x),\n            y: Math.min(this._position.y, maxPosition.y)\n        };\n        if (this._position.x < 0) {\n            dimension.x += this._position.x;\n            this._position.x = 0;\n        }\n        if (this._position.y < 0) {\n            dimension.y += this._position.y;\n            this._position.y = 0;\n        }\n        this._container.style.left = this._position.x + \"px\";\n        this._container.style.top = this._position.y + \"px\";\n        if (!this._container.classList.contains(\"minimized\")) {\n            this.setDimension(dimension.x, dimension.y);\n        }\n    }\n    onStart(pauseArguments) {\n        const _super = Object.create(null, {\n            onStart: { get: () => super.onStart }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onStart.call(this, pauseArguments);\n            this._checkPositionAndDimension();\n            return res;\n        });\n    }\n    moveAt(x, y) {\n        return this.moveTo(this._position.x + x, this._position.y + y);\n    }\n    moveTo(x, y) {\n        this._position = { x: x, y: y };\n        this._container.style.left = x + \"px\";\n        this._container.style.top = y + \"px\";\n        this._checkPositionAndDimension();\n    }\n}\nexports.AbstractWindowFragment = AbstractWindowFragment;\n//# sourceMappingURL=AbstractWindowFragment.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AlphabeticListFragment = void 0;\nconst AbstractFragment_1 = require(\"../AbstractFragment\");\nconst Helper_1 = require(\"../../Legacy/Helper\");\nconst defaultView = require(\"../../../html/Framework/Fragment/alphabeticListFragment.html\");\nclass AlphabeticListFragment extends AbstractFragment_1.AbstractFragment {\n    constructor(site, view) {\n        super(site, Helper_1.Helper.nonNull(view, defaultView));\n        this._elements = {};\n        this._sideScrolling = false;\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            //TODO font-size changing\n            let sideAlphabet = this.findBy(\".alphabetic-list-sidealphabet\");\n            sideAlphabet.addEventListener(\"mousedown\", () => {\n                this._sideScrolling = true;\n            });\n            window.addEventListener(\"touchstart\", (e) => {\n                this._sideScrolling = true;\n            });\n            window.addEventListener(\"mouseup\", () => {\n                this._sideScrolling = false;\n            });\n            window.addEventListener(\"touchend\", () => {\n                this._sideScrolling = false;\n            });\n            this.findBy(\".alphabet-scroll-to\", true).forEach(elem => {\n                let listener = (e) => {\n                    if (this._sideScrolling) {\n                        this.findBy(\".alphabet-section.\" + elem.dataset.letter).scrollIntoView({\n                            behavior: \"smooth\",\n                            block: \"start\"\n                        });\n                    }\n                };\n                elem.addEventListener(\"mousedown\", (e) => {\n                    this._sideScrolling = true;\n                    listener(e);\n                });\n                elem.addEventListener(\"mousemove\", listener);\n                elem.addEventListener(\"touchstart\", (e) => {\n                    this._sideScrolling = true;\n                    listener(e);\n                });\n                elem.addEventListener(\"touchmove\", listener);\n            });\n            this.renderList();\n            return res;\n        });\n    }\n    setElements(elements) {\n        this._elements = {};\n        Object.keys(elements).sort(function (a, b) {\n            return a.toLowerCase().localeCompare(b.toLowerCase());\n        }).forEach(key => {\n            this._elements[key] = elements[key];\n        });\n    }\n    renderElement(element) {\n        console.warn(\"should be overloaded?\");\n        let elem = document.createElement(\"div\");\n        elem.innerText = element;\n        return elem;\n    }\n    renderList() {\n        this.findBy(\".alphabet-section\", true).forEach(section => {\n            Helper_1.Helper.removeAllChildren(section);\n        });\n        let currentLetter = 'A';\n        let currentSegment = this.findBy(\".alphabet-section.A\");\n        Object.keys(this._elements).forEach(key => {\n            let newLetter = key.substring(0, 1).toUpperCase();\n            if (newLetter !== currentLetter) {\n                currentLetter = newLetter;\n                let newSegment = this.findBy(\".alphabet-section.\" + newLetter);\n                if (newSegment !== null) {\n                    currentSegment = newSegment;\n                }\n            }\n            let element = this.renderElement(this._elements[key]);\n            currentSegment.appendChild(element);\n        });\n    }\n}\nexports.AlphabeticListFragment = AlphabeticListFragment;\n//# sourceMappingURL=AlphabeticListFragment.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TabFragment = void 0;\nconst AbstractFragment_1 = require(\"../AbstractFragment\");\nconst defaultTabView = require(\"../../../html/Framework/Fragment/tabFragment.html\");\nconst Helper_1 = require(\"../../Legacy/Helper\");\nconst ViewInflater_1 = require(\"../../ViewInflater\");\nconst Translator_1 = require(\"../../Translator\");\nclass TabFragment extends AbstractFragment_1.AbstractFragment {\n    constructor(site, view) {\n        super(site, Helper_1.Helper.nonNull(view, defaultTabView));\n        this._tabViews = [];\n        this._tabViewPromise = this._viewLoadedPromise;\n        if (Helper_1.Helper.isNotNull(view)) {\n            this._viewPromise.then(view => {\n                let views = view.querySelectorAll(\".tab-site\");\n                let buttons = view.querySelectorAll(\".tab-button\");\n                views.forEach((site, i) => {\n                    if (!site.classList.contains(\"tab-site-template\")) {\n                        // site.remove();\n                        // buttons[i].remove();\n                        this.addTab(buttons[i], site);\n                    }\n                });\n            });\n        }\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            this._nameContainer = this.findBy(\".tab-names\");\n            this._nameButton = this.findBy(\".tab-button-template\");\n            this._nameButton.classList.remove(\"tab-button-template\");\n            this._nameButton.remove();\n            this._tabContent = this.findBy(\".tab-content\");\n            this._tabSite = this.findBy(\".tab-site-template\");\n            this._tabSite.classList.remove(\"tab-site-template\");\n            this._tabSite.remove();\n            return res;\n        });\n    }\n    addTab(name, origView, nameIsTranslatable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            nameIsTranslatable = Helper_1.Helper.nonNull(nameIsTranslatable, true);\n            let tabView = {\n                name: name,\n                nameIsTranslatable: nameIsTranslatable,\n                viewPromise: ViewInflater_1.ViewInflater.getInstance().load(origView),\n                view: null,\n                button: null,\n            };\n            this._tabViews.push(tabView);\n            let isFirst = this._tabViews.length === 1;\n            this._tabViewPromise = this._tabViewPromise.then(() => tabView.viewPromise).then((view) => {\n                let tabViewElement = null;\n                if (view.classList.contains(\"tab-site\")) {\n                    tabViewElement = origView;\n                    origView.remove();\n                }\n                else {\n                    tabViewElement = this._tabSite.cloneNode(true);\n                    tabViewElement.appendChild(view);\n                }\n                tabView.view = tabViewElement;\n                this._tabContent.appendChild(tabViewElement);\n                let nameElement = null;\n                if (name instanceof Element) {\n                    nameElement = name;\n                    nameElement.remove();\n                }\n                else {\n                    let nameElement = this._nameButton.cloneNode(true);\n                    nameElement.appendChild((tabView.nameIsTranslatable) ? Translator_1.Translator.getInstance().makePersistentTranslation(name) : document.createTextNode(tabView.name));\n                }\n                this._nameContainer.appendChild(nameElement);\n                tabView.button = nameElement;\n                nameElement.addEventListener(\"click\", () => {\n                    this.setActiveTab(tabView);\n                });\n                if (isFirst) {\n                    this.setActiveTab(tabView);\n                }\n            });\n            yield this._tabViewPromise;\n        });\n    }\n    setActiveTab(tabView) {\n        let previousActive = this.findBy(\".tab-site.active\");\n        if (Helper_1.Helper.isNotNull(previousActive)) {\n            previousActive.classList.remove(\"active\");\n        }\n        let previousActiveButton = this.findBy(\".tab-button.active\");\n        if (Helper_1.Helper.isNotNull(previousActiveButton)) {\n            previousActiveButton.classList.remove(\"active\");\n        }\n        tabView.view.classList.add(\"active\");\n        tabView.button.classList.add(\"active\");\n    }\n}\nexports.TabFragment = TabFragment;\n//# sourceMappingURL=TabFragment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Menu = void 0;\nconst Helper_1 = require(\"../../Legacy/Helper\");\nconst MenuAction_1 = require(\"./MenuAction/MenuAction\");\nconst OpenSubmenuAction_1 = require(\"./MenuAction/OpenSubmenuAction\");\n/**\n * Klasse für ein Menü, was im Prinzip nichts anderes als eine Collection für MenuActions ist\n * Ein Menü hat einen oder mehrere Renderer, die für die Anzeige zuständig sind\n */\nclass Menu {\n    /**\n     * Setzt die Renderer und die initialen Actions\n     *\n     * @param renderer\n     * @param actions\n     */\n    constructor(renderer, actions) {\n        this._actions = [];\n        this._renderers = [];\n        this._submenus = [];\n        if (Array.isArray(renderer)) {\n            this._renderers = renderer;\n        }\n        else {\n            this._renderers = [renderer];\n        }\n        //Initialisiert onClickListener\n        this._onClickListener = this._generateOnClickListener();\n        //Setze die Actions so, um einzelne Actions noch zu überprüfen\n        Helper_1.Helper.nonNull(actions, []).forEach(action => {\n            this.addAction(action, false);\n        });\n        this._openSubmenuListener = null;\n    }\n    /**\n     * Erstellt ein neues Menu auf grundlage dieses Menüs. Alle Actions & Submenüs werden ebenfalls kopiert\n     * @param menu\n     * @return {Menu}\n     */\n    copy(menu) {\n        menu = Helper_1.Helper.nonNull(menu, new Menu());\n        menu._actions = [];\n        this._actions.forEach(action => {\n            menu.addAction(action.copy());\n        });\n        menu._renderers = this._renderers;\n        menu._onClickListener = this._onClickListener;\n        return menu;\n    }\n    /**\n     * Schließt das Menü, hauptsächlich hier zum Schließen der Submenüs.\n     * Zum öffnen wird nicht so eine Funktion gebraucht, da beim öffnen nicht die untermenüs geöffnet werden sollen\n     */\n    close() {\n        this._submenus.forEach(submenu => {\n            submenu.close();\n        });\n    }\n    /**\n     * Fügt eine Action dem Menü hinzu\n     *\n     * @param action\n     * @param redraw\n     */\n    addAction(action, redraw) {\n        //Überprüfung, ob es die richtige Klasse ist und ob die Action nicht schon hinzugefügt wurde\n        if (action instanceof MenuAction_1.MenuAction && this._actions.indexOf(action) === -1) {\n            //Falls es sich um ein Submenu handelt, füge dieses hinzu\n            if (action instanceof OpenSubmenuAction_1.OpenSubmenuAction) {\n                this._submenus.push(action.getSubmenu());\n            }\n            this._actions.push(action);\n            action.setMenu(this);\n            //Falls redraw true (oder nicht angegeben, redraw)\n            if (Helper_1.Helper.nonNull(redraw, true)) {\n                this.redraw();\n            }\n        }\n    }\n    removeAllActions(redraw) {\n        this._actions.forEach(action => action.setMenu(null));\n        this._actions = [];\n        this._submenus = [];\n        //Falls redraw true (oder nicht angegeben, redraw)\n        if (Helper_1.Helper.nonNull(redraw, true)) {\n            this.redraw();\n        }\n    }\n    /**\n     * Sortiert die Actions und sagt danach den Renderern, dass diese das Menü zeuchnen sollen\n     */\n    draw() {\n        try {\n            this.sortActions();\n            this._renderers.forEach(renderer => {\n                renderer.render(this);\n            });\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    /**\n     * Sortiert die Actions der Order nach\n     */\n    sortActions() {\n        this._actions = this._actions.sort(function (first, second) {\n            return first.getOrder() - second.getOrder();\n        });\n    }\n    openSubmenu(submenu) {\n        if (this._openSubmenuListener) {\n            this._openSubmenuListener(submenu);\n        }\n    }\n    setOpenSubmenuListener(listener) {\n        this._openSubmenuListener = listener;\n    }\n    /**\n     * Generiert den defaultmäßigen onclick-listener.\n     * @returns {Function}\n     * @private\n     */\n    _generateOnClickListener() {\n        return (event) => {\n            let _element = event.target;\n            //Falls es eine Action oder ein Unterlement einer Action war...\n            if (_element.matches('li') || _element.matches('li *')) {\n                //...finde das zugehörige Element und lese ID aus\n                _element = _element.closest(\"li\");\n                let actionId = parseInt(_element.dataset[\"id\"]);\n                //Schaue nach, welche Action angeklickt wurde\n                for (let i = 0, n = this._actions.length; i < n; i++) {\n                    if (this._actions[i].getId() === actionId) {\n                        //Falls action eine Funktion (und kein Link), sowie aktiv ist, führe action aus\n                        if (typeof this._actions[i].getAction() === 'function' && this._actions[i].isActivated()) {\n                            this._actions[i].getAction()(this._actions[i], event);\n                            event.preventDefault();\n                        }\n                        //Gebe gefundene Action zurück\n                        return this._actions[i];\n                    }\n                }\n                //Falls action nicht gefunden (da noch nicht beendet), suche in den submenüs nach der Action\n                for (let i = 0, n = this._submenus.length; i < n; i++) {\n                    let action = this._submenus[i].click(actionId, event);\n                    if (action) {\n                        return action;\n                    }\n                }\n            }\n            return null;\n        };\n    }\n    /**\n     * Setzt den OnClickListener\n     *\n     * @param listener\n     */\n    setOnClickListener(listener) {\n        this._onClickListener = listener;\n    }\n    /**\n     * Gibt den OnClickListener zurück\n     *\n     * @returns {*}\n     */\n    getOnClickListener() {\n        return this._onClickListener;\n    }\n    /**\n     * Gibt die Actions zurück\n     * @returns {Array}\n     */\n    getActions() {\n        return this._actions;\n    }\n    /**\n     * Triggert ein neues Rendern für eine Action. Das entsprechende ActionElement wird ausgetauscht\n     * @param action\n     */\n    redrawAction(action) {\n        this._renderers.forEach(renderer => {\n            renderer._triggerRenderAction(action);\n        });\n    }\n    /**\n     * Updated das entsprechende ActionElement abhängig vom Renderer. Das Element wird nicht ausgetauscht\n     * @param action\n     */\n    updateAction(action) {\n        this._renderers.forEach(renderer => {\n            renderer.updateAction(action);\n        });\n    }\n    /**\n     * alias für draw\n     */\n    redraw() {\n        this.draw();\n    }\n}\nexports.Menu = Menu;\n//# sourceMappingURL=Menu.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ErrorAction = void 0;\nconst MenuAction_1 = require(\"./MenuAction\");\nconst Dialog_1 = require(\"../../../Dialog/Dialog\");\nconst Translator_1 = require(\"../../../Translator\");\nconst errorIcon = require(\"../../../../img/errorIcon.png\");\nclass ErrorAction extends MenuAction_1.MenuAction {\n    constructor() {\n        super(\"\", () => {\n            let d = new Dialog_1.Dialog(ErrorAction._errors.join(\"<br/>\"), Translator_1.Translator.translate(\"error\"));\n            d.setTranslatable(false);\n            d.show();\n        }, MenuAction_1.MenuAction.SHOW_ALWAYS, -1000, ErrorAction.ERROR_ICON);\n        this._visible = (ErrorAction._errors.length > 0);\n        this._shouldTranslate = false;\n        console.log(\"icon: \", ErrorAction.ERROR_ICON);\n    }\n    static addError(errorMessage) {\n        if (this._errors.indexOf(errorMessage) === -1) {\n            this._errors.push(errorMessage);\n            this.getInstance().setVisibility((this._errors.length > 0));\n        }\n    }\n    static removeError(errorMessage) {\n        let index = this._errors.indexOf(errorMessage);\n        if (index >= 0) {\n            this._errors.splice(index, 1);\n            this.getInstance().setVisibility((this._errors.length > 0));\n        }\n    }\n    /**\n     * @return ErrorAction;\n     */\n    static getInstance() {\n        if (this._instance === null) {\n            this._instance = new ErrorAction();\n        }\n        return this._instance;\n    }\n}\nexports.ErrorAction = ErrorAction;\nErrorAction.ERROR_ICON = errorIcon;\nErrorAction._instance = null;\nErrorAction._errors = [];\n//# sourceMappingURL=ErrorAction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MenuAction = void 0;\nconst Helper_1 = require(\"../../../Legacy/Helper\");\n/**\n * Container für verschiedene Eigenschaften\n */\nclass MenuAction {\n    /**\n     * Erstellt eine MenuAction.\n     * Außer name und action ist alles mit Default-werten vorbelegt\n     *\n     * @param name\n     * @param action\n     * @param showFor\n     * @param order\n     * @param icon\n     */\n    constructor(name, action, showFor, order, icon) {\n        this._liClass = \"\";\n        this._shouldTranslate = true;\n        this._visible = true;\n        this._activated = true;\n        this._copies = [];\n        this._menu = null;\n        this._name = name;\n        this._action = action;\n        this._showFor = Helper_1.Helper.nonNull(showFor, MenuAction.SHOW_FOR_MEDIUM);\n        this._order = Helper_1.Helper.nonNull(order, 1000);\n        this._icon = icon;\n        this._id = MenuAction.lastId++;\n        this._liClass = \"\";\n        this._shouldTranslate = true;\n        this._visible = true;\n        this._activated = true;\n        this._menu = null;\n        this._copies = [];\n    }\n    /**\n     * Erstellt eine neue MenuAction auf grundlage dieser MenuAction. Alle Eigenschaften sind identisch, bis auf die ID\n     *\n     * @param action\n     * @return {MenuAction}\n     */\n    copy(action) {\n        let copiedAction = Helper_1.Helper.nonNull(action, new MenuAction());\n        copiedAction._name = this._name;\n        copiedAction._action = this._action;\n        copiedAction._showFor = this._showFor;\n        copiedAction._order = this._order;\n        copiedAction._liClass = this._liClass;\n        copiedAction._shouldTranslate = this._shouldTranslate;\n        copiedAction._visible = this._visible;\n        copiedAction._activated = this._activated;\n        copiedAction._icon = this._icon;\n        copiedAction._id = MenuAction.lastId++;\n        this._copies.push(copiedAction);\n        return copiedAction;\n        // return new MenuActionSlave(this);\n    }\n    // _triggerCopies(fn, args){\n    //     this._copies.forEach(copy => {\n    //         copy[fn].apply(copy, args);\n    //     })\n    // }\n    /**\n     * Sorgt dafür, dass die Action neu gezeichnet wird\n     */\n    redraw() {\n        if (Helper_1.Helper.isNotNull(this._menu)) {\n            this._menu.redrawAction(this);\n        }\n        this._copies.forEach(copy => copy.redraw());\n    }\n    /**\n     * Sorgt dafür, dass die ActionElemente geupdatet wird\n     */\n    update() {\n        this._menu.updateAction(this);\n        this._copies.forEach(copy => copy.update());\n    }\n    /**\n     * Gibt die Order der MenuAction zurück. Die Order bestimmt die Reihenfolge in der die Elemente angezeigt werden.\n     * Je kleiner die Order, desto weiter rechts/oben werden diese angezeigt\n     *\n     * @returns {*}\n     */\n    getOrder() {\n        return this._order;\n    }\n    /**\n     * Gibt zurück, ob die MenuAction aktiv ist\n     *\n     * @returns {boolean}\n     */\n    isActivated() {\n        return this._activated;\n    }\n    /**\n     * Gibt an, ob der Name übersetzt werden soll\n     *\n     * @returns {boolean}\n     */\n    isShouldTranslate() {\n        return this._shouldTranslate;\n    }\n    setShouldTranslate(shouldTranslate) {\n        this._shouldTranslate = (shouldTranslate === true);\n        this.redraw();\n    }\n    setVisibility(visibility) {\n        this._visible = visibility;\n        this.redraw();\n        this._copies.forEach(copy => copy.setVisibility(visibility));\n    }\n    /**\n     * Gibt an, ob die MenuAction sichtbar ist\n     *\n     * @returns {boolean}\n     */\n    isVisible() {\n        return this._visible;\n    }\n    /**\n     * Gibt den Namen zurück\n     *\n     * @returns {*}\n     */\n    getName() {\n        return this._name;\n    }\n    setName(name) {\n        this._name = name;\n        this.redraw();\n    }\n    /**\n     * Gibt die Action, welche beim Click ausgeführt werden soll zurück\n     * @returns {string|function}\n     */\n    getAction() {\n        return this._action;\n    }\n    /**\n     * Gibt die ID der MenuAction zurück\n     * @returns {number}\n     */\n    getId() {\n        return this._id;\n    }\n    /**\n     * Gibt das Icon der MenuAction zurück\n     * @returns {string|null}\n     */\n    getIcon() {\n        return this._icon;\n    }\n    setIcon(icon) {\n        this._icon = icon;\n        this.redraw();\n    }\n    /**\n     * Gibt die View-Klasse der Action zurück\n     * @returns {string}\n     */\n    getShowFor() {\n        return this._showFor;\n    }\n    /**\n     * Gibt eine odder mehrere extra Klasse zurück, die dem li-Element der Action hinzugefügt werden kann\n     * @returns {string}\n     */\n    getLiClass() {\n        return this._liClass;\n    }\n    setLiClass(cssClass) {\n        this._liClass = cssClass;\n        this._copies.forEach(c => c.setLiClass(cssClass));\n        this.redraw();\n    }\n    /**\n     * Gibt das zugehörige Menu zurück\n     *\n     * @returns {null}\n     */\n    getMenu() {\n        return this._menu;\n    }\n    /**\n     * Setzt das zugehörige Menu\n     *\n     * @param menu\n     */\n    setMenu(menu) {\n        this._menu = menu;\n    }\n}\nexports.MenuAction = MenuAction;\n/**\n * Letzte ID, die vergeben wurde. Wird beim Erstellen einer Acton um eins erhöht\n * @type {number}\n */\nMenuAction.lastId = 0;\n/**\n * Die SHOW_ALWAYS-Visibility-Klasse\n * Das Element wird bei jeder Größe in der NavBar angezeigt\n *\n * @type {string}\n */\nMenuAction.SHOW_ALWAYS = \"always\";\n/**\n * Die SHOW_FOR_SMEDIUM-Visibility-Klasse\n * Das Element wird in der NavBar angezeigt, wenn der Bildschirm mindestens die Größe \"SMedium\" (zwischen Small und Medium) hat\n *\n * @type {string}\n */\nMenuAction.SHOW_FOR_SMEDIUM = \"smedium\";\n/**\n * Die SHOW_FOR_MEDIUM-Visibility-Klasse\n * Das Element wird in der NavBar angezeigt, wenn der Bildschirm mindestens die Größe \"Medium\" hat\n *\n * @type {string}\n */\nMenuAction.SHOW_FOR_MEDIUM = \"medium\";\n/**\n * Die SHOW_FOR_LARGE-Visibility-Klasse\n * Das Element wird in der NavBar angezeigt, wenn der Bildschirm mindestens die Größe \"Large\" hat\n *\n * @type {string}\n */\nMenuAction.SHOW_FOR_LARGE = \"large\";\n/**\n * Die SHOW_FOR_MEDIUM-Visibility-Klasse\n * Das Element wird nie in der NavBar angezeigt, sondern immer nur im aufklapbaren Menu\n *\n * @type {string}\n */\nMenuAction.SHOW_NEVER = \"never\";\n//# sourceMappingURL=MenuAction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpenSubmenuAction = void 0;\nconst MenuAction_1 = require(\"./MenuAction\");\nconst Helper_1 = require(\"../../../Legacy/Helper\");\n/**\n * Action, welche ein Untermenü öffnet\n */\nclass OpenSubmenuAction extends MenuAction_1.MenuAction {\n    /**\n     * Bekommt ein submenu anstelle einer Action übergeben.\n     * Erstellt automatisch die action zum öffnen/schließen des Menüs\n     *\n     * @param title\n     * @param menu\n     * @param showFor\n     * @param order\n     * @param icon\n     */\n    constructor(title, menu, showFor, order, icon) {\n        //Erstellt die action zum schließen/öffnen des Submenüs\n        super(title, action => {\n            action.getSubmenu().toggle();\n            action.update();\n        }, showFor, order, icon);\n        this._submenu = menu;\n        menu.setParentAction(this);\n    }\n    /**\n     * Erstellt eine neue MenuAction auf grundlage dieser MenuAction. Alle Eigenschaften sind identisch, bis auf die ID\n     * und das Submenu, welches ebenfalls kopiert wird\n     *\n     * @param action\n     * @return {MenuAction}\n     */\n    copy(action) {\n        action = Helper_1.Helper.nonNull(action, new OpenSubmenuAction(null, this._submenu.copy()));\n        action = super.copy(action);\n        action._submenu.setParentAction(action);\n        return action;\n    }\n    /**\n     * Gibt das Submenu zurück\n     *\n     * @returns {*}\n     */\n    getSubmenu() {\n        return this._submenu;\n    }\n}\nexports.OpenSubmenuAction = OpenSubmenuAction;\n//# sourceMappingURL=OpenSubmenuAction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StartSiteMenuAction = void 0;\nconst MenuAction_1 = require(\"./MenuAction\");\nconst App_1 = require(\"../../../App\");\nclass StartSiteMenuAction extends MenuAction_1.MenuAction {\n    constructor(name, site, showFor, order, icon) {\n        super(name, () => {\n            if (StartSiteMenuAction._app) {\n                if (Array.isArray(site) && site.length >= 2) {\n                    StartSiteMenuAction._app.startSite(site[0], site[1]);\n                }\n                else {\n                    StartSiteMenuAction._app.startSite(site);\n                }\n            }\n        }, showFor, order, icon);\n    }\n}\nexports.StartSiteMenuAction = StartSiteMenuAction;\nStartSiteMenuAction._app = null;\nApp_1.App.addInitialization(app => {\n    StartSiteMenuAction._app = app;\n});\n//# sourceMappingURL=StartSiteMenuAction.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NavbarFragment = void 0;\nconst AbstractFragment_1 = require(\"../AbstractFragment\");\nconst defaultViewNavbar = require(\"../../../html/siteTemplates/navbar.html\");\nconst MenuAction_1 = require(\"./MenuAction/MenuAction\");\nconst Helper_1 = require(\"../../Legacy/Helper\");\nconst Context_1 = require(\"../Context\");\nconst Menu_1 = require(\"./Menu\");\nconst OpenSubmenuAction_1 = require(\"./MenuAction/OpenSubmenuAction\");\nconst DropdownRenderer_1 = require(\"./Renderer/DropdownRenderer\");\nconst AccordionRenderer_1 = require(\"./Renderer/AccordionRenderer\");\nconst ColorIndicator_1 = require(\"../../ColorIndicator/ColorIndicator\");\nconst App_1 = require(\"../../App\");\n/**\n * Fragment, welches ein Menü in der Navbar anzeigt und hinzufügt.\n *\n * Technisch gesehen wird das gleiche Menü zwei mal gerendert und hinzugefügt. Einmal das Menü in der Navbar, welches\n * immer sichtbar ist und einmal das versteckte Menü, welches durch einen Toggle-Button angezeigt werden kann.\n * Dabei hat jede MenuAction eine Sichtbarkeitsklasse. Anhand der Sichtbarkeitsklasse und der Bildschirmgröße wird\n * entweder das eine oder das andere Element sichtbar, jedoch niemals beide.\n */\nclass NavbarFragment extends AbstractFragment_1.AbstractFragment {\n    /**\n     * Erstellt das Fragment\n     * @param site\n     * @param {string|Node|null} viewNavbar\n     */\n    constructor(site, viewNavbar) {\n        super(site, Helper_1.Helper.nonNull(viewNavbar, defaultViewNavbar));\n        this._menu = null;\n        this._responsiveMenu = null;\n        this._backgroundImage = \"\";\n        this._menuActions = [];\n        NavbarFragment.defaultActions.forEach(action => {\n            this._menuActions.push(action.copy());\n        });\n        this._scrollWidget = null;\n        this._canGoBack = true;\n        this._logo = App_1.App.getLogo();\n    }\n    setLogo(logo) {\n        this._logo = logo;\n        if (this._view) {\n            if (Helper_1.Helper.isNotNull(this._logo)) {\n                this.findBy(\".logo\").classList.remove(\"hidden\");\n                this.findBy(\".logo-img\").src = this._logo;\n            }\n            else {\n                this.findBy(\".logo\").classList.add(\"hidden\");\n            }\n        }\n    }\n    setCanGoBack(canGoBack) {\n        this._canGoBack = canGoBack;\n        if (this._view) {\n            if (this._canGoBack) {\n                this.findBy(\".back-button\").classList.remove(\"hidden\");\n            }\n            else {\n                this.findBy(\".back-button\").classList.add(\"hidden\");\n            }\n        }\n    }\n    setScrollWidget(scrollWidget) {\n        this._scrollWidget = scrollWidget;\n        if (this._view && this._scrollWidget) {\n            let nav = this.findBy(\".top-bar > span\");\n            let background = this.findBy(\".background-img\");\n            let listener = () => {\n                let navbarElem = this.findBy(\"nav.top-bar\");\n                if (nav.getBoundingClientRect().bottom >= background.getBoundingClientRect().bottom) {\n                    navbarElem.classList.add(\"solid\");\n                }\n                else {\n                    navbarElem.classList.remove(\"solid\");\n                }\n            };\n            background.addEventListener(\"load\", listener);\n            scrollWidget.addEventListener(\"scroll\", listener);\n            requestAnimationFrame(listener);\n        }\n    }\n    setBackgroundImage(backgroundImage) {\n        this._backgroundImage = backgroundImage;\n        if (this._view) {\n            let navbarElem = this.findBy(\"nav.top-bar\");\n            if (Helper_1.Helper.isNotNull(this._backgroundImage)) {\n                let imgElem = this.findBy(\".background-img\");\n                let colorIndicator = ColorIndicator_1.ColorIndicator.getInstance();\n                // navbarElem.classList.add(\"color-black\");\n                imgElem.addEventListener(\"load\", () => {\n                    if (this._backgroundImage !== \"\") {\n                        let color = (colorIndicator.getAverageImgColor(imgElem, undefined, 150));\n                        let textColor = colorIndicator.invertColorBW(color);\n                        if (textColor.r === 0 && textColor.g === 0 && textColor.b === 0) {\n                            navbarElem.classList.remove(\"color-white\");\n                            navbarElem.classList.add(\"color-black\");\n                        }\n                        else {\n                            navbarElem.classList.remove(\"color-black\");\n                            navbarElem.classList.add(\"color-white\");\n                        }\n                    }\n                    else {\n                        navbarElem.classList.remove(\"color-black\");\n                        navbarElem.classList.remove(\"color-white\");\n                    }\n                });\n                requestAnimationFrame(() => {\n                    let heightElement = navbarElem.querySelector(\".grid-container\");\n                    navbarElem.style = \"min-height:\" + heightElement.getBoundingClientRect().height + \"px\";\n                    heightElement.addEventListener(\"resize\", () => {\n                        navbarElem.style = \"min-height:\" + heightElement.getBoundingClientRect().height + \"px\";\n                    });\n                });\n                imgElem.src = this._backgroundImage;\n                navbarElem.classList.add(\"with-image\");\n            }\n            else {\n                navbarElem.classList.remove(\"with-image\");\n            }\n        }\n    }\n    /**\n     * Wird aufgerufen, sobald die View geladen ist\n     * @returns {Promise<*>}\n     */\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            this.setTitleElement(document.createTextNode(NavbarFragment.title));\n            //Erstelle die Renderers und das Menü\n            let renderers = [];\n            renderers.push(new DropdownRenderer_1.DropdownRenderer(this.findBy(\"#navbar-menu-visible\")));\n            renderers.push(new AccordionRenderer_1.AccordionRenderer(this.findBy(\"#navbar-menu-hidden\")));\n            this._menu = new Menu_1.Menu(renderers, this._menuActions);\n            this._closeListenerContainer = this.findBy(\"#navbar-close-listener-container\");\n            //Falls im visible-submenu eine Submenu-Action zu sehen ist\n            this._menu.setOpenSubmenuListener(() => {\n                this._showCloseListener();\n            });\n            //Falls ein Element im Menü angeklickt wird, sollte das Menü geschlossen werden,\n            //außer dadurch wird ein Untermenü geöffnet/geschlossen\n            let oldListener = this._menu.getOnClickListener();\n            this._menu.setOnClickListener(e => {\n                if (!(oldListener(e) instanceof OpenSubmenuAction_1.OpenSubmenuAction)) {\n                    this.closeMenu();\n                }\n            });\n            //Fügt close/open-Listener für den Toggle-Button hinzu\n            this._responsiveMenu = this.findBy(\"#responsive-menu\");\n            this.findBy(\"#responsive-menu-toggle\").onclick = () => {\n                if (this._responsiveMenu.classList.contains(\"visible\")) {\n                    this.closeMenu();\n                }\n                else {\n                    this.openMenu();\n                }\n            };\n            //Wenn das \"versteckte\" Menü geöffnet ist, sollte jeder Click nicht auf das Menü dieses wieder schließen\n            //Dazu gibt es den navbar-close-listener der sich vor allen (außer dem Menü) befindet. Er wird nur angezeigt,\n            //wenn das Menü offen ist\n            let navbarFragment = this;\n            this.findBy(\"#navbar-close-listener\").addEventListener(\"click\", function (e) {\n                if (e.target === this) {\n                    navbarFragment.closeMenu();\n                }\n            });\n            //Wenn die größe des Fenster geändert wird, muss nachgeschaut werden, ob der Menü-Button für das hidden-Menü noch angezeigt werden muss\n            window.addEventListener('resize', () => {\n                //Reicht aus, wenn Seite im Vordergrund, da bei jedem Start (durch onStart) der toggleButton geupdatet wird\n                if (this._state === Context_1.Context.STATE_RUNNING) {\n                    this.updateToggleButton();\n                }\n            });\n            //Rendere das Menü\n            this.drawMenu();\n            this.findBy(\".back-button\").addEventListener(\"click\", () => {\n                this.goBack();\n            });\n            this.setCanGoBack(this._canGoBack);\n            this.setBackgroundImage(this._backgroundImage);\n            this.setScrollWidget(this._scrollWidget);\n            this.setLogo(this._logo);\n            return res;\n        });\n    }\n    goBack() {\n        if (this._canGoBack) {\n            this.getSite().goBack();\n        }\n    }\n    /**\n     * Jedes mal, wenn die Seite startet, update den toggleButton\n     *\n     * @param pauseArguments\n     * @returns {Promise<void>}\n     */\n    onStart(pauseArguments) {\n        const _super = Object.create(null, {\n            onStart: { get: () => super.onStart }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            _super.onStart.call(this, pauseArguments);\n            this.updateToggleButton();\n        });\n    }\n    _showCloseListener() {\n        if (this._closeListenerContainer) {\n            this._closeListenerContainer.style.display = 'block';\n        }\n    }\n    /**\n     * Schließe das Menü\n     */\n    closeMenu() {\n        if (Helper_1.Helper.isNotNull(this._responsiveMenu)) {\n            this._responsiveMenu.classList.remove(\"visible\");\n        }\n        if (this._closeListenerContainer) {\n            this._closeListenerContainer.style.display = 'none';\n        }\n        if (this._menu) {\n            this._menu.close();\n        }\n    }\n    /**\n     * Öffne das Menü\n     */\n    openMenu() {\n        if (Helper_1.Helper.isNotNull(this._responsiveMenu)) {\n            // this._responsiveMenu.style.display = 'block';\n            this._responsiveMenu.classList.add(\"visible\");\n        }\n        this._showCloseListener();\n    }\n    /**\n     * rendere das Menü\n     */\n    drawMenu() {\n        if (Helper_1.Helper.isNotNull(this._menu)) {\n            this._menu.draw();\n        }\n    }\n    /**\n     * Update die Sichtbarkeit des MenüButtons für das \"versteckte\" Menü\n     */\n    updateToggleButton() {\n        //Bekomme die aktuelle Bildschirm-größe als Foundation-Klasse\n        let size = NavbarFragment._getCurrentSize();\n        //schaue hier nach den enthaltenen Elementen. Evtl sollte das direkt an den MenüActions gemacht werden\n        let firstParentElement = this.findBy(\"#navbar-menu-visible\");\n        if (\n        //Es existieren Elemente für large und Bildschirmgröße ist kleiner large => ToggleButton muss angezeigt werden\n        (size === \"medium\" || size === \"smedium\" || size === \"small\") &&\n            firstParentElement.querySelectorAll(\".\" + MenuAction_1.MenuAction.SHOW_FOR_LARGE + \":not(.hidden)\").length > 0 ||\n            //Es existieren Elemente für medium und Bildschirmgröße ist kleiner medium=> ToggleButton muss angezeigt werden\n            (size === \"smedium\" || size === \"small\") &&\n                firstParentElement.querySelectorAll(\".\" + MenuAction_1.MenuAction.SHOW_FOR_MEDIUM + \":not(.hidden)\").length > 0 ||\n            //Es existieren Elemente für smedium und Bildschirmgröße ist kleiner medium=> ToggleButton muss angezeigt werden\n            (size === \"small\") &&\n                firstParentElement.querySelectorAll(\".\" + MenuAction_1.MenuAction.SHOW_FOR_SMEDIUM + \":not(.hidden)\").length > 0 ||\n            //Es existieren Elemente, welche nie angezeigt werden sollen => ToggleButton muss angezeigt werden\n            firstParentElement.querySelectorAll(\".\" + MenuAction_1.MenuAction.SHOW_NEVER + \":not(.hidden)\").length > 0) {\n            document.getElementById(\"responsive-menu-toggle\").style.display = 'block';\n        }\n        else {\n            document.getElementById(\"responsive-menu-toggle\").style.display = 'none';\n            //schließe Menü, falls es offen war\n            this.closeMenu();\n        }\n    }\n    /**\n     * Funktion zum hinzufügen von Actions\n     * @param action\n     */\n    addAction(action) {\n        this._menuActions.push(action);\n        //Falls Menü schon existiert, füge Elemente hinzu\n        if (Helper_1.Helper.isNotNull(this._menu)) {\n            this._menu.addAction(action);\n        }\n    }\n    /**\n     * Funktion zum hinzufügen von Actions\n     * @param redraw\n     */\n    removeAllActions(redraw) {\n        this._menuActions = [];\n        //Falls Menü schon existiert, füge Elemente hinzu\n        if (Helper_1.Helper.isNotNull(this._menu)) {\n            this._menu.removeAllActions(redraw);\n        }\n    }\n    /**\n     * Updatet das Title-Element\n     * @param titleElement\n     */\n    setTitleElement(titleElement) {\n        Helper_1.Helper.removeAllChildren(this.findBy(\"#title-element-container\")).appendChild(titleElement);\n    }\n    /**\n     * Gibt die aktuelle Size zurück\n     *\n     * @returns {*}\n     * @private\n     */\n    static _getCurrentSize() {\n        let matched;\n        //Queries sind paare von css-selektoren auf die Mindest-Breite und Namen\n        //Queries sind so geordnet, dass größter zum schluss kommt\n        let queries = NavbarFragment._getViewQueries();\n        for (let i = 0; i < queries.length; i++) {\n            let query = queries[i];\n            //Letzter sollte matchen, daher noch nicht breaken\n            if (matchMedia(query._value).matches) {\n                matched = query;\n            }\n        }\n        if (typeof matched === 'object') {\n            return matched._name;\n        }\n        else {\n            return matched;\n        }\n    }\n    /**\n     * Gibt die ViewQueries zurück, triggert die Berechnung der ViewQueries, falls das noch nicht geschehen ist\n     *\n     * @returns {Array}\n     * @private\n     */\n    static _getViewQueries() {\n        if (NavbarFragment.queries.length === 0) {\n            NavbarFragment.queries = NavbarFragment._calculateViewQueries();\n        }\n        return NavbarFragment.queries;\n    }\n    /**\n     * Berechnet die ViewQueries, bzw liest diese aus Foundation/CSS ein\n     * Eine Veränderung der Werte in SASS, verändert daher auch hier die Werte\n     *\n     * @returns {*}\n     * @private\n     */\n    static _calculateViewQueries() {\n        //Hilfs-Funktion zum Parsen der Bildschirmgröße\n        function parseStyleToObject(str) {\n            let styleObject = {};\n            if (typeof str !== 'string') {\n                return styleObject;\n            }\n            str = str.trim().slice(1, -1); // browsers re-quote string style values\n            if (!str) {\n                return styleObject;\n            }\n            styleObject = str.split('&').reduce(function (ret, param) {\n                const parts = param.replace(/\\+/g, ' ').split('=');\n                let key = parts[0];\n                let val = parts[1];\n                key = decodeURIComponent(key);\n                // missing `=` should be `null`:\n                // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n                val = val === undefined ? null : decodeURIComponent(val);\n                if (!ret.hasOwnProperty(key)) {\n                    ret[key] = val;\n                }\n                else if (Array.isArray(ret[key])) {\n                    ret[key].push(val);\n                }\n                else {\n                    ret[key] = [ret[key], val];\n                }\n                return ret;\n            }, {});\n            return styleObject;\n        }\n        //die Font-Family ist reiner Text. Daher übergibt Foundation die Bildchirmgröße mit den dazugehörigen Namen als\n        // Font-Family in einem Element im Head\n        let cssStyle = document.getElementsByClassName('foundation-mq');\n        if (cssStyle.length === 0) {\n            return;\n        }\n        let queries = [];\n        //Lade Bildschirmgrößen und speichere diese als Query in einem Array\n        let cssStyleElements = parseStyleToObject(window.getComputedStyle(cssStyle[0]).getPropertyValue('font-family'));\n        for (let key in cssStyleElements) {\n            if (cssStyleElements.hasOwnProperty(key)) {\n                //Erstelle aus der Bildschirmgröße die Queries\n                queries.push({\n                    _name: key,\n                    _value: 'only screen and (min-width: ' + cssStyleElements[key] + ')'\n                });\n            }\n        }\n        return queries;\n    }\n}\nexports.NavbarFragment = NavbarFragment;\nNavbarFragment.queries = [];\nNavbarFragment.title = \"MeinBerufBau\";\nNavbarFragment.defaultActions = [];\n//# sourceMappingURL=NavbarFragment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccordionRenderer = void 0;\nconst OpenSubmenuAction_1 = require(\"../MenuAction/OpenSubmenuAction\");\nconst MenuRenderer_1 = require(\"./MenuRenderer\");\nconst Helper_1 = require(\"../../../Legacy/Helper\");\nconst Translator_1 = require(\"../../../Translator\");\n/**\n * Leitet von DropdownRenderer ab, da Funktionalität fast gleich ist\n */\nclass AccordionRenderer extends MenuRenderer_1.MenuRenderer {\n    /**\n     * Rendert eine Action\n     *\n     * @param action\n     * @returns {HTMLLIElement}\n     */\n    renderAction(action) {\n        let linkElement = this.renderLinkElement(action);\n        let liElement = this.renderLiElement(action);\n        liElement.insertBefore(linkElement, liElement.firstChild);\n        return liElement;\n    }\n    /**\n     * Rendert das AnchorElement für eine Action\n     * @param action\n     * @returns {HTMLAnchorElement}\n     */\n    renderLinkElement(action) {\n        let aElement = document.createElement(\"a\");\n        if (typeof action.getAction() === 'string') {\n            aElement.href = action.getAction();\n        }\n        if (Helper_1.Helper.isNotNull(action.getIcon())) {\n            let iconElement = document.createElement(\"img\");\n            iconElement.src = action.getIcon();\n            iconElement.classList.add('action-image');\n            if (action.isShouldTranslate()) {\n                iconElement.dataset[\"translationTitle\"] = action.getName();\n                iconElement.classList.add(Translator_1.Translator.getInstance().getTranslationClass());\n            }\n            else {\n                iconElement.title = action.getName();\n            }\n            aElement.appendChild(iconElement);\n        }\n        let name = action.getName();\n        // debugger;\n        if (action.isShouldTranslate()) {\n            name = Translator_1.Translator.makePersistentTranslation(name);\n        }\n        else {\n            name = document.createTextNode(name);\n        }\n        aElement.appendChild(name);\n        return aElement;\n    }\n    /**\n     * Render das LI-Element für eine Action\n     *\n     * @param action\n     * @returns {HTMLLIElement}\n     */\n    renderLiElement(action) {\n        let liElement = document.createElement(\"li\");\n        if (action.getLiClass().trim() !== \"\") {\n            liElement.classList.add(...action.getLiClass().split(\" \"));\n        }\n        // liElement.appendChild(aElement);\n        liElement.dataset[\"id\"] = action.getId();\n        if (Helper_1.Helper.isNotNull(action.getIcon())) {\n            liElement.classList.add(\"img\");\n        }\n        if (!action.isVisible()) {\n            liElement.classList.add(\"hidden\");\n        }\n        liElement.classList.add(action.getShowFor());\n        return liElement;\n    }\n    /**\n     * Da abgeleitet von DropdownRenderer, muss eine Klasse wieder entfernt werden\n     *\n     * @param action\n     * @returns {*}\n     */\n    renderSubmenuAction(action) {\n        let submenuActionElement = super.renderSubmenuAction(action);\n        submenuActionElement.classList.remove('is-dropdown-submenu-parent');\n        submenuActionElement.classList.add('is-accordion-submenu-parent');\n        return submenuActionElement;\n    }\n    /**\n     * erstellt ein SubmenuParent für Accordion\n     * @param action\n     * @returns {HTMLUListElement}\n     */\n    createSubmenuParentElement(action) {\n        let menuElement = document.createElement(\"ul\");\n        menuElement.classList.add(\"menu\");\n        menuElement.classList.add(\"vertical\");\n        menuElement.classList.add(\"submenu\");\n        menuElement.classList.add(\"accordion-menu\");\n        menuElement.classList.add(\"is-accordion-submenu\");\n        menuElement.classList.add(\"first-sub\");\n        return menuElement;\n    }\n    /**\n     * Updatet ein ActionElement\n     * @param action\n     */\n    updateAction(action) {\n        if (action instanceof OpenSubmenuAction_1.OpenSubmenuAction) {\n            let submenuElement = this.getElementForAction(action).querySelector(\".submenu\");\n            if (action.getSubmenu().isOpen()) {\n                this.getElementForAction(action).setAttribute(\"aria-expanded\", true);\n                submenuElement.classList.add(\"js-active\");\n                submenuElement.style = \"\";\n            }\n            else {\n                this.getElementForAction(action).removeAttribute(\"aria-expanded\");\n                submenuElement.classList.remove(\"js-activ\");\n                submenuElement.style = \"display:none;\";\n            }\n        }\n    }\n}\nexports.AccordionRenderer = AccordionRenderer;\n//# sourceMappingURL=AccordionRenderer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DropdownRenderer = void 0;\nconst OpenSubmenuAction_1 = require(\"../MenuAction/OpenSubmenuAction\");\nconst AccordionRenderer_1 = require(\"./AccordionRenderer\");\nconst Submenu_1 = require(\"../Submenu\");\n/**\n * Erstellt ein Dropdown-Menu\n */\nclass DropdownRenderer extends AccordionRenderer_1.AccordionRenderer {\n    constructor(parentElement) {\n        super(parentElement);\n        this._accordionMenuRenderer = new AccordionRenderer_1.AccordionRenderer();\n    }\n    /**\n     * Rendert die SubmenuAction\n     *\n     * @param action\n     * @returns {*}\n     */\n    renderSubmenuAction(action) {\n        if (action.getMenu() instanceof Submenu_1.Submenu) {\n            return super.renderSubmenuAction(action);\n        }\n        let submenuActionElement = super.renderSubmenuAction(action);\n        submenuActionElement.classList.add('is-dropdown-submenu-parent');\n        submenuActionElement.classList.add('opens-right');\n        return submenuActionElement;\n    }\n    /**\n     * Erstellt ein SubmenuParent\n     *\n     * @param action\n     * @returns {HTMLUListElement}\n     */\n    createSubmenuParentElement(action) {\n        if (action.getMenu() instanceof Submenu_1.Submenu) {\n            return super.createSubmenuParentElement(action);\n        }\n        let menuElement = document.createElement(\"ul\");\n        menuElement.classList.add(\"menu\");\n        menuElement.classList.add(\"vertical\");\n        menuElement.classList.add(\"submenu\");\n        menuElement.classList.add(\"accordion-menu\");\n        menuElement.classList.add(\"is-dropdown-submenu\");\n        menuElement.classList.add(\"first-sub\");\n        return menuElement;\n    }\n    /**\n     * Updatet das Element für eine Action\n     * @param action\n     */\n    updateAction(action) {\n        if (action.getMenu() instanceof Submenu_1.Submenu) {\n            return super.updateAction(action);\n        }\n        if (action instanceof OpenSubmenuAction_1.OpenSubmenuAction) {\n            let submenuElement = this.getElementForAction(action).querySelector(\".submenu\");\n            if (action.getSubmenu().isOpen()) {\n                submenuElement.classList.add(\"js-dropdown-active\");\n            }\n            else {\n                submenuElement.classList.remove(\"js-dropdown-active\");\n            }\n        }\n    }\n}\nexports.DropdownRenderer = DropdownRenderer;\n//# sourceMappingURL=DropdownRenderer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MenuRenderer = void 0;\nconst Helper_1 = require(\"../../../Legacy/Helper\");\nconst OpenSubmenuAction_1 = require(\"../MenuAction/OpenSubmenuAction\");\n/**\n * Rendert ein Menü\n */\nclass MenuRenderer {\n    /**\n     * Jeder Renderer hat ein Element, wo er die gerenderten Elemente hinzufügt\n     *\n     * @param parentElement\n     */\n    constructor(parentElement) {\n        this._parentElement = parentElement;\n        this._renderedElements = {};\n    }\n    /**\n     * Stößt das Rendern an\n     * @param menu\n     * @param parentElement\n     */\n    render(menu, parentElement) {\n        let actions = menu.getActions();\n        //Funktion wird auch für Submenüs genutzt. Daher muss hier ein anderes parentElement übergeben werden\n        parentElement = Helper_1.Helper.nonNull(parentElement, this._parentElement);\n        if (Helper_1.Helper.isNotNull(parentElement)) {\n            Helper_1.Helper.removeAllChildren(parentElement);\n            //Füge Elemente hinzu\n            actions.forEach(action => {\n                parentElement.appendChild(this.getElementForAction(action));\n            });\n            //Setze den onclick-Listener\n            parentElement.onclick = (e) => {\n                if (typeof menu.getOnClickListener() === 'function') {\n                    menu.getOnClickListener()(e);\n                }\n            };\n        }\n    }\n    /**\n     * Führt das Rendern der Elemente aus und ersetzt evtl schon alte Elemente\n     * Auslagern von renderAction und renderSubmenuAction zum besseren überschreiben der Funktionen.\n     *\n     * renderSubmenuAction und renderAction sollten nur von dieser Funktion aufgerufen werden, damit die\n     * _rendererElements aktuell bleiben!\n     *\n     * @param action\n     * @returns {HTMLElement}\n     * @private\n     */\n    _triggerRenderAction(action) {\n        let oldElement = this._renderedElements[action.getId()];\n        if (action instanceof OpenSubmenuAction_1.OpenSubmenuAction) {\n            this._renderedElements[action.getId()] = this.renderSubmenuAction(action);\n        }\n        else {\n            this._renderedElements[action.getId()] = this.renderAction(action);\n        }\n        this.updateAction(action);\n        if (Helper_1.Helper.isNotNull(oldElement)) {\n            oldElement.replaceWith(this._renderedElements[action.getId()]);\n        }\n        return this._renderedElements[action.getId()];\n    }\n    /**\n     * Gibt das Element zur Action. Falls es noch nicht existiert, wird dieses gerendert\n     * @param action\n     * @returns {*}\n     */\n    getElementForAction(action) {\n        if (Helper_1.Helper.isNull(this._renderedElements[action.getId()])) {\n            this._triggerRenderAction(action);\n        }\n        return this._renderedElements[action.getId()];\n    }\n    /**\n     * Funktion zum überladen\n     * @param action\n     */\n    renderAction(action) {\n        return null;\n    }\n    /**\n     * Funktion zum überladen\n     * @param action\n     */\n    updateAction(action) {\n    }\n    /**\n     * Rendert eine SubmenuAction, kann/sollte überladen werden\n     * @param action\n     * @returns {*}\n     */\n    renderSubmenuAction(action) {\n        let actionElement = this.renderAction(action);\n        action.getSubmenu().sortActions();\n        let submenuParentElement = this.createSubmenuParentElement(action);\n        this.render(action.getSubmenu(), submenuParentElement);\n        actionElement.appendChild(submenuParentElement);\n        return actionElement;\n    }\n    ;\n    /**\n     * Erstellt ein Element für ein Submenu. Sollte überladen werden\n     * @param action\n     * @returns {HTMLUListElement}\n     */\n    createSubmenuParentElement(action) {\n        return document.createElement(\"ul\");\n    }\n}\nexports.MenuRenderer = MenuRenderer;\n//# sourceMappingURL=MenuRenderer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Submenu = void 0;\nconst Menu_1 = require(\"./Menu\");\nconst Helper_1 = require(\"../../Legacy/Helper\");\nconst OpenSubmenuAction_1 = require(\"./MenuAction/OpenSubmenuAction\");\n/**\n * Submenü, ein untermenü\n */\nclass Submenu extends Menu_1.Menu {\n    /**\n     * Constructor für ein Submenu\n     *\n     * Bekommt parameter für die OpenSubmenuAction übergeben und reicht diese weiter.\n     * Renderer besitzt das Menü keine, da die Renderer des ParentMenus genutzt werden\n     * Actions können nicht bei der Erstellung hinzugefügt werden\n     *\n     * @param title\n     * @param showFor\n     * @param order\n     * @param icon\n     * @param renderers\n     */\n    constructor(title, showFor, order, icon, renderers) {\n        super(Helper_1.Helper.nonNull(renderers, []));\n        this._parentAction = new OpenSubmenuAction_1.OpenSubmenuAction(title, this, showFor, order, icon);\n        this._isOpen = false;\n    }\n    /**\n     * Erstellt ein neues Menu auf grundlage dieses Menüs. Alle Actions & Submenüs werden ebenfalls kopiert\n     *\n     * @param menu\n     * @return {Submenu}\n     */\n    copy(menu) {\n        menu = Helper_1.Helper.nonNull(menu, new Submenu());\n        menu = super.copy(menu);\n        menu._isOpen = this._isOpen;\n        return menu;\n    }\n    /**\n     * Setzt die ParentAction\n     *\n     * @param action\n     */\n    setParentAction(action) {\n        this._parentAction = action;\n    }\n    /**\n     * Gibt das ParentMenu zurück\n     */\n    getParentMenu() {\n        return this._parentAction.getMenu();\n    }\n    /**\n     * Erstelle keinen onClickListener, damit der Listener aus dem Obermenü aufgerufen wird\n     *\n     * @returns {null}\n     * @private\n     */\n    _generateOnClickListener() {\n        return null;\n    }\n    /**\n     * Wird vom Obermenü aufgerufen, um die ensprechende Action zu finden\n     *\n     * @param actionId\n     * @param event\n     * @returns {boolean}\n     */\n    click(actionId, event) {\n        for (let i = 0, n = this._actions.length; i < n; i++) {\n            if (this._actions[i].getId() === actionId) {\n                if (typeof this._actions[i].getAction() === 'function' && this._actions[i].isActivated()) {\n                    this._actions[i].getAction()(this._actions[i], event);\n                    event.preventDefault();\n                }\n                if (!(this._actions[i] instanceof OpenSubmenuAction_1.OpenSubmenuAction)) {\n                    this.close();\n                }\n                return this._actions[i];\n            }\n        }\n        //Falls action nicht gefunden (da noch nicht beendet), suche in den submenüs nach der Action\n        for (let i = 0, n = this._submenus.length; i < n; i++) {\n            let action = this._submenus[i].click(actionId, event);\n            if (action) {\n                return action;\n            }\n        }\n        return null;\n    }\n    /**\n     * Öffnet oder schließt das Menü\n     */\n    toggle() {\n        if (this._isOpen) {\n            this.close();\n        }\n        else {\n            this.open();\n        }\n    }\n    /**\n     * öffnet das Menü und updatet die Elemente\n     */\n    open() {\n        this._isOpen = true;\n        this.openSubmenu(this);\n        if (Helper_1.Helper.isNotNull(this._parentAction)) {\n            this._parentAction.update();\n        }\n    }\n    openSubmenu(submenu) {\n        this.getParentMenu().openSubmenu(submenu);\n    }\n    /**\n     * schließt das Menü und updatet die Elemente\n     */\n    close() {\n        this._isOpen = false;\n        super.close();\n        if (Helper_1.Helper.isNotNull(this._parentAction)) {\n            this._parentAction.update();\n        }\n    }\n    /**\n     * Gibt die ParentAction zurück\n     *\n     * @returns {OpenSubmenuAction}\n     */\n    getParentAction() {\n        return this._parentAction;\n    }\n    /**\n     * Updated eine Action. Da ein Submenu keine Renderer hat, muss es ans parentMenu weitergegeben werden\n     * @param action\n     */\n    updateAction(action) {\n        const parentMenu = this.getParentMenu();\n        if (parentMenu) {\n            parentMenu.updateAction(action);\n        }\n    }\n    redrawAction(action) {\n        const parentMenu = this.getParentMenu();\n        if (parentMenu) {\n            parentMenu.redrawAction(action);\n        }\n    }\n    /**\n     * Gibt an, ob das Submenu offen ist oder nicht\n     *\n     * @returns {boolean}\n     */\n    isOpen() {\n        return this._isOpen;\n    }\n}\nexports.Submenu = Submenu;\n//# sourceMappingURL=Submenu.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MenuSite = void 0;\nconst TemplateSite_1 = require(\"./TemplateSite\");\nconst defaultMenuTemplate = require(\"../../html/siteTemplates/menuSite.html\");\nconst NavbarFragment_1 = require(\"./Menu/NavbarFragment\");\nconst Context_1 = require(\"./Context\");\nconst Helper_1 = require(\"../Legacy/Helper\");\n/**\n * Seite benutzt das menuTemplate, welches das ContainerTemplate includiert.\n *\n * Außerdem beinhaltet die MenuSite ein NavbarFragment, wo Menüelemente hinzugefügt werden können\n */\nclass MenuSite extends TemplateSite_1.TemplateSite {\n    /**\n     * Constructor für eine MenuSite\n     *\n     * @param siteManager\n     * @param view\n     * @param menuTemplate\n     */\n    constructor(siteManager, view, menuTemplate) {\n        super(siteManager, view, Helper_1.Helper.nonNull(menuTemplate, defaultMenuTemplate), \"#site-content\");\n        this._navbarFragment = new NavbarFragment_1.NavbarFragment(this);\n        this.addFragment(\"#navbar-fragment\", this._navbarFragment);\n    }\n    /**\n     * Während des onConstructs werden die Menüelemente hinzugefügt => aufrufen des onCreateMenu\n     *\n     * @param constructParameters\n     * @returns {Promise<any[]>}\n     */\n    onConstruct(constructParameters) {\n        const _super = Object.create(null, {\n            onConstruct: { get: () => super.onConstruct }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = yield _super.onConstruct.call(this, constructParameters);\n            this.onCreateMenu(this._navbarFragment);\n            return res;\n        });\n    }\n    onMenuPressed() {\n        this._navbarFragment.openMenu();\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let res = _super.onViewLoaded.call(this);\n            this._navbarFragment.setScrollWidget(this.findBy(\"#main-content-container\"));\n            return res;\n        });\n    }\n    /**\n     * Überschreibt updateTtle, um Element in der Statusbar zu setzen\n     *\n     * @protected\n     */\n    _updateTitle() {\n        super._updateTitle();\n        if (this._title.element && this._state === Context_1.Context.STATE_RUNNING) {\n            this._navbarFragment.setTitleElement(this._title.element);\n        }\n    }\n    /**\n     * Überschreiben durch Kinder-Klassen, um ein Menü zu erstellen\n     *\n     * @param {NavbarFragment} navbar\n     */\n    onCreateMenu(navbar) { }\n}\nexports.MenuSite = MenuSite;\n//# sourceMappingURL=MenuSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SiteManager = void 0;\nconst Helper_1 = require(\"../Legacy/Helper\");\nconst AbstractSite_1 = require(\"./AbstractSite\");\nconst ViewInflater_1 = require(\"../ViewInflater\");\nconst Context_1 = require(\"./Context\");\nconst Translator_1 = require(\"../Translator\");\nconst DataManager_1 = require(\"../DataManager\");\nconst HistoryManager_1 = require(\"../HistoryManager\");\nconst EventManager_1 = require(\"../Legacy/EventManager/EventManager\");\n/**\n * Manager-Klasse für die Seiten\n */\nclass SiteManager {\n    /**\n     * Constructor für Manager. Fügt Listener für zurück (onpopstate) hinzu\n     */\n    constructor() {\n        this._isInit = false;\n    }\n    /**\n     *\n     * @return {SiteManager}\n     */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new SiteManager();\n        }\n        return this._instance;\n    }\n    /**\n     * @param siteDivId\n     * @param deepLinks\n     */\n    init(siteDivId, deepLinks) {\n        this._siteDiv = null;\n        this._siteStack = [];\n        this._siteDiv = document.getElementById(siteDivId);\n        this._titleTranslationCallbackId = null;\n        this._appEndedListener = null;\n        this._inversedDeepLinks = Helper_1.Helper.invertKeyValues(deepLinks);\n        //Listener, welcher beim klicken auf Zurück oder Forward ausgeführt wird\n        HistoryManager_1.HistoryManager.getInstance().setOnPopStateListener((state, direction) => {\n            //Falls zurück\n            if (direction === HistoryManager_1.HistoryManager.BACK) {\n                this.goBack();\n            }\n            //Falls vorwärts\n            else if (HistoryManager_1.HistoryManager.FORWARD === direction) {\n                if (this._siteStack.indexOf(state.state.site) !== -1) {\n                    this.toForeground(state.state.site);\n                }\n                else {\n                    this.startSite(state.state.site.constructor, state.state.parameters);\n                }\n            }\n        });\n        //Cordova-Callbacks\n        document.addEventListener(\"pause\", () => this._pauseSite(), false);\n        document.addEventListener(\"resume\", () => __awaiter(this, void 0, void 0, function* () { return yield this._resumeSite(); }), false);\n        document.addEventListener(\"menubutton\", () => {\n            let site = this.getCurrentSite();\n            if (Helper_1.Helper.isNotNull(site)) {\n                site.onMenuPressed();\n            }\n        }, false);\n        document.addEventListener(\"searchbutton\", () => {\n            let site = this.getCurrentSite();\n            if (Helper_1.Helper.isNotNull(site)) {\n                site.onSearchPressed();\n            }\n        }, false);\n        window.addEventListener(\"beforeunload\", e => {\n            const returnMessage = this.beforeUnload(e);\n            if (returnMessage !== null) {\n                e.preventDefault();\n                e.returnValue = returnMessage;\n                return returnMessage;\n            }\n        });\n        this._isInit = true;\n    }\n    setAppEndedListener(listener) {\n        this._appEndedListener = listener;\n    }\n    goBack() {\n        if (this._siteStack.length >= 1) {\n            let site = this.getCurrentSite();\n            if (site && site.onBackPressed() !== false) {\n                this.endSite(site);\n            }\n        }\n    }\n    /**\n     * gibt die aktuelle Seite zurück\n     * @returns AbstractSite\n     */\n    getCurrentSite() {\n        if (this._siteStack.length >= 1) {\n            return this._siteStack[this._siteStack.length - 1];\n        }\n        return null;\n    }\n    /**\n     * Erstellt eine neue Seite und zeigt diese an. ParamsPromise kann entweder ein Promise oder ein Objekt oder null sein.\n     *\n     * @param siteConstructor\n     * @param paramsPromise\n     * @returns {Promise<any>}\n     */\n    startSite(siteConstructor, paramsPromise) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //Testen, ob der Constructor vom richtigen Typen ist\n            if (!(siteConstructor.prototype instanceof AbstractSite_1.AbstractSite)) {\n                throw {\n                    \"error\": \"wrong class given! Expected AbstractSite, given \" + siteConstructor.name\n                };\n            }\n            EventManager_1.EventManager.trigger(\"site-manager-start-site\", {\n                site: siteConstructor, paramPromise: paramsPromise\n            });\n            //Loading-Symbol, falls ViewParameters noch länger brauchen\n            let loadingSymbol = ViewInflater_1.ViewInflater.createLoadingSymbol(\"overlay\");\n            this._siteDiv.appendChild(loadingSymbol);\n            //create Site\n            let site = new siteConstructor(this);\n            this._siteStack.unshift(site);\n            //Wartet auf onConstruct, viewPromise, onViewLoaded und zeigt dann Seite\n            Promise.resolve(paramsPromise).then((params) => __awaiter(this, void 0, void 0, function* () {\n                site._onConstructPromise = site.onConstruct(Helper_1.Helper.nonNull(params, {}));\n                yield Promise.all([site._onConstructPromise, site.getViewPromise()]);\n                //If site is ended inside onConstruct, don't do anything\n                if (site._state !== Context_1.Context.STATE_DESTROYED && site._state !== Context_1.Context.STATE_DESTROYING) {\n                    yield site.onViewLoaded();\n                    site._viewLoadedPromise.resolve();\n                    return this._show(site);\n                }\n                loadingSymbol.remove();\n            })).catch((e) => {\n                console.error(\"site start error for site \", siteConstructor.name, e);\n                site.getFinishResolver().reject(e);\n                loadingSymbol.remove();\n                //Zeige alte Seite im Fehlerfall wieder an\n                for (let i = this._siteStack.length - 1; i >= 0; i--) {\n                    if (this._siteStack[i] !== site) {\n                        return this._show(this._siteStack[i]);\n                    }\n                }\n                site._viewLoadedPromise.reject();\n            });\n            //Gebe Site-Promise zurück\n            return site.getFinishPromise();\n        });\n    }\n    updateUrl(site, args) {\n        let url = this._generateUrl(site, args);\n        HistoryManager_1.HistoryManager.getInstance().replaceState({\n            'site': site,\n            'parameters': args\n        }, site.constructor.name, url);\n    }\n    _generateUrl(site, args) {\n        let deepLink = this.getDeepLinkFor(site);\n        let url = [location.protocol, '//', location.host, location.pathname].join('');\n        if (Helper_1.Helper.isNotNull(deepLink)) {\n            args[\"s\"] = deepLink;\n            url = [url, DataManager_1.DataManager.buildQuery(args)].join('');\n        }\n        return url;\n    }\n    /**\n     * Gibt einen DeepLink zurück\n     *\n     * @param site\n     * @return string\n     */\n    getDeepLinkFor(site) {\n        return this._inversedDeepLinks[site.constructor];\n    }\n    /**\n     * Pausiert eine Seite\n     *\n     * @param site\n     * @private\n     */\n    _pauseSite(site) {\n        site = Helper_1.Helper.nonNull(site, this.getCurrentSite());\n        if (Helper_1.Helper.isNotNull(site) && site._state === Context_1.Context.STATE_RUNNING) {\n            site._pauseParameters = site.onPause();\n            Helper_1.Helper.removeAllChildren(this._siteDiv).appendChild(ViewInflater_1.ViewInflater.createLoadingSymbol());\n        }\n    }\n    /**\n     * Lässt eine Seite weiterlaufen\n     *\n     * @param site\n     * @private\n     */\n    _resumeSite(site) {\n        return __awaiter(this, void 0, void 0, function* () {\n            site = Helper_1.Helper.nonNull(site, this.getCurrentSite());\n            if (Helper_1.Helper.isNotNull(site) && (site._state === Context_1.Context.STATE_PAUSED || site._state === Context_1.Context.STATE_CONSTRUCTED)) {\n                yield site.getViewPromise();\n                Helper_1.Helper.removeAllChildren(this._siteDiv).appendChild(site._view);\n                yield Translator_1.Translator.getInstance().updateTranslations();\n                if (Helper_1.Helper.isNull(site._historyId)) {\n                    site._historyId = HistoryManager_1.HistoryManager.getInstance().pushState({\n                        'site': site,\n                        'parameters': site.getParameters()\n                    }, site.constructor.name, this._generateUrl(site, site.getParameters()));\n                }\n                else {\n                    HistoryManager_1.HistoryManager.getInstance().stateToCurrentPosition(site._historyId);\n                }\n                yield site.onStart(site._pauseParameters);\n            }\n        });\n    }\n    /**\n     * Zeigt eine Seite an\n     *\n     * @param site\n     * @returns {Promise<*>}\n     * @private\n     */\n    _show(site) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //check if site is ended\n            if (site._state === Context_1.Context.STATE_DESTROYING || site._state === Context_1.Context.STATE_DESTROYED) {\n                return;\n            }\n            //Mache nichts, wenn Seite bereits angezeigt wird\n            if (site._state === Context_1.Context.STATE_RUNNING && this.getCurrentSite() === site) {\n                return;\n            }\n            //Speichere alte Seite\n            this._pauseSite();\n            //Zeige Ladesymbol\n            Helper_1.Helper.removeAllChildren(this._siteDiv).appendChild(ViewInflater_1.ViewInflater.createLoadingSymbol());\n            //Hinzufügen/Updaten zum SiteStack\n            let currentSiteIndex = this._siteStack.indexOf(site);\n            if (-1 !== currentSiteIndex) {\n                this._siteStack.splice(currentSiteIndex, 1);\n            }\n            this._siteStack.push(site);\n            //Anzeigen der Seite. Stelle sicher, dass die View wirklich geladen ist!\n            return site.getViewPromise().then(() => __awaiter(this, void 0, void 0, function* () {\n                //Stelle sicher, dass in der Zwischenzeit keine andere Seite gestartet wurde\n                if (this.getCurrentSite() === site) {\n                    yield this._resumeSite(site);\n                }\n            }));\n        });\n    }\n    /**\n     * Beendet eine Seite. Muss nicht die aktive Seite sein\n     *\n     * @param site\n     */\n    endSite(site) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // return site._onConstructPromise.then(async () => {\n            //Aus Index entfernen\n            let index = this._siteStack.indexOf(site);\n            this._siteStack.splice(index, 1);\n            //Seite war/ist die aktive Seite\n            if (index === this._siteStack.length) {\n                this._pauseSite(site);\n                //Seite ist aktiv, zeige Ladesymbol\n                this._siteDiv.appendChild(ViewInflater_1.ViewInflater.createLoadingSymbol('overlay'));\n                site.getFinishPromise().then(() => {\n                    let newSiteToShow = this.getCurrentSite();\n                    if (Helper_1.Helper.isNotNull(newSiteToShow)) {\n                        this.toForeground(newSiteToShow);\n                    }\n                });\n            }\n            if (this._siteStack.length <= 0) {\n                console.log(\"stack is empty, starting normal site!\");\n                HistoryManager_1.HistoryManager.getInstance().cutStack(0);\n                HistoryManager_1.HistoryManager.getInstance().go(-1 * history.length, true);\n                Helper_1.Helper.removeAllChildren(this._siteDiv).appendChild(document.createTextNode(\"App ist beendet\"));\n                if (typeof this._appEndedListener === \"function\") {\n                    this._appEndedListener(this);\n                }\n            }\n            site._context = Context_1.Context.STATE_DESTROYING;\n            yield site.onDestroy();\n            site._context = Context_1.Context.STATE_DESTROYED;\n            site.getFinishResolver().resolve(site._result);\n        });\n    }\n    /**\n     * Stellt eine aktive Seite in den Vordergrund;\n     * @param site\n     * @returns {Promise<*>}\n     */\n    toForeground(site) {\n        return this._show(site);\n    }\n    /**\n     * Updated den Seitentitel. Dafür gibt es im translation-file den Key document-title (document-title-empty, falls title null),\n     * der als Parameter in der Übersetzung den übergebenen Title übergeben bekommt.\n     *\n     * Der übergebene title wird mit den angebenenen argumenten zuerst übersetz, bevor der gesamte document-Title überstzt wird\n     *\n     * Wenn args === false, dann wird title nicht übersetzt\n     *\n     * Durch das argument titleTemplate kann der key im translation-file von document-title individuell abweichen\n     *\n     * @param title\n     * @param args\n     * @param titleTemplate\n     */\n    updateTitle(title, args, titleTemplate) {\n        titleTemplate = Helper_1.Helper.nonNull(titleTemplate, Helper_1.Helper.isNull(title) ? \"document-title-empty\" : \"document-title\");\n        if (Helper_1.Helper.isNotNull(this._titleTranslationCallbackId)) {\n            Translator_1.Translator.removeTranslationCallback(this._titleTranslationCallbackId);\n        }\n        this._titleTranslationCallbackId = Translator_1.Translator.addTranslationCallback(() => {\n            if (args !== false) {\n                title = Translator_1.Translator.translate(title, args);\n            }\n            document.title = Translator_1.Translator.translate(titleTemplate, [title]);\n        });\n    }\n    beforeUnload(e) {\n        return this.getCurrentSite().onBeforeUnload(e);\n    }\n}\nexports.SiteManager = SiteManager;\nSiteManager._instance = null;\n//# sourceMappingURL=SiteManager.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SwipeChildFragment = void 0;\nconst AbstractFragment_1 = require(\"../AbstractFragment\");\nconst Helper_1 = require(\"../../Legacy/Helper\");\nclass SwipeChildFragment extends AbstractFragment_1.AbstractFragment {\n    constructor(site, view) {\n        super(site, view);\n        this._parent = null;\n    }\n    onSwipeRight() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.previousFragment();\n        });\n    }\n    onSwipeLeft() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.nextFragment();\n        });\n    }\n    setParent(parent) {\n        this._parent = parent;\n    }\n    nextFragment() {\n        if (Helper_1.Helper.isNotNull(this._parent)) {\n            this._parent.nextFragment();\n        }\n    }\n    previousFragment() {\n        if (Helper_1.Helper.isNotNull(this._parent)) {\n            this._parent.previousFragment();\n        }\n    }\n}\nexports.SwipeChildFragment = SwipeChildFragment;\n//# sourceMappingURL=SwipeChildFragment.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SwipeFragment = void 0;\nconst AbstractFragment_1 = require(\"../AbstractFragment\");\nconst SwipeChildFragment_1 = require(\"./SwipeChildFragment\");\nconst Helper_1 = require(\"../../Legacy/Helper\");\nconst view = require(\"../../../html/Framework/Fragment/swipeFragment.html\");\nclass SwipeFragment extends AbstractFragment_1.AbstractFragment {\n    constructor(site) {\n        super(site, view);\n        this._activeIndex = 0;\n        this._touchStart = null;\n    }\n    onViewLoaded() {\n        const _super = Object.create(null, {\n            onViewLoaded: { get: () => super.onViewLoaded }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            this._view.addEventListener(\"touchstart\", e => {\n                this._touchStart = e.touches[0];\n            }, false);\n            this._view.addEventListener(\"touchend\", e => {\n                this._handleSwipe(e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n                this._touchStart = null;\n            });\n            this._view.addEventListener(\"mousedown\", e => {\n                this._touchStart = e;\n            }, false);\n            this._view.addEventListener(\"mouseup\", e => {\n                this._handleSwipe(e.clientX, e.clientY);\n                this._touchStart = null;\n            });\n            return _super.onViewLoaded.call(this);\n        });\n    }\n    _handleSwipe(endX, endY) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Helper_1.Helper.isNull(this._touchStart)) {\n                return;\n            }\n            let touchStart = this._touchStart;\n            this._touchStart = null;\n            let diffX = touchStart.clientX - endX;\n            if (Math.abs(touchStart.clientY - endY) <= SwipeFragment.MAX_Y\n                && Math.abs(diffX) >= SwipeFragment.MIN_X) {\n                if (diffX > 0) {\n                    yield this._fragments[this._activeIndex].onSwipeLeft();\n                }\n                else {\n                    yield this._fragments[this._activeIndex].onSwipeRight();\n                }\n            }\n        });\n    }\n    onStart(pauseArguments) {\n        const _super = Object.create(null, {\n            onStart: { get: () => super.onStart }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._activeIndex >= 0 && this._activeIndex < this._fragments.length) {\n                this.setActiveFragment(this._activeIndex);\n            }\n            return _super.onStart.call(this, pauseArguments);\n        });\n    }\n    setActiveFragment(index) {\n        if (index instanceof SwipeChildFragment_1.SwipeChildFragment) {\n            index = this._fragments.indexOf(index);\n        }\n        if (index >= 0 && index < this._fragments.length) {\n            this._activeIndex = index;\n            this._fragments.forEach((frag, i) => {\n                frag.setActive(i === this._activeIndex);\n            });\n        }\n    }\n    nextFragment() {\n        this.setActiveFragment((this._activeIndex + 1) % this._fragments.length);\n    }\n    previousFragment() {\n        this.setActiveFragment((this._activeIndex + this._fragments.length - 1) % this._fragments.length);\n    }\n    addFragment(fragment) {\n        if (fragment instanceof SwipeChildFragment_1.SwipeChildFragment) {\n            fragment.setParent(this);\n            return super.addFragment(\".swipe-container\", fragment);\n        }\n    }\n}\nexports.SwipeFragment = SwipeFragment;\nSwipeFragment.MAX_Y = 80;\nSwipeFragment.MIN_X = 150;\n//# sourceMappingURL=SwipeFragment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TemplateSite = void 0;\nconst ViewInflater_1 = require(\"../ViewInflater\");\nconst MasterSite_1 = require(\"./Delegate/MasterSite\");\n/**\n * Die Seite bekommt ein Template übergeben und ersetzt in diesem Template das mit dem Selector gefundene\n * Element mit der angebenen View\n */\nclass TemplateSite extends MasterSite_1.MasterSite {\n    /**\n     * Constructor für eine TemplateSite\n     *\n     * @param siteManager\n     * @param view\n     * @param template\n     * @param selectorToReplace\n     */\n    constructor(siteManager, view, template, selectorToReplace) {\n        super(siteManager, template);\n        this._viewPromise = Promise.all([this._viewPromise, ViewInflater_1.ViewInflater.getInstance().load(view)]).then(res => {\n            res[0].querySelector(selectorToReplace).replaceWith(res[1]);\n            ViewInflater_1.ViewInflater.replaceWithChildren(res[1]);\n            this._view = res[0];\n            return res[0];\n        }).catch(e => console.error(e));\n    }\n}\nexports.TemplateSite = TemplateSite;\n//# sourceMappingURL=TemplateSite.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataManager = void 0;\nconst Helper_1 = require(\"./Legacy/Helper\");\nconst NotOnlineError_1 = require(\"./DataManager/NotOnlineError\");\n/**\n * Ein Manager, welches das Laden von Resourcen übernimmt.\n */\nclass DataManager {\n    /**\n     * Diese Funktion sollte anstelle von dem nativen \"fetch\" verwendet werden!\n     * Das native Fetch kann keine file://, welches von Cordova unter Android (und whs iOS) verwendet wird\n     * Daher wird heir auf XMLHttpRequest zurückgegriffen\n     *\n     * @param url\n     * @param useArrayBuffer\n     * @returns {Promise<*>}\n     */\n    static fetch(url, useArrayBuffer) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(function (resolve, reject) {\n                let xhr = new XMLHttpRequest();\n                useArrayBuffer = Helper_1.Helper.nonNull(useArrayBuffer, false);\n                if (useArrayBuffer) {\n                    xhr.responseType = \"arraybuffer\";\n                }\n                xhr.onload = function () {\n                    resolve(new Response(useArrayBuffer ? xhr.response : xhr.responseText, { status: (xhr.status === 0) ? 200 : xhr.status }));\n                };\n                xhr.onerror = function (e) {\n                    console.error(e);\n                    debugger;\n                    reject(new NotOnlineError_1.NotOnlineError(\"not-online\", url));\n                };\n                xhr.open('GET', url);\n                //set headers\n                Object.keys(DataManager._additionalHeaders).forEach(header => {\n                    xhr.setRequestHeader(header, DataManager._additionalHeaders[header]);\n                });\n                xhr.send(null);\n            }).then(res => {\n                if (DataManager.onlineCallback) {\n                    DataManager.onlineCallback(true);\n                }\n                return res;\n            }).catch(e => {\n                if (DataManager.onlineCallback) {\n                    DataManager.onlineCallback(false);\n                }\n                throw e;\n            });\n        });\n    }\n    static fetchBlob(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(function (resolve, reject) {\n                let xhr = new XMLHttpRequest();\n                xhr.onload = function (e) {\n                    resolve(xhr.response);\n                };\n                xhr.onerror = function (e) {\n                    console.error(e);\n                    debugger;\n                    reject(new NotOnlineError_1.NotOnlineError(\"not-online\", url));\n                };\n                xhr.open('GET', url);\n                xhr.responseType = \"blob\";\n                //set headers\n                Object.keys(DataManager._additionalHeaders).forEach(header => {\n                    xhr.setRequestHeader(header, DataManager._additionalHeaders[header]);\n                });\n                xhr.send(null);\n            }).then(res => {\n                if (DataManager.onlineCallback) {\n                    DataManager.onlineCallback(true);\n                }\n                return res;\n            }).catch(e => {\n                if (DataManager.onlineCallback) {\n                    DataManager.onlineCallback(false);\n                }\n                throw e;\n            });\n        });\n    }\n    /**\n     * Vereinfachung von Laden von Resourcen.\n     * Lädt per GET die angegebene URL und gibt diese als JSON oder Text zurück\n     *\n     * @param url\n     * @param format\n     * @param useBasePath\n     * @returns {Promise<*  | void>}\n     */\n    static load(url, format, useBasePath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            format = Helper_1.Helper.nonNull(format, true);\n            if (format === true) {\n                format = \"json\";\n            }\n            else if (format === false) {\n                format = \"text\";\n            }\n            else if (format !== \"json\" && format !== \"text\") {\n                format = \"raw\";\n            }\n            useBasePath = Helper_1.Helper.nonNull(useBasePath, true);\n            if (useBasePath === true) {\n                useBasePath = DataManager._basePath;\n            }\n            else if (typeof useBasePath !== \"string\") {\n                useBasePath = \"\";\n            }\n            url = DataManager.basePath(url, useBasePath);\n            return DataManager.fetch(url, format === \"raw\").catch(e => {\n                if (DataManager.onlineCallback) {\n                    DataManager.onlineCallback(false);\n                }\n                throw new NotOnlineError_1.NotOnlineError(e, url);\n            }).then(function (res) {\n                if (DataManager.onlineCallback) {\n                    DataManager.onlineCallback(true);\n                }\n                if (format === \"json\") {\n                    return res.json();\n                }\n                else if (format === \"text\") {\n                    return res.text();\n                }\n                else {\n                    return res;\n                }\n            });\n        });\n    }\n    /**\n     * Vereinfachung von Laden von Resourcen.\n     * Lädt per GET das angegebene Asset und gibt diese als JSON oder Text zurück\n     *\n     * @param url\n     * @param format\n     * @returns {Promise<*  | void>}\n     */\n    static loadAsset(url, format) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.load(url, Helper_1.Helper.nonNull(format, \"text\"), DataManager._assetBasePath);\n        });\n    }\n    /**\n     * Wandelt ein Key-Value-Objekt in einen QueryString um\n     *\n     * @param values\n     * @return {string}\n     */\n    static buildQuery(values) {\n        let queryStrings = [];\n        for (let k in values) {\n            queryStrings.push(encodeURIComponent(k) + \"=\" + encodeURIComponent(values[k]));\n        }\n        return \"?\" + queryStrings.join(\"&\");\n    }\n    /**\n     * Wandelt ein Key-Value-Objekt in einen QueryString um\n     *\n     * @param values\n     * @return {string}\n     */\n    static buildQueryWithoutNullValues(values) {\n        let queryValues = {};\n        for (let k in values) {\n            if (Helper_1.Helper.isNotNull(values[k])) {\n                queryValues[k] = values[k];\n            }\n        }\n        return this.buildQuery(queryValues);\n    }\n    static send(url, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            url = DataManager.basePath(url);\n            let headers = {};\n            if (!(params instanceof FormData) && typeof params === \"object\") {\n                params = JSON.stringify(params);\n                headers = {\n                    \"Content-Type\": \"application/json\"\n                };\n            }\n            Object.keys(DataManager._additionalHeaders).forEach(header => {\n                headers[header] = DataManager._additionalHeaders[header];\n            });\n            return fetch(url, {\n                \"credentials\": \"same-origin\",\n                \"method\": \"POST\",\n                \"headers\": headers,\n                \"body\": params,\n            }).then(function (res) {\n                return res.json();\n            }).catch(function (e) {\n                debugger;\n                console.error(\"error\", e);\n                if (DataManager.onlineCallback) {\n                    DataManager.onlineCallback(false);\n                }\n                return {\n                    \"success\": false,\n                    \"errors\": [\n                        \"not-online\"\n                    ]\n                };\n            });\n        });\n    }\n    static basePath(url, basePath) {\n        basePath = Helper_1.Helper.nonNull(basePath, DataManager._basePath);\n        return basePath + ((url) ? url : \"\");\n    }\n    static setHeader(header, value) {\n        DataManager._additionalHeaders[header] = value;\n    }\n}\nexports.DataManager = DataManager;\nDataManager.onlineCallback = null;\nDataManager._additionalHeaders = {};\nDataManager._basePath = \"\";\nDataManager._assetBasePath = \"\";\n//# sourceMappingURL=DataManager.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NotOnlineError = void 0;\nclass NotOnlineError extends Error {\n    constructor(message, url) {\n        super(message + \" for url \" + url);\n        this._url = url;\n    }\n}\nexports.NotOnlineError = NotOnlineError;\n//# sourceMappingURL=NotOnlineError.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ButtonChooseDialog = void 0;\nconst Dialog_1 = require(\"./Dialog\");\nclass ButtonChooseDialog extends Dialog_1.Dialog {\n    constructor(content, title, values) {\n        super(content, title);\n        Object.keys(values).forEach(key => {\n            this.addButton(values[key], key);\n        });\n    }\n}\nexports.ButtonChooseDialog = ButtonChooseDialog;\n//# sourceMappingURL=ButtonChooseDialog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChooseDialog = void 0;\nconst Dialog_1 = require(\"./Dialog\");\nconst ViewInflater_1 = require(\"../ViewInflater\");\nconst view = require(\"../../html/Framework/Dialog/chooseDialog.html\");\nconst Translator_1 = require(\"../Translator\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nclass ChooseDialog extends Dialog_1.Dialog {\n    constructor(valueNames, title, translateable) {\n        let viewPromise = ViewInflater_1.ViewInflater.getInstance().load(view).then(view => {\n            translateable = Helper_1.Helper.nonNull(translateable, true);\n            let template = view.querySelector(\"#choose-value-template\");\n            template.remove();\n            template.removeAttribute(\"id\");\n            let templateContainer = view.querySelector(\"#choose-container\");\n            for (let k in valueNames) {\n                let valueElem = template.cloneNode(true);\n                let textElem = null;\n                if (translateable) {\n                    textElem = Translator_1.Translator.makePersistentTranslation(valueNames[k]);\n                }\n                else {\n                    textElem = document.createElement(\"span\");\n                    textElem.innerText = valueNames[k];\n                }\n                valueElem.querySelector(\".choose-dialog-value\").appendChild(textElem);\n                valueElem[\"dataset\"][\"value\"] = k;\n                valueElem.addEventListener(\"click\", () => {\n                    this._result = k;\n                    this.close();\n                });\n                templateContainer.appendChild(valueElem);\n            }\n            return view;\n        });\n        super(viewPromise, title);\n    }\n}\nexports.ChooseDialog = ChooseDialog;\n//# sourceMappingURL=ChooseDialog.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfirmDialog = void 0;\nconst Dialog_1 = require(\"./Dialog\");\nconst Helper_1 = require(\"../Legacy/Helper\");\nclass ConfirmDialog extends Dialog_1.Dialog {\n    constructor(content, title) {\n        super(content, title);\n    }\n    show() {\n        const _super = Object.create(null, {\n            show: { get: () => super.show }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            this.addButton(\"confirm-button\", true);\n            this.addButton(\"cancel-button\", false);\n            return _super.show.call(this);\n        });\n    }\n    close() {\n        if (Helper_1.Helper.isNull(this._result)) {\n            this._result = false;\n        }\n        return super.close();\n    }\n}\nexports.ConfirmDialog = ConfirmDialog;\n//# sourceMappingURL=ConfirmDialog.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dialog = void 0;\nconst Helper_1 = require(\"../Legacy/Helper\");\nconst Translator_1 = require(\"../Translator\");\nconst ViewInflater_1 = require(\"../ViewInflater\");\nclass Dialog {\n    constructor(content, title) {\n        this._resolver = null;\n        this._content = null;\n        this._backgroundElement = null;\n        this._cancelable = true;\n        this._title = Helper_1.Helper.nonNull(title, \"\");\n        this._translatable = true;\n        this._additionalClasses = \"\";\n        this._buttons = [];\n        this._result = null;\n        this._contentPromise = null;\n        this._addedToDomePromise = new Promise(r => {\n            this._addedToDomePromiseResolver = r;\n        });\n        if (Helper_1.Helper.isNotNull(content)) {\n            this.setContent(content);\n        }\n    }\n    setTitle(title) {\n        this._title = title;\n        return this;\n    }\n    setTranslatable(translatable) {\n        this._translatable = translatable;\n    }\n    setAdditionalClasses(classes) {\n        this._additionalClasses = classes;\n    }\n    getTitle() {\n        return this._title;\n    }\n    setCancelable(cancelable) {\n        this._cancelable = (cancelable === true);\n        return this;\n    }\n    setContent(content) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof content === \"string\" && content.endsWith(\".html\")) {\n                content = ViewInflater_1.ViewInflater.getInstance().load(content);\n            }\n            this._contentPromise = Promise.resolve(content);\n            this._content = yield this._contentPromise;\n            return this;\n        });\n    }\n    addButton(elementOrText, listenerOrResult, shouldClose) {\n        shouldClose = Helper_1.Helper.nonNull(shouldClose, true);\n        let button = null;\n        if (typeof elementOrText === \"string\") {\n            button = document.createElement(\"button\");\n            button.classList.add(\"button\");\n            button.classList.add(\"right\");\n            button.appendChild(Translator_1.Translator.makePersistentTranslation(elementOrText));\n        }\n        else {\n            button = elementOrText;\n        }\n        let self = this;\n        if (typeof listenerOrResult !== \"function\") {\n            let result = listenerOrResult;\n            listenerOrResult = function () {\n                self._result = result;\n            };\n        }\n        let callback = null;\n        if (shouldClose) {\n            callback = function (e) {\n                if (Helper_1.Helper.isNotNull(listenerOrResult)) {\n                    listenerOrResult(e);\n                }\n                self.close();\n            };\n        }\n        else {\n            callback = listenerOrResult;\n        }\n        if (Helper_1.Helper.isNotNull(callback)) {\n            button.addEventListener(\"click\", callback);\n        }\n        this._buttons.push(button);\n    }\n    show() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._contentPromise;\n            this._backgroundElement = this.createModalDialogElement();\n            document.body.appendChild(this._backgroundElement);\n            yield Translator_1.Translator.getInstance().updateTranslations();\n            this._addedToDomePromiseResolver();\n            return new Promise((resolve) => {\n                this._resolver = resolve;\n            });\n        });\n    }\n    createModalDialogElement() {\n        let titleElement = document.createElement(\"span\");\n        titleElement.classList.add(\"title\");\n        if (this._translatable && this._title !== \"\") {\n            titleElement.appendChild(Translator_1.Translator.makePersistentTranslation(this._title));\n        }\n        else {\n            titleElement.innerHTML = this._title;\n        }\n        let titleBar = document.createElement(\"div\");\n        titleBar.appendChild(titleElement);\n        let contentContainer = document.createElement(\"div\");\n        contentContainer.classList.add(\"content-container\");\n        let modalDialog = document.createElement(\"div\");\n        modalDialog.className = this._additionalClasses;\n        modalDialog.classList.add(\"modal\");\n        modalDialog.appendChild(titleBar);\n        modalDialog.appendChild(contentContainer);\n        let buttonBar = document.createElement(\"div\");\n        buttonBar.classList.add(\"modal-button-container\");\n        for (let i = 0, n = this._buttons.length; i < n; i++) {\n            buttonBar.appendChild(this._buttons[i]);\n        }\n        if (!(this._content instanceof Node)) {\n            this._content = (this._translatable) ? Translator_1.Translator.makePersistentTranslation(this._content) : document.createTextNode(this._content);\n        }\n        contentContainer.appendChild(this._content);\n        this._backgroundElement = document.createElement(\"div\");\n        this._backgroundElement.classList.add(\"background\");\n        this._backgroundElement.style.display = \"block\";\n        this._backgroundElement.appendChild(modalDialog);\n        this._backgroundElement.querySelector(\".modal\").appendChild(buttonBar);\n        if (this._cancelable) {\n            let closeButton = document.createElement(\"span\");\n            closeButton.classList.add(\"close\");\n            closeButton.innerHTML = \"&times;\";\n            titleBar.appendChild(closeButton);\n            closeButton.addEventListener(\"click\", () => {\n                this.close();\n            });\n            window.addEventListener(\"click\", (e) => {\n                if (e.target === this._backgroundElement) {\n                    this.close();\n                }\n            });\n        }\n        return this._backgroundElement;\n    }\n    waitForAddedToDom() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._addedToDomePromise;\n        });\n    }\n    close() {\n        this.waitForAddedToDom().then(() => {\n            if (Helper_1.Helper.isNotNull(this._backgroundElement)) {\n                this._backgroundElement.style.display = \"none\";\n                this._backgroundElement.remove();\n                this._backgroundElement = null;\n            }\n        });\n        if (Helper_1.Helper.isNotNull(this._resolver)) {\n            this._resolver(this._result);\n        }\n    }\n}\nexports.Dialog = Dialog;\n//# sourceMappingURL=Dialog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ElemChooseDialog = void 0;\nconst Dialog_1 = require(\"./Dialog\");\nconst ViewInflater_1 = require(\"../ViewInflater\");\nconst view = require(\"../../html/Framework/Dialog/chooseDialog.html\");\nclass ElemChooseDialog extends Dialog_1.Dialog {\n    constructor(valueNames, title) {\n        let viewPromise = ViewInflater_1.ViewInflater.getInstance().load(view).then(view => {\n            let template = view.querySelector(\"#choose-value-template\");\n            template.remove();\n            template.removeAttribute(\"id\");\n            let templateContainer = view.querySelector(\"#choose-container\");\n            for (let k in valueNames) {\n                let valueElem = template.cloneNode(true);\n                valueElem.querySelector(\".choose-dialog-value\").appendChild(valueNames[k]);\n                valueElem[\"dataset\"][\"value\"] = k;\n                valueElem.addEventListener(\"click\", () => {\n                    this._result = k;\n                    this.close();\n                });\n                templateContainer.appendChild(valueElem);\n            }\n            return view;\n        });\n        super(viewPromise, title);\n    }\n}\nexports.ElemChooseDialog = ElemChooseDialog;\n//# sourceMappingURL=ElemChooseDialog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImgChooseDialog = void 0;\nconst ElemChooseDialog_1 = require(\"./ElemChooseDialog\");\nclass ImgChooseDialog extends ElemChooseDialog_1.ElemChooseDialog {\n    constructor(valueNames, title) {\n        let newValueNames = {};\n        Object.keys(valueNames).forEach(k => {\n            let elem = document.createElement(\"img\");\n            elem.src = valueNames[k];\n            newValueNames[k] = elem;\n        });\n        super(newValueNames, title);\n    }\n}\nexports.ImgChooseDialog = ImgChooseDialog;\n//# sourceMappingURL=ImgChooseDialog.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Form = void 0;\nconst DataManager_1 = require(\"./DataManager\");\nconst Helper_1 = require(\"./Legacy/Helper\");\nconst Translator_1 = require(\"./Translator\");\nconst Toast_1 = require(\"./Toast/Toast\");\nclass Form {\n    constructor(formElem, urlOrCallback, method) {\n        this._formElem = formElem;\n        this._method = Helper_1.Helper.nonNull(method, formElem[\"method\"], \"POST\");\n        this._elementChangeListener = null;\n        this._validators = [];\n        this._isBusy = false;\n        if (typeof urlOrCallback === \"string\") {\n            this._submitHandler = (values) => {\n                if (this._method.toLowerCase() === \"get\") {\n                    return (DataManager_1.DataManager.load(urlOrCallback + DataManager_1.DataManager.buildQuery(values)));\n                }\n                else {\n                    //TODO, wenn Serververbindung kommt\n                    // return (DataManager.send(urlOrCallback, values));\n                }\n            };\n        }\n        else {\n            this._submitHandler = urlOrCallback;\n        }\n        this._editors = [];\n        this._submitCallback = null;\n        this.errorCallback = (errors) => __awaiter(this, void 0, void 0, function* () {\n            yield this.setErrors(errors);\n        });\n        formElem.addEventListener(\"submit\", function (e) {\n            return __awaiter(this, void 0, void 0, function* () {\n                e.preventDefault();\n                yield self.doSubmit(e);\n            });\n        });\n        let self = this;\n        [...formElem.elements].forEach(element => {\n            element.addEventListener(\"change\", function () {\n                if (this.value.trim() !== \"\") {\n                    this.classList.add(\"notEmpty\");\n                }\n                else {\n                    this.classList.remove(\"notEmpty\");\n                }\n                this.setCustomValidity(\"\");\n                if (Helper_1.Helper.isNotNull(self._elementChangeListener)) {\n                    self._elementChangeListener();\n                }\n                this.setCustomValidity(\"\");\n                if (element.accept && element.accept.indexOf(\"image\") !== -1) {\n                    if (element.files && element.files[0]) {\n                        let reader = new FileReader();\n                        reader.onload = e => {\n                            formElem.querySelector(\".\" + element.name + \"-preview\").src = e.target[\"result\"];\n                        };\n                        reader.readAsDataURL(element.files[0]);\n                    }\n                    else {\n                        formElem.querySelector(\".\" + element.name + \"-preview\").src = \"\";\n                    }\n                }\n            });\n            element.addEventListener(\"keydown\", function () {\n                this.setCustomValidity(\"\");\n            });\n        });\n    }\n    addValidator(validatorCallback) {\n        this._validators.push(validatorCallback);\n    }\n    onError(errorHandler) {\n        this.errorCallback = errorHandler;\n    }\n    addEditor(e) {\n        this._editors.push(e);\n    }\n    doSubmit(e) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._isBusy) {\n                let res = yield this.submit();\n                //TODO einbauen, wenn server dazu kommt\n                // if (res[\"success\"]) {\n                //     if (self._submitCallback !== null) {\n                //         return self._submitCallback(res[\"result\"]);\n                //     }\n                // } else if (Helper.isNotNull(self.errorCallback)) {\n                //     return self.errorCallback(res[\"errors\"]);\n                // }\n                return res;\n            }\n            return false;\n        });\n    }\n    setValues(valuePromise) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.setIsBusy(true);\n            let values = yield Promise.resolve(valuePromise);\n            this.setIsBusy(false);\n            for (let k in values) {\n                if (Helper_1.Helper.isNotNull(this._formElem.elements[k])) {\n                    if (Helper_1.Helper.isNotNull(this._formElem.elements[k].options) && Helper_1.Helper.isNotNull(values[k + \"Options\"])) {\n                        let options = this._formElem.elements[k].options;\n                        for (let val in values[k + \"Options\"]) {\n                            let option = document.createElement(\"option\");\n                            option.value = val;\n                            option.innerText = values[k + \"Options\"][val];\n                            options.add(option);\n                        }\n                    }\n                    if (this._formElem.elements[k].type && (this._formElem.elements[k].type === \"checkbox\" || this._formElem.elements[k].type === \"radio\")) {\n                        if (this._formElem.elements[k].value == values[k]) {\n                            this._formElem.elements[k].checked = true;\n                        }\n                    }\n                    else if (this._formElem.elements[k].type && this._formElem.elements[k].type === \"file\") {\n                        if (this._formElem.elements[k + \"-hidden\"]) {\n                            this._formElem.elements[k + \"-hidden\"].value = values[k];\n                        }\n                        if (this._formElem.elements[k].accept && this._formElem.elements[k].accept.indexOf(\"image\") !== -1) {\n                            let previewImage = this._formElem.querySelector(\".\" + k + \"-preview\");\n                            if (previewImage) {\n                                previewImage.src = values[k];\n                            }\n                        }\n                    }\n                    else {\n                        this._formElem.elements[k].value = Helper_1.Helper.htmlspecialcharsDecode(values[k]);\n                        if (this._formElem.elements[k].classList) {\n                            if (Helper_1.Helper.isNotNull(values[k]) && (\"\" + values[k]).trim() !== \"\") {\n                                this._formElem.elements[k].classList.add(\"notEmpty\");\n                            }\n                            else {\n                                this._formElem.elements[k].classList.remove(\"notEmpty\");\n                            }\n                        }\n                    }\n                }\n            }\n            return this;\n        });\n    }\n    getValues(filesToBase64) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let valuesFormData = new FormData(this._formElem);\n            let values = Array.from(valuesFormData[\"entries\"]()).reduce((memo, pair) => (Object.assign(Object.assign({}, memo), { [pair[0]]: pair[1] })), {});\n            if (Helper_1.Helper.nonNull(filesToBase64, true)) {\n                values = yield Form.filesToBase64(values);\n            }\n            return values;\n        });\n    }\n    static filesToBase64(values) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let filePromises = [];\n            Object.keys(values).forEach(key => {\n                if (values[key] instanceof Blob) {\n                    filePromises.push(new Promise((resolve, reject) => {\n                        const reader = new FileReader();\n                        reader.onload = () => resolve(reader.result);\n                        reader.onerror = error => reject(error);\n                        reader.readAsDataURL(values[key]);\n                    }).then(base64 => values[key] = base64));\n                }\n            });\n            yield Promise.all(filePromises);\n            return values;\n        });\n    }\n    setElementChangeListener(listener) {\n        this._elementChangeListener = listener;\n    }\n    clearErrors() {\n        Object.keys(this._formElem.elements).forEach(elemKey => {\n            this._formElem.elements[elemKey].setCustomValidity(\"\");\n        });\n    }\n    setErrors(errors) {\n        let hasElem = false;\n        let firstError = null;\n        // let notCatchedErrors = [];\n        for (let k in errors) {\n            if (Helper_1.Helper.isNotNull(this._formElem.elements[k]) && this._formElem.elements[k].type !== \"hidden\"\n                && Helper_1.Helper.isNull(this._formElem.elements[k].readonly) && (Helper_1.Helper.isNull(this._formElem.elements[k].disabled) || !this._formElem.elements[k].disabled)) {\n                this._formElem.elements[k].setCustomValidity(Translator_1.Translator.translate(Helper_1.Helper.nonNull(errors[k], \"form-default-error\")));\n                hasElem = true;\n            }\n            else {\n                new Toast_1.Toast(Helper_1.Helper.nonNull(errors[k], \"form-default-error\")).show();\n            }\n            // if (Helper.isNull(firstError)) {\n            //     firstError = ;\n            // }\n        }\n        // if (!hasElem && Helper.isNotNull(firstError)) {\n        //     for (let k in this._formElem.elements) {\n        //         if (this._formElem.elements[k].type !== \"hidden\") {\n        //             this._formElem.elements[k].setCustomValidity(Translator.translate(firstError));\n        //             hasElem = true;\n        //             break;\n        //         }\n        //     }\n        // }\n        if (hasElem) {\n            \"reportValidity\" in this._formElem && this._formElem.reportValidity();\n        }\n    }\n    setIsBusy(isBusy) {\n        this._isBusy = isBusy;\n        if (this._isBusy) {\n            this._formElem.classList.add(\"sending\");\n        }\n        else {\n            this._formElem.classList.remove(\"sending\");\n        }\n    }\n    submit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._editors.forEach(e => e.updateSourceElement());\n            this.setIsBusy(true);\n            if (yield this.validate()) {\n                let res = false;\n                try {\n                    res = yield (this._submitHandler(yield this.getValues(), this));\n                }\n                catch (e) {\n                    console.error(e);\n                }\n                finally {\n                    this.setIsBusy(false);\n                }\n                return res;\n            }\n            this.setIsBusy(false);\n            return false;\n        });\n    }\n    validate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (\"reportValidity\" in this._formElem && !this._formElem.reportValidity()) {\n                return false;\n            }\n            let values = yield this.getValues();\n            let res = yield Helper_1.Helper.asyncForEach(this._validators, (validator) => __awaiter(this, void 0, void 0, function* () {\n                return validator(values, this);\n            }), true);\n            let hasErrors = false;\n            let errors = {};\n            res.forEach(value => {\n                if (value !== true) {\n                    hasErrors = true;\n                    if (typeof value === \"object\") {\n                        for (let k in value) {\n                            errors[k] = value[k];\n                        }\n                    }\n                }\n            });\n            if (hasErrors) {\n                yield this.setErrors(errors);\n                return false;\n            }\n            return true;\n        });\n    }\n    onSubmit(callback) {\n        this._submitCallback = callback;\n    }\n    getFormElement() {\n        return this._formElem;\n    }\n}\nexports.Form = Form;\n//# sourceMappingURL=Form.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HistoryManager = void 0;\nconst Helper_1 = require(\"./Legacy/Helper\");\n/**\n * Manager, welcher sich um die Manipulation von der Historie kümmert\n */\nclass HistoryManager {\n    /**\n     * Constructor für den Manager. Fügt den onPopstateListener hinzu\n     */\n    constructor() {\n        this._lastStateId = -1;\n        this._states = {};\n        this._stack = [];\n        this._ignoreOnPopState = false;\n        this._isUpdateNativeStack = false;\n        this._onPopStateListener = null;\n        this._currentStackIndex = -1;\n        window.onpopstate = (e) => {\n            //Wenn nativeStack geupdated wird, mache nichts\n            if (this._isUpdateNativeStack) {\n                this._isUpdateNativeStack = false;\n                return;\n            }\n            let direction = e.state[\"type\"];\n            this._currentStackIndex += direction;\n            this._updateNativeHistoryStack();\n            //Wenn popState ignoriert werden soll, mache ebenfalls nichts außer Stack updaten\n            if (this._ignoreOnPopState) {\n                this._ignoreOnPopState = false;\n                return;\n            }\n            //Wenn Listener gesetzt, hole daten und führe Listener aus\n            if (typeof this._onPopStateListener === 'function') {\n                let data = {};\n                if (this._stack.length > this._currentStackIndex && this._currentStackIndex >= 0) {\n                    data = this._states[this._stack[this._currentStackIndex]];\n                }\n                this._onPopStateListener(data, direction, e);\n            }\n        };\n        this._updateNativeHistoryStack();\n    }\n    /**\n     * Updated den History-Stack innerhalb des Browsers\n     *\n     * @param url\n     * @private\n     */\n    _updateNativeHistoryStack(url) {\n        url = Helper_1.Helper.nonNull(url, window.location.href);\n        //setze das weitere zurückgehen\n        if (this._currentStackIndex >= 0) {\n            history.pushState({\n                \"type\": HistoryManager.BACK,\n            }, \"back\", url);\n        }\n        history.pushState({\n            \"type\": HistoryManager.CURRENT,\n        }, \"current\", url);\n        if (this._currentStackIndex < this._stack.length - 1) {\n            history.pushState({\n                \"type\": HistoryManager.FORWARD,\n            }, \"forward\", url);\n            this._isUpdateNativeStack = true;\n            history.go(-1);\n        }\n    }\n    /**\n     * Generiert einen neuen History-Eintrag. Gibt die ID des Eintrages zurück\n     *\n     * @param value\n     * @param name\n     * @param url\n     *\n     * @return {number}\n     */\n    pushState(value, name, url) {\n        let newState = {\n            state: value,\n            title: name,\n            url: url\n        };\n        this._lastStateId++;\n        this._states[this._lastStateId] = newState;\n        this._currentStackIndex++;\n        this._stack.splice(this._currentStackIndex, this._stack.length, this._lastStateId);\n        this._updateNativeHistoryStack(url);\n        return this._lastStateId;\n    }\n    /**\n     * Ersetzt den Eintrag mit der gegebenen ID. Ist die ID nicht gegeben, wird der aktuelle Eintrag ersetzt\n     *\n     * @param value\n     * @param name\n     * @param url\n     * @param id\n     */\n    replaceState(value, name, url, id) {\n        id = Helper_1.Helper.nonNull(id, this._stack[this._currentStackIndex]);\n        if (this._stack.length > this._currentStackIndex && this._currentStackIndex >= 0) {\n            this._states[id] = {\n                state: value,\n                title: name,\n                url: url\n            };\n            this._updateNativeHistoryStack(url);\n        }\n    }\n    /**\n     * Verschiebt den Eintrag mit der entsprechenden ID an die aktuell aktive Stelle\n     * @param id\n     */\n    stateToCurrentPosition(id) {\n        if (Helper_1.Helper.isNotNull(this._states[id])) {\n            let oldStackPosition = this._stack.indexOf(id);\n            if (oldStackPosition !== -1) {\n                this._stack.splice(oldStackPosition, 1);\n                this._stack.splice(this._currentStackIndex + ((oldStackPosition <= this._currentStackIndex) ? -1 : 0), 0, id);\n            }\n        }\n    }\n    /**\n     * Gehe um to in der Historie\n     *\n     * @param to\n     * @param ignoreOnPopState\n     */\n    go(to, ignoreOnPopState) {\n        this._ignoreOnPopState = (Helper_1.Helper.nonNull(ignoreOnPopState, false) === true);\n        history.go(to);\n    }\n    /**\n     * Entferne alle Einträge ab at (inklusive). Wenn at nicht gesetzt ist, wird alles über der aktuellen position abgeschnitten\n     * @param at\n     */\n    cutStack(at) {\n        at = Helper_1.Helper.nonNull(at, this._currentStackIndex + 1);\n        this._stack.splice(at);\n        this._currentStackIndex = Math.min(this._currentStackIndex, this._stack.length - 1);\n        this._updateNativeHistoryStack();\n    }\n    /**\n     * Alias für this.go(-1)\n     */\n    back() {\n        this.go(-1);\n    }\n    /**\n     * Alias für this.go(1)\n     */\n    forward() {\n        this.go(+1);\n    }\n    /**\n     * Setzt den onPopStateListener\n     *\n     * @param listener\n     */\n    setOnPopStateListener(listener) {\n        this._onPopStateListener = listener;\n    }\n    /**\n     * Singelton-Getter\n     * @return {HistoryManager}\n     */\n    static getInstance() {\n        if (Helper_1.Helper.isNull(HistoryManager._instance)) {\n            HistoryManager._instance = new HistoryManager();\n        }\n        return HistoryManager._instance;\n    }\n}\nexports.HistoryManager = HistoryManager;\nHistoryManager.BACK = -1;\nHistoryManager.FORWARD = 1;\nHistoryManager.CURRENT = 0;\n//# sourceMappingURL=HistoryManager.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventManager = void 0;\nconst cs_event_manager_1 = require(\"cs-event-manager\");\nclass EventManager extends cs_event_manager_1.EventManager {\n}\nexports.EventManager = EventManager;\n//# sourceMappingURL=EventManager.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Helper = void 0;\n/**\n * Eine Klasse mit häufig genutzten, nützlichen Funktionen\n */\nconst Translator_1 = require(\"../Translator\");\nclass Helper {\n    /**\n     * Testet, ob eine Variable null oder Undefined ist\n     *\n     * @param variable\n     * @returns {boolean}\n     */\n    static isNull(variable) {\n        return (variable === null || variable === undefined);\n    }\n    /**\n     * Testet, ob eine Variable nicht (null oder undefined) ist\n     *\n     * @param variable\n     * @returns {boolean}\n     */\n    static isNotNull(variable) {\n        return !Helper.isNull(variable);\n    }\n    /**\n     * Gibt den ersten übergebenen Wert, der nicht (null oder undefined) ist, zurück\n     *\n     * @param val1\n     * @param val2\n     * @param args\n     * @returns {*}\n     */\n    static nonNull(val1, val2, ...args) {\n        for (let i = 0; i < arguments.length; i++) {\n            if (Helper.isNotNull(arguments[i])) {\n                return arguments[i];\n            }\n        }\n        return null;\n    }\n    /**\n     * Testet, ob der übergebene Index am Objekt gesetzt ist. Werden mehrere Indexes übergeben, so wird getestet,\n     * ob die \"Index-Kette\" gesetzt ist.\n     * Bsp.:\n     *  Helper.isSet({\"index1\":{\"index2\":value}}, \"index1\", \"index2\") ist wahr\n     *\n     * @param object\n     * @param indexes\n     * @returns {*}\n     */\n    static isSet(object, ...indexes) {\n        if (Helper.isNotNull(object)) {\n            if (indexes.length === 0) {\n                return true;\n            }\n            return (Helper.isSet.apply(null, [object[indexes[0]]].concat(indexes.slice(1))));\n        }\n        return false;\n    }\n    /**\n     * Testet, ob ein Wert null oder Leerstring, bzw nur aus leerzeichend bestehender String ist\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    static empty(value) {\n        return (Helper.isNull(value) || (typeof value === 'string' && value.trim() === \"\"));\n    }\n    /**\n     * Testet, ob ein Wert NICHT (null oder Leerstring, bzw nur aus leerzeichend bestehender String ist)\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    static notEmpty(value) {\n        return !Helper.empty(value);\n    }\n    /**\n     * Formatiert ein Date-Object nach der Vorlage von der C-Funktion strftime\n     *\n     * @param sFormat\n     * @param date\n     * @param useUTC\n     * @returns {*|void|string|never}\n     */\n    static strftime(sFormat, date, useUTC, makePersistentTranslation) {\n        useUTC = Helper.nonNull(useUTC, false);\n        makePersistentTranslation = Helper.nonNull(makePersistentTranslation, true);\n        date = Helper.nonNull(date, new Date());\n        if (!(date instanceof Date))\n            date = new Date(date);\n        let nDay = (useUTC) ? date.getUTCDay() : date.getDay(), nDate = (useUTC) ? date.getUTCDate() : date.getDate(), nMonth = (useUTC) ? date.getUTCMonth() : date.getMonth(), nYear = (useUTC) ? date.getUTCFullYear() : date.getFullYear(), nHour = (useUTC) ? date.getUTCHours() : date.getHours(), aDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], aDaysShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], aMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], aDayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], isLeapYear = function () {\n            if ((nYear & 3) !== 0)\n                return false;\n            return nYear % 100 !== 0 || nYear % 400 === 0;\n        }, getThursday = function () {\n            let target = new Date(date);\n            target.setDate(nDate - ((nDay + 6) % 7) + 3);\n            return target;\n        }, zeroPad = function (nNum, nPad) {\n            return ('' + (Math.pow(10, nPad) + nNum)).slice(1);\n        };\n        return sFormat.replace(/%[a-z]/gi, function (sMatch) {\n            return {\n                '%a': (makePersistentTranslation) ? Translator_1.Translator.makePersistentTranslation(aDaysShort[nDay]).outerHTML : Translator_1.Translator.translate(aDaysShort[nDay]),\n                '%A': (makePersistentTranslation) ? Translator_1.Translator.makePersistentTranslation(aDays[nDay]).outerHTML : Translator_1.Translator.translate(aDays[nDay]),\n                '%b': (makePersistentTranslation) ? Translator_1.Translator.makePersistentTranslation(aMonths[nMonth].slice(0, 3)).outerHTML : Translator_1.Translator.translate(aMonths[nMonth].slice(0, 3)),\n                '%B': (makePersistentTranslation) ? Translator_1.Translator.makePersistentTranslation(aMonths[nMonth]).outerHTML : Translator_1.Translator.translate(aMonths[nMonth]),\n                '%c': date.toUTCString(),\n                '%C': Math.floor(nYear / 100),\n                '%d': zeroPad(nDate, 2),\n                '%e': nDate,\n                '%f': zeroPad(date.getTime() % 1000, 4),\n                '%F': date.toISOString().slice(0, 10),\n                '%G': getThursday().getFullYear(),\n                '%g': ('' + getThursday().getFullYear()).slice(2),\n                '%H': zeroPad(nHour, 2),\n                '%I': zeroPad((nHour + 11) % 12 + 1, 2),\n                '%j': zeroPad(aDayCount[nMonth] + nDate + ((nMonth > 1 && isLeapYear()) ? 1 : 0), 3),\n                '%k': '' + nHour,\n                '%l': (nHour + 11) % 12 + 1,\n                '%m': zeroPad(nMonth + 1, 2),\n                '%M': zeroPad(date.getMinutes(), 2),\n                '%p': (nHour < 12) ? 'AM' : 'PM',\n                '%P': (nHour < 12) ? 'am' : 'pm',\n                '%s': Math.round(date.getTime() / 1000),\n                '%S': zeroPad(date.getSeconds(), 2),\n                '%u': nDay || 7,\n                '%w': '' + nDay,\n                '%x': date.toLocaleDateString(),\n                '%X': date.toLocaleTimeString(),\n                '%y': ('' + nYear).slice(2),\n                '%Y': nYear,\n                '%z': date.toTimeString().replace(/.+GMT([+-]\\d+).+/, '$1'),\n                '%Z': date.toTimeString().replace(/.+\\((.+?)\\)$/, '$1')\n            }[sMatch] || sMatch;\n        });\n    }\n    static arrayToObject(array, indexFunction) {\n        let obj = {};\n        array.forEach(val => {\n            obj[indexFunction(val)] = val;\n        });\n        return obj;\n    }\n    /**\n     * Deepcopies JSON\n     *\n     * @param obj\n     * @returns {*}\n     */\n    static cloneJson(obj) {\n        // https://stackoverflow.com/questions/4120475/how-to-create-and-clone-a-json-object/17502990#17502990\n        let i;\n        // basic type deep copy\n        if (Helper.isNull(obj) || typeof obj !== 'object') {\n            return obj;\n        }\n        // array deep copy\n        if (obj instanceof Array) {\n            let cloneA = [];\n            for (i = 0; i < obj.length; ++i) {\n                cloneA[i] = Helper.cloneJson(obj[i]);\n            }\n            return cloneA;\n        }\n        if (obj instanceof Date) {\n            return new Date(obj.getTime());\n        }\n        // object deep copy\n        let cloneO = {};\n        for (i in obj) {\n            cloneO[i] = Helper.cloneJson(obj[i]);\n        }\n        return cloneO;\n    }\n    /**\n     * Erstellt ein FormData-Object von JSON-Data. Nützlich für fetch\n     *\n     * @param obj\n     * @returns {FormData}\n     */\n    static formDataFromObject(obj) {\n        let formData = new FormData();\n        for (let k in obj) {\n            formData.set(k, obj[k]);\n        }\n        return formData;\n    }\n    /**\n     * Entfernt alle Children eines Elements\n     *\n     * @param element\n     * @returns {Node}\n     */\n    static removeAllChildren(element) {\n        if (element instanceof Node) {\n            while (element.firstChild) {\n                element.removeChild(element.firstChild);\n            }\n        }\n        return element;\n    }\n    static shuffleArray(array) {\n        let currentIndex = array.length, temporaryValue, randomIndex;\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n    static padZero(n, width, z) {\n        z = Helper.nonNull(z, '0');\n        n = n + '';\n        width = Helper.nonNull(width, 1);\n        return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n    }\n    static deepEqual(a, b) {\n        // debugger;\n        if (a === b) {\n            return true;\n        }\n        if (typeof a === \"object\" && typeof b === \"object\") {\n            let keysOfB = Object.keys(b);\n            let childrenDeepEqual = Object.keys(a).every((key) => {\n                let index = keysOfB.indexOf(key);\n                if (index < 0) {\n                    return false;\n                }\n                keysOfB.splice(index, 1);\n                return Helper.deepEqual(a[key], b[key]);\n            });\n            return (childrenDeepEqual && keysOfB.length === 0);\n        }\n        return false;\n    }\n    //Ältere evtl nützliche Funktionen\n    static htmlspecialcharsDecode(text) {\n        const map = {\n            '&amp;': '&',\n            '&#038;': \"&\",\n            '&lt;': '<',\n            '&gt;': '>',\n            '&quot;': '\"',\n            '&#039;': \"'\",\n            '&#8217;': \"’\",\n            '&#8216;': \"‘\",\n            '&#8211;': \"–\",\n            '&#8212;': \"—\",\n            '&#8230;': \"…\",\n            '&#8221;': '”'\n        };\n        if (Helper.isNotNull(text) && typeof text.replace === \"function\") {\n            return text.replace(/\\&[\\w\\d\\#]{2,5}\\;/g, function (m) {\n                return map[m];\n            });\n        }\n        return text;\n    }\n    // static getIndexedObject(array, keyValue) {\n    //     let obj = {};\n    //     for (let i = 0, n = array.length; i < n; i++) {\n    //         obj[array[i][keyValue]] = array[i];\n    //     }\n    //     return obj;\n    // }\n    /**\n     * Inverts the key-Values for an object\n     * @param obj\n     * @return {*}\n     */\n    static invertKeyValues(obj) {\n        let new_obj = {};\n        for (let prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                new_obj[obj[prop]] = prop;\n            }\n        }\n        return new_obj;\n    }\n    static asyncForEach(array, callback, runAsyncronous) {\n        return __awaiter(this, void 0, void 0, function* () {\n            runAsyncronous = Helper.nonNull(runAsyncronous, false);\n            if (array instanceof Map) {\n                array = Array.from(array.values());\n            }\n            let validPromises = [];\n            for (let i = 0; i < array.length; i++) {\n                let index = i;\n                let currentPromise = Promise.resolve(callback(array[index], index, array));\n                if (!runAsyncronous) {\n                    yield currentPromise;\n                }\n                validPromises.push(currentPromise);\n            }\n            return Promise.all(validPromises);\n        });\n    }\n    static escapeRegExp(str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n    }\n    static objectForEach(object, callback) {\n        Object.keys(object).forEach(key => {\n            callback(object[key], key, object);\n        });\n    }\n    static toArray(object) {\n        let res = [];\n        for (let k in object) {\n            res.push(object[k]);\n        }\n        return res;\n    }\n    static imageUrlIsEmpty(url) {\n        return (Helper.isNull(url) || url.trim() === \"\" || url.trim() === \"data:\");\n    }\n    static newPromiseWithResolve() {\n        let resolver = null;\n        let rejecter = null;\n        let promise = new Promise((resolve, reject) => {\n            resolver = resolve;\n            rejecter = reject;\n        });\n        promise[\"resolve\"] = resolver;\n        promise[\"reject\"] = rejecter;\n        return promise;\n    }\n}\nexports.Helper = Helper;\n//# sourceMappingURL=Helper.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Matomo = void 0;\nconst js_helper_1 = require(\"js-helper\");\nconst NativeStoragePromise_1 = require(\"../NativeStoragePromise\");\nclass Matomo {\n    static init() {\n        Matomo.isTrackingPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            let shouldTrack = yield NativeStoragePromise_1.NativeStoragePromise.getItem(Matomo.LOCAL_STORAGE_KEY, \"1\");\n            if (js_helper_1.Helper.isNull(shouldTrack)) {\n                shouldTrack = yield Matomo._askIsTracking();\n                yield NativeStoragePromise_1.NativeStoragePromise.setItem(Matomo.LOCAL_STORAGE_KEY, shouldTrack);\n            }\n            else {\n                shouldTrack = (shouldTrack === \"1\");\n                yield Matomo.setTrack(shouldTrack);\n            }\n            resolve(shouldTrack);\n        }));\n        Matomo.isTrackingPromise.then(() => {\n            Matomo.push(['trackPageView'], true);\n            Matomo.push(['enableLinkTracking'], true);\n            Matomo.push(['setTrackerUrl', Matomo.TRACK_SITE + '/piwik.php'], true);\n            Matomo.push(['setSiteId', Matomo.SIDE_ID + \"\"], true);\n            let d = document, g = d.createElement('script'), s = d.getElementsByTagName('head')[0];\n            g.type = 'text/javascript';\n            g.async = true;\n            g.defer = true;\n            g.src = Matomo.TRACK_SITE + '/piwik.js';\n            s.appendChild(g);\n        });\n    }\n    static update(title) {\n        if (js_helper_1.Helper.nonNull(Matomo.currentUrl)) {\n            Matomo.push(['setReferrerUrl', Matomo.currentUrl]);\n        }\n        Matomo.currentUrl = window.location.pathname + window.location.search;\n        Matomo.push(['setCustomUrl', Matomo.currentUrl]);\n        Matomo.push(['setDocumentTitle', title]);\n        // remove all previously assigned custom variables, requires Matomo (formerly Piwik) 3.0.2\n        Matomo.push(['deleteCustomVariables', 'page']);\n        Matomo.push(['setGenerationTimeMs', 0]);\n        Matomo.push(['trackPageView']);\n        // make Matomo aware of newly added content\n        var content = document.getElementById('site-content');\n        Matomo.push(['MediaAnalytics::scanForMedia', content]);\n        Matomo.push(['FormAnalytics::scanForForms', content]);\n        Matomo.push(['trackContentImpressionsWithinNode', content]);\n        Matomo.push(['enableLinkTracking']);\n    }\n    static _askIsTracking() {\n        return __awaiter(this, void 0, void 0, function* () {\n            Matomo.isTrackingPromise = new Promise(resolve => {\n                Matomo.push([function () {\n                        resolve(!this[\"isUserOptedOut\"]());\n                    }]);\n            });\n            return Matomo.isTrackingPromise;\n        });\n    }\n    static query(method) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return fetch(Matomo.TRACK_SITE + Matomo.BASE_PATH + method, {\n                \"mode\": \"cors\",\n                \"credentials\": \"include\",\n            }).then(res => res.text()).then(text => (new window[\"DOMParser\"]()).parseFromString(text, \"text/xml\"));\n        });\n    }\n    static getTrackingPromise() {\n        return Matomo.isTrackingPromise;\n    }\n    static setTrack(shouldTrack) {\n        return __awaiter(this, void 0, void 0, function* () {\n            Matomo.isTrackingPromise = Promise.resolve(shouldTrack);\n            yield NativeStoragePromise_1.NativeStoragePromise.setItem(Matomo.LOCAL_STORAGE_KEY, (shouldTrack === true) ? \"1\" : \"0\");\n            if (shouldTrack) {\n                yield Matomo.push([\"forgetUserOptOut\"], true);\n            }\n            else {\n                yield Matomo.push([\"optUserOut\"], true);\n            }\n        });\n    }\n    static trackEvent(event, name, label, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let ev = [\"trackEvent\", event, name];\n            if (js_helper_1.Helper.isNotNull(label)) {\n                ev.push(label);\n            }\n            if (js_helper_1.Helper.isNotNull(value) && !isNaN(parseFloat(value)) && isFinite(value)) {\n                ev.push(value);\n            }\n            return this.push(ev);\n        });\n    }\n    //TODO Matomo\n    static push(arr, force) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // if (!Array.isArray(arr)) {\n            //     arr = [arr];\n            // }\n            // window[\"_paq\"].push(arr);\n        });\n    }\n}\nexports.Matomo = Matomo;\nMatomo.LOCAL_STORAGE_KEY = \"matomoShouldTrack\";\nMatomo.TRACK_SITE = \"\";\nMatomo.BASE_PATH = \"\";\nMatomo.SIDE_ID = \"1\";\nMatomo.currentUrl = null;\nMatomo.isTrackingPromise = null;\n//# sourceMappingURL=Matomo.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ScaleHelper = void 0;\nconst js_helper_1 = require(\"js-helper\");\nclass ScaleHelper {\n    scaleTo(scale, fontElement, container, ignoreHeight, ignoreWidth, margin, fontWeight, animationDelay, addListener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addListener = js_helper_1.Helper.nonNull(addListener, true);\n            animationDelay = js_helper_1.Helper.nonNull(animationDelay, 0);\n            let newFontSize = yield this._getNewFontSize(scale, fontElement, container, ignoreHeight, ignoreWidth, margin, fontWeight, animationDelay === 0);\n            if (animationDelay > 0) {\n                yield new Promise(r => {\n                    setTimeout(r, animationDelay);\n                    fontElement.style.fontSize = newFontSize + \"px\";\n                });\n            }\n            let self = this;\n            let listener = function () {\n                return new Promise(resolve => {\n                    let timeout = (typeof addListener === 'number') ? addListener : 255;\n                    setTimeout(() => {\n                        resolve(self.scaleTo(scale, fontElement, container, ignoreHeight, ignoreWidth, margin, fontWeight, animationDelay, false));\n                    }, timeout);\n                });\n            };\n            if (addListener !== false) {\n                window.addEventListener(\"resize\", listener);\n            }\n            return listener;\n        });\n    }\n    scaleToFull(fontElement, container, ignoreHeight, ignoreWidth, margin, fontWeight, animDelay, addListener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.scaleTo(1, fontElement, container, ignoreHeight, ignoreWidth, margin, fontWeight, animDelay, addListener);\n        });\n    }\n    _getNewFontSize(scale, fontElement, container, ignoreHeight, ignoreWidth, margin, fontWeight, setFontSize) {\n        return __awaiter(this, void 0, void 0, function* () {\n            margin = js_helper_1.Helper.nonNull(margin, 10);\n            ignoreHeight = js_helper_1.Helper.nonNull(ignoreHeight, false);\n            ignoreWidth = js_helper_1.Helper.nonNull(ignoreWidth, false);\n            fontWeight = js_helper_1.Helper.nonNull(fontWeight, fontElement.innerHTML.length);\n            setFontSize = js_helper_1.Helper.nonNull(setFontSize, true);\n            let hasNoTransitionClass = container.classList.contains(\"no-transition\");\n            if (!hasNoTransitionClass) {\n                container.classList.add(\"no-transition\");\n            }\n            const numChanged = 5;\n            let oldDiffIndex = 0;\n            let oldDiff = [];\n            for (let i = 0; i < numChanged; i++) {\n                oldDiff.push(0);\n            }\n            let beforeFontSize = fontElement.style.fontSize;\n            let currentFontSize = 1;\n            let widthDiff = 0;\n            let heightDiff = 0;\n            let containerWidth = 0;\n            let containerHeight = 0;\n            do {\n                currentFontSize += oldDiff[oldDiffIndex] / (fontWeight + 1);\n                fontElement.style.fontSize = currentFontSize + 'px';\n                let containerStyle = window.getComputedStyle(container);\n                containerWidth = parseFloat(containerStyle.getPropertyValue(\"width\").replace('px', ''));\n                containerHeight = parseFloat(containerStyle.getPropertyValue(\"height\").replace('px', ''));\n                widthDiff = containerWidth - fontElement.offsetWidth;\n                heightDiff = containerHeight - fontElement.offsetHeight;\n                oldDiffIndex = (oldDiffIndex + 1) % numChanged;\n                let newDiff = (ignoreWidth ? heightDiff : (ignoreHeight ? widthDiff : Math.min(widthDiff, heightDiff)));\n                if (newDiff === oldDiff[(oldDiffIndex + 1) % numChanged]) {\n                    break;\n                }\n                oldDiff[oldDiffIndex] = newDiff;\n            } while ((widthDiff > (1 - scale) * containerWidth || ignoreWidth) && (heightDiff > (1 - scale) * containerHeight || ignoreHeight));\n            currentFontSize -= margin;\n            fontElement.style.fontSize = ((setFontSize) ? currentFontSize + \"px\" : beforeFontSize);\n            if (!hasNoTransitionClass) {\n                yield new Promise((r) => {\n                    setTimeout(r, 50);\n                });\n                container.classList.remove(\"no-transition\");\n            }\n            return currentFontSize;\n        });\n    }\n}\nexports.ScaleHelper = ScaleHelper;\n//# sourceMappingURL=ScaleHelper.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NativeStoragePromise = void 0;\n/**\n * Promise-Wrapper-Klasse für Native-Storage\n */\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst JsonHelper_1 = require(\"js-helper/dist/shared/JsonHelper\");\nclass NativeStoragePromise {\n    static _isElectron() {\n        return (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0);\n    }\n    /**\n     * Setzt ein Item für NativeStorage\n     *\n     * @param key\n     * @param value\n     * @returns {Promise<*>}\n     */\n    static setItem(key, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.persistent) {\n                if (this._isElectron()) {\n                    return new Promise((res, rej) => this.electronStorage.set(this.prefix + key, value, err => {\n                        if (err) {\n                            rej(err);\n                        }\n                        else {\n                            res();\n                        }\n                    }));\n                }\n                else {\n                    return new Promise((res, rej) => NativeStorage.setItem(this.prefix + key, value, res, rej));\n                }\n            }\n            else {\n                this._cache[this.prefix + key] = value;\n            }\n        });\n    }\n    /**\n     * Bekomme ein Item von NativeStorage\n     *\n     * @param key\n     * @param defaultValue?\n     * @returns {Promise<*>}\n     */\n    static getItem(key, defaultValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((res, rej) => {\n                if (this._isElectron()) {\n                    this.electronStorage.get(this.prefix + key, (e, data) => {\n                        if (e) {\n                            res(Helper_1.Helper.nonNull(this._cache[this.prefix + key], defaultValue));\n                        }\n                        else {\n                            res(JsonHelper_1.JsonHelper.deepEqual(data, {}) ? defaultValue : data);\n                        }\n                    });\n                }\n                else {\n                    NativeStorage.getItem(this.prefix + key, data => res(Helper_1.Helper.nonNull(data, defaultValue)), (e => {\n                        res(Helper_1.Helper.nonNull(this._cache[this.prefix + key], defaultValue));\n                    }));\n                }\n            });\n        });\n    }\n    /**\n     * Bekomme die Keys vom NativeStorage\n     *\n     * @returns {Promise<*>}\n     */\n    static keys() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let keys = [];\n            if (this.persistent) {\n                if (this._isElectron()) {\n                    keys = yield new Promise((res, rej) => this.electronStorage.keys((err, keys) => {\n                        if (err) {\n                            rej(err);\n                        }\n                        else {\n                            res(keys);\n                        }\n                    }));\n                }\n                else {\n                    keys = yield new Promise((res, rej) => NativeStorage.keys(res, rej));\n                }\n            }\n            else {\n                keys = Object.keys(this._cache);\n            }\n            return keys.filter(key => key.startsWith(this.prefix));\n        });\n    }\n    /**\n     * Entfernt ein Object aus dem NativeStorage\n     *\n     * @param key\n     * @returns {Promise<*>}\n     */\n    static remove(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            delete this._cache[this.prefix + key];\n            if (this._isElectron()) {\n                return new Promise((res, rej) => this.electronStorage.remove(this.prefix + key, err => {\n                    if (err) {\n                        rej(err);\n                    }\n                    else {\n                        res();\n                    }\n                }));\n            }\n            else {\n                return new Promise((res, rej) => NativeStorage.remove(this.prefix + key, res, rej));\n            }\n        });\n    }\n    /**\n     * Entfernt alle Objects aus dem NativeStorage\n     *\n     * @returns {Promise<*>}\n     */\n    static clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let keys = yield this.keys();\n            yield Helper_1.Helper.asyncForEach((keys), (key) => __awaiter(this, void 0, void 0, function* () {\n                yield this.remove(key);\n            }), true);\n        });\n    }\n    static makePersistent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.persistent) {\n                this.persistent = true;\n                yield Helper_1.Helper.asyncForEach(Object.keys(this._cache), (key) => __awaiter(this, void 0, void 0, function* () {\n                    yield this.setItem(key, this._cache[key]);\n                }), true);\n            }\n        });\n    }\n    static makeUnpersistent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.persistent) {\n                let keys = yield this.keys();\n                let values = {};\n                yield Helper_1.Helper.asyncForEach(keys, (key) => __awaiter(this, void 0, void 0, function* () {\n                    values[key] = yield this.getItem(key);\n                }));\n                this.clear();\n                this.persistent = false;\n                this._cache = values;\n            }\n        });\n    }\n}\nexports.NativeStoragePromise = NativeStoragePromise;\nNativeStoragePromise._cache = {};\nNativeStoragePromise.prefix = \"\";\nNativeStoragePromise.persistent = true;\nNativeStoragePromise.electronStorage = null;\n//# sourceMappingURL=NativeStoragePromise.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromiseHelper = void 0;\nconst Helper_1 = require(\"./Legacy/Helper\");\nclass PromiseHelper {\n    static delay(milliseconds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(r => {\n                setTimeout(r, milliseconds);\n            });\n        });\n    }\n    static tryMultipleTimes(func, times, delay) {\n        return __awaiter(this, void 0, void 0, function* () {\n            times = Helper_1.Helper.nonNull(times, 5);\n            delay = Helper_1.Helper.nonNull(delay, 50);\n            for (let i = 0; i < times; i++) {\n                let res = yield func();\n                if (res !== undefined) {\n                    return res;\n                }\n                else {\n                    yield PromiseHelper.delay(delay);\n                }\n            }\n            return undefined;\n        });\n    }\n    static tryUntilTimeout(func, timeout, delay) {\n        return __awaiter(this, void 0, void 0, function* () {\n            timeout = Helper_1.Helper.nonNull(timeout, 500);\n            delay = Helper_1.Helper.nonNull(delay, 50);\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let shouldRun = true;\n                PromiseHelper.delay(timeout).then(() => {\n                    reject(new Error(\"timeout\"));\n                    shouldRun = false;\n                });\n                while (shouldRun) {\n                    let res = yield func();\n                    if (res !== undefined) {\n                        resolve(res);\n                        break;\n                    }\n                    yield PromiseHelper.delay(delay);\n                }\n            }));\n        });\n    }\n}\nexports.PromiseHelper = PromiseHelper;\n//# sourceMappingURL=PromiseHelper.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShareDialog = void 0;\nconst Dialog_1 = require(\"../Dialog/Dialog\");\nconst ViewInflater_1 = require(\"../ViewInflater\");\nconst view = require(\"../../html/Dialog/shareDialog.html\");\nclass ShareDialog extends Dialog_1.Dialog {\n    constructor(textToShare) {\n        super(ViewInflater_1.ViewInflater.getInstance().load(view).then(view => {\n            view.querySelector(\"#whatsapp-share\").addEventListener(\"click\", () => {\n                let linkToOpen = \"\";\n                linkToOpen = \"https://web.whatsapp.com/send?text=\" + encodeURIComponent(textToShare);\n                window.open(linkToOpen, '_blank', \"noopener\");\n                this.close();\n            });\n            view.querySelector(\"#telegram-share\").addEventListener(\"click\", () => {\n                let linkToOpen = \"https://t.me/share/url?url=\" + encodeURIComponent(textToShare);\n                window.open(linkToOpen, '_blank', \"noopener\");\n                this.close();\n            });\n            return view;\n        }), \"Share\");\n    }\n}\nexports.ShareDialog = ShareDialog;\n//# sourceMappingURL=ShareDialog.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShareManager = void 0;\nconst ShareDialog_1 = require(\"./ShareDialog\");\nclass ShareManager {\n    share(text) {\n        if (device.platform === \"browser\") {\n            this._shareBrowser(text);\n        }\n        else {\n            this._shareMobile(text);\n        }\n    }\n    _shareMobile(text) {\n        navigator[\"share\"](text);\n    }\n    _shareBrowser(text) {\n        new ShareDialog_1.ShareDialog(text).show();\n    }\n}\nexports.ShareManager = ShareManager;\n//# sourceMappingURL=ShareManager.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Singleton = void 0;\nclass Singleton {\n    /**\n     *\n     * @returns {Singleton|this}\n     */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new this();\n        }\n        return this._instance;\n    }\n}\nexports.Singleton = Singleton;\n//# sourceMappingURL=Singleton.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AudioChain = void 0;\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nclass AudioChain {\n    constructor(context, sourceBuffer, chainFunction) {\n        this._buffer = sourceBuffer;\n        this._shouldLoop = false;\n        this._loopStart = null;\n        this._loopEnd = null;\n        this._chainFunction = chainFunction;\n        this._context = context;\n        this._startTime = null;\n        this._pauseTime = null;\n        this._source = null;\n        this._running = false;\n    }\n    setBuffer(buffer) {\n        this._buffer = buffer;\n    }\n    setLooping(shouldLoop, loopStart, loopEnd) {\n        this._shouldLoop = shouldLoop;\n        if (Helper_1.Helper.isNotNull(loopStart)) {\n            this._loopStart = loopStart;\n        }\n        if (Helper_1.Helper.isNotNull(loopEnd)) {\n            this._loopEnd = loopEnd;\n        }\n    }\n    start(delay, offset, duration) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //sind sonst null, schmeißt in Android 5 einen fehler\n            delay = Helper_1.Helper.nonNull(delay, 0);\n            offset = Helper_1.Helper.nonNull(offset, 0);\n            //Duration darf nicht gesetzt werden\n            // duration = Helper.nonNull(duration, -1);\n            let source = this._context.createBufferSource();\n            source.loop = this._shouldLoop;\n            if (Helper_1.Helper.isNotNull(this._loopStart)) {\n                source.loopStart = this._loopStart;\n            }\n            if (Helper_1.Helper.isNotNull(this._loopEnd)) {\n                source.loopEnd = this._loopEnd;\n            }\n            source.buffer = this._buffer;\n            yield this._chainFunction(source);\n            if (Helper_1.Helper.isNull(duration)) {\n                source.start(delay, offset);\n            }\n            else {\n                source.start(delay, offset, duration);\n            }\n            this._startTime = (new Date()).getTime() - (Helper_1.Helper.nonNull(offset, 0) * 1000);\n            this._source = source;\n            this._running = true;\n        });\n    }\n    stop(delay) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Helper_1.Helper.isNotNull(this._source)) {\n                delay = Helper_1.Helper.nonNull(delay, 0);\n                this._pauseTime = ((new Date()).getTime()) - this._startTime;\n                this._running = false;\n                return this._source.stop(delay);\n            }\n            return null;\n        });\n    }\n    resume() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._running) {\n                return this.start(null, Helper_1.Helper.nonNull(this._pauseTime, 0) / 1000.0);\n            }\n        });\n    }\n}\nexports.AudioChain = AudioChain;\n//# sourceMappingURL=AudioChain.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SoundManager = void 0;\nconst AudioChain_1 = require(\"./AudioChain\");\nconst Helper_1 = require(\"js-helper/dist/shared/Helper\");\nconst App_1 = require(\"../App\");\nconst DataManager_1 = require(\"../DataManager\");\nclass SoundManager {\n    constructor() {\n        this.channels = {};\n        if ('AudioContext' in window) {\n            this.context = new AudioContext();\n        }\n        else if ('webkitAudioContext' in window) {\n            // @ts-ignore\n            this.context = new webkitAudioContext();\n        }\n        else {\n            throw new Error(\"No audio context found!\");\n        }\n        this.context.onstatechange = function () {\n            console.log(\"stateChange from context\", arguments);\n        };\n        this.context.oncomplete = function () {\n            console.log(\"onComplete from context\", arguments);\n        };\n        window.addEventListener(\"visibilitychange\", (e) => {\n            // console.log(\"visibility Change event\", e);\n            this.handleVisibilityChange();\n        });\n        //For safari\n        let checkVisibility = () => {\n            this.handleVisibilityChange();\n            setTimeout(checkVisibility, 500);\n        };\n        checkVisibility();\n    }\n    static getInstance() {\n        if (Helper_1.Helper.isNull(SoundManager._instance)) {\n            SoundManager._instance = new SoundManager();\n        }\n        return SoundManager._instance;\n    }\n    isNotSuspended() {\n        // return false;\n        return this.context.state !== \"suspended\";\n    }\n    set(options, channel) {\n        channel = Helper_1.Helper.nonNull(channel, SoundManager.CHANNELS.DEFAULT);\n        let audioObject = Helper_1.Helper.nonNull(this.channels[channel], {});\n        if (typeof options === \"string\") {\n            options = { audio: options };\n        }\n        let audio = options.audio;\n        if (Helper_1.Helper.isNotNull(audio)) {\n            audioObject.loadedPromise = DataManager_1.DataManager.loadAsset(audio, \"raw\").then(res => res.arrayBuffer()).then(arrayBuffer => {\n                return new Promise((r, reject) => this.context.decodeAudioData(arrayBuffer, r));\n            }).catch(e => console.error(e));\n            // audioObject.loadedPromise = fetch(audio).then(res => res.arrayBuffer()).then(arrayBuffer => {\n            //     return new Promise((r, reject) => this.context.decodeAudioData(arrayBuffer, r));\n            // }).catch(e => console.error(e));\n            this.stop(channel);\n        }\n        audioObject.muted = Helper_1.Helper.nonNull(options.muted, audioObject.muted, false);\n        audioObject.volume = Helper_1.Helper.nonNull(options.volume, audioObject.volume, 1);\n        audioObject.loop = Helper_1.Helper.nonNull(options.loop, audioObject.loop, false);\n        audioObject.timeOffset = Helper_1.Helper.nonNull(options.timeOffset, audioObject.timeOffset, 0);\n        this.channels[channel] = audioObject;\n        if (audioObject.muted) {\n            this.stop(channel);\n        }\n        return this.channels[channel];\n    }\n    resumeContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.context.resume === \"function\") {\n                return this.context.resume();\n            }\n        });\n    }\n    play(channel, audioOrOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.resumeContext();\n            channel = Helper_1.Helper.nonNull(channel, SoundManager.CHANNELS.DEFAULT);\n            if (Helper_1.Helper.isNull(audioOrOptions)) {\n                audioOrOptions = {};\n            }\n            else if (!(typeof audioOrOptions === \"object\")) {\n                audioOrOptions = {\n                    audio: audioOrOptions\n                };\n            }\n            audioOrOptions.timeOffset = Helper_1.Helper.nonNull(audioOrOptions.timeOffset, 0);\n            this.stop(channel);\n            this.set(audioOrOptions, channel);\n            if (!this.channels[channel].muted) {\n                let buffer = yield this.channels[channel].loadedPromise;\n                let source = new AudioChain_1.AudioChain(this.context, buffer, (sourceNode) => {\n                    let gain = this.context.createGain();\n                    gain.gain.value = this.channels[channel].volume;\n                    sourceNode.connect(gain);\n                    gain.connect(this.context.destination);\n                });\n                source.setBuffer(buffer);\n                //to prevent gap in mp3-files\n                source.setLooping(this.channels[channel].loop, 0.3, buffer.duration - 0.3);\n                this.channels[channel].source = source;\n                yield source.start();\n            }\n            return this.channels[channel];\n        });\n    }\n    stop(channel) {\n        channel = Helper_1.Helper.nonNull(channel, SoundManager.CHANNELS.DEFAULT);\n        let oldAudio = this.channels[channel];\n        if (Helper_1.Helper.isNotNull(oldAudio) && Helper_1.Helper.isNotNull(oldAudio.source)) {\n            oldAudio.source.stop();\n        }\n    }\n    get(channel) {\n        channel = Helper_1.Helper.nonNull(channel, SoundManager.CHANNELS.DEFAULT);\n        return this.channels[channel];\n    }\n    resume(channel) {\n        return __awaiter(this, void 0, void 0, function* () {\n            channel = Helper_1.Helper.nonNull(channel, SoundManager.CHANNELS.DEFAULT);\n            if (Helper_1.Helper.isNotNull(this.channels[channel]) && !this.channels[channel].muted && Helper_1.Helper.isNotNull(this.channels[channel].source)) {\n                return this.channels[channel].source.resume();\n            }\n        });\n    }\n    stopAll() {\n        for (let k in this.channels) {\n            if (Helper_1.Helper.isNotNull(this.channels[k].source)) {\n                this.channels[k].source.stop();\n            }\n        }\n    }\n    resumeAllIfNotMuted() {\n        for (let k in this.channels) {\n            if (Helper_1.Helper.isNotNull(this.channels[k]) && !this.channels[k].muted && Helper_1.Helper.isNotNull(this.channels[k].source)) {\n                this.channels[k].source.resume();\n            }\n        }\n    }\n    handleVisibilityChange() {\n        if (document.hidden) {\n            this.stopAll();\n        }\n        else {\n            this.resumeAllIfNotMuted();\n        }\n    }\n}\nexports.SoundManager = SoundManager;\nSoundManager.CHANNELS = {\n    MUSIC: \"music\",\n    SOUND: \"sound\",\n    DEFAULT: \"default\"\n};\nApp_1.App.addInitialization(app => {\n    // PauseSite.onPauseListeners.push(() => {\n    //     SoundManager.getInstance().stopAll();\n    // });\n    // PauseSite.onStartListeners.push(() => {\n    //     SoundManager.getInstance().resumeAllIfNotMuted();\n    // });\n});\n// AndroidBridge.addDefinition(() => {\n// window[\"soundManagerInstance\"] = SoundManager.getInstance();\n// window[\"soundManagerInstance\"][\"stopAll\"] = window[\"soundManagerInstance\"].stopAll;\n// window[\"soundManagerInstance\"][\"resumeAllIfNotMuted\"] = window[\"soundManagerInstance\"].resumeAllIfNotMuted;\n// });\n//# sourceMappingURL=SoundManager.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Toast = void 0;\nconst Helper_1 = require(\"../Legacy/Helper\");\nconst ToastManager_1 = require(\"./ToastManager\");\nclass Toast {\n    constructor(message, duration, shouldTranslateOrTranslationArgs) {\n        this._message = message;\n        this._duration = Helper_1.Helper.nonNull(duration, Toast.DEFAULT_DURATION);\n        this._shouldTranslate = shouldTranslateOrTranslationArgs !== false;\n        this._translationArgs = Helper_1.Helper.nonNull(shouldTranslateOrTranslationArgs, []);\n        this._id = Toast.LAST_ID++;\n        this._toastElement = null;\n    }\n    getId() {\n        return this._id;\n    }\n    getMessage() {\n        return this._message;\n    }\n    getDuration() {\n        return this._duration;\n    }\n    isShouldTranslate() {\n        return this._shouldTranslate;\n    }\n    getTranslationArgs() {\n        return this._translationArgs;\n    }\n    setToastElement(element) {\n        this._toastElement = element;\n    }\n    getToastElement() {\n        return this._toastElement;\n    }\n    show() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return ToastManager_1.ToastManager.getInstance().showToast(this);\n        });\n    }\n    hide() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return ToastManager_1.ToastManager.getInstance().hideToast(this);\n        });\n    }\n}\nexports.Toast = Toast;\nToast.LAST_ID = 0;\nToast.DEFAULT_DURATION = 2500;\n//# sourceMappingURL=Toast.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToastManager = void 0;\nconst Helper_1 = require(\"../Legacy/Helper\");\nconst Translator_1 = require(\"../Translator\");\nclass ToastManager {\n    constructor() {\n        this._toastContainer = document.querySelector(ToastManager._toastContainerSelector);\n        this._toastTemplate = this._toastContainer.querySelector(\".toast-template\");\n        this._toastTemplate.classList.remove(\"toast-template\");\n        this._toastTemplate.remove();\n    }\n    showToast(toast) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let message = toast.getMessage();\n            if (toast.isShouldTranslate()) {\n                message = Translator_1.Translator.makePersistentTranslation(message, toast.getTranslationArgs());\n            }\n            else {\n                message = document.createTextNode(message);\n            }\n            let toastElement = this._toastTemplate.cloneNode(true);\n            toastElement.querySelector(\".message\").appendChild(message);\n            toast.setToastElement(toastElement);\n            this._toastContainer.appendChild(toastElement);\n            toastElement.style.opacity = 1;\n            return new Promise(resolve => {\n                toastElement.querySelector(\".message\").onclick = () => {\n                    this.hideToast(toast);\n                    resolve(true);\n                };\n                setTimeout(() => {\n                    this.hideToast(toast);\n                    resolve(false);\n                }, toast.getDuration());\n            });\n        });\n    }\n    hideToast(toast) {\n        return __awaiter(this, void 0, void 0, function* () {\n            //TODO Animation hinzufügen\n            let element = toast.getToastElement();\n            if (Helper_1.Helper.isNotNull(element)) {\n                element.style.opacity = 0;\n                return new Promise(res => {\n                    setTimeout(() => {\n                        element.remove();\n                        res();\n                    }, 250);\n                });\n            }\n            return Promise.reject(\"toast is not showing\");\n        });\n    }\n    static setToastContainerSelector(selector) {\n        ToastManager._toastContainerSelector = selector;\n    }\n    static getInstance() {\n        if (!ToastManager._instance) {\n            ToastManager._instance = new ToastManager();\n        }\n        return ToastManager._instance;\n    }\n}\nexports.ToastManager = ToastManager;\nToastManager._instance = null;\nToastManager._toastContainerSelector = \"#toast-container\";\n//# sourceMappingURL=ToastManager.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Translator = void 0;\nconst NativeStoragePromise_1 = require(\"./NativeStoragePromise\");\nconst Helper_1 = require(\"./Legacy/Helper\");\nconst Translator_1 = require(\"../../shared/Translator\");\n/**\n * Singleton-Klasse zum Übersetzen von Text-Inhalten\n */\nclass Translator extends Translator_1.Translator {\n    /**\n     * Erstellt einen neuen Translator\n     * @param config\n     */\n    constructor(config) {\n        super(config);\n        config = Helper_1.Helper.nonNull(config, {});\n        this._currentLanguage = config.currentLanguage || this._fallbackLanguage;\n        this._nativeStorageKey = config.nativeStorageKey || \"language\";\n        this._translationClass = config.translationClass || \"translation\";\n        this._initPromise = this.loadUserLanguage().then(userLanguage => this.setLanguage(userLanguage.toLowerCase()));\n    }\n    /**\n     * Setzt die neue Sprache, updated alle Übersetzungen. Speichert danach die aktuelle Sprache in NativeStorage\n     * @param language\n     */\n    setLanguage(language) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._currentLanguage === language) {\n                yield this.updateTranslations();\n                return;\n            }\n            if (!this._translations[language]) {\n                return;\n            }\n            if (typeof document !== 'undefined') {\n                document.getElementsByTagName(\"html\")[0].setAttribute(\"lang\", language);\n            }\n            this._currentLanguage = language;\n            yield this.updateTranslations();\n            //zum schluss => Falls setzen des Keys fehlschlägt, wird trotzdem noch übersetzt\n            yield NativeStoragePromise_1.NativeStoragePromise.setItem(this._nativeStorageKey, this._currentLanguage);\n        });\n    }\n    /**\n     * Übersetzt sofort einen Key in die aktuelle Sprache\n     * @param key\n     * @param args\n     * @returns {*}\n     */\n    translate(key, args, language) {\n        return super.translate(key, args, Helper_1.Helper.nonNull(language, this._currentLanguage));\n    }\n    /**\n     * Fügt eine Callback hinzu, die aufgerufen wird, sobald die Seite übersetzt wird. Sollte genutzt werden, um Teile\n     * zu übersetzen, die nicht per HTML übersetzt werden können, die der Document Title\n     *\n     * wenn callImmediately true ist (default), wird die Callback sofort einmal ausgeführt\n     *\n     * Gibt die CallbackId zurück\n     *\n     * @param callback\n     * @param callImmediately\n     * @returns {number}\n     */\n    addTranslationCallback(callback, callImmediately) {\n        callImmediately = Helper_1.Helper.nonNull(callImmediately, true);\n        this._lastTranslationCallbackId++;\n        this._translationCallbacks.set(this._lastTranslationCallbackId, callback);\n        if (callImmediately) {\n            callback();\n        }\n        return this._lastTranslationCallbackId;\n    }\n    /**\n     * Entfernt die Callback anhand der gegebenen ID\n     *\n     * @param callbackId\n     */\n    removeTranslationCallback(callbackId) {\n        this._translationCallbacks.delete(callbackId);\n    }\n    /**\n     * Updated die aktuellen übersetzungen\n     */\n    updateTranslations(baseElement) {\n        return __awaiter(this, void 0, void 0, function* () {\n            baseElement = Helper_1.Helper.nonNull(baseElement, document);\n            if (typeof baseElement !== 'undefined') {\n                let elements = baseElement.getElementsByClassName(this._translationClass);\n                for (let i = 0, max = elements.length; i < max; i++) {\n                    let key = (Translator._isValid(elements[i].dataset[\"translation\"]) ? elements[i].dataset[\"translation\"] : (elements[i].innerText || \"\"));\n                    if (key !== \"\" && !elements[i].dataset[\"onlyTranslateAttributes\"]) {\n                        try {\n                            let translation = this.translate(key, (elements[i].dataset[\"translationArgs\"] !== undefined) ? JSON.parse(elements[i].dataset[\"translationArgs\"]) : undefined);\n                            if (elements[i].dataset[\"translationUseText\"] === \"1\") {\n                                elements[i].innerText = translation;\n                            }\n                            else {\n                                elements[i].innerHTML = translation;\n                            }\n                            elements[i].dataset[\"translation\"] = key;\n                        }\n                        catch (err) {\n                            console.error(\"wrong configured translation: \" + err);\n                        }\n                    }\n                    //Übersetzung von Attributen\n                    for (let k in elements[i].dataset) {\n                        if (k.startsWith(\"translation\") && !k.endsWith(\"Args\")) {\n                            try {\n                                elements[i][k.substr(11).toLowerCase()] = this.translate(elements[i].dataset[k], (elements[i].dataset[k + \"Args\"] !== undefined) ? JSON.parse(elements[i].dataset[k + \"Args\"]) : undefined);\n                            }\n                            catch (err) {\n                                console.error(\"wrong configured translation: \" + err);\n                            }\n                        }\n                    }\n                }\n            }\n            //Call translation callbacks\n            yield Helper_1.Helper.asyncForEach(this._translationCallbacks, (callback) => __awaiter(this, void 0, void 0, function* () { return callback(baseElement); }));\n            // this._translationCallbacks.forEach(callback => callback(baseElement));\n        });\n    }\n    /**\n     * Lädt die im NativeStorage gespeicherte Sprache oder - falls diese nicht vorhanden ist - die vom User untersütze Sprache im Browser\n     * @returns {Promise<*>}\n     */\n    loadUserLanguage() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let userLanguage = yield NativeStoragePromise_1.NativeStoragePromise.getItem(this._nativeStorageKey);\n            if (!Translator._isValid(userLanguage) || !(userLanguage in this._translations)) {\n                let userLanguages = [];\n                if (navigator.language !== undefined) {\n                    userLanguages.push(navigator.language);\n                }\n                if (\"languages\" in navigator) {\n                    //.slice(0) klont das Array. Behebt einen Bug in Firefox\n                    userLanguages = navigator.languages.slice(0);\n                }\n                //sicherstellen, dass überhaupt eine Sprache gefunden wird\n                userLanguages.push(this._fallbackLanguage);\n                // if (userLanguages !== undefined) {\n                for (let i = 0, numLanguages = userLanguages.length; i < numLanguages; i++) {\n                    if (userLanguages[i] in this._translations) {\n                        userLanguage = userLanguages[i];\n                        break;\n                    }\n                }\n                // }\n            }\n            return userLanguage;\n        });\n    }\n    /**\n     * Erstellt eine neue Übersetzung, welche auch übersetzt wird, wenn die Sprache geändert wird\n     * @param key\n     * @param args\n     * @param tag\n     * @param useText\n     * @returns {any}\n     */\n    makePersistentTranslation(key, args, tag, useText) {\n        useText = Helper_1.Helper.nonNull(useText, tag, args, false);\n        tag = tag || \"span\";\n        if (typeof document !== 'undefined') {\n            let htmlElem = document.createElement(tag);\n            htmlElem.dataset[\"translation\"] = key;\n            htmlElem.classList.add(this._translationClass);\n            if (args !== undefined) {\n                htmlElem.dataset[\"translationArgs\"] = JSON.stringify(args);\n            }\n            if (useText === true) {\n                htmlElem.innerText = this.translate(key, args);\n                htmlElem.dataset[\"translationUseText\"] = \"1\";\n            }\n            else {\n                htmlElem.innerHTML = this.translate(key, args);\n            }\n            return htmlElem;\n        }\n    }\n    getTranslationClass() {\n        return this._translationClass;\n    }\n    getCurrentLanguage() {\n        return this._currentLanguage;\n    }\n    static getInstance() {\n        return Translator_1.Translator.getInstance();\n    }\n    static setLanguage(language) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let instance = Translator.getInstance();\n            if (instance) {\n                return instance.setLanguage(language);\n            }\n        });\n    }\n    static makePersistentTranslation(key, args, tag, useText) {\n        let instance = Translator.getInstance();\n        if (instance) {\n            return instance.makePersistentTranslation(key, args, tag, useText);\n        }\n    }\n    static addTranslationCallback(callback, callImmediately) {\n        let instance = Translator.getInstance();\n        if (instance) {\n            return instance.addTranslationCallback(callback, callImmediately);\n        }\n    }\n    static removeTranslationCallback(callbackId) {\n        let instance = Translator.getInstance();\n        if (instance) {\n            return instance.removeTranslationCallback(callbackId);\n        }\n    }\n    static updateTranslations(baseElement) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let instance = Translator.getInstance();\n            if (instance) {\n                return instance.updateTranslations(baseElement);\n            }\n        });\n    }\n    static init(config) {\n        Translator_1.Translator.instance = new Translator(config);\n    }\n}\nexports.Translator = Translator;\nTranslator._translations = {};\nTranslator.logMissingTranslations = true;\nTranslator.instance = null;\n//# sourceMappingURL=Translator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ViewInflater = void 0;\nconst client_1 = require(\"js-helper/dist/client\");\nconst shared_1 = require(\"js-helper/dist/shared\");\nconst DataManager_1 = require(\"./DataManager\");\n/**\n * Singleton-Klasse genutzt zum laden von Views\n */\nclass ViewInflater {\n    constructor() {\n        this.loadingPromises = {};\n    }\n    /**\n     *  Statische Funktion, um die Singleton-Instanz zu holen\n     *\n     * @returns {ViewInflater}\n     */\n    static getInstance() {\n        if (shared_1.Helper.isNull(ViewInflater.instance)) {\n            ViewInflater.instance = new ViewInflater();\n        }\n        return ViewInflater.instance;\n    }\n    /**\n     * Lädt asynchron eine View anhand einer URL und lädt ebenso alle child-views\n     *\n     * Extra nicht async, damit Promise sofort in LoadingPromise hinzugefügt werden kann\n     *\n     * @param viewUrl\n     * @param parentUrls\n     * @returns {*}\n     */\n    load(viewUrl, parentUrls) {\n        // console.log(\"viewUrl\", viewUrl, parentUrls);\n        //Kopiere Elemente, damit originale parentURLS nicht verändert werden\n        parentUrls = shared_1.JsonHelper.deepCopy(shared_1.Helper.nonNull(parentUrls, []));\n        //Detektiert eine Schleife in den Views\n        if (parentUrls.indexOf(viewUrl) !== -1) {\n            //Return Promise.reject => da View vorher schon einmal geladen, wird das Resultat ebenfalls in loadingPromises gespeichert für diese View\n            return Promise.reject(\"views are in a circuit! cannot resolve view for url \" + parentUrls[0] + \"! url \" + viewUrl + \" is in stack before!\");\n        }\n        parentUrls.push(viewUrl);\n        //Shortcut, falls die View schon geladen wurde. Muss nach Schleifenüberprüfung aufgerufen werden\n        if (shared_1.Helper.isNotNull(this.loadingPromises[viewUrl])) {\n            return this.loadingPromises[viewUrl].then(view => view.cloneNode(true));\n        }\n        let t;\n        let resultPromise = Promise.resolve(t);\n        if (viewUrl instanceof Element) {\n            resultPromise = Promise.resolve(viewUrl);\n        }\n        else {\n            resultPromise = DataManager_1.DataManager.loadAsset(viewUrl).then(htmlText => {\n                let doc = (new DOMParser()).parseFromString(htmlText, \"text/html\");\n                //Parsing hat nicht geklappt, also per innerHTML\n                if (shared_1.Helper.isNull(doc)) {\n                    doc = document.implementation.createHTMLDocument('');\n                    doc.body.innerHTML = htmlText;\n                }\n                //Wrappe Elemente mit einem Span\n                let spanElem = document.createElement(\"span\");\n                spanElem.classList.add(\"injected-span\");\n                return ViewInflater.moveChildren(doc.body, spanElem);\n            });\n        }\n        this.loadingPromises[viewUrl] = resultPromise.then(parentElement => {\n            let promises = [];\n            let childViews = parentElement.querySelectorAll(\"[data-view]\");\n            //lade Kinder-Views\n            childViews.forEach(childView => {\n                promises.push(ViewInflater.getInstance().load(childView.dataset[\"view\"], parentUrls).then(element => {\n                    childView.replaceWith(element);\n                    ViewInflater.replaceWithChildren(element);\n                }));\n            });\n            return Promise.all(promises).then(function () {\n                return parentElement;\n            });\n        }).catch(e => {\n            console.error(e);\n            this.loadingPromises[viewUrl] = null;\n            throw e;\n        });\n        return this.loadingPromises[viewUrl].then(view => view.cloneNode(true));\n    }\n    /**\n     * Statische Funktion, um Elemente aus einem String zu kreieren\n     *\n     * @param string\n     * @returns {NodeListOf<ChildNode>}\n     */\n    static inflateElementsFromString(string) {\n        let template = document.createElement('template');\n        template.innerHTML = string;\n        return template.content.childNodes;\n    }\n    /**\n     * Kreiert ein Ladesymbol. Evtl entfernen\n     *\n     * @returns {HTMLDivElement}\n     */\n    static createLoadingSymbol(loaderClass) {\n        let svgNS = \"http://www.w3.org/2000/svg\";\n        let loader = document.createElement(\"div\");\n        loader.classList.add('loader');\n        //LoaderClass darf nicht leer sein, da sonst HTML einen Felher schmeißt\n        if (loaderClass) {\n            loader.classList.add(loaderClass);\n        }\n        let svg = document.createElementNS(svgNS, \"svg\");\n        svg.setAttribute('viewBox', \"0 0 32 32\");\n        svg.setAttribute(\"width\", \"32\");\n        svg.setAttribute(\"height\", \"32\");\n        let circle = document.createElementNS(svgNS, \"circle\");\n        circle.setAttribute(\"class\", \"spinner\");\n        circle.setAttribute(\"cx\", \"16\");\n        circle.setAttribute(\"cy\", \"16\");\n        circle.setAttribute(\"r\", \"14\");\n        circle.setAttribute(\"fill\", \"none\");\n        svg.appendChild(circle);\n        loader.appendChild(svg);\n        // let loader = document.createElement(\"div\");\n        // loader.appendChild(document.createTextNode(\"LOADING...\"));\n        return loader;\n    }\n    /**\n     * Moves the child-Nodes from one element to another\n     * @param from\n     * @param to\n     * @returns {*}\n     */\n    static moveChildren(from, to) {\n        return client_1.ViewHelper.moveChildren(from, to);\n    }\n    /**\n     * Ersetzt ein Element durch seine Kinder (entfernt das Element ohne die Kinder zu entfernen)\n     * @param element\n     */\n    static replaceWithChildren(element) {\n        let children = [];\n        //Zwischenspeichern der Children, da removeChild die forEach-Schleife durcheinander bringt\n        element.childNodes.forEach(child => {\n            children.push(child);\n        });\n        let parent = element.parentElement;\n        children.forEach(child => {\n            element.removeChild(child);\n            parent.insertBefore(child, element);\n        });\n        element.remove();\n    }\n}\nexports.ViewInflater = ViewInflater;\nViewInflater.instance = null;\n//# sourceMappingURL=ViewInflater.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst App_1 = require(\"./App\");\nconst Translator_1 = require(\"./Translator\");\nconst deTranslations = require(\"../translations/de\");\nconst enTranslations = require(\"../translations/en\");\nApp_1.App.addInitialization(() => {\n    console.log(\"user trsnslation\");\n    Translator_1.Translator.addDynamicTranslations({\n        \"de\": deTranslations,\n        \"en\": enTranslations\n    });\n});\n//# sourceMappingURL=translationInit.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./shared/Translator\"), exports);\n//# sourceMappingURL=shared.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Translator = void 0;\nconst shared_1 = require(\"js-helper/dist/shared\");\n/**\n * Singleton-Klasse zum Übersetzen von Text-Inhalten\n */\nclass Translator {\n    /**\n     * Erstellt einen neuen Translator\n     * @param config\n     */\n    constructor(config = {\n        translations: {},\n        fallbackLanguage: \"en\",\n        markUntranslatedTranslations: true,\n        markTranslations: false,\n        logMissingTranslations: true\n    }) {\n        this._dynamicKey = 0;\n        this._translations = {};\n        this.addDynamicTranslations(Translator._translations);\n        this.addDynamicTranslations(config.translations);\n        this._fallbackLanguage = config.fallbackLanguage;\n        this._markUntranslatedTranslations = config.markUntranslatedTranslations;\n        this._markTranslations = config.markTranslations;\n        if (config.logMissingTranslations === true) {\n            this._logMissingTranslationsFunction = (missingTranslation, language) => {\n                if (language === this._fallbackLanguage) {\n                    console.error(\"missing base translation for key \" + missingTranslation);\n                }\n                else {\n                    console.warn(\"missing translation for language \" + language + \" and key \" + missingTranslation);\n                }\n            };\n        }\n        else if (typeof config.logMissingTranslations === \"function\") {\n            this._logMissingTranslationsFunction = config.logMissingTranslations;\n        }\n        else {\n            this._logMissingTranslationsFunction = null;\n        }\n        this._translationCallbacks = new Map();\n        this._lastTranslationCallbackId = 0;\n    }\n    createDynamicKey() {\n        this._dynamicKey++;\n        return \"translator-dynamic-\" + new Date().getTime() + \"-\" + this._dynamicKey;\n    }\n    /**\n     * Übersetzt sofort einen Key in die aktuelle Sprache\n     * @param key\n     * @param args\n     * @param language\n     * @returns {*}\n     */\n    translate(key, args, language) {\n        if (shared_1.Helper.isNull(key)) {\n            return \"\";\n        }\n        language = shared_1.Helper.nonNull(language, args, this._fallbackLanguage);\n        let translation = null;\n        key = key.toLowerCase();\n        if (shared_1.Helper.isNotNull(this._translations[language]) && shared_1.Helper.isNotNull(this._translations[language][key])) {\n            translation = this._translations[language][key];\n        }\n        if (!Translator._isValid(translation)) {\n            if (this._logMissingTranslationsFunction !== null) {\n                this._logMissingTranslationsFunction(key, language);\n            }\n            if (this._translations[this._fallbackLanguage]) {\n                translation = this._translations[this._fallbackLanguage][key];\n            }\n            if (!Translator._isValid(translation)) {\n                if (this._logMissingTranslationsFunction !== null) {\n                    this._logMissingTranslationsFunction(key, language);\n                }\n                translation = key;\n            }\n            if (this._markUntranslatedTranslations) {\n                translation = \"&gt;&gt;\" + translation + \"&lt;&lt;\";\n            }\n        }\n        if (this._markTranslations) {\n            translation = \"$\" + translation + \"$\";\n        }\n        if (args !== undefined) {\n            translation = Translator._format(translation, args);\n        }\n        return translation;\n    }\n    /**\n     * Fügt neue Übersetzungen hinzu\n     * @param trans\n     */\n    addDynamicTranslations(trans) {\n        for (let lang in trans) {\n            if (!this._translations[lang]) {\n                this._translations[lang] = {};\n            }\n            for (let key in trans[lang]) {\n                this._translations[lang][key.toLowerCase()] = trans[lang][key];\n            }\n        }\n    }\n    getLanguages() {\n        return Object.keys(this._translations);\n    }\n    getFallbackLanguage() {\n        return this._fallbackLanguage;\n    }\n    static translate(key, args, language) {\n        let instance = Translator.getInstance();\n        if (instance) {\n            return instance.translate(key, args, language);\n        }\n        return \"\";\n    }\n    static addDynamicTranslations(trans) {\n        let instance = Translator.getInstance();\n        if (instance) {\n            return instance.addDynamicTranslations(trans);\n        }\n        else {\n            Object.keys(trans).forEach(lang => {\n                if (shared_1.Helper.isNull(Translator._translations[lang])) {\n                    Translator._translations[lang] = {};\n                }\n                Object.assign(Translator._translations[lang], trans[lang]);\n            });\n        }\n    }\n    static init(config) {\n        Translator.instance = new Translator(config);\n    }\n    /**\n     * @returns {Translator|null}\n     */\n    static getInstance() {\n        return Translator.instance;\n    }\n    static _isValid(translation) {\n        return (typeof translation === \"string\");\n    }\n    static _format(translation, args) {\n        return translation.replace(/{(\\d+)}/g, function (match, number) {\n            return args[number] !== undefined ? args[number] : match;\n        });\n    }\n}\nexports.Translator = Translator;\nTranslator._translations = {};\nTranslator.instance = null;\n//# sourceMappingURL=Translator.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./shared/EventManager\"));\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst js_helper_1 = require(\"js-helper\");\nclass EventManager {\n    constructor() {\n        this._listeners = {};\n        this._lastListenerId = 0;\n    }\n    /**\n     * @return {EventManager}\n     */\n    static getInstance() {\n        if (!this._instance) {\n            this._instance = new EventManager();\n        }\n        return this._instance;\n    }\n    addListener(event, listener) {\n        if (typeof listener !== \"function\") {\n            throw new Error(\"can only add functions as listeners!\");\n        }\n        this._lastListenerId++;\n        if (!this._listeners[event]) {\n            this._listeners[event] = {};\n            this._listeners[event][this._lastListenerId] = listener;\n        }\n        return this._lastListenerId;\n    }\n    removeListener(event, listenerId) {\n        if (this._listeners[event] && this._listeners[event][listenerId]) {\n            delete this._listeners[event][listenerId];\n        }\n    }\n    trigger(event, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._listeners[event]) {\n                yield js_helper_1.Helper.asyncForEach(Object.keys(this._listeners[event]), (listenerId) => __awaiter(this, void 0, void 0, function* () {\n                    yield this._listeners[event][listenerId](data);\n                }), true);\n            }\n        });\n    }\n    static trigger(event, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.getInstance().trigger(event, data);\n        });\n    }\n}\nexports.EventManager = EventManager;\nEventManager._instance = null;\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client/HotkeyManager\"), exports);\n__exportStar(require(\"./client/ViewHelper\"), exports);\n//# sourceMappingURL=client.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HotkeyManager = void 0;\nclass HotkeyManager {\n    constructor() {\n        this._keys = {};\n        this._callbacks = {};\n        this._lastCallbackId = 0;\n        this._active = false;\n        this._addListeners();\n    }\n    _addListeners() {\n        window.addEventListener(\"keydown\", e => {\n            this._keys[e.key] = true;\n            if (this._active) {\n                this._checkCallbacks(e);\n            }\n        });\n        window.addEventListener(\"keyup\", e => {\n            this._keys[e.key] = false;\n        });\n    }\n    activate() {\n        this._active = true;\n    }\n    deactivate() {\n        this._active = false;\n    }\n    addCallback(keys, callback) {\n        this._lastCallbackId++;\n        this._callbacks[this._lastCallbackId] = {\n            keys: keys,\n            callback: callback\n        };\n    }\n    _checkCallbacks(e) {\n        //TODO async forEach?\n        Object.values(this._callbacks).forEach(callback => {\n            // @ts-ignore\n            if (callback.keys.every(key => this._keys[key] === true)) {\n                // @ts-ignore\n                callback.callback(e);\n            }\n        });\n    }\n    removeCallback(callbackId) {\n        delete this._callbacks[callbackId];\n    }\n}\nexports.HotkeyManager = HotkeyManager;\n//# sourceMappingURL=HotkeyManager.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ViewHelper = void 0;\nclass ViewHelper {\n    /**\n     * Entfernt alle Children eines Elements\n     *\n     * @param element\n     * @returns {Node}\n     */\n    static removeAllChildren(element) {\n        if (element instanceof Node) {\n            while (element.firstChild) {\n                element.removeChild(element.firstChild);\n            }\n        }\n        return element;\n    }\n    /**\n     * Moves the child-Nodes from one element to another\n     * @param from\n     * @param to\n     * @returns {*}\n     */\n    static moveChildren(from, to) {\n        let children = [];\n        //Zwischenspeichern der Children, da removeChild die forEach-Schleife durcheinander bringt\n        from.childNodes.forEach(child => {\n            children.push(child);\n        });\n        children.forEach(child => {\n            from.removeChild(child);\n            to.appendChild(child);\n        });\n        return to;\n    }\n}\nexports.ViewHelper = ViewHelper;\n//# sourceMappingURL=ViewHelper.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./shared/Counter\"), exports);\n__exportStar(require(\"./shared/DateHelper\"), exports);\n__exportStar(require(\"./shared/Helper\"), exports);\n__exportStar(require(\"./shared/JsonHelper\"), exports);\n__exportStar(require(\"./shared/MigrationHelper\"), exports);\n__exportStar(require(\"./shared/Prioritized\"), exports);\n__exportStar(require(\"./shared/Random\"), exports);\n__exportStar(require(\"./shared/XSSHelper\"), exports);\n//# sourceMappingURL=shared.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Counter = void 0;\nconst Helper_1 = require(\"./Helper\");\nclass Counter {\n    constructor(value) {\n        this._value = 0;\n        if (value instanceof Counter) {\n            value = value.current;\n        }\n        this._value = Helper_1.Helper.nonNull(value, 0);\n    }\n    next() {\n        this._value++;\n        return this._value;\n    }\n    current() {\n        return this._value;\n    }\n}\nexports.Counter = Counter;\n//# sourceMappingURL=Counter.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DateHelper = void 0;\nconst Helper_1 = require(\"./Helper\");\nclass DateHelper {\n    /**\n     * Formatiert ein Date-Object nach der Vorlage von der C-Funktion strftime\n     *\n     * @param sFormat\n     * @param date\n     * @param useUTC\n     * @returns {*|void|string}\n     */\n    static strftime(sFormat, date, useUTC) {\n        useUTC = Helper_1.Helper.nonNull(useUTC, false);\n        date = Helper_1.Helper.nonNull(date, new Date());\n        if (!(date instanceof Date))\n            date = new Date(date);\n        let nDay = (useUTC) ? date.getUTCDay() : date.getDay(), nDate = (useUTC) ? date.getUTCDate() : date.getDate(), nMonth = (useUTC) ? date.getUTCMonth() : date.getMonth(), nYear = (useUTC) ? date.getUTCFullYear() : date.getFullYear(), nHour = (useUTC) ? date.getUTCHours() : date.getHours(), aDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], aDaysShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], aMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], aDayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], isLeapYear = function () {\n            if ((nYear & 3) !== 0)\n                return false;\n            return nYear % 100 !== 0 || nYear % 400 === 0;\n        }, getThursday = function () {\n            let target = new Date(date);\n            target.setDate(nDate - ((nDay + 6) % 7) + 3);\n            return target;\n        }, zeroPad = function (nNum, nPad) {\n            return ('' + (Math.pow(10, nPad) + nNum)).slice(1);\n        };\n        return sFormat.replace(/%[a-z]/gi, function (sMatch) {\n            return {\n                '%a': aDaysShort[nDay],\n                '%A': aDays[nDay],\n                '%b': aMonths[nMonth].slice(0, 3),\n                '%B': aMonths[nMonth],\n                '%c': date.toUTCString(),\n                '%C': Math.floor(nYear / 100),\n                '%d': zeroPad(nDate, 2),\n                '%e': nDate,\n                '%f': zeroPad(date.getTime() % 1000, 4),\n                '%F': date.toISOString().slice(0, 10),\n                '%G': getThursday().getFullYear(),\n                '%g': ('' + getThursday().getFullYear()).slice(2),\n                '%H': zeroPad(nHour, 2),\n                '%I': zeroPad((nHour + 11) % 12 + 1, 2),\n                '%j': zeroPad(aDayCount[nMonth] + nDate + ((nMonth > 1 && isLeapYear()) ? 1 : 0), 3),\n                '%k': '' + nHour,\n                '%l': (nHour + 11) % 12 + 1,\n                '%m': zeroPad(nMonth + 1, 2),\n                '%M': zeroPad(date.getMinutes(), 2),\n                '%p': (nHour < 12) ? 'AM' : 'PM',\n                '%P': (nHour < 12) ? 'am' : 'pm',\n                '%s': Math.round(date.getTime() / 1000),\n                '%S': zeroPad(date.getSeconds(), 2),\n                '%u': nDay || 7,\n                '%w': '' + nDay,\n                '%x': date.toLocaleDateString(),\n                '%X': date.toLocaleTimeString(),\n                '%y': ('' + nYear).slice(2),\n                '%Y': nYear,\n                '%z': date.toTimeString().replace(/.+GMT([+-]\\d+).+/, '$1'),\n                '%Z': date.toTimeString().replace(/.+\\((.+?)\\)$/, '$1')\n            }[sMatch] || sMatch;\n        });\n    }\n}\nexports.DateHelper = DateHelper;\n//# sourceMappingURL=DateHelper.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Helper = void 0;\n/**\n * Eine Klasse mit häufig genutzten, nützlichen Funktionen\n */\nconst JsonHelper_1 = require(\"./JsonHelper\");\nclass Helper {\n    /**\n     * Testet, ob eine Variable null oder Undefined ist\n     *\n     * @param variable\n     * @returns {boolean}\n     */\n    static isNull(variable, ...args) {\n        return Helper.isAllNull(...arguments);\n    }\n    static isAllNull(...args) {\n        for (let i = 0; i < args.length; i++) {\n            if (!(args[i] === null || args[i] === undefined)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static isAtLeastOneNull(...args) {\n        return !Helper.isAllNull(...args);\n    }\n    /**\n     * Testet, ob eine Variable nicht (null oder undefined) ist\n     *\n     * @param variable\n     * @returns {boolean}\n     */\n    static isNotNull(variable, ...args) {\n        return Helper.isAllNotNull(...arguments);\n    }\n    static isAllNotNull(...args) {\n        for (let i = 0; i < args.length; i++) {\n            if ((args[i] === null || args[i] === undefined)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static isAtLeastOneNotNull(...args) {\n        return !Helper.isAllNull(...args);\n    }\n    /**\n     * Gibt den ersten übergebenen Wert, der nicht (null oder undefined) ist, zurück\n     *\n     * @param val1\n     * @param val2\n     * @param args\n     * @returns {*}\n     */\n    static nonNull(val1, val2, ...args) {\n        for (let i = 0; i < arguments.length; i++) {\n            if (Helper.isNotNull(arguments[i])) {\n                return arguments[i];\n            }\n        }\n        return null;\n    }\n    /**\n     * Testet, ob der übergebene Index am Objekt gesetzt ist. Werden mehrere Indexes übergeben, so wird getestet,\n     * ob die \"Index-Kette\" gesetzt ist.\n     * Bsp.:\n     *  Helper.isSet({\"index1\":{\"index2\":value}}, \"index1\", \"index2\") ist wahr\n     *\n     * @param object\n     * @param indexes\n     * @returns {*}\n     */\n    static isSet(object, ...indexes) {\n        if (Helper.isNotNull(object)) {\n            if (indexes.length === 0) {\n                return true;\n            }\n            return (Helper.isSet.apply(null, [object[indexes[0]]].concat(indexes.slice(1))));\n        }\n        return false;\n    }\n    /**\n     * Testet, ob ein Wert null oder Leerstring, bzw nur aus leerzeichend bestehender String ist\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    static empty(value) {\n        return (Helper.isNull(value) || (typeof value === 'string' && value.trim() === \"\"));\n    }\n    /**\n     * Testet, ob ein Wert NICHT (null oder Leerstring, bzw nur aus leerzeichend bestehender String ist)\n     *\n     * @param value\n     * @returns {boolean}\n     */\n    static notEmpty(value) {\n        return !Helper.empty(value);\n    }\n    static arrayToObject(array, indexFunction) {\n        let obj = {};\n        array.forEach(val => {\n            obj[indexFunction(val)] = val;\n        });\n        return obj;\n    }\n    /**\n     * Deepcopies JSON\n     *\n     * @param obj\n     * @returns {*}\n     */\n    static cloneJson(obj) {\n        return JsonHelper_1.JsonHelper.deepCopy(obj);\n    }\n    /**\n     * Erstellt ein FormData-Object von JSON-Data. Nützlich für fetch\n     *\n     * @param obj\n     * @returns {FormData}\n     */\n    static formDataFromObject(obj) {\n        let formData = new FormData();\n        for (let k in obj) {\n            formData.set(k, obj[k]);\n        }\n        return formData;\n    }\n    static shuffleArray(array) {\n        let currentIndex = array.length, temporaryValue, randomIndex;\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            // And swap it with the current element.\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n    static padZero(n, width, z) {\n        z = Helper.nonNull(z, '0');\n        n = n + '';\n        width = Helper.nonNull(width, 1);\n        return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n    }\n    static deepEqual(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (typeof a === \"object\" && typeof b === \"object\") {\n            let keysOfB = Object.keys(b);\n            let childrenDeepEqual = Object.keys(a).every((key) => {\n                let index = keysOfB.indexOf(key);\n                if (index < 0) {\n                    return false;\n                }\n                keysOfB.splice(index, 1);\n                return Helper.deepEqual(a[key], b[key]);\n            });\n            return (childrenDeepEqual && keysOfB.length === 0);\n        }\n        return false;\n    }\n    //Ältere evtl nützliche Funktionen\n    static htmlspecialcharsDecode(text) {\n        const map = {\n            '&amp;': '&',\n            '&#038;': \"&\",\n            '&lt;': '<',\n            '&gt;': '>',\n            '&quot;': '\"',\n            '&#039;': \"'\",\n            '&#8217;': \"’\",\n            '&#8216;': \"‘\",\n            '&#8211;': \"–\",\n            '&#8212;': \"—\",\n            '&#8230;': \"…\",\n            '&#8221;': '”'\n        };\n        if (Helper.isNotNull(text) && typeof text.replace === \"function\") {\n            return text.replace(/\\&[\\w\\d\\#]{2,5}\\;/g, function (m) {\n                return map[m];\n            });\n        }\n        return text;\n    }\n    /**\n     * Inverts the key-Values for an object\n     * @param obj\n     * @return {*}\n     */\n    static invertKeyValues(obj) {\n        let new_obj = {};\n        for (let prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                new_obj[obj[prop]] = prop;\n            }\n        }\n        return new_obj;\n    }\n    static asyncForEach(array, callback, runAsyncronous) {\n        return __awaiter(this, void 0, void 0, function* () {\n            runAsyncronous = Helper.nonNull(runAsyncronous, false);\n            let validPromises = [];\n            for (let i = 0; i < array.length; i++) {\n                let index = i;\n                let currentPromise = Promise.resolve(callback(array[index], index, array));\n                if (!runAsyncronous) {\n                    yield currentPromise;\n                }\n                validPromises.push(currentPromise);\n            }\n            return Promise.all(validPromises);\n        });\n    }\n    static escapeRegExp(str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n    }\n    static objectForEach(object, callback) {\n        Object.keys(object).forEach(key => {\n            callback(object[key], key, object);\n        });\n    }\n    static toArray(object) {\n        let res = [];\n        for (let k in object) {\n            res.push(object[k]);\n        }\n        return res;\n    }\n    static imageUrlIsEmpty(url) {\n        return (Helper.isNull(url) || url.trim() === \"\" || url.trim() === \"data:\");\n    }\n    static newPromiseWithResolve() {\n        let resolver = null;\n        let rejecter = null;\n        let promise = new Promise((resolve, reject) => {\n            resolver = resolve;\n            rejecter = reject;\n        });\n        promise[\"resolve\"] = resolver;\n        promise[\"reject\"] = rejecter;\n        return promise;\n    }\n    static isMobileApp() {\n        return (typeof device !== \"undefined\" && device.platform !== \"browser\");\n    }\n    static toSnakeCase(camelCase) {\n        return camelCase.replace(/([A-Z])/g, function (find, something, position) { return ((position > 0) ? \"_\" : \"\") + find[0].toLowerCase(); });\n    }\n}\nexports.Helper = Helper;\n//# sourceMappingURL=Helper.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonHelper = void 0;\nconst Helper_1 = require(\"./Helper\");\nclass JsonHelper {\n    static deepEqual(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (a === null || b === null) {\n            return false;\n        }\n        // array deepEqual\n        if (a instanceof Array && b instanceof Array && a.length === b.length) {\n            return a[\"every\"]((obj, i) => {\n                return JsonHelper.deepEqual(obj, b[i]);\n            });\n        }\n        //date deepEqual\n        if (a instanceof Date && b instanceof Date) {\n            return a.getTime() === b.getTime();\n        }\n        // object deep copy\n        if (typeof a === \"object\" && typeof b === \"object\") {\n            let aKeys = Object.keys(a);\n            let bKeys = Object.keys(b);\n            return aKeys.length === bKeys.length && aKeys[\"every\"]((key) => {\n                return Helper_1.Helper.isNotNull(b[key]) && JsonHelper.deepEqual(a[key], b[key]);\n            });\n        }\n        //else is false (or not handled)\n        return false;\n    }\n    /**\n     * Deepcopies JSON\n     *\n     * @param obj\n     * @returns {*}\n     */\n    static deepCopy(obj) {\n        // https://stackoverflow.com/questions/4120475/how-to-create-and-clone-a-json-object/17502990#17502990\n        let i;\n        // basic type deep copy\n        if (Helper_1.Helper.isNull(obj) || typeof obj !== 'object') {\n            return obj;\n        }\n        // array deep copy\n        if (obj instanceof Array) {\n            let cloneA = [];\n            for (i = 0; i < obj.length; ++i) {\n                cloneA[i] = JsonHelper.deepCopy(obj[i]);\n            }\n            return cloneA;\n        }\n        if (obj instanceof Date) {\n            return new Date(obj.getTime());\n        }\n        // object deep copy\n        let cloneO = {};\n        for (i in obj) {\n            cloneO[i] = JsonHelper.deepCopy(obj[i]);\n        }\n        return cloneO;\n    }\n}\nexports.JsonHelper = JsonHelper;\n//# sourceMappingURL=JsonHelper.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MigrationHelper = void 0;\nconst typeorm_1 = require(\"typeorm\");\nconst Helper_1 = require(\"./Helper\");\nclass MigrationHelper {\n    static isServer() {\n        return (typeof document !== \"object\");\n    }\n    static addTableFromModelClass(modelClass, queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield queryRunner.createTable(this.createTableFromModelClass(modelClass));\n        });\n    }\n    static addManyToManyTable(tableOne, tableTwo, queryRunner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield queryRunner.createTable(this.createManyToManyTable(tableOne, tableTwo));\n        });\n    }\n    static createManyToManyTable(tableOne, tableTwo) {\n        let fieldOne = tableOne + \"Id\";\n        let fieldTwo = tableTwo + \"Id\";\n        let name = tableOne + tableTwo.substr(0, 1).toUpperCase() + tableTwo.substr(1);\n        let manyToManyTable = new typeorm_1.Table({\n            name: name,\n            columns: [\n                {\n                    name: fieldOne,\n                    isPrimary: true,\n                    type: \"integer\"\n                },\n                {\n                    name: fieldTwo,\n                    isPrimary: true,\n                    type: \"integer\"\n                }\n            ],\n            indices: [\n                {\n                    name: \"IDX_\" + name + \"_\" + fieldOne,\n                    columnNames: [fieldOne]\n                },\n                {\n                    name: \"IDX_\" + name + \"_\" + fieldTwo,\n                    columnNames: [fieldTwo]\n                }\n            ],\n            foreignKeys: [\n                {\n                    name: \"FK_\" + name + \"_\" + fieldOne,\n                    columnNames: [fieldOne],\n                    referencedTableName: tableOne.replace(/([A-Z])/, (match, p1) => \"_\" + p1.toLowerCase()),\n                    referencedColumnNames: [\"id\"],\n                    onDelete: \"cascade\",\n                },\n                {\n                    name: \"FK_\" + name + \"_\" + fieldTwo,\n                    columnNames: [fieldTwo],\n                    referencedTableName: tableTwo.replace(/([A-Z])/, (match, p1) => \"_\" + p1.toLowerCase()),\n                    referencedColumnNames: [\"id\"],\n                    onDelete: \"cascade\",\n                },\n            ]\n        });\n        return manyToManyTable;\n    }\n    static createTableFromModelClass(modelClass, prefix) {\n        prefix = Helper_1.Helper.nonNull(prefix, \"\");\n        let columns = [];\n        let indices = [];\n        let foreignKeys = [];\n        let schemaDefinition = modelClass.getSchemaDefinition();\n        let tableName = prefix + Helper_1.Helper.toSnakeCase(schemaDefinition.name);\n        Object.keys(schemaDefinition.columns).forEach(column => {\n            let columnConfig = {};\n            Object.keys(schemaDefinition.columns[column]).forEach(key => {\n                columnConfig[key] = schemaDefinition.columns[column][key];\n            });\n            columnConfig[\"name\"] = column;\n            if (schemaDefinition.columns[column].primary) {\n                columnConfig[\"isPrimary\"] = true;\n            }\n            if (schemaDefinition.columns[column].nullable) {\n                columnConfig[\"isNullable\"] = true;\n            }\n            if (schemaDefinition.columns[column].generated) {\n                //If it is not EasySyncBaseModel or server\n                if (Helper_1.Helper.isNull(modelClass.CAN_BE_SYNCED) || this.isServer() || column === \"clientId\") {\n                    columnConfig[\"isGenerated\"] = true;\n                    columnConfig[\"generationStrategy\"] = \"increment\";\n                    if (!this.isServer()) {\n                        columnConfig[\"type\"] = \"INTEGER\";\n                    }\n                }\n            }\n            if (typeof columnConfig[\"default\"] === \"string\") {\n                columnConfig[\"default\"] = \"'\" + columnConfig[\"default\"] + \"'\";\n            }\n            else if (columnConfig[\"default\"] === true) {\n                columnConfig[\"default\"] = 1;\n            }\n            else if (columnConfig[\"default\"] === false) {\n                columnConfig[\"default\"] = 0;\n            }\n            if (columnConfig[\"type\"] === MigrationHelper.TYPES.MEDIUMTEXT && !this.isServer()) {\n                columnConfig[\"type\"] = MigrationHelper.TYPES.TEXT;\n            }\n            if (columnConfig[\"type\"] === MigrationHelper.TYPES.SIMPLE_JSON && !this.isServer()) {\n                columnConfig[\"type\"] = MigrationHelper.TYPES.TEXT;\n            }\n            columns.push(columnConfig);\n        });\n        Object.keys(schemaDefinition.relations).forEach(relation => {\n            if (schemaDefinition.relations[relation].type === \"many-to-one\" || schemaDefinition.relations[relation].joinColumn) {\n                // let columnName = Helper.toSnakeCase(relation) + \"Id\";\n                let columnName = relation.substr(0, 1).toLowerCase() + relation.substr(1) + \"Id\";\n                let columnConfig = {\n                    name: columnName,\n                    type: MigrationHelper.TYPES.INTEGER,\n                    isNullable: true\n                };\n                columns.push(columnConfig);\n                let indexConfig = {\n                    name: \"IDX_\" + tableName + \"_\" + columnName,\n                    columnNames: [columnName]\n                };\n                indices.push(indexConfig);\n                let foreignKeyConfig = {\n                    name: \"FK_\" + tableName + \"_\" + columnName,\n                    columnNames: [columnName],\n                    referencedTableName: Helper_1.Helper.toSnakeCase(schemaDefinition.relations[relation].target),\n                    referencedColumnNames: [\"id\"]\n                };\n                foreignKeys.push(foreignKeyConfig);\n            }\n        });\n        return new typeorm_1.Table({\n            name: tableName,\n            columns: columns,\n            indices: indices,\n            foreignKeys: foreignKeys\n        });\n    }\n    static updateModel(queryRunner, newModel) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let schemaDefinition = newModel.getSchemaDefinition();\n            let tableName = Helper_1.Helper.toSnakeCase(schemaDefinition.name);\n            let newTable = this.createTableFromModelClass(newModel);\n            let table = yield queryRunner.getTable(tableName);\n            table.name = \"__temp__\" + table.name;\n            table.indices.forEach(index => {\n                index.name = \"__temp__\" + index.name;\n            });\n            table.foreignKeys.forEach(key => {\n                key.name = \"__temp__\" + key.name;\n                key.columnNames = [key.columnNames[0]];\n                key.referencedColumnNames = [key.referencedColumnNames[0]];\n            });\n            yield queryRunner.createTable(table);\n            let names = [];\n            table.columns.forEach(column => {\n                names.push(column.name);\n            });\n            yield queryRunner.query(\"INSERT INTO \" + table.name + \"(\" + names.join(\",\") + \") SELECT \" + names.join(\",\") + \" FROM \" + tableName + \";\");\n            yield queryRunner.query(\"DROP TABLE \" + tableName + \";\");\n            yield queryRunner.createTable(newTable);\n            let newColumnNames = [];\n            newTable.columns.forEach(column => newColumnNames.push(column.name));\n            names = [];\n            table.columns.forEach(column => {\n                if (newColumnNames.indexOf(column.name) !== -1) {\n                    names.push(column.name);\n                }\n            });\n            yield queryRunner.query(\"INSERT INTO \" + tableName + \"(\" + names.join(\",\") + \") SELECT \" + names.join(\",\") + \" FROM \" + table.name + \";\");\n            yield queryRunner.query(\"DROP TABLE \" + table.name + \";\");\n        });\n    }\n}\nexports.MigrationHelper = MigrationHelper;\nMigrationHelper.TYPES = {\n    INTEGER: \"int\",\n    FLOAT: \"float\",\n    DATE: \"datetime\",\n    STRING: \"varchar\",\n    TEXT: \"text\",\n    MEDIUMTEXT: \"mediumtext\",\n    BOOLEAN: \"boolean\",\n    JSON: \"json\",\n    SIMPLE_JSON: \"simple-json\",\n    MY_JSON: \"my-json\"\n};\n//# sourceMappingURL=MigrationHelper.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Prioritized = void 0;\nconst Helper_1 = require(\"./Helper\");\nclass Prioritized {\n    constructor(promises) {\n        this._lastPriority = 0;\n        this._status = 0;\n        this._lastResult = null;\n        this._success = {};\n        this._highestPromise = null;\n        promises = Helper_1.Helper.nonNull(promises, {});\n        this._callbacks = [];\n        if (Array.isArray(promises)) {\n            let tmpPromises = {};\n            promises.forEach((promise, i) => {\n                tmpPromises[(i + 1) * 10] = promise;\n            });\n            promises = tmpPromises;\n        }\n        let highestPromiseResolver = null;\n        this._highestPromise = new Promise(resolve => {\n            highestPromiseResolver = resolve;\n        });\n        Object.keys(promises).forEach(priority => {\n            this._success[priority] = null;\n            promises[priority].then(res => {\n                this._success[priority] = true;\n                if (parseInt(priority) > this._lastPriority) {\n                    this._lastResult = res;\n                    this._lastPriority = parseInt(priority);\n                    this._callCallbacks();\n                    if (this._checkHighest()) {\n                        this._status = 2;\n                        highestPromiseResolver();\n                    }\n                    else {\n                        this._status = 1;\n                    }\n                }\n            }).catch(e => {\n                this._success[priority] = e;\n                if (this._checkHighest()) {\n                    this._status = 2;\n                    highestPromiseResolver();\n                }\n            });\n        });\n        this._promises = promises;\n    }\n    _callCallbacks() {\n        this._callbacks.forEach(callback => {\n            callback(this._lastResult, this._lastPriority);\n        });\n    }\n    _checkHighest() {\n        let isHighestResult = false;\n        Object.keys(this._success).reverse().some(priority => {\n            if (Helper_1.Helper.isNull(this._success[priority])) {\n                //return true beendet some-schleife\n                return true;\n            }\n            else if (this._success[priority] === true) {\n                isHighestResult = true;\n                return true;\n            }\n        });\n        return isHighestResult;\n    }\n    do(callback) {\n        if (this._status < 2) {\n            this._callbacks.push(callback);\n        }\n        if (this._status > 0) {\n            callback(this._lastResult, this._lastPriority);\n        }\n    }\n    highest(funcOrPromise) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._highestPromise;\n            if (Helper_1.Helper.isNotNull(funcOrPromise)) {\n                return Promise.resolve(this._lastResult).then(funcOrPromise);\n            }\n            else {\n                return Promise.resolve(this._lastResult);\n            }\n        });\n    }\n    first(funcOrPromise) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._status === 0) {\n                if (Helper_1.Helper.isNotNull(funcOrPromise)) {\n                    return Promise.race(Object[\"values\"](this._promises)).then(funcOrPromise);\n                }\n                else {\n                    return Promise.race(Object[\"values\"](this._promises));\n                }\n            }\n            else {\n                return Promise.resolve(this._lastResult);\n            }\n        });\n    }\n}\nexports.Prioritized = Prioritized;\n//# sourceMappingURL=Prioritized.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Random = void 0;\nlet Random = /** @class */ (() => {\n    class Random {\n        static seedRandom(seed) {\n            this._seed = seed;\n        }\n        static getRandom() {\n            let t = this._seed += 0x6D2B79F5;\n            t = Math.imul(t ^ t >>> 15, t | 1);\n            t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n            return ((t ^ t >>> 14) >>> 0) / 4294967296;\n        }\n        static getIntRandom(maxValue) {\n            return Math.floor(Random.getRandom() * (maxValue + 1));\n        }\n    }\n    Random._seed = new Date().getTime();\n    return Random;\n})();\nexports.Random = Random;\n//# sourceMappingURL=Random.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.XSSHelper = void 0;\nclass XSSHelper {\n    static escapeHTML(text) {\n        if (typeof text !== \"string\") {\n            return text;\n        }\n        const MAP = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#039;'\n        };\n        return text.replace(/[&<>\"']/g, function (m) {\n            return MAP[m];\n        });\n    }\n    static escapeJS(text) {\n        if (typeof text !== \"string\") {\n            return text;\n        }\n        return text.replace(/[<]([\\\\s]*\\\\\\/?[\\\\s]*)script([^<]*)[>]/g, function (match, p1, p2) {\n            return \"&lt;\" + p1 + \"sc&zwnj;ript\" + p2 + \"&gt;\";\n        });\n    }\n}\nexports.XSSHelper = XSSHelper;\n//# sourceMappingURL=XSSHelper.js.map","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n","var exports = module.exports = function SHA (algorithm) {\n  algorithm = algorithm.toLowerCase()\n\n  var Algorithm = exports[algorithm]\n  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')\n\n  return new Algorithm()\n}\n\nexports.sha = require('./sha')\nexports.sha1 = require('./sha1')\nexports.sha224 = require('./sha224')\nexports.sha256 = require('./sha256')\nexports.sha384 = require('./sha384')\nexports.sha512 = require('./sha512')\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n * in FIPS PUB 180-1\n * This source code is derived from sha1.js of the same repository.\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n * operation was added.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha, Hash)\n\nSha.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Sha256 = require('./sha256')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(64)\n\nfunction Sha224 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha224, Sha256)\n\nSha224.prototype.init = function () {\n  this._a = 0xc1059ed8\n  this._b = 0x367cd507\n  this._c = 0x3070dd17\n  this._d = 0xf70e5939\n  this._e = 0xffc00b31\n  this._f = 0x68581511\n  this._g = 0x64f98fa7\n  this._h = 0xbefa4fa4\n\n  return this\n}\n\nSha224.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(28)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n\n  return H\n}\n\nmodule.exports = Sha224\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n]\n\nvar W = new Array(64)\n\nfunction Sha256 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha256, Hash)\n\nSha256.prototype.init = function () {\n  this._a = 0x6a09e667\n  this._b = 0xbb67ae85\n  this._c = 0x3c6ef372\n  this._d = 0xa54ff53a\n  this._e = 0x510e527f\n  this._f = 0x9b05688c\n  this._g = 0x1f83d9ab\n  this._h = 0x5be0cd19\n\n  return this\n}\n\nfunction ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)\n}\n\nfunction sigma1 (x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)\n}\n\nfunction gamma0 (x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)\n}\n\nfunction gamma1 (x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)\n}\n\nSha256.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0\n\n  for (var j = 0; j < 64; ++j) {\n    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0\n    var T2 = (sigma0(a) + maj(a, b, c)) | 0\n\n    h = g\n    g = f\n    f = e\n    e = (d + T1) | 0\n    d = c\n    c = b\n    b = a\n    a = (T1 + T2) | 0\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n  this._f = (f + this._f) | 0\n  this._g = (g + this._g) | 0\n  this._h = (h + this._h) | 0\n}\n\nSha256.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(32)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n  H.writeInt32BE(this._h, 28)\n\n  return H\n}\n\nmodule.exports = Sha256\n","var inherits = require('inherits')\nvar SHA512 = require('./sha512')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(160)\n\nfunction Sha384 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha384, SHA512)\n\nSha384.prototype.init = function () {\n  this._ah = 0xcbbb9d5d\n  this._bh = 0x629a292a\n  this._ch = 0x9159015a\n  this._dh = 0x152fecd8\n  this._eh = 0x67332667\n  this._fh = 0x8eb44a87\n  this._gh = 0xdb0c2e0d\n  this._hh = 0x47b5481d\n\n  this._al = 0xc1059ed8\n  this._bl = 0x367cd507\n  this._cl = 0x3070dd17\n  this._dl = 0xf70e5939\n  this._el = 0xffc00b31\n  this._fl = 0x68581511\n  this._gl = 0x64f98fa7\n  this._hl = 0xbefa4fa4\n\n  return this\n}\n\nSha384.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(48)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n\n  return H\n}\n\nmodule.exports = Sha384\n","var inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]\n\nvar W = new Array(160)\n\nfunction Sha512 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha512, Hash)\n\nSha512.prototype.init = function () {\n  this._ah = 0x6a09e667\n  this._bh = 0xbb67ae85\n  this._ch = 0x3c6ef372\n  this._dh = 0xa54ff53a\n  this._eh = 0x510e527f\n  this._fh = 0x9b05688c\n  this._gh = 0x1f83d9ab\n  this._hh = 0x5be0cd19\n\n  this._al = 0xf3bcc908\n  this._bl = 0x84caa73b\n  this._cl = 0xfe94f82b\n  this._dl = 0x5f1d36f1\n  this._el = 0xade682d1\n  this._fl = 0x2b3e6c1f\n  this._gl = 0xfb41bd6b\n  this._hl = 0x137e2179\n\n  return this\n}\n\nfunction Ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x, xl) {\n  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)\n}\n\nfunction sigma1 (x, xl) {\n  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)\n}\n\nfunction Gamma0 (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)\n}\n\nfunction Gamma0l (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)\n}\n\nfunction Gamma1 (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)\n}\n\nfunction Gamma1l (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)\n}\n\nfunction getCarry (a, b) {\n  return (a >>> 0) < (b >>> 0) ? 1 : 0\n}\n\nSha512.prototype._update = function (M) {\n  var W = this._w\n\n  var ah = this._ah | 0\n  var bh = this._bh | 0\n  var ch = this._ch | 0\n  var dh = this._dh | 0\n  var eh = this._eh | 0\n  var fh = this._fh | 0\n  var gh = this._gh | 0\n  var hh = this._hh | 0\n\n  var al = this._al | 0\n  var bl = this._bl | 0\n  var cl = this._cl | 0\n  var dl = this._dl | 0\n  var el = this._el | 0\n  var fl = this._fl | 0\n  var gl = this._gl | 0\n  var hl = this._hl | 0\n\n  for (var i = 0; i < 32; i += 2) {\n    W[i] = M.readInt32BE(i * 4)\n    W[i + 1] = M.readInt32BE(i * 4 + 4)\n  }\n  for (; i < 160; i += 2) {\n    var xh = W[i - 15 * 2]\n    var xl = W[i - 15 * 2 + 1]\n    var gamma0 = Gamma0(xh, xl)\n    var gamma0l = Gamma0l(xl, xh)\n\n    xh = W[i - 2 * 2]\n    xl = W[i - 2 * 2 + 1]\n    var gamma1 = Gamma1(xh, xl)\n    var gamma1l = Gamma1l(xl, xh)\n\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n    var Wi7h = W[i - 7 * 2]\n    var Wi7l = W[i - 7 * 2 + 1]\n\n    var Wi16h = W[i - 16 * 2]\n    var Wi16l = W[i - 16 * 2 + 1]\n\n    var Wil = (gamma0l + Wi7l) | 0\n    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0\n    Wil = (Wil + gamma1l) | 0\n    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0\n    Wil = (Wil + Wi16l) | 0\n    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0\n\n    W[i] = Wih\n    W[i + 1] = Wil\n  }\n\n  for (var j = 0; j < 160; j += 2) {\n    Wih = W[j]\n    Wil = W[j + 1]\n\n    var majh = maj(ah, bh, ch)\n    var majl = maj(al, bl, cl)\n\n    var sigma0h = sigma0(ah, al)\n    var sigma0l = sigma0(al, ah)\n    var sigma1h = sigma1(eh, el)\n    var sigma1l = sigma1(el, eh)\n\n    // t1 = h + sigma1 + ch + K[j] + W[j]\n    var Kih = K[j]\n    var Kil = K[j + 1]\n\n    var chh = Ch(eh, fh, gh)\n    var chl = Ch(el, fl, gl)\n\n    var t1l = (hl + sigma1l) | 0\n    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0\n    t1l = (t1l + chl) | 0\n    t1h = (t1h + chh + getCarry(t1l, chl)) | 0\n    t1l = (t1l + Kil) | 0\n    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0\n    t1l = (t1l + Wil) | 0\n    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0\n\n    // t2 = sigma0 + maj\n    var t2l = (sigma0l + majl) | 0\n    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0\n\n    hh = gh\n    hl = gl\n    gh = fh\n    gl = fl\n    fh = eh\n    fl = el\n    el = (dl + t1l) | 0\n    eh = (dh + t1h + getCarry(el, dl)) | 0\n    dh = ch\n    dl = cl\n    ch = bh\n    cl = bl\n    bh = ah\n    bl = al\n    al = (t1l + t2l) | 0\n    ah = (t1h + t2h + getCarry(al, t1l)) | 0\n  }\n\n  this._al = (this._al + al) | 0\n  this._bl = (this._bl + bl) | 0\n  this._cl = (this._cl + cl) | 0\n  this._dl = (this._dl + dl) | 0\n  this._el = (this._el + el) | 0\n  this._fl = (this._fl + fl) | 0\n  this._gl = (this._gl + gl) | 0\n  this._hl = (this._hl + hl) | 0\n\n  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0\n  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0\n  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0\n  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0\n  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0\n  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0\n  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0\n  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0\n}\n\nSha512.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(64)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n  writeInt64BE(this._gh, this._gl, 48)\n  writeInt64BE(this._hh, this._hl, 56)\n\n  return H\n}\n\nmodule.exports = Sha512\n","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* Tabulator v4.7.2 (c) Oliver Folkerd */\n\n;(function (global, factory) {\n\tif ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined') {\n\t\tmodule.exports = factory();\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t} else {\n\t\tglobal.Tabulator = factory();\n\t}\n})(this, function () {\n\n\t'use strict';\n\n\t// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n\n\n\tif (!Array.prototype.findIndex) {\n\n\t\tObject.defineProperty(Array.prototype, 'findIndex', {\n\n\t\t\tvalue: function value(predicate) {\n\n\t\t\t\t// 1. Let O be ? ToObject(this value).\n\n\n\t\t\t\tif (this == null) {\n\n\t\t\t\t\tthrow new TypeError('\"this\" is null or not defined');\n\t\t\t\t}\n\n\t\t\t\tvar o = Object(this);\n\n\t\t\t\t// 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n\n\t\t\t\tvar len = o.length >>> 0;\n\n\t\t\t\t// 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n\n\t\t\t\tif (typeof predicate !== 'function') {\n\n\t\t\t\t\tthrow new TypeError('predicate must be a function');\n\t\t\t\t}\n\n\t\t\t\t// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n\t\t\t\tvar thisArg = arguments[1];\n\n\t\t\t\t// 5. Let k be 0.\n\n\n\t\t\t\tvar k = 0;\n\n\t\t\t\t// 6. Repeat, while k < len\n\n\n\t\t\t\twhile (k < len) {\n\n\t\t\t\t\t// a. Let Pk be ! ToString(k).\n\n\n\t\t\t\t\t// b. Let kValue be ? Get(O, Pk).\n\n\n\t\t\t\t\t// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n\n\n\t\t\t\t\t// d. If testResult is true, return k.\n\n\n\t\t\t\t\tvar kValue = o[k];\n\n\t\t\t\t\tif (predicate.call(thisArg, kValue, k, o)) {\n\n\t\t\t\t\t\treturn k;\n\t\t\t\t\t}\n\n\t\t\t\t\t// e. Increase k by 1.\n\n\n\t\t\t\t\tk++;\n\t\t\t\t}\n\n\t\t\t\t// 7. Return -1.\n\n\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t});\n\t}\n\n\t// https://tc39.github.io/ecma262/#sec-array.prototype.find\n\n\n\tif (!Array.prototype.find) {\n\n\t\tObject.defineProperty(Array.prototype, 'find', {\n\n\t\t\tvalue: function value(predicate) {\n\n\t\t\t\t// 1. Let O be ? ToObject(this value).\n\n\n\t\t\t\tif (this == null) {\n\n\t\t\t\t\tthrow new TypeError('\"this\" is null or not defined');\n\t\t\t\t}\n\n\t\t\t\tvar o = Object(this);\n\n\t\t\t\t// 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n\n\t\t\t\tvar len = o.length >>> 0;\n\n\t\t\t\t// 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n\n\t\t\t\tif (typeof predicate !== 'function') {\n\n\t\t\t\t\tthrow new TypeError('predicate must be a function');\n\t\t\t\t}\n\n\t\t\t\t// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n\t\t\t\tvar thisArg = arguments[1];\n\n\t\t\t\t// 5. Let k be 0.\n\n\n\t\t\t\tvar k = 0;\n\n\t\t\t\t// 6. Repeat, while k < len\n\n\n\t\t\t\twhile (k < len) {\n\n\t\t\t\t\t// a. Let Pk be ! ToString(k).\n\n\n\t\t\t\t\t// b. Let kValue be ? Get(O, Pk).\n\n\n\t\t\t\t\t// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n\n\n\t\t\t\t\t// d. If testResult is true, return kValue.\n\n\n\t\t\t\t\tvar kValue = o[k];\n\n\t\t\t\t\tif (predicate.call(thisArg, kValue, k, o)) {\n\n\t\t\t\t\t\treturn kValue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// e. Increase k by 1.\n\n\n\t\t\t\t\tk++;\n\t\t\t\t}\n\n\t\t\t\t// 7. Return undefined.\n\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t});\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\n\n\n\tif (!String.prototype.includes) {\n\n\t\tString.prototype.includes = function (search, start) {\n\n\t\t\t'use strict';\n\n\t\t\tif (search instanceof RegExp) {\n\n\t\t\t\tthrow TypeError('first argument must not be a RegExp');\n\t\t\t}\n\n\t\t\tif (start === undefined) {\n\t\t\t\tstart = 0;\n\t\t\t}\n\n\t\t\treturn this.indexOf(search, start) !== -1;\n\t\t};\n\t}\n\n\t// https://tc39.github.io/ecma262/#sec-array.prototype.includes\n\n\n\tif (!Array.prototype.includes) {\n\n\t\tObject.defineProperty(Array.prototype, 'includes', {\n\n\t\t\tvalue: function value(searchElement, fromIndex) {\n\n\t\t\t\tif (this == null) {\n\n\t\t\t\t\tthrow new TypeError('\"this\" is null or not defined');\n\t\t\t\t}\n\n\t\t\t\t// 1. Let O be ? ToObject(this value).\n\n\n\t\t\t\tvar o = Object(this);\n\n\t\t\t\t// 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n\n\t\t\t\tvar len = o.length >>> 0;\n\n\t\t\t\t// 3. If len is 0, return false.\n\n\n\t\t\t\tif (len === 0) {\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// 4. Let n be ? ToInteger(fromIndex).\n\n\n\t\t\t\t//    (If fromIndex is undefined, this step produces the value 0.)\n\n\n\t\t\t\tvar n = fromIndex | 0;\n\n\t\t\t\t// 5. If n ≥ 0, then\n\n\n\t\t\t\t//  a. Let k be n.\n\n\n\t\t\t\t// 6. Else n < 0,\n\n\n\t\t\t\t//  a. Let k be len + n.\n\n\n\t\t\t\t//  b. If k < 0, let k be 0.\n\n\n\t\t\t\tvar k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n\t\t\t\tfunction sameValueZero(x, y) {\n\n\t\t\t\t\treturn x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n\t\t\t\t}\n\n\t\t\t\t// 7. Repeat, while k < len\n\n\n\t\t\t\twhile (k < len) {\n\n\t\t\t\t\t// a. Let elementK be the result of ? Get(O, ! ToString(k)).\n\n\n\t\t\t\t\t// b. If SameValueZero(searchElement, elementK) is true, return true.\n\n\n\t\t\t\t\tif (sameValueZero(o[k], searchElement)) {\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// c. Increase k by 1.\n\n\n\t\t\t\t\tk++;\n\t\t\t\t}\n\n\t\t\t\t// 8. Return false\n\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t});\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\n\n\n\tif (typeof Object.assign !== 'function') {\n\n\t\t// Must be writable: true, enumerable: false, configurable: true\n\n\n\t\tObject.defineProperty(Object, \"assign\", {\n\n\t\t\tvalue: function assign(target, varArgs) {\n\t\t\t\t// .length of function is 2\n\n\n\t\t\t\t'use strict';\n\n\t\t\t\tif (target === null || target === undefined) {\n\n\t\t\t\t\tthrow new TypeError('Cannot convert undefined or null to object');\n\t\t\t\t}\n\n\t\t\t\tvar to = Object(target);\n\n\t\t\t\tfor (var index = 1; index < arguments.length; index++) {\n\n\t\t\t\t\tvar nextSource = arguments[index];\n\n\t\t\t\t\tif (nextSource !== null && nextSource !== undefined) {\n\n\t\t\t\t\t\tfor (var nextKey in nextSource) {\n\n\t\t\t\t\t\t\t// Avoid bugs when hasOwnProperty is shadowed\n\n\n\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n\n\t\t\t\t\t\t\t\tto[nextKey] = nextSource[nextKey];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn to;\n\t\t\t},\n\n\t\t\twritable: true,\n\n\t\t\tconfigurable: true\n\n\t\t});\n\t}\n\n\tvar ColumnManager = function ColumnManager(table) {\n\n\t\tthis.table = table; //hold parent table\n\n\n\t\tthis.blockHozScrollEvent = false;\n\n\t\tthis.headersElement = this.createHeadersElement();\n\n\t\tthis.element = this.createHeaderElement(); //containing element\n\n\n\t\tthis.rowManager = null; //hold row manager object\n\n\n\t\tthis.columns = []; // column definition object\n\n\n\t\tthis.columnsByIndex = []; //columns by index\n\n\n\t\tthis.columnsByField = {}; //columns by field\n\n\n\t\tthis.scrollLeft = 0;\n\n\t\tthis.element.insertBefore(this.headersElement, this.element.firstChild);\n\t};\n\n\t////////////// Setup Functions /////////////////\n\n\n\tColumnManager.prototype.createHeadersElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-headers\");\n\n\t\treturn el;\n\t};\n\n\tColumnManager.prototype.createHeaderElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-header\");\n\n\t\tif (!this.table.options.headerVisible) {\n\n\t\t\tel.classList.add(\"tabulator-header-hidden\");\n\t\t}\n\n\t\treturn el;\n\t};\n\n\tColumnManager.prototype.initialize = function () {\n\n\t\tvar self = this;\n\n\t\t//scroll body along with header\n\n\n\t\t// self.element.addEventListener(\"scroll\", function(e){\n\n\n\t\t// \tif(!self.blockHozScrollEvent){\n\n\n\t\t// \t\tself.table.rowManager.scrollHorizontal(self.element.scrollLeft);\n\n\n\t\t// \t}\n\n\n\t\t// });\n\n\t};\n\n\t//link to row manager\n\n\n\tColumnManager.prototype.setRowManager = function (manager) {\n\n\t\tthis.rowManager = manager;\n\t};\n\n\t//return containing element\n\n\n\tColumnManager.prototype.getElement = function () {\n\n\t\treturn this.element;\n\t};\n\n\t//return header containing element\n\n\n\tColumnManager.prototype.getHeadersElement = function () {\n\n\t\treturn this.headersElement;\n\t};\n\n\t// ColumnManager.prototype.tempScrollBlock = function(){\n\n\n\t// \tclearTimeout(this.blockHozScrollEvent);\n\n\n\t// \tthis.blockHozScrollEvent = setTimeout(() => {this.blockHozScrollEvent = false;}, 50);\n\n\n\t// }\n\n\n\t//scroll horizontally to match table body\n\n\n\tColumnManager.prototype.scrollHorizontal = function (left) {\n\n\t\tvar hozAdjust = 0,\n\t\t    scrollWidth = this.element.scrollWidth - this.table.element.clientWidth;\n\n\t\t// this.tempScrollBlock();\n\n\n\t\tthis.element.scrollLeft = left;\n\n\t\t//adjust for vertical scrollbar moving table when present\n\n\n\t\tif (left > scrollWidth) {\n\n\t\t\thozAdjust = left - scrollWidth;\n\n\t\t\tthis.element.style.marginLeft = -hozAdjust + \"px\";\n\t\t} else {\n\n\t\t\tthis.element.style.marginLeft = 0;\n\t\t}\n\n\t\t//keep frozen columns fixed in position\n\n\n\t\t//this._calcFrozenColumnsPos(hozAdjust + 3);\n\n\n\t\tthis.scrollLeft = left;\n\n\t\tif (this.table.modExists(\"frozenColumns\")) {\n\n\t\t\tthis.table.modules.frozenColumns.scrollHorizontal();\n\t\t}\n\t};\n\n\t///////////// Column Setup Functions /////////////\n\n\n\tColumnManager.prototype.generateColumnsFromRowData = function (data) {\n\n\t\tvar cols = [],\n\t\t    row,\n\t\t    sorter;\n\n\t\tif (data && data.length) {\n\n\t\t\trow = data[0];\n\n\t\t\tfor (var key in row) {\n\n\t\t\t\tvar col = {\n\n\t\t\t\t\tfield: key,\n\n\t\t\t\t\ttitle: key\n\n\t\t\t\t};\n\n\t\t\t\tvar value = row[key];\n\n\t\t\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\n\t\t\t\t\tcase \"undefined\":\n\n\t\t\t\t\t\tsorter = \"string\";\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"boolean\":\n\n\t\t\t\t\t\tsorter = \"boolean\";\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"object\":\n\n\t\t\t\t\t\tif (Array.isArray(value)) {\n\n\t\t\t\t\t\t\tsorter = \"array\";\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tsorter = \"string\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif (!isNaN(value) && value !== \"\") {\n\n\t\t\t\t\t\t\tsorter = \"number\";\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {\n\n\t\t\t\t\t\t\t\tsorter = \"alphanum\";\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tsorter = \"string\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tcol.sorter = sorter;\n\n\t\t\t\tcols.push(col);\n\t\t\t}\n\n\t\t\tthis.table.options.columns = cols;\n\n\t\t\tthis.setColumns(this.table.options.columns);\n\t\t}\n\t};\n\n\tColumnManager.prototype.setColumns = function (cols, row) {\n\n\t\tvar self = this;\n\n\t\twhile (self.headersElement.firstChild) {\n\t\t\tself.headersElement.removeChild(self.headersElement.firstChild);\n\t\t}self.columns = [];\n\n\t\tself.columnsByIndex = [];\n\n\t\tself.columnsByField = {};\n\n\t\t//reset frozen columns\n\n\n\t\tif (self.table.modExists(\"frozenColumns\")) {\n\n\t\t\tself.table.modules.frozenColumns.reset();\n\t\t}\n\n\t\tcols.forEach(function (def, i) {\n\n\t\t\tself._addColumn(def);\n\t\t});\n\n\t\tself._reIndexColumns();\n\n\t\tif (self.table.options.responsiveLayout && self.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\tself.table.modules.responsiveLayout.initialize();\n\t\t}\n\n\t\tself.redraw(true);\n\t};\n\n\tColumnManager.prototype._addColumn = function (definition, before, nextToColumn) {\n\n\t\tvar column = new Column(definition, this),\n\t\t    colEl = column.getElement(),\n\t\t    index = nextToColumn ? this.findColumnIndex(nextToColumn) : nextToColumn;\n\n\t\tif (nextToColumn && index > -1) {\n\n\t\t\tvar parentIndex = this.columns.indexOf(nextToColumn.getTopColumn());\n\n\t\t\tvar nextEl = nextToColumn.getElement();\n\n\t\t\tif (before) {\n\n\t\t\t\tthis.columns.splice(parentIndex, 0, column);\n\n\t\t\t\tnextEl.parentNode.insertBefore(colEl, nextEl);\n\t\t\t} else {\n\n\t\t\t\tthis.columns.splice(parentIndex + 1, 0, column);\n\n\t\t\t\tnextEl.parentNode.insertBefore(colEl, nextEl.nextSibling);\n\t\t\t}\n\t\t} else {\n\n\t\t\tif (before) {\n\n\t\t\t\tthis.columns.unshift(column);\n\n\t\t\t\tthis.headersElement.insertBefore(column.getElement(), this.headersElement.firstChild);\n\t\t\t} else {\n\n\t\t\t\tthis.columns.push(column);\n\n\t\t\t\tthis.headersElement.appendChild(column.getElement());\n\t\t\t}\n\n\t\t\tcolumn.columnRendered();\n\t\t}\n\n\t\treturn column;\n\t};\n\n\tColumnManager.prototype.registerColumnField = function (col) {\n\n\t\tif (col.definition.field) {\n\n\t\t\tthis.columnsByField[col.definition.field] = col;\n\t\t}\n\t};\n\n\tColumnManager.prototype.registerColumnPosition = function (col) {\n\n\t\tthis.columnsByIndex.push(col);\n\t};\n\n\tColumnManager.prototype._reIndexColumns = function () {\n\n\t\tthis.columnsByIndex = [];\n\n\t\tthis.columns.forEach(function (column) {\n\n\t\t\tcolumn.reRegisterPosition();\n\t\t});\n\t};\n\n\t//ensure column headers take up the correct amount of space in column groups\n\n\n\tColumnManager.prototype._verticalAlignHeaders = function () {\n\n\t\tvar self = this,\n\t\t    minHeight = 0;\n\n\t\tself.columns.forEach(function (column) {\n\n\t\t\tvar height;\n\n\t\t\tcolumn.clearVerticalAlign();\n\n\t\t\theight = column.getHeight();\n\n\t\t\tif (height > minHeight) {\n\n\t\t\t\tminHeight = height;\n\t\t\t}\n\t\t});\n\n\t\tself.columns.forEach(function (column) {\n\n\t\t\tcolumn.verticalAlign(self.table.options.columnHeaderVertAlign, minHeight);\n\t\t});\n\n\t\tself.rowManager.adjustTableSize();\n\t};\n\n\t//////////////// Column Details /////////////////\n\n\n\tColumnManager.prototype.findColumn = function (subject) {\n\n\t\tvar self = this;\n\n\t\tif ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n\n\t\t\tif (subject instanceof Column) {\n\n\t\t\t\t//subject is column element\n\n\n\t\t\t\treturn subject;\n\t\t\t} else if (subject instanceof ColumnComponent) {\n\n\t\t\t\t//subject is public column component\n\n\n\t\t\t\treturn subject._getSelf() || false;\n\t\t\t} else if (typeof HTMLElement !== \"undefined\" && subject instanceof HTMLElement) {\n\n\t\t\t\t//subject is a HTML element of the column header\n\n\n\t\t\t\tvar match = self.columns.find(function (column) {\n\n\t\t\t\t\treturn column.element === subject;\n\t\t\t\t});\n\n\t\t\t\treturn match || false;\n\t\t\t}\n\t\t} else {\n\n\t\t\t//subject should be treated as the field name of the column\n\n\n\t\t\treturn this.columnsByField[subject] || false;\n\t\t}\n\n\t\t//catch all for any other type of input\n\n\n\t\treturn false;\n\t};\n\n\tColumnManager.prototype.getColumnByField = function (field) {\n\n\t\treturn this.columnsByField[field];\n\t};\n\n\tColumnManager.prototype.getColumnsByFieldRoot = function (root) {\n\t\tvar _this = this;\n\n\t\tvar matches = [];\n\n\t\tObject.keys(this.columnsByField).forEach(function (field) {\n\n\t\t\tvar fieldRoot = field.split(\".\")[0];\n\n\t\t\tif (fieldRoot === root) {\n\n\t\t\t\tmatches.push(_this.columnsByField[field]);\n\t\t\t}\n\t\t});\n\n\t\treturn matches;\n\t};\n\n\tColumnManager.prototype.getColumnByIndex = function (index) {\n\n\t\treturn this.columnsByIndex[index];\n\t};\n\n\tColumnManager.prototype.getFirstVisibileColumn = function (index) {\n\n\t\tvar index = this.columnsByIndex.findIndex(function (col) {\n\n\t\t\treturn col.visible;\n\t\t});\n\n\t\treturn index > -1 ? this.columnsByIndex[index] : false;\n\t};\n\n\tColumnManager.prototype.getColumns = function () {\n\n\t\treturn this.columns;\n\t};\n\n\tColumnManager.prototype.findColumnIndex = function (column) {\n\n\t\treturn this.columnsByIndex.findIndex(function (col) {\n\n\t\t\treturn column === col;\n\t\t});\n\t};\n\n\t//return all columns that are not groups\n\n\n\tColumnManager.prototype.getRealColumns = function () {\n\n\t\treturn this.columnsByIndex;\n\t};\n\n\t//travers across columns and call action\n\n\n\tColumnManager.prototype.traverse = function (callback) {\n\n\t\tvar self = this;\n\n\t\tself.columnsByIndex.forEach(function (column, i) {\n\n\t\t\tcallback(column, i);\n\t\t});\n\t};\n\n\t//get defintions of actual columns\n\n\n\tColumnManager.prototype.getDefinitions = function (active) {\n\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\tself.columnsByIndex.forEach(function (column) {\n\n\t\t\tif (!active || active && column.visible) {\n\n\t\t\t\toutput.push(column.getDefinition());\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\t//get full nested definition tree\n\n\n\tColumnManager.prototype.getDefinitionTree = function () {\n\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\tself.columns.forEach(function (column) {\n\n\t\t\toutput.push(column.getDefinition(true));\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tColumnManager.prototype.getComponents = function (structured) {\n\n\t\tvar self = this,\n\t\t    output = [],\n\t\t    columns = structured ? self.columns : self.columnsByIndex;\n\n\t\tcolumns.forEach(function (column) {\n\n\t\t\toutput.push(column.getComponent());\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tColumnManager.prototype.getWidth = function () {\n\n\t\tvar width = 0;\n\n\t\tthis.columnsByIndex.forEach(function (column) {\n\n\t\t\tif (column.visible) {\n\n\t\t\t\twidth += column.getWidth();\n\t\t\t}\n\t\t});\n\n\t\treturn width;\n\t};\n\n\tColumnManager.prototype.moveColumn = function (from, to, after) {\n\n\t\tthis.moveColumnActual(from, to, after);\n\n\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\tthis.table.modules.responsiveLayout.initialize();\n\t\t}\n\n\t\tif (this.table.modExists(\"columnCalcs\")) {\n\n\t\t\tthis.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n\t\t}\n\n\t\tto.element.parentNode.insertBefore(from.element, to.element);\n\n\t\tif (after) {\n\n\t\t\tto.element.parentNode.insertBefore(to.element, from.element);\n\t\t}\n\n\t\tthis._verticalAlignHeaders();\n\n\t\tthis.table.rowManager.reinitialize();\n\t};\n\n\tColumnManager.prototype.moveColumnActual = function (from, to, after) {\n\n\t\tif (from.parent.isGroup) {\n\n\t\t\tthis._moveColumnInArray(from.parent.columns, from, to, after);\n\t\t} else {\n\n\t\t\tthis._moveColumnInArray(this.columns, from, to, after);\n\t\t}\n\n\t\tthis._moveColumnInArray(this.columnsByIndex, from, to, after, true);\n\n\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\tthis.table.modules.responsiveLayout.initialize();\n\t\t}\n\n\t\tif (this.table.options.columnMoved) {\n\n\t\t\tthis.table.options.columnMoved.call(this.table, from.getComponent(), this.table.columnManager.getComponents());\n\t\t}\n\n\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n\n\t\t\tthis.table.modules.persistence.save(\"columns\");\n\t\t}\n\t};\n\n\tColumnManager.prototype._moveColumnInArray = function (columns, from, to, after, updateRows) {\n\n\t\tvar fromIndex = columns.indexOf(from),\n\t\t    toIndex;\n\n\t\tif (fromIndex > -1) {\n\n\t\t\tcolumns.splice(fromIndex, 1);\n\n\t\t\ttoIndex = columns.indexOf(to);\n\n\t\t\tif (toIndex > -1) {\n\n\t\t\t\tif (after) {\n\n\t\t\t\t\ttoIndex = toIndex + 1;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\ttoIndex = fromIndex;\n\t\t\t}\n\n\t\t\tcolumns.splice(toIndex, 0, from);\n\n\t\t\tif (updateRows) {\n\n\t\t\t\tthis.table.rowManager.rows.forEach(function (row) {\n\n\t\t\t\t\tif (row.cells.length) {\n\n\t\t\t\t\t\tvar cell = row.cells.splice(fromIndex, 1)[0];\n\n\t\t\t\t\t\trow.cells.splice(toIndex, 0, cell);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tColumnManager.prototype.scrollToColumn = function (column, position, ifVisible) {\n\t\tvar _this2 = this;\n\n\t\tvar left = 0,\n\t\t    offset = 0,\n\t\t    adjust = 0,\n\t\t    colEl = column.getElement();\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (typeof position === \"undefined\") {\n\n\t\t\t\tposition = _this2.table.options.scrollToColumnPosition;\n\t\t\t}\n\n\t\t\tif (typeof ifVisible === \"undefined\") {\n\n\t\t\t\tifVisible = _this2.table.options.scrollToColumnIfVisible;\n\t\t\t}\n\n\t\t\tif (column.visible) {\n\n\t\t\t\t//align to correct position\n\n\n\t\t\t\tswitch (position) {\n\n\t\t\t\t\tcase \"middle\":\n\n\t\t\t\t\tcase \"center\":\n\n\t\t\t\t\t\tadjust = -_this2.element.clientWidth / 2;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"right\":\n\n\t\t\t\t\t\tadjust = colEl.clientWidth - _this2.headersElement.clientWidth;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t//check column visibility\n\n\n\t\t\t\tif (!ifVisible) {\n\n\t\t\t\t\toffset = colEl.offsetLeft;\n\n\t\t\t\t\tif (offset > 0 && offset + colEl.offsetWidth < _this2.element.clientWidth) {\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//calculate scroll position\n\n\n\t\t\t\tleft = colEl.offsetLeft + _this2.element.scrollLeft + adjust;\n\n\t\t\t\tleft = Math.max(Math.min(left, _this2.table.rowManager.element.scrollWidth - _this2.table.rowManager.element.clientWidth), 0);\n\n\t\t\t\t_this2.table.rowManager.scrollHorizontal(left);\n\n\t\t\t\t_this2.scrollHorizontal(left);\n\n\t\t\t\tresolve();\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Scroll Error - Column not visible\");\n\n\t\t\t\treject(\"Scroll Error - Column not visible\");\n\t\t\t}\n\t\t});\n\t};\n\n\t//////////////// Cell Management /////////////////\n\n\n\tColumnManager.prototype.generateCells = function (row) {\n\n\t\tvar self = this;\n\n\t\tvar cells = [];\n\n\t\tself.columnsByIndex.forEach(function (column) {\n\n\t\t\tcells.push(column.generateCell(row));\n\t\t});\n\n\t\treturn cells;\n\t};\n\n\t//////////////// Column Management /////////////////\n\n\n\tColumnManager.prototype.getFlexBaseWidth = function () {\n\n\t\tvar self = this,\n\t\t    totalWidth = self.table.element.clientWidth,\n\t\t    //table element width\n\n\n\t\tfixedWidth = 0;\n\n\t\t//adjust for vertical scrollbar if present\n\n\n\t\tif (self.rowManager.element.scrollHeight > self.rowManager.element.clientHeight) {\n\n\t\t\ttotalWidth -= self.rowManager.element.offsetWidth - self.rowManager.element.clientWidth;\n\t\t}\n\n\t\tthis.columnsByIndex.forEach(function (column) {\n\n\t\t\tvar width, minWidth, colWidth;\n\n\t\t\tif (column.visible) {\n\n\t\t\t\twidth = column.definition.width || 0;\n\n\t\t\t\tminWidth = typeof column.minWidth == \"undefined\" ? self.table.options.columnMinWidth : parseInt(column.minWidth);\n\n\t\t\t\tif (typeof width == \"string\") {\n\n\t\t\t\t\tif (width.indexOf(\"%\") > -1) {\n\n\t\t\t\t\t\tcolWidth = totalWidth / 100 * parseInt(width);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcolWidth = parseInt(width);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tcolWidth = width;\n\t\t\t\t}\n\n\t\t\t\tfixedWidth += colWidth > minWidth ? colWidth : minWidth;\n\t\t\t}\n\t\t});\n\n\t\treturn fixedWidth;\n\t};\n\n\tColumnManager.prototype.addColumn = function (definition, before, nextToColumn) {\n\t\tvar _this3 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar column = _this3._addColumn(definition, before, nextToColumn);\n\n\t\t\t_this3._reIndexColumns();\n\n\t\t\tif (_this3.table.options.responsiveLayout && _this3.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\t_this3.table.modules.responsiveLayout.initialize();\n\t\t\t}\n\n\t\t\tif (_this3.table.modExists(\"columnCalcs\")) {\n\n\t\t\t\t_this3.table.modules.columnCalcs.recalc(_this3.table.rowManager.activeRows);\n\t\t\t}\n\n\t\t\t_this3.redraw();\n\n\t\t\tif (_this3.table.modules.layout.getMode() != \"fitColumns\") {\n\n\t\t\t\tcolumn.reinitializeWidth();\n\t\t\t}\n\n\t\t\t_this3._verticalAlignHeaders();\n\n\t\t\t_this3.table.rowManager.reinitialize();\n\n\t\t\tresolve(column);\n\t\t});\n\t};\n\n\t//remove column from system\n\n\n\tColumnManager.prototype.deregisterColumn = function (column) {\n\n\t\tvar field = column.getField(),\n\t\t    index;\n\n\t\t//remove from field list\n\n\n\t\tif (field) {\n\n\t\t\tdelete this.columnsByField[field];\n\t\t}\n\n\t\t//remove from index list\n\n\n\t\tindex = this.columnsByIndex.indexOf(column);\n\n\t\tif (index > -1) {\n\n\t\t\tthis.columnsByIndex.splice(index, 1);\n\t\t}\n\n\t\t//remove from column list\n\n\n\t\tindex = this.columns.indexOf(column);\n\n\t\tif (index > -1) {\n\n\t\t\tthis.columns.splice(index, 1);\n\t\t}\n\n\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\tthis.table.modules.responsiveLayout.initialize();\n\t\t}\n\n\t\tthis.redraw();\n\t};\n\n\t//redraw columns\n\n\n\tColumnManager.prototype.redraw = function (force) {\n\n\t\tif (force) {\n\n\t\t\tif (Tabulator.prototype.helpers.elVisible(this.element)) {\n\n\t\t\t\tthis._verticalAlignHeaders();\n\t\t\t}\n\n\t\t\tthis.table.rowManager.resetScroll();\n\n\t\t\tthis.table.rowManager.reinitialize();\n\t\t}\n\n\t\tif ([\"fitColumns\", \"fitDataStretch\"].indexOf(this.table.modules.layout.getMode()) > -1) {\n\n\t\t\tthis.table.modules.layout.layout();\n\t\t} else {\n\n\t\t\tif (force) {\n\n\t\t\t\tthis.table.modules.layout.layout();\n\t\t\t} else {\n\n\t\t\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\t\tthis.table.modules.responsiveLayout.update();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.table.modExists(\"frozenColumns\")) {\n\n\t\t\tthis.table.modules.frozenColumns.layout();\n\t\t}\n\n\t\tif (this.table.modExists(\"columnCalcs\")) {\n\n\t\t\tthis.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n\t\t}\n\n\t\tif (force) {\n\n\t\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n\n\t\t\t\tthis.table.modules.persistence.save(\"columns\");\n\t\t\t}\n\n\t\t\tif (this.table.modExists(\"columnCalcs\")) {\n\n\t\t\t\tthis.table.modules.columnCalcs.redraw();\n\t\t\t}\n\t\t}\n\n\t\tthis.table.footerManager.redraw();\n\t};\n\n\t//public column object\n\n\tvar ColumnComponent = function ColumnComponent(column) {\n\n\t\tthis._column = column;\n\n\t\tthis.type = \"ColumnComponent\";\n\t};\n\n\tColumnComponent.prototype.getElement = function () {\n\n\t\treturn this._column.getElement();\n\t};\n\n\tColumnComponent.prototype.getDefinition = function () {\n\n\t\treturn this._column.getDefinition();\n\t};\n\n\tColumnComponent.prototype.getField = function () {\n\n\t\treturn this._column.getField();\n\t};\n\n\tColumnComponent.prototype.getCells = function () {\n\n\t\tvar cells = [];\n\n\t\tthis._column.cells.forEach(function (cell) {\n\n\t\t\tcells.push(cell.getComponent());\n\t\t});\n\n\t\treturn cells;\n\t};\n\n\tColumnComponent.prototype.getVisibility = function () {\n\n\t\tconsole.warn(\"getVisibility function is deprecated, you should now use the isVisible function\");\n\n\t\treturn this._column.visible;\n\t};\n\n\tColumnComponent.prototype.isVisible = function () {\n\n\t\treturn this._column.visible;\n\t};\n\n\tColumnComponent.prototype.show = function () {\n\n\t\tif (this._column.isGroup) {\n\n\t\t\tthis._column.columns.forEach(function (column) {\n\n\t\t\t\tcolumn.show();\n\t\t\t});\n\t\t} else {\n\n\t\t\tthis._column.show();\n\t\t}\n\t};\n\n\tColumnComponent.prototype.hide = function () {\n\n\t\tif (this._column.isGroup) {\n\n\t\t\tthis._column.columns.forEach(function (column) {\n\n\t\t\t\tcolumn.hide();\n\t\t\t});\n\t\t} else {\n\n\t\t\tthis._column.hide();\n\t\t}\n\t};\n\n\tColumnComponent.prototype.toggle = function () {\n\n\t\tif (this._column.visible) {\n\n\t\t\tthis.hide();\n\t\t} else {\n\n\t\t\tthis.show();\n\t\t}\n\t};\n\n\tColumnComponent.prototype.delete = function () {\n\n\t\treturn this._column.delete();\n\t};\n\n\tColumnComponent.prototype.getSubColumns = function () {\n\n\t\tvar output = [];\n\n\t\tif (this._column.columns.length) {\n\n\t\t\tthis._column.columns.forEach(function (column) {\n\n\t\t\t\toutput.push(column.getComponent());\n\t\t\t});\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tColumnComponent.prototype.getParentColumn = function () {\n\n\t\treturn this._column.parent instanceof Column ? this._column.parent.getComponent() : false;\n\t};\n\n\tColumnComponent.prototype._getSelf = function () {\n\n\t\treturn this._column;\n\t};\n\n\tColumnComponent.prototype.scrollTo = function () {\n\n\t\treturn this._column.table.columnManager.scrollToColumn(this._column);\n\t};\n\n\tColumnComponent.prototype.getTable = function () {\n\n\t\treturn this._column.table;\n\t};\n\n\tColumnComponent.prototype.headerFilterFocus = function () {\n\n\t\tif (this._column.table.modExists(\"filter\", true)) {\n\n\t\t\tthis._column.table.modules.filter.setHeaderFilterFocus(this._column);\n\t\t}\n\t};\n\n\tColumnComponent.prototype.reloadHeaderFilter = function () {\n\n\t\tif (this._column.table.modExists(\"filter\", true)) {\n\n\t\t\tthis._column.table.modules.filter.reloadHeaderFilter(this._column);\n\t\t}\n\t};\n\n\tColumnComponent.prototype.getHeaderFilterValue = function () {\n\n\t\tif (this._column.table.modExists(\"filter\", true)) {\n\n\t\t\treturn this._column.table.modules.filter.getHeaderFilterValue(this._column);\n\t\t}\n\t};\n\n\tColumnComponent.prototype.setHeaderFilterValue = function (value) {\n\n\t\tif (this._column.table.modExists(\"filter\", true)) {\n\n\t\t\tthis._column.table.modules.filter.setHeaderFilterValue(this._column, value);\n\t\t}\n\t};\n\n\tColumnComponent.prototype.move = function (to, after) {\n\n\t\tvar toColumn = this._column.table.columnManager.findColumn(to);\n\n\t\tif (toColumn) {\n\n\t\t\tthis._column.table.columnManager.moveColumn(this._column, toColumn, after);\n\t\t} else {\n\n\t\t\tconsole.warn(\"Move Error - No matching column found:\", toColumn);\n\t\t}\n\t};\n\n\tColumnComponent.prototype.getNextColumn = function () {\n\n\t\tvar nextCol = this._column.nextColumn();\n\n\t\treturn nextCol ? nextCol.getComponent() : false;\n\t};\n\n\tColumnComponent.prototype.getPrevColumn = function () {\n\n\t\tvar prevCol = this._column.prevColumn();\n\n\t\treturn prevCol ? prevCol.getComponent() : false;\n\t};\n\n\tColumnComponent.prototype.updateDefinition = function (updates) {\n\n\t\treturn this._column.updateDefinition(updates);\n\t};\n\n\tColumnComponent.prototype.getWidth = function () {\n\n\t\treturn this._column.getWidth();\n\t};\n\n\tColumnComponent.prototype.setWidth = function (width) {\n\n\t\tif (width === true) {\n\n\t\t\treturn this._column.reinitializeWidth(true);\n\t\t} else {\n\n\t\t\treturn this._column.setWidth(width);\n\t\t}\n\t};\n\n\tColumnComponent.prototype.validate = function () {\n\n\t\treturn this._column.validate();\n\t};\n\n\tvar Column = function Column(def, parent) {\n\n\t\tvar self = this;\n\n\t\tthis.table = parent.table;\n\n\t\tthis.definition = def; //column definition\n\n\t\tthis.parent = parent; //hold parent object\n\n\t\tthis.type = \"column\"; //type of element\n\n\t\tthis.columns = []; //child columns\n\n\t\tthis.cells = []; //cells bound to this column\n\n\t\tthis.element = this.createElement(); //column header element\n\n\t\tthis.contentElement = false;\n\n\t\tthis.titleElement = false;\n\n\t\tthis.groupElement = this.createGroupElement(); //column group holder element\n\n\t\tthis.isGroup = false;\n\n\t\tthis.tooltip = false; //hold column tooltip\n\n\t\tthis.hozAlign = \"\"; //horizontal text alignment\n\n\t\tthis.vertAlign = \"\"; //vert text alignment\n\n\n\t\t//multi dimensional filed handling\n\n\t\tthis.field = \"\";\n\n\t\tthis.fieldStructure = \"\";\n\n\t\tthis.getFieldValue = \"\";\n\n\t\tthis.setFieldValue = \"\";\n\n\t\tthis.titleFormatterRendered = false;\n\n\t\tthis.setField(this.definition.field);\n\n\t\tif (this.table.options.invalidOptionWarnings) {\n\n\t\t\tthis.checkDefinition();\n\t\t}\n\n\t\tthis.modules = {}; //hold module variables;\n\n\n\t\tthis.cellEvents = {\n\n\t\t\tcellClick: false,\n\n\t\t\tcellDblClick: false,\n\n\t\t\tcellContext: false,\n\n\t\t\tcellTap: false,\n\n\t\t\tcellDblTap: false,\n\n\t\t\tcellTapHold: false,\n\n\t\t\tcellMouseEnter: false,\n\n\t\t\tcellMouseLeave: false,\n\n\t\t\tcellMouseOver: false,\n\n\t\t\tcellMouseOut: false,\n\n\t\t\tcellMouseMove: false\n\n\t\t};\n\n\t\tthis.width = null; //column width\n\n\t\tthis.widthStyled = \"\"; //column width prestyled to improve render efficiency\n\n\t\tthis.minWidth = null; //column minimum width\n\n\t\tthis.minWidthStyled = \"\"; //column minimum prestyled to improve render efficiency\n\n\t\tthis.widthFixed = false; //user has specified a width for this column\n\n\n\t\tthis.visible = true; //default visible state\n\n\n\t\tthis.component = null;\n\n\t\tthis._mapDepricatedFunctionality();\n\n\t\t//initialize column\n\n\t\tif (def.columns) {\n\n\t\t\tthis.isGroup = true;\n\n\t\t\tdef.columns.forEach(function (def, i) {\n\n\t\t\t\tvar newCol = new Column(def, self);\n\n\t\t\t\tself.attachColumn(newCol);\n\t\t\t});\n\n\t\t\tself.checkColumnVisibility();\n\t\t} else {\n\n\t\t\tparent.registerColumnField(this);\n\t\t}\n\n\t\tif (def.rowHandle && this.table.options.movableRows !== false && this.table.modExists(\"moveRow\")) {\n\n\t\t\tthis.table.modules.moveRow.setHandle(true);\n\t\t}\n\n\t\tthis._buildHeader();\n\n\t\tthis.bindModuleColumns();\n\t};\n\n\tColumn.prototype.createElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-col\");\n\n\t\tel.setAttribute(\"role\", \"columnheader\");\n\n\t\tel.setAttribute(\"aria-sort\", \"none\");\n\n\t\treturn el;\n\t};\n\n\tColumn.prototype.createGroupElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-col-group-cols\");\n\n\t\treturn el;\n\t};\n\n\tColumn.prototype.checkDefinition = function () {\n\t\tvar _this4 = this;\n\n\t\tObject.keys(this.definition).forEach(function (key) {\n\n\t\t\tif (_this4.defaultOptionList.indexOf(key) === -1) {\n\n\t\t\t\tconsole.warn(\"Invalid column definition option in '\" + (_this4.field || _this4.definition.title) + \"' column:\", key);\n\t\t\t}\n\t\t});\n\t};\n\n\tColumn.prototype.setField = function (field) {\n\n\t\tthis.field = field;\n\n\t\tthis.fieldStructure = field ? this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator) : [field] : [];\n\n\t\tthis.getFieldValue = this.fieldStructure.length > 1 ? this._getNestedData : this._getFlatData;\n\n\t\tthis.setFieldValue = this.fieldStructure.length > 1 ? this._setNestedData : this._setFlatData;\n\t};\n\n\t//register column position with column manager\n\n\tColumn.prototype.registerColumnPosition = function (column) {\n\n\t\tthis.parent.registerColumnPosition(column);\n\t};\n\n\t//register column position with column manager\n\n\tColumn.prototype.registerColumnField = function (column) {\n\n\t\tthis.parent.registerColumnField(column);\n\t};\n\n\t//trigger position registration\n\n\tColumn.prototype.reRegisterPosition = function () {\n\n\t\tif (this.isGroup) {\n\n\t\t\tthis.columns.forEach(function (column) {\n\n\t\t\t\tcolumn.reRegisterPosition();\n\t\t\t});\n\t\t} else {\n\n\t\t\tthis.registerColumnPosition(this);\n\t\t}\n\t};\n\n\tColumn.prototype._mapDepricatedFunctionality = function () {\n\n\t\tif (typeof this.definition.hideInHtml !== \"undefined\") {\n\n\t\t\tthis.definition.htmlOutput = !this.definition.hideInHtml;\n\n\t\t\tconsole.warn(\"hideInHtml column definition property is deprecated, you should now use htmlOutput\");\n\t\t}\n\n\t\tif (typeof this.definition.align !== \"undefined\") {\n\n\t\t\tthis.definition.hozAlign = this.definition.align;\n\n\t\t\tconsole.warn(\"align column definition property is deprecated, you should now use hozAlign\");\n\t\t}\n\n\t\tif (typeof this.definition.downloadTitle !== \"undefined\") {\n\n\t\t\tthis.definition.titleDownload = this.definition.downloadTitle;\n\n\t\t\tconsole.warn(\"downloadTitle definition property is deprecated, you should now use titleDownload\");\n\t\t}\n\t};\n\n\tColumn.prototype.setTooltip = function () {\n\n\t\tvar self = this,\n\t\t    def = self.definition;\n\n\t\t//set header tooltips\n\n\t\tvar tooltip = def.headerTooltip || def.tooltip === false ? def.headerTooltip : self.table.options.tooltipsHeader;\n\n\t\tif (tooltip) {\n\n\t\t\tif (tooltip === true) {\n\n\t\t\t\tif (def.field) {\n\n\t\t\t\t\tself.table.modules.localize.bind(\"columns|\" + def.field, function (value) {\n\n\t\t\t\t\t\tself.element.setAttribute(\"title\", value || def.title);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\n\t\t\t\t\tself.element.setAttribute(\"title\", def.title);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (typeof tooltip == \"function\") {\n\n\t\t\t\t\ttooltip = tooltip(self.getComponent());\n\n\t\t\t\t\tif (tooltip === false) {\n\n\t\t\t\t\t\ttooltip = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tself.element.setAttribute(\"title\", tooltip);\n\t\t\t}\n\t\t} else {\n\n\t\t\tself.element.setAttribute(\"title\", \"\");\n\t\t}\n\t};\n\n\t//build header element\n\n\tColumn.prototype._buildHeader = function () {\n\n\t\tvar self = this,\n\t\t    def = self.definition;\n\n\t\twhile (self.element.firstChild) {\n\t\t\tself.element.removeChild(self.element.firstChild);\n\t\t}if (def.headerVertical) {\n\n\t\t\tself.element.classList.add(\"tabulator-col-vertical\");\n\n\t\t\tif (def.headerVertical === \"flip\") {\n\n\t\t\t\tself.element.classList.add(\"tabulator-col-vertical-flip\");\n\t\t\t}\n\t\t}\n\n\t\tself.contentElement = self._bindEvents();\n\n\t\tself.contentElement = self._buildColumnHeaderContent();\n\n\t\tself.element.appendChild(self.contentElement);\n\n\t\tif (self.isGroup) {\n\n\t\t\tself._buildGroupHeader();\n\t\t} else {\n\n\t\t\tself._buildColumnHeader();\n\t\t}\n\n\t\tself.setTooltip();\n\n\t\t//set resizable handles\n\n\t\tif (self.table.options.resizableColumns && self.table.modExists(\"resizeColumns\")) {\n\n\t\t\tself.table.modules.resizeColumns.initializeColumn(\"header\", self, self.element);\n\t\t}\n\n\t\t//set resizable handles\n\n\t\tif (def.headerFilter && self.table.modExists(\"filter\") && self.table.modExists(\"edit\")) {\n\n\t\t\tif (typeof def.headerFilterPlaceholder !== \"undefined\" && def.field) {\n\n\t\t\t\tself.table.modules.localize.setHeaderFilterColumnPlaceholder(def.field, def.headerFilterPlaceholder);\n\t\t\t}\n\n\t\t\tself.table.modules.filter.initializeColumn(self);\n\t\t}\n\n\t\t//set resizable handles\n\n\t\tif (self.table.modExists(\"frozenColumns\")) {\n\n\t\t\tself.table.modules.frozenColumns.initializeColumn(self);\n\t\t}\n\n\t\t//set movable column\n\n\t\tif (self.table.options.movableColumns && !self.isGroup && self.table.modExists(\"moveColumn\")) {\n\n\t\t\tself.table.modules.moveColumn.initializeColumn(self);\n\t\t}\n\n\t\t//set calcs column\n\n\t\tif ((def.topCalc || def.bottomCalc) && self.table.modExists(\"columnCalcs\")) {\n\n\t\t\tself.table.modules.columnCalcs.initializeColumn(self);\n\t\t}\n\n\t\t//handle persistence\n\n\t\tif (self.table.modExists(\"persistence\") && self.table.modules.persistence.config.columns) {\n\n\t\t\tself.table.modules.persistence.initializeColumn(self);\n\t\t}\n\n\t\t//update header tooltip on mouse enter\n\n\t\tself.element.addEventListener(\"mouseenter\", function (e) {\n\n\t\t\tself.setTooltip();\n\t\t});\n\t};\n\n\tColumn.prototype._bindEvents = function () {\n\n\t\tvar self = this,\n\t\t    def = self.definition,\n\t\t    dblTap,\n\t\t    tapHold,\n\t\t    tap;\n\n\t\t//setup header click event bindings\n\n\t\tif (typeof def.headerClick == \"function\") {\n\n\t\t\tself.element.addEventListener(\"click\", function (e) {\n\t\t\t\tdef.headerClick(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (typeof def.headerDblClick == \"function\") {\n\n\t\t\tself.element.addEventListener(\"dblclick\", function (e) {\n\t\t\t\tdef.headerDblClick(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (typeof def.headerContext == \"function\") {\n\n\t\t\tself.element.addEventListener(\"contextmenu\", function (e) {\n\t\t\t\tdef.headerContext(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\t//setup header tap event bindings\n\n\t\tif (typeof def.headerTap == \"function\") {\n\n\t\t\ttap = false;\n\n\t\t\tself.element.addEventListener(\"touchstart\", function (e) {\n\n\t\t\t\ttap = true;\n\t\t\t}, { passive: true });\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tif (tap) {\n\n\t\t\t\t\tdef.headerTap(e, self.getComponent());\n\t\t\t\t}\n\n\t\t\t\ttap = false;\n\t\t\t});\n\t\t}\n\n\t\tif (typeof def.headerDblTap == \"function\") {\n\n\t\t\tdblTap = null;\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tif (dblTap) {\n\n\t\t\t\t\tclearTimeout(dblTap);\n\n\t\t\t\t\tdblTap = null;\n\n\t\t\t\t\tdef.headerDblTap(e, self.getComponent());\n\t\t\t\t} else {\n\n\t\t\t\t\tdblTap = setTimeout(function () {\n\n\t\t\t\t\t\tclearTimeout(dblTap);\n\n\t\t\t\t\t\tdblTap = null;\n\t\t\t\t\t}, 300);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (typeof def.headerTapHold == \"function\") {\n\n\t\t\ttapHold = null;\n\n\t\t\tself.element.addEventListener(\"touchstart\", function (e) {\n\n\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\ttapHold = setTimeout(function () {\n\n\t\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\t\ttapHold = null;\n\n\t\t\t\t\ttap = false;\n\n\t\t\t\t\tdef.headerTapHold(e, self.getComponent());\n\t\t\t\t}, 1000);\n\t\t\t}, { passive: true });\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\ttapHold = null;\n\t\t\t});\n\t\t}\n\n\t\t//store column cell click event bindings\n\n\t\tif (typeof def.cellClick == \"function\") {\n\n\t\t\tself.cellEvents.cellClick = def.cellClick;\n\t\t}\n\n\t\tif (typeof def.cellDblClick == \"function\") {\n\n\t\t\tself.cellEvents.cellDblClick = def.cellDblClick;\n\t\t}\n\n\t\tif (typeof def.cellContext == \"function\") {\n\n\t\t\tself.cellEvents.cellContext = def.cellContext;\n\t\t}\n\n\t\t//store column mouse event bindings\n\n\t\tif (typeof def.cellMouseEnter == \"function\") {\n\n\t\t\tself.cellEvents.cellMouseEnter = def.cellMouseEnter;\n\t\t}\n\n\t\tif (typeof def.cellMouseLeave == \"function\") {\n\n\t\t\tself.cellEvents.cellMouseLeave = def.cellMouseLeave;\n\t\t}\n\n\t\tif (typeof def.cellMouseOver == \"function\") {\n\n\t\t\tself.cellEvents.cellMouseOver = def.cellMouseOver;\n\t\t}\n\n\t\tif (typeof def.cellMouseOut == \"function\") {\n\n\t\t\tself.cellEvents.cellMouseOut = def.cellMouseOut;\n\t\t}\n\n\t\tif (typeof def.cellMouseMove == \"function\") {\n\n\t\t\tself.cellEvents.cellMouseMove = def.cellMouseMove;\n\t\t}\n\n\t\t//setup column cell tap event bindings\n\n\t\tif (typeof def.cellTap == \"function\") {\n\n\t\t\tself.cellEvents.cellTap = def.cellTap;\n\t\t}\n\n\t\tif (typeof def.cellDblTap == \"function\") {\n\n\t\t\tself.cellEvents.cellDblTap = def.cellDblTap;\n\t\t}\n\n\t\tif (typeof def.cellTapHold == \"function\") {\n\n\t\t\tself.cellEvents.cellTapHold = def.cellTapHold;\n\t\t}\n\n\t\t//setup column cell edit callbacks\n\n\t\tif (typeof def.cellEdited == \"function\") {\n\n\t\t\tself.cellEvents.cellEdited = def.cellEdited;\n\t\t}\n\n\t\tif (typeof def.cellEditing == \"function\") {\n\n\t\t\tself.cellEvents.cellEditing = def.cellEditing;\n\t\t}\n\n\t\tif (typeof def.cellEditCancelled == \"function\") {\n\n\t\t\tself.cellEvents.cellEditCancelled = def.cellEditCancelled;\n\t\t}\n\t};\n\n\t//build header element for header\n\n\tColumn.prototype._buildColumnHeader = function () {\n\n\t\tvar self = this,\n\t\t    def = self.definition,\n\t\t    table = self.table,\n\t\t    sortable;\n\n\t\t//set column sorter\n\n\t\tif (table.modExists(\"sort\")) {\n\n\t\t\ttable.modules.sort.initializeColumn(self, self.contentElement);\n\t\t}\n\n\t\t//set column header context menu\n\n\t\tif ((def.headerContextMenu || def.headerMenu) && table.modExists(\"menu\")) {\n\n\t\t\ttable.modules.menu.initializeColumnHeader(self);\n\t\t}\n\n\t\t//set column formatter\n\n\t\tif (table.modExists(\"format\")) {\n\n\t\t\ttable.modules.format.initializeColumn(self);\n\t\t}\n\n\t\t//set column editor\n\n\t\tif (typeof def.editor != \"undefined\" && table.modExists(\"edit\")) {\n\n\t\t\ttable.modules.edit.initializeColumn(self);\n\t\t}\n\n\t\t//set colum validator\n\n\t\tif (typeof def.validator != \"undefined\" && table.modExists(\"validate\")) {\n\n\t\t\ttable.modules.validate.initializeColumn(self);\n\t\t}\n\n\t\t//set column mutator\n\n\t\tif (table.modExists(\"mutator\")) {\n\n\t\t\ttable.modules.mutator.initializeColumn(self);\n\t\t}\n\n\t\t//set column accessor\n\n\t\tif (table.modExists(\"accessor\")) {\n\n\t\t\ttable.modules.accessor.initializeColumn(self);\n\t\t}\n\n\t\t//set respoviveLayout\n\n\t\tif (_typeof(table.options.responsiveLayout) && table.modExists(\"responsiveLayout\")) {\n\n\t\t\ttable.modules.responsiveLayout.initializeColumn(self);\n\t\t}\n\n\t\t//set column visibility\n\n\t\tif (typeof def.visible != \"undefined\") {\n\n\t\t\tif (def.visible) {\n\n\t\t\t\tself.show(true);\n\t\t\t} else {\n\n\t\t\t\tself.hide(true);\n\t\t\t}\n\t\t}\n\n\t\t//asign additional css classes to column header\n\n\t\tif (def.cssClass) {\n\n\t\t\tvar classeNames = def.cssClass.split(\" \");\n\n\t\t\tclasseNames.forEach(function (className) {\n\n\t\t\t\tself.element.classList.add(className);\n\t\t\t});\n\t\t}\n\n\t\tif (def.field) {\n\n\t\t\tthis.element.setAttribute(\"tabulator-field\", def.field);\n\t\t}\n\n\t\t//set min width if present\n\n\t\tself.setMinWidth(typeof def.minWidth == \"undefined\" ? self.table.options.columnMinWidth : parseInt(def.minWidth));\n\n\t\tself.reinitializeWidth();\n\n\t\t//set tooltip if present\n\n\t\tself.tooltip = self.definition.tooltip || self.definition.tooltip === false ? self.definition.tooltip : self.table.options.tooltips;\n\n\t\t//set orizontal text alignment\n\n\t\tself.hozAlign = typeof self.definition.hozAlign == \"undefined\" ? self.table.options.cellHozAlign : self.definition.hozAlign;\n\n\t\tself.vertAlign = typeof self.definition.vertAlign == \"undefined\" ? self.table.options.cellVertAlign : self.definition.vertAlign;\n\t};\n\n\tColumn.prototype._buildColumnHeaderContent = function () {\n\n\t\tvar def = this.definition,\n\t\t    table = this.table;\n\n\t\tvar contentElement = document.createElement(\"div\");\n\n\t\tcontentElement.classList.add(\"tabulator-col-content\");\n\n\t\tthis.titleElement = this._buildColumnHeaderTitle();\n\n\t\tcontentElement.appendChild(this.titleElement);\n\n\t\treturn contentElement;\n\t};\n\n\t//build title element of column\n\n\tColumn.prototype._buildColumnHeaderTitle = function () {\n\n\t\tvar self = this,\n\t\t    def = self.definition,\n\t\t    table = self.table,\n\t\t    title;\n\n\t\tvar titleHolderElement = document.createElement(\"div\");\n\n\t\ttitleHolderElement.classList.add(\"tabulator-col-title\");\n\n\t\tif (def.editableTitle) {\n\n\t\t\tvar titleElement = document.createElement(\"input\");\n\n\t\t\ttitleElement.classList.add(\"tabulator-title-editor\");\n\n\t\t\ttitleElement.addEventListener(\"click\", function (e) {\n\n\t\t\t\te.stopPropagation();\n\n\t\t\t\ttitleElement.focus();\n\t\t\t});\n\n\t\t\ttitleElement.addEventListener(\"change\", function () {\n\n\t\t\t\tdef.title = titleElement.value;\n\n\t\t\t\ttable.options.columnTitleChanged.call(self.table, self.getComponent());\n\t\t\t});\n\n\t\t\ttitleHolderElement.appendChild(titleElement);\n\n\t\t\tif (def.field) {\n\n\t\t\t\ttable.modules.localize.bind(\"columns|\" + def.field, function (text) {\n\n\t\t\t\t\ttitleElement.value = text || def.title || \"&nbsp;\";\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\ttitleElement.value = def.title || \"&nbsp;\";\n\t\t\t}\n\t\t} else {\n\n\t\t\tif (def.field) {\n\n\t\t\t\ttable.modules.localize.bind(\"columns|\" + def.field, function (text) {\n\n\t\t\t\t\tself._formatColumnHeaderTitle(titleHolderElement, text || def.title || \"&nbsp;\");\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tself._formatColumnHeaderTitle(titleHolderElement, def.title || \"&nbsp;\");\n\t\t\t}\n\t\t}\n\n\t\treturn titleHolderElement;\n\t};\n\n\tColumn.prototype._formatColumnHeaderTitle = function (el, title) {\n\t\tvar _this5 = this;\n\n\t\tvar formatter, contents, params, mockCell, onRendered;\n\n\t\tif (this.definition.titleFormatter && this.table.modExists(\"format\")) {\n\n\t\t\tformatter = this.table.modules.format.getFormatter(this.definition.titleFormatter);\n\n\t\t\tonRendered = function onRendered(callback) {\n\n\t\t\t\t_this5.titleFormatterRendered = callback;\n\t\t\t};\n\n\t\t\tmockCell = {\n\n\t\t\t\tgetValue: function getValue() {\n\n\t\t\t\t\treturn title;\n\t\t\t\t},\n\n\t\t\t\tgetElement: function getElement() {\n\n\t\t\t\t\treturn el;\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tparams = this.definition.titleFormatterParams || {};\n\n\t\t\tparams = typeof params === \"function\" ? params() : params;\n\n\t\t\tcontents = formatter.call(this.table.modules.format, mockCell, params, onRendered);\n\n\t\t\tswitch (typeof contents === 'undefined' ? 'undefined' : _typeof(contents)) {\n\n\t\t\t\tcase \"object\":\n\n\t\t\t\t\tif (contents instanceof Node) {\n\n\t\t\t\t\t\tel.appendChild(contents);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tel.innerHTML = \"\";\n\n\t\t\t\t\t\tconsole.warn(\"Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:\", contents);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"undefined\":\n\n\t\t\t\tcase \"null\":\n\n\t\t\t\t\tel.innerHTML = \"\";\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tel.innerHTML = contents;\n\n\t\t\t}\n\t\t} else {\n\n\t\t\tel.innerHTML = title;\n\t\t}\n\t};\n\n\t//build header element for column group\n\n\tColumn.prototype._buildGroupHeader = function () {\n\t\tvar _this6 = this;\n\n\t\tthis.element.classList.add(\"tabulator-col-group\");\n\n\t\tthis.element.setAttribute(\"role\", \"columngroup\");\n\n\t\tthis.element.setAttribute(\"aria-title\", this.definition.title);\n\n\t\t//asign additional css classes to column header\n\n\t\tif (this.definition.cssClass) {\n\n\t\t\tvar classeNames = this.definition.cssClass.split(\" \");\n\n\t\t\tclasseNames.forEach(function (className) {\n\n\t\t\t\t_this6.element.classList.add(className);\n\t\t\t});\n\t\t}\n\n\t\t//set column header context menu\n\n\t\tif ((this.definition.headerContextMenu || this.definition.headerMenu) && this.table.modExists(\"menu\")) {\n\n\t\t\tthis.table.modules.menu.initializeColumnHeader(this);\n\t\t}\n\n\t\tthis.element.appendChild(this.groupElement);\n\t};\n\n\t//flat field lookup\n\n\tColumn.prototype._getFlatData = function (data) {\n\n\t\treturn data[this.field];\n\t};\n\n\t//nested field lookup\n\n\tColumn.prototype._getNestedData = function (data) {\n\n\t\tvar dataObj = data,\n\t\t    structure = this.fieldStructure,\n\t\t    length = structure.length,\n\t\t    output;\n\n\t\tfor (var _i = 0; _i < length; _i++) {\n\n\t\t\tdataObj = dataObj[structure[_i]];\n\n\t\t\toutput = dataObj;\n\n\t\t\tif (!dataObj) {\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t};\n\n\t//flat field set\n\n\tColumn.prototype._setFlatData = function (data, value) {\n\n\t\tif (this.field) {\n\n\t\t\tdata[this.field] = value;\n\t\t}\n\t};\n\n\t//nested field set\n\n\tColumn.prototype._setNestedData = function (data, value) {\n\n\t\tvar dataObj = data,\n\t\t    structure = this.fieldStructure,\n\t\t    length = structure.length;\n\n\t\tfor (var _i2 = 0; _i2 < length; _i2++) {\n\n\t\t\tif (_i2 == length - 1) {\n\n\t\t\t\tdataObj[structure[_i2]] = value;\n\t\t\t} else {\n\n\t\t\t\tif (!dataObj[structure[_i2]]) {\n\n\t\t\t\t\tif (typeof value !== \"undefined\") {\n\n\t\t\t\t\t\tdataObj[structure[_i2]] = {};\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdataObj = dataObj[structure[_i2]];\n\t\t\t}\n\t\t}\n\t};\n\n\t//attach column to this group\n\n\tColumn.prototype.attachColumn = function (column) {\n\n\t\tvar self = this;\n\n\t\tif (self.groupElement) {\n\n\t\t\tself.columns.push(column);\n\n\t\t\tself.groupElement.appendChild(column.getElement());\n\t\t} else {\n\n\t\t\tconsole.warn(\"Column Warning - Column being attached to another column instead of column group\");\n\t\t}\n\t};\n\n\t//vertically align header in column\n\n\tColumn.prototype.verticalAlign = function (alignment, height) {\n\n\t\t//calculate height of column header and group holder element\n\n\t\tvar parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : height || this.parent.getHeadersElement().clientHeight;\n\n\t\t// var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : this.parent.getHeadersElement().clientHeight;\n\n\n\t\tthis.element.style.height = parentHeight + \"px\";\n\n\t\tif (this.isGroup) {\n\n\t\t\tthis.groupElement.style.minHeight = parentHeight - this.contentElement.offsetHeight + \"px\";\n\t\t}\n\n\t\t//vertically align cell contents\n\n\t\tif (!this.isGroup && alignment !== \"top\") {\n\n\t\t\tif (alignment === \"bottom\") {\n\n\t\t\t\tthis.element.style.paddingTop = this.element.clientHeight - this.contentElement.offsetHeight + \"px\";\n\t\t\t} else {\n\n\t\t\t\tthis.element.style.paddingTop = (this.element.clientHeight - this.contentElement.offsetHeight) / 2 + \"px\";\n\t\t\t}\n\t\t}\n\n\t\tthis.columns.forEach(function (column) {\n\n\t\t\tcolumn.verticalAlign(alignment);\n\t\t});\n\t};\n\n\t//clear vertical alignmenet\n\n\tColumn.prototype.clearVerticalAlign = function () {\n\n\t\tthis.element.style.paddingTop = \"\";\n\n\t\tthis.element.style.height = \"\";\n\n\t\tthis.element.style.minHeight = \"\";\n\n\t\tthis.groupElement.style.minHeight = \"\";\n\n\t\tthis.columns.forEach(function (column) {\n\n\t\t\tcolumn.clearVerticalAlign();\n\t\t});\n\t};\n\n\tColumn.prototype.bindModuleColumns = function () {\n\n\t\t//check if rownum formatter is being used on a column\n\n\t\tif (this.definition.formatter == \"rownum\") {\n\n\t\t\tthis.table.rowManager.rowNumColumn = this;\n\t\t}\n\t};\n\n\t//// Retreive Column Information ////\n\n\n\t//return column header element\n\n\tColumn.prototype.getElement = function () {\n\n\t\treturn this.element;\n\t};\n\n\t//return colunm group element\n\n\tColumn.prototype.getGroupElement = function () {\n\n\t\treturn this.groupElement;\n\t};\n\n\t//return field name\n\n\tColumn.prototype.getField = function () {\n\n\t\treturn this.field;\n\t};\n\n\t//return the first column in a group\n\n\tColumn.prototype.getFirstColumn = function () {\n\n\t\tif (!this.isGroup) {\n\n\t\t\treturn this;\n\t\t} else {\n\n\t\t\tif (this.columns.length) {\n\n\t\t\t\treturn this.columns[0].getFirstColumn();\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\n\t//return the last column in a group\n\n\tColumn.prototype.getLastColumn = function () {\n\n\t\tif (!this.isGroup) {\n\n\t\t\treturn this;\n\t\t} else {\n\n\t\t\tif (this.columns.length) {\n\n\t\t\t\treturn this.columns[this.columns.length - 1].getLastColumn();\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\n\t//return all columns in a group\n\n\tColumn.prototype.getColumns = function () {\n\n\t\treturn this.columns;\n\t};\n\n\t//return all columns in a group\n\n\tColumn.prototype.getCells = function () {\n\n\t\treturn this.cells;\n\t};\n\n\t//retreive the top column in a group of columns\n\n\tColumn.prototype.getTopColumn = function () {\n\n\t\tif (this.parent.isGroup) {\n\n\t\t\treturn this.parent.getTopColumn();\n\t\t} else {\n\n\t\t\treturn this;\n\t\t}\n\t};\n\n\t//return column definition object\n\n\tColumn.prototype.getDefinition = function (updateBranches) {\n\n\t\tvar colDefs = [];\n\n\t\tif (this.isGroup && updateBranches) {\n\n\t\t\tthis.columns.forEach(function (column) {\n\n\t\t\t\tcolDefs.push(column.getDefinition(true));\n\t\t\t});\n\n\t\t\tthis.definition.columns = colDefs;\n\t\t}\n\n\t\treturn this.definition;\n\t};\n\n\t//////////////////// Actions ////////////////////\n\n\n\tColumn.prototype.checkColumnVisibility = function () {\n\n\t\tvar visible = false;\n\n\t\tthis.columns.forEach(function (column) {\n\n\t\t\tif (column.visible) {\n\n\t\t\t\tvisible = true;\n\t\t\t}\n\t\t});\n\n\t\tif (visible) {\n\n\t\t\tthis.show();\n\n\t\t\tthis.parent.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), false);\n\t\t} else {\n\n\t\t\tthis.hide();\n\t\t}\n\t};\n\n\t//show column\n\n\tColumn.prototype.show = function (silent, responsiveToggle) {\n\n\t\tif (!this.visible) {\n\n\t\t\tthis.visible = true;\n\n\t\t\tthis.element.style.display = \"\";\n\n\t\t\tif (this.parent.isGroup) {\n\n\t\t\t\tthis.parent.checkColumnVisibility();\n\t\t\t}\n\n\t\t\tthis.cells.forEach(function (cell) {\n\n\t\t\t\tcell.show();\n\t\t\t});\n\n\t\t\tif (!this.isGroup && this.width === null) {\n\n\t\t\t\tthis.reinitializeWidth();\n\t\t\t}\n\n\t\t\tthis.table.columnManager._verticalAlignHeaders();\n\n\t\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n\n\t\t\t\tthis.table.modules.persistence.save(\"columns\");\n\t\t\t}\n\n\t\t\tif (!responsiveToggle && this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible);\n\t\t\t}\n\n\t\t\tif (!silent) {\n\n\t\t\t\tthis.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), true);\n\t\t\t}\n\n\t\t\tif (this.parent.isGroup) {\n\n\t\t\t\tthis.parent.matchChildWidths();\n\t\t\t}\n\t\t}\n\t};\n\n\t//hide column\n\n\tColumn.prototype.hide = function (silent, responsiveToggle) {\n\n\t\tif (this.visible) {\n\n\t\t\tthis.visible = false;\n\n\t\t\tthis.element.style.display = \"none\";\n\n\t\t\tthis.table.columnManager._verticalAlignHeaders();\n\n\t\t\tif (this.parent.isGroup) {\n\n\t\t\t\tthis.parent.checkColumnVisibility();\n\t\t\t}\n\n\t\t\tthis.cells.forEach(function (cell) {\n\n\t\t\t\tcell.hide();\n\t\t\t});\n\n\t\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.columns) {\n\n\t\t\t\tthis.table.modules.persistence.save(\"columns\");\n\t\t\t}\n\n\t\t\tif (!responsiveToggle && this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible);\n\t\t\t}\n\n\t\t\tif (!silent) {\n\n\t\t\t\tthis.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), false);\n\t\t\t}\n\n\t\t\tif (this.parent.isGroup) {\n\n\t\t\t\tthis.parent.matchChildWidths();\n\t\t\t}\n\t\t}\n\t};\n\n\tColumn.prototype.matchChildWidths = function () {\n\n\t\tvar childWidth = 0;\n\n\t\tif (this.contentElement && this.columns.length) {\n\n\t\t\tthis.columns.forEach(function (column) {\n\n\t\t\t\tif (column.visible) {\n\n\t\t\t\t\tchildWidth += column.getWidth();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.contentElement.style.maxWidth = childWidth - 1 + \"px\";\n\n\t\t\tif (this.parent.isGroup) {\n\n\t\t\t\tthis.parent.matchChildWidths();\n\t\t\t}\n\t\t}\n\t};\n\n\tColumn.prototype.setWidth = function (width) {\n\n\t\tthis.widthFixed = true;\n\n\t\tthis.setWidthActual(width);\n\t};\n\n\tColumn.prototype.setWidthActual = function (width) {\n\n\t\tif (isNaN(width)) {\n\n\t\t\twidth = Math.floor(this.table.element.clientWidth / 100 * parseInt(width));\n\t\t}\n\n\t\twidth = Math.max(this.minWidth, width);\n\n\t\tthis.width = width;\n\n\t\tthis.widthStyled = width ? width + \"px\" : \"\";\n\n\t\tthis.element.style.width = this.widthStyled;\n\n\t\tif (!this.isGroup) {\n\n\t\t\tthis.cells.forEach(function (cell) {\n\n\t\t\t\tcell.setWidth();\n\t\t\t});\n\t\t}\n\n\t\tif (this.parent.isGroup) {\n\n\t\t\tthis.parent.matchChildWidths();\n\t\t}\n\n\t\t//set resizable handles\n\n\t\tif (this.table.modExists(\"frozenColumns\")) {\n\n\t\t\tthis.table.modules.frozenColumns.layout();\n\t\t}\n\t};\n\n\tColumn.prototype.checkCellHeights = function () {\n\n\t\tvar rows = [];\n\n\t\tthis.cells.forEach(function (cell) {\n\n\t\t\tif (cell.row.heightInitialized) {\n\n\t\t\t\tif (cell.row.getElement().offsetParent !== null) {\n\n\t\t\t\t\trows.push(cell.row);\n\n\t\t\t\t\tcell.row.clearCellHeight();\n\t\t\t\t} else {\n\n\t\t\t\t\tcell.row.heightInitialized = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\trows.forEach(function (row) {\n\n\t\t\trow.calcHeight();\n\t\t});\n\n\t\trows.forEach(function (row) {\n\n\t\t\trow.setCellHeight();\n\t\t});\n\t};\n\n\tColumn.prototype.getWidth = function () {\n\n\t\tvar width = 0;\n\n\t\tif (this.isGroup) {\n\n\t\t\tthis.columns.forEach(function (column) {\n\n\t\t\t\tif (column.visible) {\n\n\t\t\t\t\twidth += column.getWidth();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\n\t\t\twidth = this.width;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tColumn.prototype.getHeight = function () {\n\n\t\treturn this.element.offsetHeight;\n\t};\n\n\tColumn.prototype.setMinWidth = function (minWidth) {\n\n\t\tthis.minWidth = minWidth;\n\n\t\tthis.minWidthStyled = minWidth ? minWidth + \"px\" : \"\";\n\n\t\tthis.element.style.minWidth = this.minWidthStyled;\n\n\t\tthis.cells.forEach(function (cell) {\n\n\t\t\tcell.setMinWidth();\n\t\t});\n\t};\n\n\tColumn.prototype.delete = function () {\n\t\tvar _this7 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (_this7.isGroup) {\n\n\t\t\t\t_this7.columns.forEach(function (column) {\n\n\t\t\t\t\tcolumn.delete();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//cancel edit if column is currently being edited\n\n\t\t\tif (_this7.table.modExists(\"edit\")) {\n\n\t\t\t\tif (_this7.table.modules.edit.currentCell.column === _this7) {\n\n\t\t\t\t\t_this7.table.modules.edit.cancelEdit();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar cellCount = _this7.cells.length;\n\n\t\t\tfor (var _i3 = 0; _i3 < cellCount; _i3++) {\n\n\t\t\t\t_this7.cells[0].delete();\n\t\t\t}\n\n\t\t\t_this7.element.parentNode.removeChild(_this7.element);\n\n\t\t\t_this7.table.columnManager.deregisterColumn(_this7);\n\n\t\t\tresolve();\n\t\t});\n\t};\n\n\tColumn.prototype.columnRendered = function () {\n\n\t\tif (this.titleFormatterRendered) {\n\n\t\t\tthis.titleFormatterRendered();\n\t\t}\n\t};\n\n\tColumn.prototype.validate = function () {\n\n\t\tvar invalid = [];\n\n\t\tthis.cells.forEach(function (cell) {\n\n\t\t\tif (!cell.validate()) {\n\n\t\t\t\tinvalid.push(cell.getComponent());\n\t\t\t}\n\t\t});\n\n\t\treturn invalid.length ? invalid : true;\n\t};\n\n\t//////////////// Cell Management /////////////////\n\n\n\t//generate cell for this column\n\n\tColumn.prototype.generateCell = function (row) {\n\n\t\tvar self = this;\n\n\t\tvar cell = new Cell(self, row);\n\n\t\tthis.cells.push(cell);\n\n\t\treturn cell;\n\t};\n\n\tColumn.prototype.nextColumn = function () {\n\n\t\tvar index = this.table.columnManager.findColumnIndex(this);\n\n\t\treturn index > -1 ? this._nextVisibleColumn(index + 1) : false;\n\t};\n\n\tColumn.prototype._nextVisibleColumn = function (index) {\n\n\t\tvar column = this.table.columnManager.getColumnByIndex(index);\n\n\t\treturn !column || column.visible ? column : this._nextVisibleColumn(index + 1);\n\t};\n\n\tColumn.prototype.prevColumn = function () {\n\n\t\tvar index = this.table.columnManager.findColumnIndex(this);\n\n\t\treturn index > -1 ? this._prevVisibleColumn(index - 1) : false;\n\t};\n\n\tColumn.prototype._prevVisibleColumn = function (index) {\n\n\t\tvar column = this.table.columnManager.getColumnByIndex(index);\n\n\t\treturn !column || column.visible ? column : this._prevVisibleColumn(index - 1);\n\t};\n\n\tColumn.prototype.reinitializeWidth = function (force) {\n\n\t\tthis.widthFixed = false;\n\n\t\t//set width if present\n\n\t\tif (typeof this.definition.width !== \"undefined\" && !force) {\n\n\t\t\tthis.setWidth(this.definition.width);\n\t\t}\n\n\t\t//hide header filters to prevent them altering column width\n\n\t\tif (this.table.modExists(\"filter\")) {\n\n\t\t\tthis.table.modules.filter.hideHeaderFilterElements();\n\t\t}\n\n\t\tthis.fitToData();\n\n\t\t//show header filters again after layout is complete\n\n\t\tif (this.table.modExists(\"filter\")) {\n\n\t\t\tthis.table.modules.filter.showHeaderFilterElements();\n\t\t}\n\t};\n\n\t//set column width to maximum cell width\n\n\tColumn.prototype.fitToData = function () {\n\n\t\tvar self = this;\n\n\t\tif (!this.widthFixed) {\n\n\t\t\tthis.element.style.width = \"\";\n\n\t\t\tself.cells.forEach(function (cell) {\n\n\t\t\t\tcell.clearWidth();\n\t\t\t});\n\t\t}\n\n\t\tvar maxWidth = this.element.offsetWidth;\n\n\t\tif (!self.width || !this.widthFixed) {\n\n\t\t\tself.cells.forEach(function (cell) {\n\n\t\t\t\tvar width = cell.getWidth();\n\n\t\t\t\tif (width > maxWidth) {\n\n\t\t\t\t\tmaxWidth = width;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (maxWidth) {\n\n\t\t\t\tself.setWidthActual(maxWidth + 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tColumn.prototype.updateDefinition = function (updates) {\n\t\tvar _this8 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar definition;\n\n\t\t\tif (!_this8.isGroup) {\n\n\t\t\t\tdefinition = Object.assign({}, _this8.getDefinition());\n\n\t\t\t\tdefinition = Object.assign(definition, updates);\n\n\t\t\t\t_this8.table.columnManager.addColumn(definition, false, _this8).then(function (column) {\n\n\t\t\t\t\tif (definition.field == _this8.field) {\n\n\t\t\t\t\t\t_this8.field = false; //cleair field name to prevent deletion of duplicate column from arrays\n\t\t\t\t\t}\n\n\t\t\t\t\t_this8.delete().then(function () {\n\n\t\t\t\t\t\tresolve(column.getComponent());\n\t\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t});\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Column Update Error - The updateDefintion function is only available on columns, not column groups\");\n\n\t\t\t\treject(\"Column Update Error - The updateDefintion function is only available on columns, not column groups\");\n\t\t\t}\n\t\t});\n\t};\n\n\tColumn.prototype.deleteCell = function (cell) {\n\n\t\tvar index = this.cells.indexOf(cell);\n\n\t\tif (index > -1) {\n\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t};\n\n\tColumn.prototype.defaultOptionList = [\"title\", \"field\", \"columns\", \"visible\", \"align\", \"hozAlign\", \"vertAlign\", \"width\", \"minWidth\", \"widthGrow\", \"widthShrink\", \"resizable\", \"frozen\", \"responsive\", \"tooltip\", \"cssClass\", \"rowHandle\", \"hideInHtml\", \"print\", \"htmlOutput\", \"sorter\", \"sorterParams\", \"formatter\", \"formatterParams\", \"variableHeight\", \"editable\", \"editor\", \"editorParams\", \"validator\", \"mutator\", \"mutatorParams\", \"mutatorData\", \"mutatorDataParams\", \"mutatorEdit\", \"mutatorEditParams\", \"mutatorClipboard\", \"mutatorClipboardParams\", \"accessor\", \"accessorParams\", \"accessorData\", \"accessorDataParams\", \"accessorDownload\", \"accessorDownloadParams\", \"accessorClipboard\", \"accessorClipboardParams\", \"accessorPrint\", \"accessorPrintParams\", \"accessorHtmlOutput\", \"accessorHtmlOutputParams\", \"clipboard\", \"download\", \"downloadTitle\", \"topCalc\", \"topCalcParams\", \"topCalcFormatter\", \"topCalcFormatterParams\", \"bottomCalc\", \"bottomCalcParams\", \"bottomCalcFormatter\", \"bottomCalcFormatterParams\", \"cellClick\", \"cellDblClick\", \"cellContext\", \"cellTap\", \"cellDblTap\", \"cellTapHold\", \"cellMouseEnter\", \"cellMouseLeave\", \"cellMouseOver\", \"cellMouseOut\", \"cellMouseMove\", \"cellEditing\", \"cellEdited\", \"cellEditCancelled\", \"headerSort\", \"headerSortStartingDir\", \"headerSortTristate\", \"headerClick\", \"headerDblClick\", \"headerContext\", \"headerTap\", \"headerDblTap\", \"headerTapHold\", \"headerTooltip\", \"headerVertical\", \"editableTitle\", \"titleFormatter\", \"titleFormatterParams\", \"headerFilter\", \"headerFilterPlaceholder\", \"headerFilterParams\", \"headerFilterEmptyCheck\", \"headerFilterFunc\", \"headerFilterFuncParams\", \"headerFilterLiveFilter\", \"print\", \"headerContextMenu\", \"headerMenu\", \"contextMenu\", \"formatterPrint\", \"formatterPrintParams\", \"formatterClipboard\", \"formatterClipboardParams\", \"formatterHtmlOutput\", \"formatterHtmlOutputParams\", \"titlePrint\", \"titleClipboard\", \"titleHtmlOutput\", \"titleDownload\"];\n\n\t//////////////// Event Bindings /////////////////\n\n\n\t//////////////// Object Generation /////////////////\n\n\tColumn.prototype.getComponent = function () {\n\n\t\tif (!this.component) {\n\n\t\t\tthis.component = new ColumnComponent(this);\n\t\t}\n\n\t\treturn this.component;\n\t};\n\n\tvar RowManager = function RowManager(table) {\n\n\t\tthis.table = table;\n\n\t\tthis.element = this.createHolderElement(); //containing element\n\n\t\tthis.tableElement = this.createTableElement(); //table element\n\n\t\tthis.heightFixer = this.createTableElement(); //table element\n\n\t\tthis.columnManager = null; //hold column manager object\n\n\t\tthis.height = 0; //hold height of table element\n\n\n\t\tthis.firstRender = false; //handle first render\n\n\t\tthis.renderMode = \"virtual\"; //current rendering mode\n\n\t\tthis.fixedHeight = false; //current rendering mode\n\n\n\t\tthis.rows = []; //hold row data objects\n\n\t\tthis.activeRows = []; //rows currently available to on display in the table\n\n\t\tthis.activeRowsCount = 0; //count of active rows\n\n\n\t\tthis.displayRows = []; //rows currently on display in the table\n\n\t\tthis.displayRowsCount = 0; //count of display rows\n\n\n\t\tthis.scrollTop = 0;\n\n\t\tthis.scrollLeft = 0;\n\n\t\tthis.vDomRowHeight = 20; //approximation of row heights for padding\n\n\n\t\tthis.vDomTop = 0; //hold position for first rendered row in the virtual DOM\n\n\t\tthis.vDomBottom = 0; //hold possition for last rendered row in the virtual DOM\n\n\n\t\tthis.vDomScrollPosTop = 0; //last scroll position of the vDom top;\n\n\t\tthis.vDomScrollPosBottom = 0; //last scroll position of the vDom bottom;\n\n\n\t\tthis.vDomTopPad = 0; //hold value of padding for top of virtual DOM\n\n\t\tthis.vDomBottomPad = 0; //hold value of padding for bottom of virtual DOM\n\n\n\t\tthis.vDomMaxRenderChain = 90; //the maximum number of dom elements that can be rendered in 1 go\n\n\n\t\tthis.vDomWindowBuffer = 0; //window row buffer before removing elements, to smooth scrolling\n\n\n\t\tthis.vDomWindowMinTotalRows = 20; //minimum number of rows to be generated in virtual dom (prevent buffering issues on tables with tall rows)\n\n\t\tthis.vDomWindowMinMarginRows = 5; //minimum number of rows to be generated in virtual dom margin\n\n\n\t\tthis.vDomTopNewRows = []; //rows to normalize after appending to optimize render speed\n\n\t\tthis.vDomBottomNewRows = []; //rows to normalize after appending to optimize render speed\n\n\n\t\tthis.rowNumColumn = false; //hold column component for row number column\n\n\n\t\tthis.redrawBlock = false; //prevent redraws to allow multiple data manipulations becore continuing\n\n\t\tthis.redrawBlockRestoreConfig = false; //store latest redraw function calls for when redraw is needed\n\n\t\tthis.redrawBlockRederInPosition = false; //store latest redraw function calls for when redraw is needed\n\t};\n\n\t//////////////// Setup Functions /////////////////\n\n\n\tRowManager.prototype.createHolderElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-tableHolder\");\n\n\t\tel.setAttribute(\"tabindex\", 0);\n\n\t\treturn el;\n\t};\n\n\tRowManager.prototype.createTableElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-table\");\n\n\t\treturn el;\n\t};\n\n\t//return containing element\n\n\tRowManager.prototype.getElement = function () {\n\n\t\treturn this.element;\n\t};\n\n\t//return table element\n\n\tRowManager.prototype.getTableElement = function () {\n\n\t\treturn this.tableElement;\n\t};\n\n\t//return position of row in table\n\n\tRowManager.prototype.getRowPosition = function (row, active) {\n\n\t\tif (active) {\n\n\t\t\treturn this.activeRows.indexOf(row);\n\t\t} else {\n\n\t\t\treturn this.rows.indexOf(row);\n\t\t}\n\t};\n\n\t//link to column manager\n\n\tRowManager.prototype.setColumnManager = function (manager) {\n\n\t\tthis.columnManager = manager;\n\t};\n\n\tRowManager.prototype.initialize = function () {\n\n\t\tvar self = this;\n\n\t\tself.setRenderMode();\n\n\t\t//initialize manager\n\n\t\tself.element.appendChild(self.tableElement);\n\n\t\tself.firstRender = true;\n\n\t\t//scroll header along with table body\n\n\t\tself.element.addEventListener(\"scroll\", function () {\n\n\t\t\tvar left = self.element.scrollLeft;\n\n\t\t\t//handle horizontal scrolling\n\n\t\t\tif (self.scrollLeft != left) {\n\n\t\t\t\tself.columnManager.scrollHorizontal(left);\n\n\t\t\t\tif (self.table.options.groupBy) {\n\n\t\t\t\t\tself.table.modules.groupRows.scrollHeaders(left);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.modExists(\"columnCalcs\")) {\n\n\t\t\t\t\tself.table.modules.columnCalcs.scrollHorizontal(left);\n\t\t\t\t}\n\n\t\t\t\tself.table.options.scrollHorizontal(left);\n\t\t\t}\n\n\t\t\tself.scrollLeft = left;\n\t\t});\n\n\t\t//handle virtual dom scrolling\n\n\t\tif (this.renderMode === \"virtual\") {\n\n\t\t\tself.element.addEventListener(\"scroll\", function () {\n\n\t\t\t\tvar top = self.element.scrollTop;\n\n\t\t\t\tvar dir = self.scrollTop > top;\n\n\t\t\t\t//handle verical scrolling\n\n\t\t\t\tif (self.scrollTop != top) {\n\n\t\t\t\t\tself.scrollTop = top;\n\n\t\t\t\t\tself.scrollVertical(dir);\n\n\t\t\t\t\tif (self.table.options.ajaxProgressiveLoad == \"scroll\") {\n\n\t\t\t\t\t\tself.table.modules.ajax.nextPage(self.element.scrollHeight - self.element.clientHeight - top);\n\t\t\t\t\t}\n\n\t\t\t\t\tself.table.options.scrollVertical(top);\n\t\t\t\t} else {\n\n\t\t\t\t\tself.scrollTop = top;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t////////////////// Row Manipulation //////////////////\n\n\n\tRowManager.prototype.findRow = function (subject) {\n\n\t\tvar self = this;\n\n\t\tif ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n\n\t\t\tif (subject instanceof Row) {\n\n\t\t\t\t//subject is row element\n\n\t\t\t\treturn subject;\n\t\t\t} else if (subject instanceof RowComponent) {\n\n\t\t\t\t//subject is public row component\n\n\t\t\t\treturn subject._getSelf() || false;\n\t\t\t} else if (typeof HTMLElement !== \"undefined\" && subject instanceof HTMLElement) {\n\n\t\t\t\t//subject is a HTML element of the row\n\n\t\t\t\tvar match = self.rows.find(function (row) {\n\n\t\t\t\t\treturn row.element === subject;\n\t\t\t\t});\n\n\t\t\t\treturn match || false;\n\t\t\t}\n\t\t} else if (typeof subject == \"undefined\" || subject === null) {\n\n\t\t\treturn false;\n\t\t} else {\n\n\t\t\t//subject should be treated as the index of the row\n\n\t\t\tvar _match = self.rows.find(function (row) {\n\n\t\t\t\treturn row.data[self.table.options.index] == subject;\n\t\t\t});\n\n\t\t\treturn _match || false;\n\t\t}\n\n\t\t//catch all for any other type of input\n\n\n\t\treturn false;\n\t};\n\n\tRowManager.prototype.getRowFromDataObject = function (data) {\n\n\t\tvar match = this.rows.find(function (row) {\n\n\t\t\treturn row.data === data;\n\t\t});\n\n\t\treturn match || false;\n\t};\n\n\tRowManager.prototype.getRowFromPosition = function (position, active) {\n\n\t\tif (active) {\n\n\t\t\treturn this.activeRows[position];\n\t\t} else {\n\n\t\t\treturn this.rows[position];\n\t\t}\n\t};\n\n\tRowManager.prototype.scrollToRow = function (row, position, ifVisible) {\n\t\tvar _this9 = this;\n\n\t\tvar rowIndex = this.getDisplayRows().indexOf(row),\n\t\t    rowEl = row.getElement(),\n\t\t    rowTop,\n\t\t    offset = 0;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (rowIndex > -1) {\n\n\t\t\t\tif (typeof position === \"undefined\") {\n\n\t\t\t\t\tposition = _this9.table.options.scrollToRowPosition;\n\t\t\t\t}\n\n\t\t\t\tif (typeof ifVisible === \"undefined\") {\n\n\t\t\t\t\tifVisible = _this9.table.options.scrollToRowIfVisible;\n\t\t\t\t}\n\n\t\t\t\tif (position === \"nearest\") {\n\n\t\t\t\t\tswitch (_this9.renderMode) {\n\n\t\t\t\t\t\tcase \"classic\":\n\n\t\t\t\t\t\t\trowTop = Tabulator.prototype.helpers.elOffset(rowEl).top;\n\n\t\t\t\t\t\t\tposition = Math.abs(_this9.element.scrollTop - rowTop) > Math.abs(_this9.element.scrollTop + _this9.element.clientHeight - rowTop) ? \"bottom\" : \"top\";\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"virtual\":\n\n\t\t\t\t\t\t\tposition = Math.abs(_this9.vDomTop - rowIndex) > Math.abs(_this9.vDomBottom - rowIndex) ? \"bottom\" : \"top\";\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//check row visibility\n\n\t\t\t\tif (!ifVisible) {\n\n\t\t\t\t\tif (Tabulator.prototype.helpers.elVisible(rowEl)) {\n\n\t\t\t\t\t\toffset = Tabulator.prototype.helpers.elOffset(rowEl).top - Tabulator.prototype.helpers.elOffset(_this9.element).top;\n\n\t\t\t\t\t\tif (offset > 0 && offset < _this9.element.clientHeight - rowEl.offsetHeight) {\n\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//scroll to row\n\n\t\t\t\tswitch (_this9.renderMode) {\n\n\t\t\t\t\tcase \"classic\":\n\n\t\t\t\t\t\t_this9.element.scrollTop = Tabulator.prototype.helpers.elOffset(rowEl).top - Tabulator.prototype.helpers.elOffset(_this9.element).top + _this9.element.scrollTop;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"virtual\":\n\n\t\t\t\t\t\t_this9._virtualRenderFill(rowIndex, true);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t//align to correct position\n\n\t\t\t\tswitch (position) {\n\n\t\t\t\t\tcase \"middle\":\n\n\t\t\t\t\tcase \"center\":\n\n\t\t\t\t\t\tif (_this9.element.scrollHeight - _this9.element.scrollTop == _this9.element.clientHeight) {\n\n\t\t\t\t\t\t\t_this9.element.scrollTop = _this9.element.scrollTop + (rowEl.offsetTop - _this9.element.scrollTop) - (_this9.element.scrollHeight - rowEl.offsetTop) / 2;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_this9.element.scrollTop = _this9.element.scrollTop - _this9.element.clientHeight / 2;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"bottom\":\n\n\t\t\t\t\t\tif (_this9.element.scrollHeight - _this9.element.scrollTop == _this9.element.clientHeight) {\n\n\t\t\t\t\t\t\t_this9.element.scrollTop = _this9.element.scrollTop - (_this9.element.scrollHeight - rowEl.offsetTop) + rowEl.offsetHeight;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_this9.element.scrollTop = _this9.element.scrollTop - _this9.element.clientHeight + rowEl.offsetHeight;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tresolve();\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Scroll Error - Row not visible\");\n\n\t\t\t\treject(\"Scroll Error - Row not visible\");\n\t\t\t}\n\t\t});\n\t};\n\n\t////////////////// Data Handling //////////////////\n\n\n\tRowManager.prototype.setData = function (data, renderInPosition, columnsChanged) {\n\t\tvar _this10 = this;\n\n\t\tvar self = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (renderInPosition && _this10.getDisplayRows().length) {\n\n\t\t\t\tif (self.table.options.pagination) {\n\n\t\t\t\t\tself._setDataActual(data, true);\n\t\t\t\t} else {\n\n\t\t\t\t\t_this10.reRenderInPosition(function () {\n\n\t\t\t\t\t\tself._setDataActual(data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (_this10.table.options.autoColumns && columnsChanged) {\n\n\t\t\t\t\t_this10.table.columnManager.generateColumnsFromRowData(data);\n\t\t\t\t}\n\n\t\t\t\t_this10.resetScroll();\n\n\t\t\t\t_this10._setDataActual(data);\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\t};\n\n\tRowManager.prototype._setDataActual = function (data, renderInPosition) {\n\n\t\tvar self = this;\n\n\t\tself.table.options.dataLoading.call(this.table, data);\n\n\t\tthis._wipeElements();\n\n\t\tif (this.table.options.history && this.table.modExists(\"history\")) {\n\n\t\t\tthis.table.modules.history.clear();\n\t\t}\n\n\t\tif (Array.isArray(data)) {\n\n\t\t\tif (this.table.modExists(\"selectRow\")) {\n\n\t\t\t\tthis.table.modules.selectRow.clearSelectionData();\n\t\t\t}\n\n\t\t\tif (this.table.options.reactiveData && this.table.modExists(\"reactiveData\", true)) {\n\n\t\t\t\tthis.table.modules.reactiveData.watchData(data);\n\t\t\t}\n\n\t\t\tdata.forEach(function (def, i) {\n\n\t\t\t\tif (def && (typeof def === 'undefined' ? 'undefined' : _typeof(def)) === \"object\") {\n\n\t\t\t\t\tvar row = new Row(def, self);\n\n\t\t\t\t\tself.rows.push(row);\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn(\"Data Loading Warning - Invalid row data detected and ignored, expecting object but received:\", def);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tself.refreshActiveData(false, false, renderInPosition);\n\n\t\t\tself.table.options.dataLoaded.call(this.table, data);\n\t\t} else {\n\n\t\t\tconsole.error(\"Data Loading Error - Unable to process data due to invalid data type \\nExpecting: array \\nReceived: \", typeof data === 'undefined' ? 'undefined' : _typeof(data), \"\\nData:     \", data);\n\t\t}\n\t};\n\n\tRowManager.prototype._wipeElements = function () {\n\n\t\tthis.rows.forEach(function (row) {\n\n\t\t\trow.wipe();\n\t\t});\n\n\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\n\t\t\tthis.table.modules.groupRows.wipe();\n\t\t}\n\n\t\tthis.rows = [];\n\n\t\tthis.adjustTableSize();\n\t};\n\n\tRowManager.prototype.deleteRow = function (row, blockRedraw) {\n\n\t\tvar allIndex = this.rows.indexOf(row),\n\t\t    activeIndex = this.activeRows.indexOf(row);\n\n\t\tif (activeIndex > -1) {\n\n\t\t\tthis.activeRows.splice(activeIndex, 1);\n\t\t}\n\n\t\tif (allIndex > -1) {\n\n\t\t\tthis.rows.splice(allIndex, 1);\n\t\t}\n\n\t\tthis.setActiveRows(this.activeRows);\n\n\t\tthis.displayRowIterator(function (rows) {\n\n\t\t\tvar displayIndex = rows.indexOf(row);\n\n\t\t\tif (displayIndex > -1) {\n\n\t\t\t\trows.splice(displayIndex, 1);\n\t\t\t}\n\t\t});\n\n\t\tif (!blockRedraw) {\n\n\t\t\tthis.reRenderInPosition();\n\t\t}\n\n\t\tthis.regenerateRowNumbers();\n\n\t\tthis.table.options.rowDeleted.call(this.table, row.getComponent());\n\n\t\tthis.table.options.dataEdited.call(this.table, this.getData());\n\n\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\n\t\t\tthis.table.modules.groupRows.updateGroupRows(true);\n\t\t} else if (this.table.options.pagination && this.table.modExists(\"page\")) {\n\n\t\t\tthis.refreshActiveData(false, false, true);\n\t\t} else {\n\n\t\t\tif (this.table.options.pagination && this.table.modExists(\"page\")) {\n\n\t\t\t\tthis.refreshActiveData(\"page\");\n\t\t\t}\n\t\t}\n\t};\n\n\tRowManager.prototype.addRow = function (data, pos, index, blockRedraw) {\n\n\t\tvar row = this.addRowActual(data, pos, index, blockRedraw);\n\n\t\tif (this.table.options.history && this.table.modExists(\"history\")) {\n\n\t\t\tthis.table.modules.history.action(\"rowAdd\", row, { data: data, pos: pos, index: index });\n\t\t}\n\n\t\treturn row;\n\t};\n\n\t//add multiple rows\n\n\tRowManager.prototype.addRows = function (data, pos, index) {\n\t\tvar _this11 = this;\n\n\t\tvar self = this,\n\t\t    length = 0,\n\t\t    rows = [];\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tpos = _this11.findAddRowPos(pos);\n\n\t\t\tif (!Array.isArray(data)) {\n\n\t\t\t\tdata = [data];\n\t\t\t}\n\n\t\t\tlength = data.length - 1;\n\n\t\t\tif (typeof index == \"undefined\" && pos || typeof index !== \"undefined\" && !pos) {\n\n\t\t\t\tdata.reverse();\n\t\t\t}\n\n\t\t\tdata.forEach(function (item, i) {\n\n\t\t\t\tvar row = self.addRow(item, pos, index, true);\n\n\t\t\t\trows.push(row);\n\t\t\t});\n\n\t\t\tif (_this11.table.options.groupBy && _this11.table.modExists(\"groupRows\")) {\n\n\t\t\t\t_this11.table.modules.groupRows.updateGroupRows(true);\n\t\t\t} else if (_this11.table.options.pagination && _this11.table.modExists(\"page\")) {\n\n\t\t\t\t_this11.refreshActiveData(false, false, true);\n\t\t\t} else {\n\n\t\t\t\t_this11.reRenderInPosition();\n\t\t\t}\n\n\t\t\t//recalc column calculations if present\n\n\t\t\tif (_this11.table.modExists(\"columnCalcs\")) {\n\n\t\t\t\t_this11.table.modules.columnCalcs.recalc(_this11.table.rowManager.activeRows);\n\t\t\t}\n\n\t\t\t_this11.regenerateRowNumbers();\n\n\t\t\tresolve(rows);\n\t\t});\n\t};\n\n\tRowManager.prototype.findAddRowPos = function (pos) {\n\n\t\tif (typeof pos === \"undefined\") {\n\n\t\t\tpos = this.table.options.addRowPos;\n\t\t}\n\n\t\tif (pos === \"pos\") {\n\n\t\t\tpos = true;\n\t\t}\n\n\t\tif (pos === \"bottom\") {\n\n\t\t\tpos = false;\n\t\t}\n\n\t\treturn pos;\n\t};\n\n\tRowManager.prototype.addRowActual = function (data, pos, index, blockRedraw) {\n\n\t\tvar row = data instanceof Row ? data : new Row(data || {}, this),\n\t\t    top = this.findAddRowPos(pos),\n\t\t    allIndex = -1,\n\t\t    activeIndex,\n\t\t    dispRows;\n\n\t\tif (!index && this.table.options.pagination && this.table.options.paginationAddRow == \"page\") {\n\n\t\t\tdispRows = this.getDisplayRows();\n\n\t\t\tif (top) {\n\n\t\t\t\tif (dispRows.length) {\n\n\t\t\t\t\tindex = dispRows[0];\n\t\t\t\t} else {\n\n\t\t\t\t\tif (this.activeRows.length) {\n\n\t\t\t\t\t\tindex = this.activeRows[this.activeRows.length - 1];\n\n\t\t\t\t\t\ttop = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (dispRows.length) {\n\n\t\t\t\t\tindex = dispRows[dispRows.length - 1];\n\n\t\t\t\t\ttop = dispRows.length < this.table.modules.page.getPageSize() ? false : true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof index !== \"undefined\") {\n\n\t\t\tindex = this.findRow(index);\n\t\t}\n\n\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\n\t\t\tthis.table.modules.groupRows.assignRowToGroup(row);\n\n\t\t\tvar groupRows = row.getGroup().rows;\n\n\t\t\tif (groupRows.length > 1) {\n\n\t\t\t\tif (!index || index && groupRows.indexOf(index) == -1) {\n\n\t\t\t\t\tif (top) {\n\n\t\t\t\t\t\tif (groupRows[0] !== row) {\n\n\t\t\t\t\t\t\tindex = groupRows[0];\n\n\t\t\t\t\t\t\tthis._moveRowInArray(row.getGroup().rows, row, index, !top);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif (groupRows[groupRows.length - 1] !== row) {\n\n\t\t\t\t\t\t\tindex = groupRows[groupRows.length - 1];\n\n\t\t\t\t\t\t\tthis._moveRowInArray(row.getGroup().rows, row, index, !top);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._moveRowInArray(row.getGroup().rows, row, index, !top);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (index) {\n\n\t\t\tallIndex = this.rows.indexOf(index);\n\t\t}\n\n\t\tif (index && allIndex > -1) {\n\n\t\t\tactiveIndex = this.activeRows.indexOf(index);\n\n\t\t\tthis.displayRowIterator(function (rows) {\n\n\t\t\t\tvar displayIndex = rows.indexOf(index);\n\n\t\t\t\tif (displayIndex > -1) {\n\n\t\t\t\t\trows.splice(top ? displayIndex : displayIndex + 1, 0, row);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (activeIndex > -1) {\n\n\t\t\t\tthis.activeRows.splice(top ? activeIndex : activeIndex + 1, 0, row);\n\t\t\t}\n\n\t\t\tthis.rows.splice(top ? allIndex : allIndex + 1, 0, row);\n\t\t} else {\n\n\t\t\tif (top) {\n\n\t\t\t\tthis.displayRowIterator(function (rows) {\n\n\t\t\t\t\trows.unshift(row);\n\t\t\t\t});\n\n\t\t\t\tthis.activeRows.unshift(row);\n\n\t\t\t\tthis.rows.unshift(row);\n\t\t\t} else {\n\n\t\t\t\tthis.displayRowIterator(function (rows) {\n\n\t\t\t\t\trows.push(row);\n\t\t\t\t});\n\n\t\t\t\tthis.activeRows.push(row);\n\n\t\t\t\tthis.rows.push(row);\n\t\t\t}\n\t\t}\n\n\t\tthis.setActiveRows(this.activeRows);\n\n\t\tthis.table.options.rowAdded.call(this.table, row.getComponent());\n\n\t\tthis.table.options.dataEdited.call(this.table, this.getData());\n\n\t\tif (!blockRedraw) {\n\n\t\t\tthis.reRenderInPosition();\n\t\t}\n\n\t\treturn row;\n\t};\n\n\tRowManager.prototype.moveRow = function (from, to, after) {\n\n\t\tif (this.table.options.history && this.table.modExists(\"history\")) {\n\n\t\t\tthis.table.modules.history.action(\"rowMove\", from, { posFrom: this.getRowPosition(from), posTo: this.getRowPosition(to), to: to, after: after });\n\t\t}\n\n\t\tthis.moveRowActual(from, to, after);\n\n\t\tthis.regenerateRowNumbers();\n\n\t\tthis.table.options.rowMoved.call(this.table, from.getComponent());\n\t};\n\n\tRowManager.prototype.moveRowActual = function (from, to, after) {\n\t\tvar _this12 = this;\n\n\t\tthis._moveRowInArray(this.rows, from, to, after);\n\n\t\tthis._moveRowInArray(this.activeRows, from, to, after);\n\n\t\tthis.displayRowIterator(function (rows) {\n\n\t\t\t_this12._moveRowInArray(rows, from, to, after);\n\t\t});\n\n\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\n\t\t\tif (!after && to instanceof Group) {\n\n\t\t\t\tto = this.table.rowManager.prevDisplayRow(from) || to;\n\t\t\t}\n\n\t\t\tvar toGroup = to.getGroup();\n\n\t\t\tvar fromGroup = from.getGroup();\n\n\t\t\tif (toGroup === fromGroup) {\n\n\t\t\t\tthis._moveRowInArray(toGroup.rows, from, to, after);\n\t\t\t} else {\n\n\t\t\t\tif (fromGroup) {\n\n\t\t\t\t\tfromGroup.removeRow(from);\n\t\t\t\t}\n\n\t\t\t\ttoGroup.insertRow(from, to, after);\n\t\t\t}\n\t\t}\n\t};\n\n\tRowManager.prototype._moveRowInArray = function (rows, from, to, after) {\n\n\t\tvar fromIndex, toIndex, start, end;\n\n\t\tif (from !== to) {\n\n\t\t\tfromIndex = rows.indexOf(from);\n\n\t\t\tif (fromIndex > -1) {\n\n\t\t\t\trows.splice(fromIndex, 1);\n\n\t\t\t\ttoIndex = rows.indexOf(to);\n\n\t\t\t\tif (toIndex > -1) {\n\n\t\t\t\t\tif (after) {\n\n\t\t\t\t\t\trows.splice(toIndex + 1, 0, from);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trows.splice(toIndex, 0, from);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\trows.splice(fromIndex, 0, from);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//restyle rows\n\n\t\t\tif (rows === this.getDisplayRows()) {\n\n\t\t\t\tstart = fromIndex < toIndex ? fromIndex : toIndex;\n\n\t\t\t\tend = toIndex > fromIndex ? toIndex : fromIndex + 1;\n\n\t\t\t\tfor (var _i4 = start; _i4 <= end; _i4++) {\n\n\t\t\t\t\tif (rows[_i4]) {\n\n\t\t\t\t\t\tthis.styleRow(rows[_i4], _i4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tRowManager.prototype.clearData = function () {\n\n\t\tthis.setData([]);\n\t};\n\n\tRowManager.prototype.getRowIndex = function (row) {\n\n\t\treturn this.findRowIndex(row, this.rows);\n\t};\n\n\tRowManager.prototype.getDisplayRowIndex = function (row) {\n\n\t\tvar index = this.getDisplayRows().indexOf(row);\n\n\t\treturn index > -1 ? index : false;\n\t};\n\n\tRowManager.prototype.nextDisplayRow = function (row, rowOnly) {\n\n\t\tvar index = this.getDisplayRowIndex(row),\n\t\t    nextRow = false;\n\n\t\tif (index !== false && index < this.displayRowsCount - 1) {\n\n\t\t\tnextRow = this.getDisplayRows()[index + 1];\n\t\t}\n\n\t\tif (nextRow && (!(nextRow instanceof Row) || nextRow.type != \"row\")) {\n\n\t\t\treturn this.nextDisplayRow(nextRow, rowOnly);\n\t\t}\n\n\t\treturn nextRow;\n\t};\n\n\tRowManager.prototype.prevDisplayRow = function (row, rowOnly) {\n\n\t\tvar index = this.getDisplayRowIndex(row),\n\t\t    prevRow = false;\n\n\t\tif (index) {\n\n\t\t\tprevRow = this.getDisplayRows()[index - 1];\n\t\t}\n\n\t\tif (rowOnly && prevRow && (!(prevRow instanceof Row) || prevRow.type != \"row\")) {\n\n\t\t\treturn this.prevDisplayRow(prevRow, rowOnly);\n\t\t}\n\n\t\treturn prevRow;\n\t};\n\n\tRowManager.prototype.findRowIndex = function (row, list) {\n\n\t\tvar rowIndex;\n\n\t\trow = this.findRow(row);\n\n\t\tif (row) {\n\n\t\t\trowIndex = list.indexOf(row);\n\n\t\t\tif (rowIndex > -1) {\n\n\t\t\t\treturn rowIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tRowManager.prototype.getData = function (active, transform) {\n\n\t\tvar output = [],\n\t\t    rows = this.getRows(active);\n\n\t\trows.forEach(function (row) {\n\n\t\t\tif (row.type == \"row\") {\n\n\t\t\t\toutput.push(row.getData(transform || \"data\"));\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tRowManager.prototype.getComponents = function (active) {\n\n\t\tvar output = [],\n\t\t    rows = this.getRows(active);\n\n\t\trows.forEach(function (row) {\n\n\t\t\toutput.push(row.getComponent());\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tRowManager.prototype.getDataCount = function (active) {\n\n\t\tvar rows = this.getRows(active);\n\n\t\treturn rows.length;\n\t};\n\n\tRowManager.prototype._genRemoteRequest = function () {\n\t\tvar _this13 = this;\n\n\t\tvar table = this.table,\n\t\t    options = table.options,\n\t\t    params = {};\n\n\t\tif (table.modExists(\"page\")) {\n\n\t\t\t//set sort data if defined\n\n\t\t\tif (options.ajaxSorting) {\n\n\t\t\t\tvar sorters = this.table.modules.sort.getSort();\n\n\t\t\t\tsorters.forEach(function (item) {\n\n\t\t\t\t\tdelete item.column;\n\t\t\t\t});\n\n\t\t\t\tparams[this.table.modules.page.paginationDataSentNames.sorters] = sorters;\n\t\t\t}\n\n\t\t\t//set filter data if defined\n\n\t\t\tif (options.ajaxFiltering) {\n\n\t\t\t\tvar filters = this.table.modules.filter.getFilters(true, true);\n\n\t\t\t\tparams[this.table.modules.page.paginationDataSentNames.filters] = filters;\n\t\t\t}\n\n\t\t\tthis.table.modules.ajax.setParams(params, true);\n\t\t}\n\n\t\ttable.modules.ajax.sendRequest().then(function (data) {\n\n\t\t\t_this13._setDataActual(data, true);\n\t\t}).catch(function (e) {});\n\t};\n\n\t//choose the path to refresh data after a filter update\n\n\tRowManager.prototype.filterRefresh = function () {\n\n\t\tvar table = this.table,\n\t\t    options = table.options,\n\t\t    left = this.scrollLeft;\n\n\t\tif (options.ajaxFiltering) {\n\n\t\t\tif (options.pagination == \"remote\" && table.modExists(\"page\")) {\n\n\t\t\t\ttable.modules.page.reset(true);\n\n\t\t\t\ttable.modules.page.setPage(1).then(function () {}).catch(function () {});\n\t\t\t} else if (options.ajaxProgressiveLoad) {\n\n\t\t\t\ttable.modules.ajax.loadData().then(function () {}).catch(function () {});\n\t\t\t} else {\n\n\t\t\t\t//assume data is url, make ajax call to url to get data\n\n\t\t\t\tthis._genRemoteRequest();\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.refreshActiveData(\"filter\");\n\t\t}\n\n\t\tthis.scrollHorizontal(left);\n\t};\n\n\t//choose the path to refresh data after a sorter update\n\n\tRowManager.prototype.sorterRefresh = function (loadOrignalData) {\n\n\t\tvar table = this.table,\n\t\t    options = this.table.options,\n\t\t    left = this.scrollLeft;\n\n\t\tif (options.ajaxSorting) {\n\n\t\t\tif ((options.pagination == \"remote\" || options.progressiveLoad) && table.modExists(\"page\")) {\n\n\t\t\t\ttable.modules.page.reset(true);\n\n\t\t\t\ttable.modules.page.setPage(1).then(function () {}).catch(function () {});\n\t\t\t} else if (options.ajaxProgressiveLoad) {\n\n\t\t\t\ttable.modules.ajax.loadData().then(function () {}).catch(function () {});\n\t\t\t} else {\n\n\t\t\t\t//assume data is url, make ajax call to url to get data\n\n\t\t\t\tthis._genRemoteRequest();\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.refreshActiveData(loadOrignalData ? \"filter\" : \"sort\");\n\t\t}\n\n\t\tthis.scrollHorizontal(left);\n\t};\n\n\tRowManager.prototype.scrollHorizontal = function (left) {\n\n\t\tthis.scrollLeft = left;\n\n\t\tthis.element.scrollLeft = left;\n\n\t\tif (this.table.options.groupBy) {\n\n\t\t\tthis.table.modules.groupRows.scrollHeaders(left);\n\t\t}\n\n\t\tif (this.table.modExists(\"columnCalcs\")) {\n\n\t\t\tthis.table.modules.columnCalcs.scrollHorizontal(left);\n\t\t}\n\t};\n\n\t//set active data set\n\n\tRowManager.prototype.refreshActiveData = function (stage, skipStage, renderInPosition) {\n\n\t\tvar self = this,\n\t\t    table = this.table,\n\t\t    cascadeOrder = [\"all\", \"filter\", \"sort\", \"display\", \"freeze\", \"group\", \"tree\", \"page\"],\n\t\t    displayIndex;\n\n\t\tif (this.redrawBlock) {\n\n\t\t\tif (!this.redrawBlockRestoreConfig || cascadeOrder.indexOf(stage) < cascadeOrder.indexOf(this.redrawBlockRestoreConfig.stage)) {\n\n\t\t\t\tthis.redrawBlockRestoreConfig = {\n\n\t\t\t\t\tstage: stage,\n\n\t\t\t\t\tskipStage: skipStage,\n\n\t\t\t\t\trenderInPosition: renderInPosition\n\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn;\n\t\t} else {\n\n\t\t\tif (self.table.modExists(\"edit\")) {\n\n\t\t\t\tself.table.modules.edit.cancelEdit();\n\t\t\t}\n\n\t\t\tif (!stage) {\n\n\t\t\t\tstage = \"all\";\n\t\t\t}\n\n\t\t\tif (table.options.selectable && !table.options.selectablePersistence && table.modExists(\"selectRow\")) {\n\n\t\t\t\ttable.modules.selectRow.deselectRows();\n\t\t\t}\n\n\t\t\t//cascade through data refresh stages\n\n\t\t\tswitch (stage) {\n\n\t\t\t\tcase \"all\":\n\n\t\t\t\tcase \"filter\":\n\n\t\t\t\t\tif (!skipStage) {\n\n\t\t\t\t\t\tif (table.modExists(\"filter\")) {\n\n\t\t\t\t\t\t\tself.setActiveRows(table.modules.filter.filter(self.rows));\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tself.setActiveRows(self.rows.slice(0));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tskipStage = false;\n\t\t\t\t\t}\n\n\t\t\t\tcase \"sort\":\n\n\t\t\t\t\tif (!skipStage) {\n\n\t\t\t\t\t\tif (table.modExists(\"sort\")) {\n\n\t\t\t\t\t\t\ttable.modules.sort.sort(this.activeRows);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tskipStage = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t//regenerate row numbers for row number formatter if in use\n\n\t\t\t\t\tthis.regenerateRowNumbers();\n\n\t\t\t\t//generic stage to allow for pipeline trigger after the data manipulation stage\n\n\t\t\t\tcase \"display\":\n\n\t\t\t\t\tthis.resetDisplayRows();\n\n\t\t\t\tcase \"freeze\":\n\n\t\t\t\t\tif (!skipStage) {\n\n\t\t\t\t\t\tif (this.table.modExists(\"frozenRows\")) {\n\n\t\t\t\t\t\t\tif (table.modules.frozenRows.isFrozen()) {\n\n\t\t\t\t\t\t\t\tif (!table.modules.frozenRows.getDisplayIndex()) {\n\n\t\t\t\t\t\t\t\t\ttable.modules.frozenRows.setDisplayIndex(this.getNextDisplayIndex());\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdisplayIndex = table.modules.frozenRows.getDisplayIndex();\n\n\t\t\t\t\t\t\t\tdisplayIndex = self.setDisplayRows(table.modules.frozenRows.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n\t\t\t\t\t\t\t\tif (displayIndex !== true) {\n\n\t\t\t\t\t\t\t\t\ttable.modules.frozenRows.setDisplayIndex(displayIndex);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tskipStage = false;\n\t\t\t\t\t}\n\n\t\t\t\tcase \"group\":\n\n\t\t\t\t\tif (!skipStage) {\n\n\t\t\t\t\t\tif (table.options.groupBy && table.modExists(\"groupRows\")) {\n\n\t\t\t\t\t\t\tif (!table.modules.groupRows.getDisplayIndex()) {\n\n\t\t\t\t\t\t\t\ttable.modules.groupRows.setDisplayIndex(this.getNextDisplayIndex());\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdisplayIndex = table.modules.groupRows.getDisplayIndex();\n\n\t\t\t\t\t\t\tdisplayIndex = self.setDisplayRows(table.modules.groupRows.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n\t\t\t\t\t\t\tif (displayIndex !== true) {\n\n\t\t\t\t\t\t\t\ttable.modules.groupRows.setDisplayIndex(displayIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tskipStage = false;\n\t\t\t\t\t}\n\n\t\t\t\tcase \"tree\":\n\n\t\t\t\t\tif (!skipStage) {\n\n\t\t\t\t\t\tif (table.options.dataTree && table.modExists(\"dataTree\")) {\n\n\t\t\t\t\t\t\tif (!table.modules.dataTree.getDisplayIndex()) {\n\n\t\t\t\t\t\t\t\ttable.modules.dataTree.setDisplayIndex(this.getNextDisplayIndex());\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdisplayIndex = table.modules.dataTree.getDisplayIndex();\n\n\t\t\t\t\t\t\tdisplayIndex = self.setDisplayRows(table.modules.dataTree.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n\t\t\t\t\t\t\tif (displayIndex !== true) {\n\n\t\t\t\t\t\t\t\ttable.modules.dataTree.setDisplayIndex(displayIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tskipStage = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (table.options.pagination && table.modExists(\"page\") && !renderInPosition) {\n\n\t\t\t\t\t\tif (table.modules.page.getMode() == \"local\") {\n\n\t\t\t\t\t\t\ttable.modules.page.reset();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\tcase \"page\":\n\n\t\t\t\t\tif (!skipStage) {\n\n\t\t\t\t\t\tif (table.options.pagination && table.modExists(\"page\")) {\n\n\t\t\t\t\t\t\tif (!table.modules.page.getDisplayIndex()) {\n\n\t\t\t\t\t\t\t\ttable.modules.page.setDisplayIndex(this.getNextDisplayIndex());\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdisplayIndex = table.modules.page.getDisplayIndex();\n\n\t\t\t\t\t\t\tif (table.modules.page.getMode() == \"local\") {\n\n\t\t\t\t\t\t\t\ttable.modules.page.setMaxRows(this.getDisplayRows(displayIndex - 1).length);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdisplayIndex = self.setDisplayRows(table.modules.page.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n\t\t\t\t\t\t\tif (displayIndex !== true) {\n\n\t\t\t\t\t\t\t\ttable.modules.page.setDisplayIndex(displayIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tskipStage = false;\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (Tabulator.prototype.helpers.elVisible(self.element)) {\n\n\t\t\t\tif (renderInPosition) {\n\n\t\t\t\t\tself.reRenderInPosition();\n\t\t\t\t} else {\n\n\t\t\t\t\tself.renderTable();\n\n\t\t\t\t\tif (table.options.layoutColumnsOnNewData) {\n\n\t\t\t\t\t\tself.table.columnManager.redraw(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (table.modExists(\"columnCalcs\")) {\n\n\t\t\t\ttable.modules.columnCalcs.recalc(this.activeRows);\n\t\t\t}\n\t\t}\n\t};\n\n\t//regenerate row numbers for row number formatter if in use\n\n\tRowManager.prototype.regenerateRowNumbers = function () {\n\t\tvar _this14 = this;\n\n\t\tif (this.rowNumColumn) {\n\n\t\t\tthis.activeRows.forEach(function (row) {\n\n\t\t\t\tvar cell = row.getCell(_this14.rowNumColumn);\n\n\t\t\t\tif (cell) {\n\n\t\t\t\t\tcell._generateContents();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tRowManager.prototype.setActiveRows = function (activeRows) {\n\n\t\tthis.activeRows = activeRows;\n\n\t\tthis.activeRowsCount = this.activeRows.length;\n\t};\n\n\t//reset display rows array\n\n\tRowManager.prototype.resetDisplayRows = function () {\n\n\t\tthis.displayRows = [];\n\n\t\tthis.displayRows.push(this.activeRows.slice(0));\n\n\t\tthis.displayRowsCount = this.displayRows[0].length;\n\n\t\tif (this.table.modExists(\"frozenRows\")) {\n\n\t\t\tthis.table.modules.frozenRows.setDisplayIndex(0);\n\t\t}\n\n\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\n\t\t\tthis.table.modules.groupRows.setDisplayIndex(0);\n\t\t}\n\n\t\tif (this.table.options.pagination && this.table.modExists(\"page\")) {\n\n\t\t\tthis.table.modules.page.setDisplayIndex(0);\n\t\t}\n\t};\n\n\tRowManager.prototype.getNextDisplayIndex = function () {\n\n\t\treturn this.displayRows.length;\n\t};\n\n\t//set display row pipeline data\n\n\tRowManager.prototype.setDisplayRows = function (displayRows, index) {\n\n\t\tvar output = true;\n\n\t\tif (index && typeof this.displayRows[index] != \"undefined\") {\n\n\t\t\tthis.displayRows[index] = displayRows;\n\n\t\t\toutput = true;\n\t\t} else {\n\n\t\t\tthis.displayRows.push(displayRows);\n\n\t\t\toutput = index = this.displayRows.length - 1;\n\t\t}\n\n\t\tif (index == this.displayRows.length - 1) {\n\n\t\t\tthis.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tRowManager.prototype.getDisplayRows = function (index) {\n\n\t\tif (typeof index == \"undefined\") {\n\n\t\t\treturn this.displayRows.length ? this.displayRows[this.displayRows.length - 1] : [];\n\t\t} else {\n\n\t\t\treturn this.displayRows[index] || [];\n\t\t}\n\t};\n\n\tRowManager.prototype.getVisibleRows = function (viewable) {\n\n\t\tvar topEdge = this.element.scrollTop,\n\t\t    bottomEdge = this.element.clientHeight + topEdge,\n\t\t    topFound = false,\n\t\t    topRow = 0,\n\t\t    bottomRow = 0,\n\t\t    rows = this.getDisplayRows();\n\n\t\tif (viewable) {\n\n\t\t\tthis.getDisplayRows();\n\n\t\t\tfor (var i = this.vDomTop; i <= this.vDomBottom; i++) {\n\n\t\t\t\tif (rows[i]) {\n\n\t\t\t\t\tif (!topFound) {\n\n\t\t\t\t\t\tif (topEdge - rows[i].getElement().offsetTop >= 0) {\n\n\t\t\t\t\t\t\ttopRow = i;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttopFound = true;\n\n\t\t\t\t\t\t\tif (bottomEdge - rows[i].getElement().offsetTop >= 0) {\n\n\t\t\t\t\t\t\t\tbottomRow = i;\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif (bottomEdge - rows[i].getElement().offsetTop >= 0) {\n\n\t\t\t\t\t\t\tbottomRow = i;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\ttopRow = this.vDomTop;\n\n\t\t\tbottomRow = this.vDomBottom;\n\t\t}\n\n\t\treturn rows.slice(topRow, bottomRow + 1);\n\t};\n\n\t//repeat action accross display rows\n\n\tRowManager.prototype.displayRowIterator = function (callback) {\n\n\t\tthis.displayRows.forEach(callback);\n\n\t\tthis.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;\n\t};\n\n\t//return only actual rows (not group headers etc)\n\n\tRowManager.prototype.getRows = function (active) {\n\n\t\tvar rows;\n\n\t\tswitch (active) {\n\n\t\t\tcase \"active\":\n\n\t\t\t\trows = this.activeRows;\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"display\":\n\n\t\t\t\trows = this.table.rowManager.getDisplayRows();\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"visible\":\n\n\t\t\t\trows = this.getVisibleRows(true);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\trows = this.rows;\n\n\t\t}\n\n\t\treturn rows;\n\t};\n\n\t///////////////// Table Rendering /////////////////\n\n\n\t//trigger rerender of table in current position\n\n\tRowManager.prototype.reRenderInPosition = function (callback) {\n\n\t\tif (this.getRenderMode() == \"virtual\") {\n\n\t\t\tif (this.redrawBlock) {\n\n\t\t\t\tif (callback) {\n\n\t\t\t\t\tcallback();\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.redrawBlockRederInPosition = true;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tvar scrollTop = this.element.scrollTop;\n\n\t\t\t\tvar topRow = false;\n\n\t\t\t\tvar topOffset = false;\n\n\t\t\t\tvar left = this.scrollLeft;\n\n\t\t\t\tvar rows = this.getDisplayRows();\n\n\t\t\t\tfor (var i = this.vDomTop; i <= this.vDomBottom; i++) {\n\n\t\t\t\t\tif (rows[i]) {\n\n\t\t\t\t\t\tvar diff = scrollTop - rows[i].getElement().offsetTop;\n\n\t\t\t\t\t\tif (topOffset === false || Math.abs(diff) < topOffset) {\n\n\t\t\t\t\t\t\ttopOffset = diff;\n\n\t\t\t\t\t\t\ttopRow = i;\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (callback) {\n\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\n\t\t\t\tthis._virtualRenderFill(topRow === false ? this.displayRowsCount - 1 : topRow, true, topOffset || 0);\n\n\t\t\t\tthis.scrollHorizontal(left);\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.renderTable();\n\n\t\t\tif (callback) {\n\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t};\n\n\tRowManager.prototype.setRenderMode = function () {\n\n\t\tif (this.table.options.virtualDom) {\n\n\t\t\tthis.renderMode = \"virtual\";\n\n\t\t\tif (this.table.element.clientHeight || this.table.options.height) {\n\n\t\t\t\tthis.fixedHeight = true;\n\t\t\t} else {\n\n\t\t\t\tthis.fixedHeight = false;\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.renderMode = \"classic\";\n\t\t}\n\t};\n\n\tRowManager.prototype.getRenderMode = function () {\n\n\t\treturn this.renderMode;\n\t};\n\n\tRowManager.prototype.renderTable = function () {\n\n\t\tthis.table.options.renderStarted.call(this.table);\n\n\t\tthis.element.scrollTop = 0;\n\n\t\tswitch (this.renderMode) {\n\n\t\t\tcase \"classic\":\n\n\t\t\t\tthis._simpleRender();\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"virtual\":\n\n\t\t\t\tthis._virtualRenderFill();\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif (this.firstRender) {\n\n\t\t\tif (this.displayRowsCount) {\n\n\t\t\t\tthis.firstRender = false;\n\n\t\t\t\tthis.table.modules.layout.layout();\n\t\t\t} else {\n\n\t\t\t\tthis.renderEmptyScroll();\n\t\t\t}\n\t\t}\n\n\t\tif (this.table.modExists(\"frozenColumns\")) {\n\n\t\t\tthis.table.modules.frozenColumns.layout();\n\t\t}\n\n\t\tif (!this.displayRowsCount) {\n\n\t\t\tif (this.table.options.placeholder) {\n\n\t\t\t\tthis.table.options.placeholder.setAttribute(\"tabulator-render-mode\", this.renderMode);\n\n\t\t\t\tthis.getElement().appendChild(this.table.options.placeholder);\n\n\t\t\t\tthis.table.options.placeholder.style.width = this.table.columnManager.getWidth() + \"px\";\n\t\t\t}\n\t\t}\n\n\t\tthis.table.options.renderComplete.call(this.table);\n\t};\n\n\t//simple render on heightless table\n\n\tRowManager.prototype._simpleRender = function () {\n\n\t\tthis._clearVirtualDom();\n\n\t\tif (this.displayRowsCount) {\n\n\t\t\tthis.checkClassicModeGroupHeaderWidth();\n\t\t} else {\n\n\t\t\tthis.renderEmptyScroll();\n\t\t}\n\t};\n\n\tRowManager.prototype.checkClassicModeGroupHeaderWidth = function () {\n\n\t\tvar self = this,\n\t\t    element = this.tableElement,\n\t\t    onlyGroupHeaders = true;\n\n\t\tself.getDisplayRows().forEach(function (row, index) {\n\n\t\t\tself.styleRow(row, index);\n\n\t\t\telement.appendChild(row.getElement());\n\n\t\t\trow.initialize(true);\n\n\t\t\tif (row.type !== \"group\") {\n\n\t\t\t\tonlyGroupHeaders = false;\n\t\t\t}\n\t\t});\n\n\t\tif (onlyGroupHeaders) {\n\n\t\t\telement.style.minWidth = self.table.columnManager.getWidth() + \"px\";\n\t\t} else {\n\n\t\t\telement.style.minWidth = \"\";\n\t\t}\n\t};\n\n\t//show scrollbars on empty table div\n\n\tRowManager.prototype.renderEmptyScroll = function () {\n\n\t\tif (this.table.options.placeholder) {\n\n\t\t\tthis.tableElement.style.display = \"none\";\n\t\t} else {\n\n\t\t\tthis.tableElement.style.minWidth = this.table.columnManager.getWidth() + \"px\";\n\n\t\t\tthis.tableElement.style.minHeight = \"1px\";\n\n\t\t\tthis.tableElement.style.visibility = \"hidden\";\n\t\t}\n\t};\n\n\tRowManager.prototype._clearVirtualDom = function () {\n\n\t\tvar element = this.tableElement;\n\n\t\tif (this.table.options.placeholder && this.table.options.placeholder.parentNode) {\n\n\t\t\tthis.table.options.placeholder.parentNode.removeChild(this.table.options.placeholder);\n\t\t}\n\n\t\t// element.children.detach();\n\n\t\twhile (element.firstChild) {\n\t\t\telement.removeChild(element.firstChild);\n\t\t}element.style.paddingTop = \"\";\n\n\t\telement.style.paddingBottom = \"\";\n\n\t\telement.style.minWidth = \"\";\n\n\t\telement.style.minHeight = \"\";\n\n\t\telement.style.display = \"\";\n\n\t\telement.style.visibility = \"\";\n\n\t\tthis.scrollTop = 0;\n\n\t\tthis.scrollLeft = 0;\n\n\t\tthis.vDomTop = 0;\n\n\t\tthis.vDomBottom = 0;\n\n\t\tthis.vDomTopPad = 0;\n\n\t\tthis.vDomBottomPad = 0;\n\t};\n\n\tRowManager.prototype.styleRow = function (row, index) {\n\n\t\tvar rowEl = row.getElement();\n\n\t\tif (index % 2) {\n\n\t\t\trowEl.classList.add(\"tabulator-row-even\");\n\n\t\t\trowEl.classList.remove(\"tabulator-row-odd\");\n\t\t} else {\n\n\t\t\trowEl.classList.add(\"tabulator-row-odd\");\n\n\t\t\trowEl.classList.remove(\"tabulator-row-even\");\n\t\t}\n\t};\n\n\t//full virtual render\n\n\tRowManager.prototype._virtualRenderFill = function (position, forceMove, offset) {\n\n\t\tvar self = this,\n\t\t    element = self.tableElement,\n\t\t    holder = self.element,\n\t\t    topPad = 0,\n\t\t    rowsHeight = 0,\n\t\t    topPadHeight = 0,\n\t\t    i = 0,\n\t\t    onlyGroupHeaders = true,\n\t\t    rows = self.getDisplayRows();\n\n\t\tposition = position || 0;\n\n\t\toffset = offset || 0;\n\n\t\tif (!position) {\n\n\t\t\tself._clearVirtualDom();\n\t\t} else {\n\n\t\t\twhile (element.firstChild) {\n\t\t\t\telement.removeChild(element.firstChild);\n\t\t\t} //check if position is too close to bottom of table\n\n\t\t\tvar heightOccupied = (self.displayRowsCount - position + 1) * self.vDomRowHeight;\n\n\t\t\tif (heightOccupied < self.height) {\n\n\t\t\t\tposition -= Math.ceil((self.height - heightOccupied) / self.vDomRowHeight);\n\n\t\t\t\tif (position < 0) {\n\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//calculate initial pad\n\n\t\t\ttopPad = Math.min(Math.max(Math.floor(self.vDomWindowBuffer / self.vDomRowHeight), self.vDomWindowMinMarginRows), position);\n\n\t\t\tposition -= topPad;\n\t\t}\n\n\t\tif (self.displayRowsCount && Tabulator.prototype.helpers.elVisible(self.element)) {\n\n\t\t\tself.vDomTop = position;\n\n\t\t\tself.vDomBottom = position - 1;\n\n\t\t\twhile ((rowsHeight <= self.height + self.vDomWindowBuffer || i < self.vDomWindowMinTotalRows) && self.vDomBottom < self.displayRowsCount - 1) {\n\n\t\t\t\tvar index = self.vDomBottom + 1,\n\t\t\t\t    row = rows[index],\n\t\t\t\t    rowHeight = 0;\n\n\t\t\t\tself.styleRow(row, index);\n\n\t\t\t\telement.appendChild(row.getElement());\n\n\t\t\t\tif (!row.initialized) {\n\n\t\t\t\t\trow.initialize(true);\n\t\t\t\t} else {\n\n\t\t\t\t\tif (!row.heightInitialized) {\n\n\t\t\t\t\t\trow.normalizeHeight(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trowHeight = row.getHeight();\n\n\t\t\t\tif (i < topPad) {\n\n\t\t\t\t\ttopPadHeight += rowHeight;\n\t\t\t\t} else {\n\n\t\t\t\t\trowsHeight += rowHeight;\n\t\t\t\t}\n\n\t\t\t\tif (rowHeight > this.vDomWindowBuffer) {\n\n\t\t\t\t\tthis.vDomWindowBuffer = rowHeight * 2;\n\t\t\t\t}\n\n\t\t\t\tif (row.type !== \"group\") {\n\n\t\t\t\t\tonlyGroupHeaders = false;\n\t\t\t\t}\n\n\t\t\t\tself.vDomBottom++;\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tif (!position) {\n\n\t\t\t\tthis.vDomTopPad = 0;\n\n\t\t\t\t//adjust rowheight to match average of rendered elements\n\n\t\t\t\tself.vDomRowHeight = Math.floor((rowsHeight + topPadHeight) / i);\n\n\t\t\t\tself.vDomBottomPad = self.vDomRowHeight * (self.displayRowsCount - self.vDomBottom - 1);\n\n\t\t\t\tself.vDomScrollHeight = topPadHeight + rowsHeight + self.vDomBottomPad - self.height;\n\t\t\t} else {\n\n\t\t\t\tself.vDomTopPad = !forceMove ? self.scrollTop - topPadHeight : self.vDomRowHeight * this.vDomTop + offset;\n\n\t\t\t\tself.vDomBottomPad = self.vDomBottom == self.displayRowsCount - 1 ? 0 : Math.max(self.vDomScrollHeight - self.vDomTopPad - rowsHeight - topPadHeight, 0);\n\t\t\t}\n\n\t\t\telement.style.paddingTop = self.vDomTopPad + \"px\";\n\n\t\t\telement.style.paddingBottom = self.vDomBottomPad + \"px\";\n\n\t\t\tif (forceMove) {\n\n\t\t\t\tthis.scrollTop = self.vDomTopPad + topPadHeight + offset - (this.element.scrollWidth > this.element.clientWidth ? this.element.offsetHeight - this.element.clientHeight : 0);\n\t\t\t}\n\n\t\t\tthis.scrollTop = Math.min(this.scrollTop, this.element.scrollHeight - this.height);\n\n\t\t\t//adjust for horizontal scrollbar if present (and not at top of table)\n\n\t\t\tif (this.element.scrollWidth > this.element.offsetWidth && forceMove) {\n\n\t\t\t\tthis.scrollTop += this.element.offsetHeight - this.element.clientHeight;\n\t\t\t}\n\n\t\t\tthis.vDomScrollPosTop = this.scrollTop;\n\n\t\t\tthis.vDomScrollPosBottom = this.scrollTop;\n\n\t\t\tholder.scrollTop = this.scrollTop;\n\n\t\t\telement.style.minWidth = onlyGroupHeaders ? self.table.columnManager.getWidth() + \"px\" : \"\";\n\n\t\t\tif (self.table.options.groupBy) {\n\n\t\t\t\tif (self.table.modules.layout.getMode() != \"fitDataFill\" && self.displayRowsCount == self.table.modules.groupRows.countGroups()) {\n\n\t\t\t\t\tself.tableElement.style.minWidth = self.table.columnManager.getWidth();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.renderEmptyScroll();\n\t\t}\n\n\t\tif (!this.fixedHeight) {\n\n\t\t\tthis.adjustTableSize();\n\t\t}\n\t};\n\n\t//handle vertical scrolling\n\n\tRowManager.prototype.scrollVertical = function (dir) {\n\n\t\tvar topDiff = this.scrollTop - this.vDomScrollPosTop;\n\n\t\tvar bottomDiff = this.scrollTop - this.vDomScrollPosBottom;\n\n\t\tvar margin = this.vDomWindowBuffer * 2;\n\n\t\tif (-topDiff > margin || bottomDiff > margin) {\n\n\t\t\t//if big scroll redraw table;\n\n\t\t\tvar left = this.scrollLeft;\n\n\t\t\tthis._virtualRenderFill(Math.floor(this.element.scrollTop / this.element.scrollHeight * this.displayRowsCount));\n\n\t\t\tthis.scrollHorizontal(left);\n\t\t} else {\n\n\t\t\tif (dir) {\n\n\t\t\t\t//scrolling up\n\n\t\t\t\tif (topDiff < 0) {\n\n\t\t\t\t\tthis._addTopRow(-topDiff);\n\t\t\t\t}\n\n\t\t\t\tif (bottomDiff < 0) {\n\n\t\t\t\t\t//hide bottom row if needed\n\n\t\t\t\t\tif (this.vDomScrollHeight - this.scrollTop > this.vDomWindowBuffer) {\n\n\t\t\t\t\t\tthis._removeBottomRow(-bottomDiff);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.vDomScrollPosBottom = this.scrollTop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t//scrolling down\n\n\t\t\t\tif (topDiff >= 0) {\n\n\t\t\t\t\t//hide top row if needed\n\n\t\t\t\t\tif (this.scrollTop > this.vDomWindowBuffer) {\n\n\t\t\t\t\t\tthis._removeTopRow(topDiff);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.vDomScrollPosTop = this.scrollTop;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (bottomDiff >= 0) {\n\n\t\t\t\t\tthis._addBottomRow(bottomDiff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tRowManager.prototype._addTopRow = function (topDiff) {\n\t\tvar i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\n\t\tvar table = this.tableElement,\n\t\t    rows = this.getDisplayRows();\n\n\t\tif (this.vDomTop) {\n\n\t\t\tvar index = this.vDomTop - 1,\n\t\t\t    topRow = rows[index],\n\t\t\t    topRowHeight = topRow.getHeight() || this.vDomRowHeight;\n\n\t\t\t//hide top row if needed\n\n\t\t\tif (topDiff >= topRowHeight) {\n\n\t\t\t\tthis.styleRow(topRow, index);\n\n\t\t\t\ttable.insertBefore(topRow.getElement(), table.firstChild);\n\n\t\t\t\tif (!topRow.initialized || !topRow.heightInitialized) {\n\n\t\t\t\t\tthis.vDomTopNewRows.push(topRow);\n\n\t\t\t\t\tif (!topRow.heightInitialized) {\n\n\t\t\t\t\t\ttopRow.clearCellHeight();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttopRow.initialize();\n\n\t\t\t\tthis.vDomTopPad -= topRowHeight;\n\n\t\t\t\tif (this.vDomTopPad < 0) {\n\n\t\t\t\t\tthis.vDomTopPad = index * this.vDomRowHeight;\n\t\t\t\t}\n\n\t\t\t\tif (!index) {\n\n\t\t\t\t\tthis.vDomTopPad = 0;\n\t\t\t\t}\n\n\t\t\t\ttable.style.paddingTop = this.vDomTopPad + \"px\";\n\n\t\t\t\tthis.vDomScrollPosTop -= topRowHeight;\n\n\t\t\t\tthis.vDomTop--;\n\t\t\t}\n\n\t\t\ttopDiff = -(this.scrollTop - this.vDomScrollPosTop);\n\n\t\t\tif (topRow.getHeight() > this.vDomWindowBuffer) {\n\n\t\t\t\tthis.vDomWindowBuffer = topRow.getHeight() * 2;\n\t\t\t}\n\n\t\t\tif (i < this.vDomMaxRenderChain && this.vDomTop && topDiff >= (rows[this.vDomTop - 1].getHeight() || this.vDomRowHeight)) {\n\n\t\t\t\tthis._addTopRow(topDiff, i + 1);\n\t\t\t} else {\n\n\t\t\t\tthis._quickNormalizeRowHeight(this.vDomTopNewRows);\n\t\t\t}\n\t\t}\n\t};\n\n\tRowManager.prototype._removeTopRow = function (topDiff) {\n\n\t\tvar table = this.tableElement,\n\t\t    topRow = this.getDisplayRows()[this.vDomTop],\n\t\t    topRowHeight = topRow.getHeight() || this.vDomRowHeight;\n\n\t\tif (topDiff >= topRowHeight) {\n\n\t\t\tvar rowEl = topRow.getElement();\n\n\t\t\trowEl.parentNode.removeChild(rowEl);\n\n\t\t\tthis.vDomTopPad += topRowHeight;\n\n\t\t\ttable.style.paddingTop = this.vDomTopPad + \"px\";\n\n\t\t\tthis.vDomScrollPosTop += this.vDomTop ? topRowHeight : topRowHeight + this.vDomWindowBuffer;\n\n\t\t\tthis.vDomTop++;\n\n\t\t\ttopDiff = this.scrollTop - this.vDomScrollPosTop;\n\n\t\t\tthis._removeTopRow(topDiff);\n\t\t}\n\t};\n\n\tRowManager.prototype._addBottomRow = function (bottomDiff) {\n\t\tvar i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n\n\t\tvar table = this.tableElement,\n\t\t    rows = this.getDisplayRows();\n\n\t\tif (this.vDomBottom < this.displayRowsCount - 1) {\n\n\t\t\tvar index = this.vDomBottom + 1,\n\t\t\t    bottomRow = rows[index],\n\t\t\t    bottomRowHeight = bottomRow.getHeight() || this.vDomRowHeight;\n\n\t\t\t//hide bottom row if needed\n\n\t\t\tif (bottomDiff >= bottomRowHeight) {\n\n\t\t\t\tthis.styleRow(bottomRow, index);\n\n\t\t\t\ttable.appendChild(bottomRow.getElement());\n\n\t\t\t\tif (!bottomRow.initialized || !bottomRow.heightInitialized) {\n\n\t\t\t\t\tthis.vDomBottomNewRows.push(bottomRow);\n\n\t\t\t\t\tif (!bottomRow.heightInitialized) {\n\n\t\t\t\t\t\tbottomRow.clearCellHeight();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbottomRow.initialize();\n\n\t\t\t\tthis.vDomBottomPad -= bottomRowHeight;\n\n\t\t\t\tif (this.vDomBottomPad < 0 || index == this.displayRowsCount - 1) {\n\n\t\t\t\t\tthis.vDomBottomPad = 0;\n\t\t\t\t}\n\n\t\t\t\ttable.style.paddingBottom = this.vDomBottomPad + \"px\";\n\n\t\t\t\tthis.vDomScrollPosBottom += bottomRowHeight;\n\n\t\t\t\tthis.vDomBottom++;\n\t\t\t}\n\n\t\t\tbottomDiff = this.scrollTop - this.vDomScrollPosBottom;\n\n\t\t\tif (bottomRow.getHeight() > this.vDomWindowBuffer) {\n\n\t\t\t\tthis.vDomWindowBuffer = bottomRow.getHeight() * 2;\n\t\t\t}\n\n\t\t\tif (i < this.vDomMaxRenderChain && this.vDomBottom < this.displayRowsCount - 1 && bottomDiff >= (rows[this.vDomBottom + 1].getHeight() || this.vDomRowHeight)) {\n\n\t\t\t\tthis._addBottomRow(bottomDiff, i + 1);\n\t\t\t} else {\n\n\t\t\t\tthis._quickNormalizeRowHeight(this.vDomBottomNewRows);\n\t\t\t}\n\t\t}\n\t};\n\n\tRowManager.prototype._removeBottomRow = function (bottomDiff) {\n\n\t\tvar table = this.tableElement,\n\t\t    bottomRow = this.getDisplayRows()[this.vDomBottom],\n\t\t    bottomRowHeight = bottomRow.getHeight() || this.vDomRowHeight;\n\n\t\tif (bottomDiff >= bottomRowHeight) {\n\n\t\t\tvar rowEl = bottomRow.getElement();\n\n\t\t\tif (rowEl.parentNode) {\n\n\t\t\t\trowEl.parentNode.removeChild(rowEl);\n\t\t\t}\n\n\t\t\tthis.vDomBottomPad += bottomRowHeight;\n\n\t\t\tif (this.vDomBottomPad < 0) {\n\n\t\t\t\tthis.vDomBottomPad = 0;\n\t\t\t}\n\n\t\t\ttable.style.paddingBottom = this.vDomBottomPad + \"px\";\n\n\t\t\tthis.vDomScrollPosBottom -= bottomRowHeight;\n\n\t\t\tthis.vDomBottom--;\n\n\t\t\tbottomDiff = -(this.scrollTop - this.vDomScrollPosBottom);\n\n\t\t\tthis._removeBottomRow(bottomDiff);\n\t\t}\n\t};\n\n\tRowManager.prototype._quickNormalizeRowHeight = function (rows) {\n\n\t\trows.forEach(function (row) {\n\n\t\t\trow.calcHeight();\n\t\t});\n\n\t\trows.forEach(function (row) {\n\n\t\t\trow.setCellHeight();\n\t\t});\n\n\t\trows.length = 0;\n\t};\n\n\t//normalize height of active rows\n\n\tRowManager.prototype.normalizeHeight = function () {\n\n\t\tthis.activeRows.forEach(function (row) {\n\n\t\t\trow.normalizeHeight();\n\t\t});\n\t};\n\n\t//adjust the height of the table holder to fit in the Tabulator element\n\n\tRowManager.prototype.adjustTableSize = function () {\n\n\t\tvar initialHeight = this.element.clientHeight,\n\t\t    modExists;\n\n\t\tif (this.renderMode === \"virtual\") {\n\n\t\t\tvar otherHeight = this.columnManager.getElement().offsetHeight + (this.table.footerManager && !this.table.footerManager.external ? this.table.footerManager.getElement().offsetHeight : 0);\n\n\t\t\tif (this.fixedHeight) {\n\n\t\t\t\tthis.element.style.minHeight = \"calc(100% - \" + otherHeight + \"px)\";\n\n\t\t\t\tthis.element.style.height = \"calc(100% - \" + otherHeight + \"px)\";\n\n\t\t\t\tthis.element.style.maxHeight = \"calc(100% - \" + otherHeight + \"px)\";\n\t\t\t} else {\n\n\t\t\t\tthis.element.style.height = \"\";\n\n\t\t\t\tthis.element.style.height = this.table.element.clientHeight - otherHeight + \"px\";\n\n\t\t\t\tthis.element.scrollTop = this.scrollTop;\n\t\t\t}\n\n\t\t\tthis.height = this.element.clientHeight;\n\n\t\t\tthis.vDomWindowBuffer = this.table.options.virtualDomBuffer || this.height;\n\n\t\t\t//check if the table has changed size when dealing with variable height tables\n\n\t\t\tif (!this.fixedHeight && initialHeight != this.element.clientHeight) {\n\n\t\t\t\tmodExists = this.table.modExists(\"resizeTable\");\n\n\t\t\t\tif (modExists && !this.table.modules.resizeTable.autoResize || !modExists) {\n\n\t\t\t\t\tthis.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//renitialize all rows\n\n\tRowManager.prototype.reinitialize = function () {\n\n\t\tthis.rows.forEach(function (row) {\n\n\t\t\trow.reinitialize();\n\t\t});\n\t};\n\n\t//prevent table from being redrawn\n\n\tRowManager.prototype.blockRedraw = function () {\n\n\t\tthis.redrawBlock = true;\n\n\t\tthis.redrawBlockRestoreConfig = false;\n\t};\n\n\t//restore table redrawing\n\n\tRowManager.prototype.restoreRedraw = function () {\n\n\t\tthis.redrawBlock = false;\n\n\t\tif (this.redrawBlockRestoreConfig) {\n\n\t\t\tthis.refreshActiveData(this.redrawBlockRestoreConfig.stage, this.redrawBlockRestoreConfig.skipStage, this.redrawBlockRestoreConfig.renderInPosition);\n\n\t\t\tthis.redrawBlockRestoreConfig = false;\n\t\t} else {\n\n\t\t\tif (this.redrawBlockRederInPosition) {\n\n\t\t\t\tthis.reRenderInPosition();\n\t\t\t}\n\t\t}\n\n\t\tthis.redrawBlockRederInPosition = false;\n\t};\n\n\t//redraw table\n\n\tRowManager.prototype.redraw = function (force) {\n\n\t\tvar pos = 0,\n\t\t    left = this.scrollLeft;\n\n\t\tthis.adjustTableSize();\n\n\t\tthis.table.tableWidth = this.table.element.clientWidth;\n\n\t\tif (!force) {\n\n\t\t\tif (this.renderMode == \"classic\") {\n\n\t\t\t\tif (this.table.options.groupBy) {\n\n\t\t\t\t\tthis.refreshActiveData(\"group\", false, false);\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._simpleRender();\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tthis.reRenderInPosition();\n\n\t\t\t\tthis.scrollHorizontal(left);\n\t\t\t}\n\n\t\t\tif (!this.displayRowsCount) {\n\n\t\t\t\tif (this.table.options.placeholder) {\n\n\t\t\t\t\tthis.getElement().appendChild(this.table.options.placeholder);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.renderTable();\n\t\t}\n\t};\n\n\tRowManager.prototype.resetScroll = function () {\n\n\t\tthis.element.scrollLeft = 0;\n\n\t\tthis.element.scrollTop = 0;\n\n\t\tif (this.table.browser === \"ie\") {\n\n\t\t\tvar event = document.createEvent(\"Event\");\n\n\t\t\tevent.initEvent(\"scroll\", false, true);\n\n\t\t\tthis.element.dispatchEvent(event);\n\t\t} else {\n\n\t\t\tthis.element.dispatchEvent(new Event('scroll'));\n\t\t}\n\t};\n\n\t//public row object\n\n\tvar RowComponent = function RowComponent(row) {\n\n\t\tthis._row = row;\n\t};\n\n\tRowComponent.prototype.getData = function (transform) {\n\n\t\treturn this._row.getData(transform);\n\t};\n\n\tRowComponent.prototype.getElement = function () {\n\n\t\treturn this._row.getElement();\n\t};\n\n\tRowComponent.prototype.getCells = function () {\n\n\t\tvar cells = [];\n\n\t\tthis._row.getCells().forEach(function (cell) {\n\n\t\t\tcells.push(cell.getComponent());\n\t\t});\n\n\t\treturn cells;\n\t};\n\n\tRowComponent.prototype.getCell = function (column) {\n\n\t\tvar cell = this._row.getCell(column);\n\n\t\treturn cell ? cell.getComponent() : false;\n\t};\n\n\tRowComponent.prototype.getIndex = function () {\n\n\t\treturn this._row.getData(\"data\")[this._row.table.options.index];\n\t};\n\n\tRowComponent.prototype.getPosition = function (active) {\n\n\t\treturn this._row.table.rowManager.getRowPosition(this._row, active);\n\t};\n\n\tRowComponent.prototype.delete = function () {\n\n\t\treturn this._row.delete();\n\t};\n\n\tRowComponent.prototype.scrollTo = function () {\n\n\t\treturn this._row.table.rowManager.scrollToRow(this._row);\n\t};\n\n\tRowComponent.prototype.pageTo = function () {\n\n\t\tif (this._row.table.modExists(\"page\", true)) {\n\n\t\t\treturn this._row.table.modules.page.setPageToRow(this._row);\n\t\t}\n\t};\n\n\tRowComponent.prototype.move = function (to, after) {\n\n\t\tthis._row.moveToRow(to, after);\n\t};\n\n\tRowComponent.prototype.update = function (data) {\n\n\t\treturn this._row.updateData(data);\n\t};\n\n\tRowComponent.prototype.normalizeHeight = function () {\n\n\t\tthis._row.normalizeHeight(true);\n\t};\n\n\tRowComponent.prototype.select = function () {\n\n\t\tthis._row.table.modules.selectRow.selectRows(this._row);\n\t};\n\n\tRowComponent.prototype.deselect = function () {\n\n\t\tthis._row.table.modules.selectRow.deselectRows(this._row);\n\t};\n\n\tRowComponent.prototype.toggleSelect = function () {\n\n\t\tthis._row.table.modules.selectRow.toggleRow(this._row);\n\t};\n\n\tRowComponent.prototype.isSelected = function () {\n\n\t\treturn this._row.table.modules.selectRow.isRowSelected(this._row);\n\t};\n\n\tRowComponent.prototype._getSelf = function () {\n\n\t\treturn this._row;\n\t};\n\n\tRowComponent.prototype.validate = function () {\n\n\t\treturn this._row.validate();\n\t};\n\n\tRowComponent.prototype.freeze = function () {\n\n\t\tif (this._row.table.modExists(\"frozenRows\", true)) {\n\n\t\t\tthis._row.table.modules.frozenRows.freezeRow(this._row);\n\t\t}\n\t};\n\n\tRowComponent.prototype.unfreeze = function () {\n\n\t\tif (this._row.table.modExists(\"frozenRows\", true)) {\n\n\t\t\tthis._row.table.modules.frozenRows.unfreezeRow(this._row);\n\t\t}\n\t};\n\n\tRowComponent.prototype.isFrozen = function () {\n\n\t\tif (this._row.table.modExists(\"frozenRows\", true)) {\n\n\t\t\tvar index = this._row.table.modules.frozenRows.rows.indexOf(this._row);\n\n\t\t\treturn index > -1;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tRowComponent.prototype.treeCollapse = function () {\n\n\t\tif (this._row.table.modExists(\"dataTree\", true)) {\n\n\t\t\tthis._row.table.modules.dataTree.collapseRow(this._row);\n\t\t}\n\t};\n\n\tRowComponent.prototype.treeExpand = function () {\n\n\t\tif (this._row.table.modExists(\"dataTree\", true)) {\n\n\t\t\tthis._row.table.modules.dataTree.expandRow(this._row);\n\t\t}\n\t};\n\n\tRowComponent.prototype.treeToggle = function () {\n\n\t\tif (this._row.table.modExists(\"dataTree\", true)) {\n\n\t\t\tthis._row.table.modules.dataTree.toggleRow(this._row);\n\t\t}\n\t};\n\n\tRowComponent.prototype.getTreeParent = function () {\n\n\t\tif (this._row.table.modExists(\"dataTree\", true)) {\n\n\t\t\treturn this._row.table.modules.dataTree.getTreeParent(this._row);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tRowComponent.prototype.getTreeChildren = function () {\n\n\t\tif (this._row.table.modExists(\"dataTree\", true)) {\n\n\t\t\treturn this._row.table.modules.dataTree.getTreeChildren(this._row);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tRowComponent.prototype.addTreeChild = function (data, pos, index) {\n\n\t\tif (this._row.table.modExists(\"dataTree\", true)) {\n\n\t\t\treturn this._row.table.modules.dataTree.addTreeChildRow(this._row, data, pos, index);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tRowComponent.prototype.reformat = function () {\n\n\t\treturn this._row.reinitialize();\n\t};\n\n\tRowComponent.prototype.getGroup = function () {\n\n\t\treturn this._row.getGroup().getComponent();\n\t};\n\n\tRowComponent.prototype.getTable = function () {\n\n\t\treturn this._row.table;\n\t};\n\n\tRowComponent.prototype.getNextRow = function () {\n\n\t\tvar row = this._row.nextRow();\n\n\t\treturn row ? row.getComponent() : row;\n\t};\n\n\tRowComponent.prototype.getPrevRow = function () {\n\n\t\tvar row = this._row.prevRow();\n\n\t\treturn row ? row.getComponent() : row;\n\t};\n\n\tvar Row = function Row(data, parent) {\n\t\tvar type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"row\";\n\n\n\t\tthis.table = parent.table;\n\n\t\tthis.parent = parent;\n\n\t\tthis.data = {};\n\n\t\tthis.type = type; //type of element\n\n\t\tthis.element = this.createElement();\n\n\t\tthis.modules = {}; //hold module variables;\n\n\t\tthis.cells = [];\n\n\t\tthis.height = 0; //hold element height\n\n\t\tthis.heightStyled = \"\"; //hold element height prestyled to improve render efficiency\n\n\t\tthis.manualHeight = false; //user has manually set row height\n\n\t\tthis.outerHeight = 0; //holde lements outer height\n\n\t\tthis.initialized = false; //element has been rendered\n\n\t\tthis.heightInitialized = false; //element has resized cells to fit\n\n\n\t\tthis.component = null;\n\n\t\tthis.setData(data);\n\n\t\tthis.generateElement();\n\t};\n\n\tRow.prototype.createElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-row\");\n\n\t\tel.setAttribute(\"role\", \"row\");\n\n\t\treturn el;\n\t};\n\n\tRow.prototype.getElement = function () {\n\n\t\treturn this.element;\n\t};\n\n\tRow.prototype.detachElement = function () {\n\n\t\tif (this.element && this.element.parentNode) {\n\n\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t}\n\t};\n\n\tRow.prototype.generateElement = function () {\n\n\t\tvar self = this,\n\t\t    dblTap,\n\t\t    tapHold,\n\t\t    tap;\n\n\t\t//set row selection characteristics\n\n\t\tif (self.table.options.selectable !== false && self.table.modExists(\"selectRow\")) {\n\n\t\t\tself.table.modules.selectRow.initializeRow(this);\n\t\t}\n\n\t\t//setup movable rows\n\n\t\tif (self.table.options.movableRows !== false && self.table.modExists(\"moveRow\")) {\n\n\t\t\tself.table.modules.moveRow.initializeRow(this);\n\t\t}\n\n\t\t//setup data tree\n\n\t\tif (self.table.options.dataTree !== false && self.table.modExists(\"dataTree\")) {\n\n\t\t\tself.table.modules.dataTree.initializeRow(this);\n\t\t}\n\n\t\t//setup column colapse container\n\n\t\tif (self.table.options.responsiveLayout === \"collapse\" && self.table.modExists(\"responsiveLayout\")) {\n\n\t\t\tself.table.modules.responsiveLayout.initializeRow(this);\n\t\t}\n\n\t\t//set column menu\n\n\t\tif (self.table.options.rowContextMenu && this.table.modExists(\"menu\")) {\n\n\t\t\tself.table.modules.menu.initializeRow(this);\n\t\t}\n\n\t\t//handle row click events\n\n\t\tif (self.table.options.rowClick) {\n\n\t\t\tself.element.addEventListener(\"click\", function (e) {\n\n\t\t\t\tself.table.options.rowClick(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowDblClick) {\n\n\t\t\tself.element.addEventListener(\"dblclick\", function (e) {\n\n\t\t\t\tself.table.options.rowDblClick(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowContext) {\n\n\t\t\tself.element.addEventListener(\"contextmenu\", function (e) {\n\n\t\t\t\tself.table.options.rowContext(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\t//handle mouse events\n\n\t\tif (self.table.options.rowMouseEnter) {\n\n\t\t\tself.element.addEventListener(\"mouseenter\", function (e) {\n\n\t\t\t\tself.table.options.rowMouseEnter(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowMouseLeave) {\n\n\t\t\tself.element.addEventListener(\"mouseleave\", function (e) {\n\n\t\t\t\tself.table.options.rowMouseLeave(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowMouseOver) {\n\n\t\t\tself.element.addEventListener(\"mouseover\", function (e) {\n\n\t\t\t\tself.table.options.rowMouseOver(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowMouseOut) {\n\n\t\t\tself.element.addEventListener(\"mouseout\", function (e) {\n\n\t\t\t\tself.table.options.rowMouseOut(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowMouseMove) {\n\n\t\t\tself.element.addEventListener(\"mousemove\", function (e) {\n\n\t\t\t\tself.table.options.rowMouseMove(e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowTap) {\n\n\t\t\ttap = false;\n\n\t\t\tself.element.addEventListener(\"touchstart\", function (e) {\n\n\t\t\t\ttap = true;\n\t\t\t}, { passive: true });\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tif (tap) {\n\n\t\t\t\t\tself.table.options.rowTap(e, self.getComponent());\n\t\t\t\t}\n\n\t\t\t\ttap = false;\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowDblTap) {\n\n\t\t\tdblTap = null;\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tif (dblTap) {\n\n\t\t\t\t\tclearTimeout(dblTap);\n\n\t\t\t\t\tdblTap = null;\n\n\t\t\t\t\tself.table.options.rowDblTap(e, self.getComponent());\n\t\t\t\t} else {\n\n\t\t\t\t\tdblTap = setTimeout(function () {\n\n\t\t\t\t\t\tclearTimeout(dblTap);\n\n\t\t\t\t\t\tdblTap = null;\n\t\t\t\t\t}, 300);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.rowTapHold) {\n\n\t\t\ttapHold = null;\n\n\t\t\tself.element.addEventListener(\"touchstart\", function (e) {\n\n\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\ttapHold = setTimeout(function () {\n\n\t\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\t\ttapHold = null;\n\n\t\t\t\t\ttap = false;\n\n\t\t\t\t\tself.table.options.rowTapHold(e, self.getComponent());\n\t\t\t\t}, 1000);\n\t\t\t}, { passive: true });\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\ttapHold = null;\n\t\t\t});\n\t\t}\n\t};\n\n\tRow.prototype.generateCells = function () {\n\n\t\tthis.cells = this.table.columnManager.generateCells(this);\n\t};\n\n\t//functions to setup on first render\n\n\tRow.prototype.initialize = function (force) {\n\n\t\tvar self = this;\n\n\t\tif (!self.initialized || force) {\n\n\t\t\tself.deleteCells();\n\n\t\t\twhile (self.element.firstChild) {\n\t\t\t\tself.element.removeChild(self.element.firstChild);\n\t\t\t} //handle frozen cells\n\n\t\t\tif (this.table.modExists(\"frozenColumns\")) {\n\n\t\t\t\tthis.table.modules.frozenColumns.layoutRow(this);\n\t\t\t}\n\n\t\t\tthis.generateCells();\n\n\t\t\tself.cells.forEach(function (cell) {\n\n\t\t\t\tself.element.appendChild(cell.getElement());\n\n\t\t\t\tcell.cellRendered();\n\t\t\t});\n\n\t\t\tif (force) {\n\n\t\t\t\tself.normalizeHeight();\n\t\t\t}\n\n\t\t\t//setup movable rows\n\n\t\t\tif (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n\n\t\t\t\tself.table.modules.dataTree.layoutRow(this);\n\t\t\t}\n\n\t\t\t//setup column colapse container\n\n\t\t\tif (self.table.options.responsiveLayout === \"collapse\" && self.table.modExists(\"responsiveLayout\")) {\n\n\t\t\t\tself.table.modules.responsiveLayout.layoutRow(this);\n\t\t\t}\n\n\t\t\tif (self.table.options.rowFormatter) {\n\n\t\t\t\tself.table.options.rowFormatter(self.getComponent());\n\t\t\t}\n\n\t\t\t//set resizable handles\n\n\t\t\tif (self.table.options.resizableRows && self.table.modExists(\"resizeRows\")) {\n\n\t\t\t\tself.table.modules.resizeRows.initializeRow(self);\n\t\t\t}\n\n\t\t\tself.initialized = true;\n\t\t}\n\t};\n\n\tRow.prototype.reinitializeHeight = function () {\n\n\t\tthis.heightInitialized = false;\n\n\t\tif (this.element.offsetParent !== null) {\n\n\t\t\tthis.normalizeHeight(true);\n\t\t}\n\t};\n\n\tRow.prototype.reinitialize = function () {\n\n\t\tthis.initialized = false;\n\n\t\tthis.heightInitialized = false;\n\n\t\tif (!this.manualHeight) {\n\n\t\t\tthis.height = 0;\n\n\t\t\tthis.heightStyled = \"\";\n\t\t}\n\n\t\tif (this.element.offsetParent !== null) {\n\n\t\t\tthis.initialize(true);\n\t\t}\n\t};\n\n\t//get heights when doing bulk row style calcs in virtual DOM\n\n\tRow.prototype.calcHeight = function (force) {\n\n\t\tvar maxHeight = 0,\n\t\t    minHeight = this.table.options.resizableRows ? this.element.clientHeight : 0;\n\n\t\tthis.cells.forEach(function (cell) {\n\n\t\t\tvar height = cell.getHeight();\n\n\t\t\tif (height > maxHeight) {\n\n\t\t\t\tmaxHeight = height;\n\t\t\t}\n\t\t});\n\n\t\tif (force) {\n\n\t\t\tthis.height = Math.max(maxHeight, minHeight);\n\t\t} else {\n\n\t\t\tthis.height = this.manualHeight ? this.height : Math.max(maxHeight, minHeight);\n\t\t}\n\n\t\tthis.heightStyled = this.height ? this.height + \"px\" : \"\";\n\n\t\tthis.outerHeight = this.element.offsetHeight;\n\t};\n\n\t//set of cells\n\n\tRow.prototype.setCellHeight = function () {\n\n\t\tthis.cells.forEach(function (cell) {\n\n\t\t\tcell.setHeight();\n\t\t});\n\n\t\tthis.heightInitialized = true;\n\t};\n\n\tRow.prototype.clearCellHeight = function () {\n\n\t\tthis.cells.forEach(function (cell) {\n\n\t\t\tcell.clearHeight();\n\t\t});\n\t};\n\n\t//normalize the height of elements in the row\n\n\tRow.prototype.normalizeHeight = function (force) {\n\n\t\tif (force) {\n\n\t\t\tthis.clearCellHeight();\n\t\t}\n\n\t\tthis.calcHeight(force);\n\n\t\tthis.setCellHeight();\n\t};\n\n\t// Row.prototype.setHeight = function(height){\n\n\t// \tthis.height = height;\n\n\n\t// \tthis.setCellHeight();\n\n\t// };\n\n\n\t//set height of rows\n\n\tRow.prototype.setHeight = function (height, force) {\n\n\t\tif (this.height != height || force) {\n\n\t\t\tthis.manualHeight = true;\n\n\t\t\tthis.height = height;\n\n\t\t\tthis.heightStyled = height ? height + \"px\" : \"\";\n\n\t\t\tthis.setCellHeight();\n\n\t\t\t// this.outerHeight = this.element.outerHeight();\n\n\t\t\tthis.outerHeight = this.element.offsetHeight;\n\t\t}\n\t};\n\n\t//return rows outer height\n\n\tRow.prototype.getHeight = function () {\n\n\t\treturn this.outerHeight;\n\t};\n\n\t//return rows outer Width\n\n\tRow.prototype.getWidth = function () {\n\n\t\treturn this.element.offsetWidth;\n\t};\n\n\t//////////////// Cell Management /////////////////\n\n\n\tRow.prototype.deleteCell = function (cell) {\n\n\t\tvar index = this.cells.indexOf(cell);\n\n\t\tif (index > -1) {\n\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t};\n\n\t//////////////// Data Management /////////////////\n\n\n\tRow.prototype.setData = function (data) {\n\n\t\tif (this.table.modExists(\"mutator\")) {\n\n\t\t\tdata = this.table.modules.mutator.transformRow(data, \"data\");\n\t\t}\n\n\t\tthis.data = data;\n\n\t\tif (this.table.options.reactiveData && this.table.modExists(\"reactiveData\", true)) {\n\n\t\t\tthis.table.modules.reactiveData.watchRow(this);\n\t\t}\n\t};\n\n\t//update the rows data\n\n\tRow.prototype.updateData = function (updatedData) {\n\t\tvar _this15 = this;\n\n\t\tvar visible = Tabulator.prototype.helpers.elVisible(this.element),\n\t\t    tempData = {},\n\t\t    newRowData;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (typeof updatedData === \"string\") {\n\n\t\t\t\tupdatedData = JSON.parse(updatedData);\n\t\t\t}\n\n\t\t\tif (_this15.table.options.reactiveData && _this15.table.modExists(\"reactiveData\", true)) {\n\n\t\t\t\t_this15.table.modules.reactiveData.block();\n\t\t\t}\n\n\t\t\t//mutate incomming data if needed\n\n\t\t\tif (_this15.table.modExists(\"mutator\")) {\n\n\t\t\t\ttempData = Object.assign(tempData, _this15.data);\n\n\t\t\t\ttempData = Object.assign(tempData, updatedData);\n\n\t\t\t\tnewRowData = _this15.table.modules.mutator.transformRow(tempData, \"data\", updatedData);\n\t\t\t} else {\n\n\t\t\t\tnewRowData = updatedData;\n\t\t\t}\n\n\t\t\t//set data\n\n\t\t\tfor (var attrname in newRowData) {\n\n\t\t\t\t_this15.data[attrname] = newRowData[attrname];\n\t\t\t}\n\n\t\t\tif (_this15.table.options.reactiveData && _this15.table.modExists(\"reactiveData\", true)) {\n\n\t\t\t\t_this15.table.modules.reactiveData.unblock();\n\t\t\t}\n\n\t\t\t//update affected cells only\n\n\t\t\tfor (var attrname in updatedData) {\n\n\t\t\t\tvar columns = _this15.table.columnManager.getColumnsByFieldRoot(attrname);\n\n\t\t\t\tcolumns.forEach(function (column) {\n\n\t\t\t\t\tvar cell = _this15.getCell(column.getField());\n\n\t\t\t\t\tif (cell) {\n\n\t\t\t\t\t\tvar value = column.getFieldValue(newRowData);\n\n\t\t\t\t\t\tif (cell.getValue() != value) {\n\n\t\t\t\t\t\t\tcell.setValueProcessData(value);\n\n\t\t\t\t\t\t\tif (visible) {\n\n\t\t\t\t\t\t\t\tcell.cellRendered();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Partial reinitialization if visible\n\n\t\t\tif (visible) {\n\n\t\t\t\t_this15.normalizeHeight(true);\n\n\t\t\t\tif (_this15.table.options.rowFormatter) {\n\n\t\t\t\t\t_this15.table.options.rowFormatter(_this15.getComponent());\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t_this15.initialized = false;\n\n\t\t\t\t_this15.height = 0;\n\n\t\t\t\t_this15.heightStyled = \"\";\n\t\t\t}\n\n\t\t\tif (_this15.table.options.dataTree !== false && _this15.table.modExists(\"dataTree\") && _this15.table.modules.dataTree.redrawNeeded(updatedData)) {\n\n\t\t\t\t_this15.table.modules.dataTree.initializeRow(_this15);\n\n\t\t\t\t_this15.table.modules.dataTree.layoutRow(_this15);\n\n\t\t\t\t_this15.table.rowManager.refreshActiveData(\"tree\", false, true);\n\t\t\t}\n\n\t\t\t//this.reinitialize();\n\n\n\t\t\t_this15.table.options.rowUpdated.call(_this15.table, _this15.getComponent());\n\n\t\t\tresolve();\n\t\t});\n\t};\n\n\tRow.prototype.getData = function (transform) {\n\n\t\tvar self = this;\n\n\t\tif (transform) {\n\n\t\t\tif (self.table.modExists(\"accessor\")) {\n\n\t\t\t\treturn self.table.modules.accessor.transformRow(self.data, transform);\n\t\t\t}\n\t\t} else {\n\n\t\t\treturn this.data;\n\t\t}\n\t};\n\n\tRow.prototype.getCell = function (column) {\n\n\t\tvar match = false;\n\n\t\tcolumn = this.table.columnManager.findColumn(column);\n\n\t\tmatch = this.cells.find(function (cell) {\n\n\t\t\treturn cell.column === column;\n\t\t});\n\n\t\treturn match;\n\t};\n\n\tRow.prototype.getCellIndex = function (findCell) {\n\n\t\treturn this.cells.findIndex(function (cell) {\n\n\t\t\treturn cell === findCell;\n\t\t});\n\t};\n\n\tRow.prototype.findNextEditableCell = function (index) {\n\n\t\tvar nextCell = false;\n\n\t\tif (index < this.cells.length - 1) {\n\n\t\t\tfor (var i = index + 1; i < this.cells.length; i++) {\n\n\t\t\t\tvar cell = this.cells[i];\n\n\t\t\t\tif (cell.column.modules.edit && Tabulator.prototype.helpers.elVisible(cell.getElement())) {\n\n\t\t\t\t\tvar allowEdit = true;\n\n\t\t\t\t\tif (typeof cell.column.modules.edit.check == \"function\") {\n\n\t\t\t\t\t\tallowEdit = cell.column.modules.edit.check(cell.getComponent());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (allowEdit) {\n\n\t\t\t\t\t\tnextCell = cell;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nextCell;\n\t};\n\n\tRow.prototype.findPrevEditableCell = function (index) {\n\n\t\tvar prevCell = false;\n\n\t\tif (index > 0) {\n\n\t\t\tfor (var i = index - 1; i >= 0; i--) {\n\n\t\t\t\tvar cell = this.cells[i],\n\t\t\t\t    allowEdit = true;\n\n\t\t\t\tif (cell.column.modules.edit && Tabulator.prototype.helpers.elVisible(cell.getElement())) {\n\n\t\t\t\t\tif (typeof cell.column.modules.edit.check == \"function\") {\n\n\t\t\t\t\t\tallowEdit = cell.column.modules.edit.check(cell.getComponent());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (allowEdit) {\n\n\t\t\t\t\t\tprevCell = cell;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn prevCell;\n\t};\n\n\tRow.prototype.getCells = function () {\n\n\t\treturn this.cells;\n\t};\n\n\tRow.prototype.nextRow = function () {\n\n\t\tvar row = this.table.rowManager.nextDisplayRow(this, true);\n\n\t\treturn row || false;\n\t};\n\n\tRow.prototype.prevRow = function () {\n\n\t\tvar row = this.table.rowManager.prevDisplayRow(this, true);\n\n\t\treturn row || false;\n\t};\n\n\tRow.prototype.moveToRow = function (to, before) {\n\n\t\tvar toRow = this.table.rowManager.findRow(to);\n\n\t\tif (toRow) {\n\n\t\t\tthis.table.rowManager.moveRowActual(this, toRow, !before);\n\n\t\t\tthis.table.rowManager.refreshActiveData(\"display\", false, true);\n\t\t} else {\n\n\t\t\tconsole.warn(\"Move Error - No matching row found:\", to);\n\t\t}\n\t};\n\n\tRow.prototype.validate = function () {\n\n\t\tvar invalid = [];\n\n\t\tthis.cells.forEach(function (cell) {\n\n\t\t\tif (!cell.validate()) {\n\n\t\t\t\tinvalid.push(cell.getComponent());\n\t\t\t}\n\t\t});\n\n\t\treturn invalid.length ? invalid : true;\n\t};\n\n\t///////////////////// Actions  /////////////////////\n\n\n\tRow.prototype.delete = function () {\n\t\tvar _this16 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar index, rows;\n\n\t\t\tif (_this16.table.options.history && _this16.table.modExists(\"history\")) {\n\n\t\t\t\tif (_this16.table.options.groupBy && _this16.table.modExists(\"groupRows\")) {\n\n\t\t\t\t\trows = _this16.getGroup().rows;\n\n\t\t\t\t\tindex = rows.indexOf(_this16);\n\n\t\t\t\t\tif (index) {\n\n\t\t\t\t\t\tindex = rows[index - 1];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = _this16.table.rowManager.getRowIndex(_this16);\n\n\t\t\t\t\tif (index) {\n\n\t\t\t\t\t\tindex = _this16.table.rowManager.rows[index - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_this16.table.modules.history.action(\"rowDelete\", _this16, { data: _this16.getData(), pos: !index, index: index });\n\t\t\t}\n\n\t\t\t_this16.deleteActual();\n\n\t\t\tresolve();\n\t\t});\n\t};\n\n\tRow.prototype.deleteActual = function (blockRedraw) {\n\n\t\tvar index = this.table.rowManager.getRowIndex(this);\n\n\t\tthis.detatchModules();\n\n\t\t// if(this.table.options.dataTree && this.table.modExists(\"dataTree\")){\n\n\t\t// \tthis.table.modules.dataTree.collapseRow(this, true);\n\n\t\t// }\n\n\n\t\t//remove any reactive data watchers from row object\n\n\t\tif (this.table.options.reactiveData && this.table.modExists(\"reactiveData\", true)) {}\n\n\t\t// this.table.modules.reactiveData.unwatchRow(this);\n\n\t\t//remove from group\n\n\t\tif (this.modules.group) {\n\n\t\t\tthis.modules.group.removeRow(this);\n\t\t}\n\n\t\tthis.table.rowManager.deleteRow(this, blockRedraw);\n\n\t\tthis.deleteCells();\n\n\t\tthis.initialized = false;\n\n\t\tthis.heightInitialized = false;\n\n\t\tif (this.table.options.dataTree && this.table.modExists(\"dataTree\", true)) {\n\n\t\t\tthis.table.modules.dataTree.rowDelete(this);\n\t\t}\n\n\t\t//recalc column calculations if present\n\n\t\tif (this.table.modExists(\"columnCalcs\")) {\n\n\t\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\n\t\t\t\tthis.table.modules.columnCalcs.recalcRowGroup(this);\n\t\t\t} else {\n\n\t\t\t\tthis.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n\t\t\t}\n\t\t}\n\t};\n\n\tRow.prototype.detatchModules = function () {\n\n\t\t//deselect row if it is selected\n\n\t\tif (this.table.modExists(\"selectRow\")) {\n\n\t\t\tthis.table.modules.selectRow._deselectRow(this, true);\n\t\t}\n\n\t\t//cancel edit if row is currently being edited\n\n\t\tif (this.table.modExists(\"edit\")) {\n\n\t\t\tif (this.table.modules.edit.currentCell.row === this) {\n\n\t\t\t\tthis.table.modules.edit.cancelEdit();\n\t\t\t}\n\t\t}\n\n\t\tif (this.table.modExists(\"frozenRows\")) {\n\n\t\t\tthis.table.modules.frozenRows.detachRow(this);\n\t\t}\n\t};\n\n\tRow.prototype.deleteCells = function () {\n\n\t\tvar cellCount = this.cells.length;\n\n\t\tfor (var _i5 = 0; _i5 < cellCount; _i5++) {\n\n\t\t\tthis.cells[0].delete();\n\t\t}\n\t};\n\n\tRow.prototype.wipe = function () {\n\n\t\tthis.detatchModules();\n\n\t\tthis.deleteCells();\n\n\t\twhile (this.element.firstChild) {\n\t\t\tthis.element.removeChild(this.element.firstChild);\n\t\t}this.element = false;\n\n\t\tthis.modules = {};\n\n\t\tif (this.element.parentNode) {\n\n\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t}\n\t};\n\n\tRow.prototype.getGroup = function () {\n\n\t\treturn this.modules.group || false;\n\t};\n\n\t//////////////// Object Generation /////////////////\n\n\tRow.prototype.getComponent = function () {\n\n\t\tif (!this.component) {\n\n\t\t\tthis.component = new RowComponent(this);\n\t\t}\n\n\t\treturn this.component;\n\t};\n\n\t//public row object\n\n\tvar CellComponent = function CellComponent(cell) {\n\n\t\tthis._cell = cell;\n\t};\n\n\tCellComponent.prototype.getValue = function () {\n\n\t\treturn this._cell.getValue();\n\t};\n\n\tCellComponent.prototype.getOldValue = function () {\n\n\t\treturn this._cell.getOldValue();\n\t};\n\n\tCellComponent.prototype.getElement = function () {\n\n\t\treturn this._cell.getElement();\n\t};\n\n\tCellComponent.prototype.getRow = function () {\n\n\t\treturn this._cell.row.getComponent();\n\t};\n\n\tCellComponent.prototype.getData = function () {\n\n\t\treturn this._cell.row.getData();\n\t};\n\n\tCellComponent.prototype.getField = function () {\n\n\t\treturn this._cell.column.getField();\n\t};\n\n\tCellComponent.prototype.getColumn = function () {\n\n\t\treturn this._cell.column.getComponent();\n\t};\n\n\tCellComponent.prototype.setValue = function (value, mutate) {\n\n\t\tif (typeof mutate == \"undefined\") {\n\n\t\t\tmutate = true;\n\t\t}\n\n\t\tthis._cell.setValue(value, mutate);\n\t};\n\n\tCellComponent.prototype.restoreOldValue = function () {\n\n\t\tthis._cell.setValueActual(this._cell.getOldValue());\n\t};\n\n\tCellComponent.prototype.edit = function (force) {\n\n\t\treturn this._cell.edit(force);\n\t};\n\n\tCellComponent.prototype.cancelEdit = function () {\n\n\t\tthis._cell.cancelEdit();\n\t};\n\n\tCellComponent.prototype.isEdited = function () {\n\n\t\treturn !!this._cell.modules.edit && this._cell.modules.edit.edited;\n\t};\n\n\tCellComponent.prototype.clearEdited = function () {\n\n\t\tif (self.table.modExists(\"edit\", true)) {\n\n\t\t\tthis._cell.table.modules.edit.clearEdited(this._cell);\n\t\t}\n\t};\n\n\tCellComponent.prototype.isValid = function () {\n\n\t\treturn this._cell.modules.validate ? !this._cell.modules.validate.invalid : true;\n\t};\n\n\tCellComponent.prototype.validate = function () {\n\n\t\treturn this._cell.validate();\n\t};\n\n\tCellComponent.prototype.clearValidation = function () {\n\n\t\tif (self.table.modExists(\"validate\", true)) {\n\n\t\t\tthis._cell.table.modules.validate.clearValidation(this._cell);\n\t\t}\n\t};\n\n\tCellComponent.prototype.nav = function () {\n\n\t\treturn this._cell.nav();\n\t};\n\n\tCellComponent.prototype.checkHeight = function () {\n\n\t\tthis._cell.checkHeight();\n\t};\n\n\tCellComponent.prototype.getTable = function () {\n\n\t\treturn this._cell.table;\n\t};\n\n\tCellComponent.prototype._getSelf = function () {\n\n\t\treturn this._cell;\n\t};\n\n\tvar Cell = function Cell(column, row) {\n\n\t\tthis.table = column.table;\n\n\t\tthis.column = column;\n\n\t\tthis.row = row;\n\n\t\tthis.element = null;\n\n\t\tthis.value = null;\n\n\t\tthis.oldValue = null;\n\n\t\tthis.modules = {};\n\n\t\tthis.height = null;\n\n\t\tthis.width = null;\n\n\t\tthis.minWidth = null;\n\n\t\tthis.component = null;\n\n\t\tthis.build();\n\t};\n\n\t//////////////// Setup Functions /////////////////\n\n\n\t//generate element\n\n\tCell.prototype.build = function () {\n\n\t\tthis.generateElement();\n\n\t\tthis.setWidth();\n\n\t\tthis._configureCell();\n\n\t\tthis.setValueActual(this.column.getFieldValue(this.row.data));\n\t};\n\n\tCell.prototype.generateElement = function () {\n\n\t\tthis.element = document.createElement('div');\n\n\t\tthis.element.className = \"tabulator-cell\";\n\n\t\tthis.element.setAttribute(\"role\", \"gridcell\");\n\n\t\tthis.element = this.element;\n\t};\n\n\tCell.prototype._configureCell = function () {\n\n\t\tvar self = this,\n\t\t    cellEvents = self.column.cellEvents,\n\t\t    element = self.element,\n\t\t    field = this.column.getField(),\n\t\t    vertAligns = {\n\n\t\t\ttop: \"flex-start\",\n\n\t\t\tbottom: \"flex-end\",\n\n\t\t\tmiddle: \"center\"\n\n\t\t},\n\t\t    hozAligns = {\n\n\t\t\tleft: \"flex-start\",\n\n\t\t\tright: \"flex-end\",\n\n\t\t\tcenter: \"center\"\n\n\t\t};\n\n\t\t//set text alignment\n\n\t\telement.style.textAlign = self.column.hozAlign;\n\n\t\tif (self.column.vertAlign) {\n\n\t\t\telement.style.display = \"inline-flex\";\n\n\t\t\telement.style.alignItems = vertAligns[self.column.vertAlign] || \"\";\n\n\t\t\tif (self.column.hozAlign) {\n\n\t\t\t\telement.style.justifyContent = hozAligns[self.column.hozAlign] || \"\";\n\t\t\t}\n\t\t}\n\n\t\tif (field) {\n\n\t\t\telement.setAttribute(\"tabulator-field\", field);\n\t\t}\n\n\t\t//add class to cell if needed\n\n\t\tif (self.column.definition.cssClass) {\n\n\t\t\tvar classNames = self.column.definition.cssClass.split(\" \");\n\n\t\t\tclassNames.forEach(function (className) {\n\n\t\t\t\telement.classList.add(className);\n\t\t\t});\n\t\t}\n\n\t\t//update tooltip on mouse enter\n\n\t\tif (this.table.options.tooltipGenerationMode === \"hover\") {\n\n\t\t\telement.addEventListener(\"mouseenter\", function (e) {\n\n\t\t\t\tself._generateTooltip();\n\t\t\t});\n\t\t}\n\n\t\tself._bindClickEvents(cellEvents);\n\n\t\tself._bindTouchEvents(cellEvents);\n\n\t\tself._bindMouseEvents(cellEvents);\n\n\t\tif (self.column.modules.edit) {\n\n\t\t\tself.table.modules.edit.bindEditor(self);\n\t\t}\n\n\t\tif (self.column.definition.rowHandle && self.table.options.movableRows !== false && self.table.modExists(\"moveRow\")) {\n\n\t\t\tself.table.modules.moveRow.initializeCell(self);\n\t\t}\n\n\t\t//hide cell if not visible\n\n\t\tif (!self.column.visible) {\n\n\t\t\tself.hide();\n\t\t}\n\t};\n\n\tCell.prototype._bindClickEvents = function (cellEvents) {\n\n\t\tvar self = this,\n\t\t    element = self.element;\n\n\t\t//set event bindings\n\n\t\tif (cellEvents.cellClick || self.table.options.cellClick) {\n\n\t\t\telement.addEventListener(\"click\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellClick) {\n\n\t\t\t\t\tcellEvents.cellClick.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellClick) {\n\n\t\t\t\t\tself.table.options.cellClick.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellDblClick || this.table.options.cellDblClick) {\n\n\t\t\telement.addEventListener(\"dblclick\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellDblClick) {\n\n\t\t\t\t\tcellEvents.cellDblClick.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellDblClick) {\n\n\t\t\t\t\tself.table.options.cellDblClick.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\n\t\t\telement.addEventListener(\"dblclick\", function (e) {\n\n\t\t\t\tif (self.table.modExists(\"edit\")) {\n\n\t\t\t\t\tif (self.table.modules.edit.currentCell === self) {\n\n\t\t\t\t\t\treturn; //prevent instant selection of editor content\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\ttry {\n\n\t\t\t\t\tif (document.selection) {\n\t\t\t\t\t\t// IE\n\n\t\t\t\t\t\tvar range = document.body.createTextRange();\n\n\t\t\t\t\t\trange.moveToElementText(self.element);\n\n\t\t\t\t\t\trange.select();\n\t\t\t\t\t} else if (window.getSelection) {\n\n\t\t\t\t\t\tvar range = document.createRange();\n\n\t\t\t\t\t\trange.selectNode(self.element);\n\n\t\t\t\t\t\twindow.getSelection().removeAllRanges();\n\n\t\t\t\t\t\twindow.getSelection().addRange(range);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellContext || this.table.options.cellContext) {\n\n\t\t\telement.addEventListener(\"contextmenu\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellContext) {\n\n\t\t\t\t\tcellEvents.cellContext.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellContext) {\n\n\t\t\t\t\tself.table.options.cellContext.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tCell.prototype._bindMouseEvents = function (cellEvents) {\n\n\t\tvar self = this,\n\t\t    element = self.element;\n\n\t\tif (cellEvents.cellMouseEnter || self.table.options.cellMouseEnter) {\n\n\t\t\telement.addEventListener(\"mouseenter\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellMouseEnter) {\n\n\t\t\t\t\tcellEvents.cellMouseEnter.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellMouseEnter) {\n\n\t\t\t\t\tself.table.options.cellMouseEnter.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellMouseLeave || self.table.options.cellMouseLeave) {\n\n\t\t\telement.addEventListener(\"mouseleave\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellMouseLeave) {\n\n\t\t\t\t\tcellEvents.cellMouseLeave.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellMouseLeave) {\n\n\t\t\t\t\tself.table.options.cellMouseLeave.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellMouseOver || self.table.options.cellMouseOver) {\n\n\t\t\telement.addEventListener(\"mouseover\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellMouseOver) {\n\n\t\t\t\t\tcellEvents.cellMouseOver.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellMouseOver) {\n\n\t\t\t\t\tself.table.options.cellMouseOver.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellMouseOut || self.table.options.cellMouseOut) {\n\n\t\t\telement.addEventListener(\"mouseout\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellMouseOut) {\n\n\t\t\t\t\tcellEvents.cellMouseOut.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellMouseOut) {\n\n\t\t\t\t\tself.table.options.cellMouseOut.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellMouseMove || self.table.options.cellMouseMove) {\n\n\t\t\telement.addEventListener(\"mousemove\", function (e) {\n\n\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\tif (cellEvents.cellMouseMove) {\n\n\t\t\t\t\tcellEvents.cellMouseMove.call(self.table, e, component);\n\t\t\t\t}\n\n\t\t\t\tif (self.table.options.cellMouseMove) {\n\n\t\t\t\t\tself.table.options.cellMouseMove.call(self.table, e, component);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tCell.prototype._bindTouchEvents = function (cellEvents) {\n\n\t\tvar self = this,\n\t\t    element = self.element,\n\t\t    dblTap,\n\t\t    tapHold,\n\t\t    tap;\n\n\t\tif (cellEvents.cellTap || this.table.options.cellTap) {\n\n\t\t\ttap = false;\n\n\t\t\telement.addEventListener(\"touchstart\", function (e) {\n\n\t\t\t\ttap = true;\n\t\t\t}, { passive: true });\n\n\t\t\telement.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tif (tap) {\n\n\t\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\t\tif (cellEvents.cellTap) {\n\n\t\t\t\t\t\tcellEvents.cellTap.call(self.table, e, component);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self.table.options.cellTap) {\n\n\t\t\t\t\t\tself.table.options.cellTap.call(self.table, e, component);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttap = false;\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellDblTap || this.table.options.cellDblTap) {\n\n\t\t\tdblTap = null;\n\n\t\t\telement.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tif (dblTap) {\n\n\t\t\t\t\tclearTimeout(dblTap);\n\n\t\t\t\t\tdblTap = null;\n\n\t\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\t\tif (cellEvents.cellDblTap) {\n\n\t\t\t\t\t\tcellEvents.cellDblTap.call(self.table, e, component);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self.table.options.cellDblTap) {\n\n\t\t\t\t\t\tself.table.options.cellDblTap.call(self.table, e, component);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tdblTap = setTimeout(function () {\n\n\t\t\t\t\t\tclearTimeout(dblTap);\n\n\t\t\t\t\t\tdblTap = null;\n\t\t\t\t\t}, 300);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (cellEvents.cellTapHold || this.table.options.cellTapHold) {\n\n\t\t\ttapHold = null;\n\n\t\t\telement.addEventListener(\"touchstart\", function (e) {\n\n\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\ttapHold = setTimeout(function () {\n\n\t\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\t\ttapHold = null;\n\n\t\t\t\t\ttap = false;\n\n\t\t\t\t\tvar component = self.getComponent();\n\n\t\t\t\t\tif (cellEvents.cellTapHold) {\n\n\t\t\t\t\t\tcellEvents.cellTapHold.call(self.table, e, component);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self.table.options.cellTapHold) {\n\n\t\t\t\t\t\tself.table.options.cellTapHold.call(self.table, e, component);\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t}, { passive: true });\n\n\t\t\telement.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\ttapHold = null;\n\t\t\t});\n\t\t}\n\t};\n\n\t//generate cell contents\n\n\tCell.prototype._generateContents = function () {\n\n\t\tvar val;\n\n\t\tif (this.table.modExists(\"format\")) {\n\n\t\t\tval = this.table.modules.format.formatValue(this);\n\t\t} else {\n\n\t\t\tval = this.element.innerHTML = this.value;\n\t\t}\n\n\t\tswitch (typeof val === 'undefined' ? 'undefined' : _typeof(val)) {\n\n\t\t\tcase \"object\":\n\n\t\t\t\tif (val instanceof Node) {\n\n\t\t\t\t\t//clear previous cell contents\n\n\t\t\t\t\twhile (this.element.firstChild) {\n\t\t\t\t\t\tthis.element.removeChild(this.element.firstChild);\n\t\t\t\t\t}this.element.appendChild(val);\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.element.innerHTML = \"\";\n\n\t\t\t\t\tif (val != null) {\n\n\t\t\t\t\t\tconsole.warn(\"Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:\", val);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"undefined\":\n\n\t\t\tcase \"null\":\n\n\t\t\t\tthis.element.innerHTML = \"\";\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthis.element.innerHTML = val;\n\n\t\t}\n\t};\n\n\tCell.prototype.cellRendered = function () {\n\n\t\tif (this.table.modExists(\"format\") && this.table.modules.format.cellRendered) {\n\n\t\t\tthis.table.modules.format.cellRendered(this);\n\t\t}\n\t};\n\n\t//generate tooltip text\n\n\tCell.prototype._generateTooltip = function () {\n\n\t\tvar tooltip = this.column.tooltip;\n\n\t\tif (tooltip) {\n\n\t\t\tif (tooltip === true) {\n\n\t\t\t\ttooltip = this.value;\n\t\t\t} else if (typeof tooltip == \"function\") {\n\n\t\t\t\ttooltip = tooltip(this.getComponent());\n\n\t\t\t\tif (tooltip === false) {\n\n\t\t\t\t\ttooltip = \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof tooltip === \"undefined\") {\n\n\t\t\t\ttooltip = \"\";\n\t\t\t}\n\n\t\t\tthis.element.setAttribute(\"title\", tooltip);\n\t\t} else {\n\n\t\t\tthis.element.setAttribute(\"title\", \"\");\n\t\t}\n\t};\n\n\t//////////////////// Getters ////////////////////\n\n\tCell.prototype.getElement = function () {\n\n\t\treturn this.element;\n\t};\n\n\tCell.prototype.getValue = function () {\n\n\t\treturn this.value;\n\t};\n\n\tCell.prototype.getOldValue = function () {\n\n\t\treturn this.oldValue;\n\t};\n\n\t//////////////////// Actions ////////////////////\n\n\n\tCell.prototype.setValue = function (value, mutate) {\n\n\t\tvar changed = this.setValueProcessData(value, mutate),\n\t\t    component;\n\n\t\tif (changed) {\n\n\t\t\tif (this.table.options.history && this.table.modExists(\"history\")) {\n\n\t\t\t\tthis.table.modules.history.action(\"cellEdit\", this, { oldValue: this.oldValue, newValue: this.value });\n\t\t\t}\n\n\t\t\tcomponent = this.getComponent();\n\n\t\t\tif (this.column.cellEvents.cellEdited) {\n\n\t\t\t\tthis.column.cellEvents.cellEdited.call(this.table, component);\n\t\t\t}\n\n\t\t\tthis.cellRendered();\n\n\t\t\tthis.table.options.cellEdited.call(this.table, component);\n\n\t\t\tthis.table.options.dataEdited.call(this.table, this.table.rowManager.getData());\n\t\t}\n\t};\n\n\tCell.prototype.setValueProcessData = function (value, mutate) {\n\n\t\tvar changed = false;\n\n\t\tif (this.value != value) {\n\n\t\t\tchanged = true;\n\n\t\t\tif (mutate) {\n\n\t\t\t\tif (this.column.modules.mutate) {\n\n\t\t\t\t\tvalue = this.table.modules.mutator.transformCell(this, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setValueActual(value);\n\n\t\tif (changed && this.table.modExists(\"columnCalcs\")) {\n\n\t\t\tif (this.column.definition.topCalc || this.column.definition.bottomCalc) {\n\n\t\t\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\n\t\t\t\t\tif (this.table.options.columnCalcs == \"table\" || this.table.options.columnCalcs == \"both\") {\n\n\t\t\t\t\t\tthis.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.table.options.columnCalcs != \"table\") {\n\n\t\t\t\t\t\tthis.table.modules.columnCalcs.recalcRowGroup(this.row);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t};\n\n\tCell.prototype.setValueActual = function (value) {\n\n\t\tthis.oldValue = this.value;\n\n\t\tthis.value = value;\n\n\t\tif (this.table.options.reactiveData && this.table.modExists(\"reactiveData\")) {\n\n\t\t\tthis.table.modules.reactiveData.block();\n\t\t}\n\n\t\tthis.column.setFieldValue(this.row.data, value);\n\n\t\tif (this.table.options.reactiveData && this.table.modExists(\"reactiveData\")) {\n\n\t\t\tthis.table.modules.reactiveData.unblock();\n\t\t}\n\n\t\tthis._generateContents();\n\n\t\tthis._generateTooltip();\n\n\t\t//set resizable handles\n\n\t\tif (this.table.options.resizableColumns && this.table.modExists(\"resizeColumns\")) {\n\n\t\t\tthis.table.modules.resizeColumns.initializeColumn(\"cell\", this.column, this.element);\n\t\t}\n\n\t\t//set column menu\n\n\t\tif (this.column.definition.contextMenu && this.table.modExists(\"menu\")) {\n\n\t\t\tthis.table.modules.menu.initializeCell(this);\n\t\t}\n\n\t\t//handle frozen cells\n\n\t\tif (this.table.modExists(\"frozenColumns\")) {\n\n\t\t\tthis.table.modules.frozenColumns.layoutElement(this.element, this.column);\n\t\t}\n\t};\n\n\tCell.prototype.setWidth = function () {\n\n\t\tthis.width = this.column.width;\n\n\t\tthis.element.style.width = this.column.widthStyled;\n\t};\n\n\tCell.prototype.clearWidth = function () {\n\n\t\tthis.width = \"\";\n\n\t\tthis.element.style.width = \"\";\n\t};\n\n\tCell.prototype.getWidth = function () {\n\n\t\treturn this.width || this.element.offsetWidth;\n\t};\n\n\tCell.prototype.setMinWidth = function () {\n\n\t\tthis.minWidth = this.column.minWidth;\n\n\t\tthis.element.style.minWidth = this.column.minWidthStyled;\n\t};\n\n\tCell.prototype.checkHeight = function () {\n\n\t\t// var height = this.element.css(\"height\");\n\n\t\tthis.row.reinitializeHeight();\n\t};\n\n\tCell.prototype.clearHeight = function () {\n\n\t\tthis.element.style.height = \"\";\n\n\t\tthis.height = null;\n\t};\n\n\tCell.prototype.setHeight = function () {\n\n\t\tthis.height = this.row.height;\n\n\t\tthis.element.style.height = this.row.heightStyled;\n\t};\n\n\tCell.prototype.getHeight = function () {\n\n\t\treturn this.height || this.element.offsetHeight;\n\t};\n\n\tCell.prototype.show = function () {\n\n\t\tthis.element.style.display = \"\";\n\t};\n\n\tCell.prototype.hide = function () {\n\n\t\tthis.element.style.display = \"none\";\n\t};\n\n\tCell.prototype.edit = function (force) {\n\n\t\tif (this.table.modExists(\"edit\", true)) {\n\n\t\t\treturn this.table.modules.edit.editCell(this, force);\n\t\t}\n\t};\n\n\tCell.prototype.cancelEdit = function () {\n\n\t\tif (this.table.modExists(\"edit\", true)) {\n\n\t\t\tvar editing = this.table.modules.edit.getCurrentCell();\n\n\t\t\tif (editing && editing._getSelf() === this) {\n\n\t\t\t\tthis.table.modules.edit.cancelEdit();\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Cancel Editor Error - This cell is not currently being edited \");\n\t\t\t}\n\t\t}\n\t};\n\n\tCell.prototype.validate = function () {\n\n\t\tif (this.column.modules.validate && this.table.modExists(\"validate\", true)) {\n\n\t\t\tvar valid = this.table.modules.validate.validate(this.column.modules.validate, this, this.getValue());\n\n\t\t\treturn valid === true;\n\t\t} else {\n\n\t\t\treturn true;\n\t\t}\n\t};\n\n\tCell.prototype.delete = function () {\n\n\t\tif (!this.table.rowManager.redrawBlock && this.element.parentNode) {\n\n\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t}\n\n\t\tif (this.modules.validate && this.modules.validate.invalid) {\n\n\t\t\tthis.table.modules.validate.clearValidation(this);\n\t\t}\n\n\t\tif (this.modules.edit && this.modules.edit.edited) {\n\n\t\t\tthis.table.modules.edit.clearEdited(this);\n\t\t}\n\n\t\tthis.element = false;\n\n\t\tthis.column.deleteCell(this);\n\n\t\tthis.row.deleteCell(this);\n\n\t\tthis.calcs = {};\n\t};\n\n\t//////////////// Navigation /////////////////\n\n\n\tCell.prototype.nav = function () {\n\n\t\tvar self = this,\n\t\t    nextCell = false,\n\t\t    index = this.row.getCellIndex(this);\n\n\t\treturn {\n\n\t\t\tnext: function next() {\n\n\t\t\t\tvar nextCell = this.right(),\n\t\t\t\t    nextRow;\n\n\t\t\t\tif (!nextCell) {\n\n\t\t\t\t\tnextRow = self.table.rowManager.nextDisplayRow(self.row, true);\n\n\t\t\t\t\tif (nextRow) {\n\n\t\t\t\t\t\tnextCell = nextRow.findNextEditableCell(-1);\n\n\t\t\t\t\t\tif (nextCell) {\n\n\t\t\t\t\t\t\tnextCell.edit();\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\tprev: function prev() {\n\n\t\t\t\tvar nextCell = this.left(),\n\t\t\t\t    prevRow;\n\n\t\t\t\tif (!nextCell) {\n\n\t\t\t\t\tprevRow = self.table.rowManager.prevDisplayRow(self.row, true);\n\n\t\t\t\t\tif (prevRow) {\n\n\t\t\t\t\t\tnextCell = prevRow.findPrevEditableCell(prevRow.cells.length);\n\n\t\t\t\t\t\tif (nextCell) {\n\n\t\t\t\t\t\t\tnextCell.edit();\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\tleft: function left() {\n\n\t\t\t\tnextCell = self.row.findPrevEditableCell(index);\n\n\t\t\t\tif (nextCell) {\n\n\t\t\t\t\tnextCell.edit();\n\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tright: function right() {\n\n\t\t\t\tnextCell = self.row.findNextEditableCell(index);\n\n\t\t\t\tif (nextCell) {\n\n\t\t\t\t\tnextCell.edit();\n\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tup: function up() {\n\n\t\t\t\tvar nextRow = self.table.rowManager.prevDisplayRow(self.row, true);\n\n\t\t\t\tif (nextRow) {\n\n\t\t\t\t\tnextRow.cells[index].edit();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdown: function down() {\n\n\t\t\t\tvar nextRow = self.table.rowManager.nextDisplayRow(self.row, true);\n\n\t\t\t\tif (nextRow) {\n\n\t\t\t\t\tnextRow.cells[index].edit();\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\t};\n\n\tCell.prototype.getIndex = function () {\n\n\t\tthis.row.getCellIndex(this);\n\t};\n\n\t//////////////// Object Generation /////////////////\n\n\tCell.prototype.getComponent = function () {\n\n\t\tif (!this.component) {\n\n\t\t\tthis.component = new CellComponent(this);\n\t\t}\n\n\t\treturn this.component;\n\t};\n\n\tvar FooterManager = function FooterManager(table) {\n\n\t\tthis.table = table;\n\n\t\tthis.active = false;\n\n\t\tthis.element = this.createElement(); //containing element\n\n\t\tthis.external = false;\n\n\t\tthis.links = [];\n\n\t\tthis._initialize();\n\t};\n\n\tFooterManager.prototype.createElement = function () {\n\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-footer\");\n\n\t\treturn el;\n\t};\n\n\tFooterManager.prototype._initialize = function (element) {\n\n\t\tif (this.table.options.footerElement) {\n\n\t\t\tswitch (_typeof(this.table.options.footerElement)) {\n\n\t\t\t\tcase \"string\":\n\n\t\t\t\t\tif (this.table.options.footerElement[0] === \"<\") {\n\n\t\t\t\t\t\tthis.element.innerHTML = this.table.options.footerElement;\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.external = true;\n\n\t\t\t\t\t\tthis.element = document.querySelector(this.table.options.footerElement);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tthis.element = this.table.options.footerElement;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t}\n\t};\n\n\tFooterManager.prototype.getElement = function () {\n\n\t\treturn this.element;\n\t};\n\n\tFooterManager.prototype.append = function (element, parent) {\n\n\t\tthis.activate(parent);\n\n\t\tthis.element.appendChild(element);\n\n\t\tthis.table.rowManager.adjustTableSize();\n\t};\n\n\tFooterManager.prototype.prepend = function (element, parent) {\n\n\t\tthis.activate(parent);\n\n\t\tthis.element.insertBefore(element, this.element.firstChild);\n\n\t\tthis.table.rowManager.adjustTableSize();\n\t};\n\n\tFooterManager.prototype.remove = function (element) {\n\n\t\telement.parentNode.removeChild(element);\n\n\t\tthis.deactivate();\n\t};\n\n\tFooterManager.prototype.deactivate = function (force) {\n\n\t\tif (!this.element.firstChild || force) {\n\n\t\t\tif (!this.external) {\n\n\t\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\t}\n\n\t\t\tthis.active = false;\n\t\t}\n\n\t\t// this.table.rowManager.adjustTableSize();\n\t};\n\n\tFooterManager.prototype.activate = function (parent) {\n\n\t\tif (!this.active) {\n\n\t\t\tthis.active = true;\n\n\t\t\tif (!this.external) {\n\n\t\t\t\tthis.table.element.appendChild(this.getElement());\n\n\t\t\t\tthis.table.element.style.display = '';\n\t\t\t}\n\t\t}\n\n\t\tif (parent) {\n\n\t\t\tthis.links.push(parent);\n\t\t}\n\t};\n\n\tFooterManager.prototype.redraw = function () {\n\n\t\tthis.links.forEach(function (link) {\n\n\t\t\tlink.footerRedraw();\n\t\t});\n\t};\n\n\tvar Tabulator = function Tabulator(element, options) {\n\n\t\tthis.options = {};\n\n\t\tthis.columnManager = null; // hold Column Manager\n\n\t\tthis.rowManager = null; //hold Row Manager\n\n\t\tthis.footerManager = null; //holder Footer Manager\n\n\t\tthis.browser = \"\"; //hold current browser type\n\n\t\tthis.browserSlow = false; //handle reduced functionality for slower browsers\n\n\t\tthis.browserMobile = false; //check if running on moble, prevent resize cancelling edit on keyboard appearence\n\n\n\t\tthis.modules = {}; //hold all modules bound to this table\n\n\n\t\tthis.initializeElement(element);\n\n\t\tthis.initializeOptions(options || {});\n\n\t\tthis._create();\n\n\t\tTabulator.prototype.comms.register(this); //register table for inderdevice communication\n\t};\n\n\t//default setup options\n\n\tTabulator.prototype.defaultOptions = {\n\n\t\theight: false, //height of tabulator\n\n\t\tminHeight: false, //minimum height of tabulator\n\n\t\tmaxHeight: false, //maximum height of tabulator\n\n\n\t\tlayout: \"fitData\", ///layout type \"fitColumns\" | \"fitData\"\n\n\t\tlayoutColumnsOnNewData: false, //update column widths on setData\n\n\n\t\tcolumnMinWidth: 40, //minimum global width for a column\n\n\t\tcolumnHeaderVertAlign: \"top\", //vertical alignment of column headers\n\n\t\tcolumnVertAlign: false, // DEPRECATED - Left to allow warning\n\n\n\t\tresizableColumns: true, //resizable columns\n\n\t\tresizableRows: false, //resizable rows\n\n\t\tautoResize: true, //auto resize table\n\n\n\t\tcolumns: [], //store for colum header info\n\n\n\t\tcellHozAlign: \"\", //horizontal align columns\n\n\t\tcellVertAlign: \"\", //certical align columns\n\n\n\t\tdata: [], //default starting data\n\n\n\t\tautoColumns: false, //build columns from data row structure\n\n\n\t\treactiveData: false, //enable data reactivity\n\n\n\t\tnestedFieldSeparator: \".\", //seperatpr for nested data\n\n\n\t\ttooltips: false, //Tool tip value\n\n\t\ttooltipsHeader: false, //Tool tip for headers\n\n\t\ttooltipGenerationMode: \"load\", //when to generate tooltips\n\n\n\t\tinitialSort: false, //initial sorting criteria\n\n\t\tinitialFilter: false, //initial filtering criteria\n\n\t\tinitialHeaderFilter: false, //initial header filtering criteria\n\n\n\t\tcolumnHeaderSortMulti: true, //multiple or single column sorting\n\n\n\t\tsortOrderReverse: false, //reverse internal sort ordering\n\n\n\t\theaderSort: true, //set default global header sort\n\n\t\theaderSortTristate: false, //set default tristate header sorting\n\n\n\t\tfooterElement: false, //hold footer element\n\n\n\t\tindex: \"id\", //filed for row index\n\n\n\t\tkeybindings: [], //array for keybindings\n\n\n\t\ttabEndNewRow: false, //create new row when tab to end of table\n\n\n\t\tinvalidOptionWarnings: true, //allow toggling of invalid option warnings\n\n\n\t\tclipboard: false, //enable clipboard\n\n\t\tclipboardCopyStyled: true, //formatted table data\n\n\t\tclipboardCopyConfig: false, //clipboard config\n\n\t\tclipboardCopyFormatter: false, //DEPRICATED - REMOVE in 5.0\n\n\t\tclipboardCopyRowRange: \"active\", //restrict clipboard to visible rows only\n\n\t\tclipboardPasteParser: \"table\", //convert pasted clipboard data to rows\n\n\t\tclipboardPasteAction: \"insert\", //how to insert pasted data into the table\n\n\n\t\tclipboardCopied: function clipboardCopied() {}, //data has been copied to the clipboard\n\n\t\tclipboardPasted: function clipboardPasted() {}, //data has been pasted into the table\n\n\t\tclipboardPasteError: function clipboardPasteError() {}, //data has not successfully been pasted into the table\n\n\n\t\tdownloadDataFormatter: false, //function to manipulate table data before it is downloaded\n\n\t\tdownloadReady: function downloadReady(data, blob) {\n\t\t\treturn blob;\n\t\t}, //function to manipulate download data\n\n\t\tdownloadComplete: false, //function to manipulate download data\n\n\t\tdownloadConfig: {}, //download config\n\n\t\tdownloadRowRange: \"active\", //restrict download to active rows only\n\n\n\t\tdataTree: false, //enable data tree\n\n\t\tdataTreeElementColumn: false,\n\n\t\tdataTreeBranchElement: true, //show data tree branch element\n\n\t\tdataTreeChildIndent: 9, //data tree child indent in px\n\n\t\tdataTreeChildField: \"_children\", //data tre column field to look for child rows\n\n\t\tdataTreeCollapseElement: false, //data tree row collapse element\n\n\t\tdataTreeExpandElement: false, //data tree row expand element\n\n\t\tdataTreeStartExpanded: false,\n\n\t\tdataTreeRowExpanded: function dataTreeRowExpanded() {}, //row has been expanded\n\n\t\tdataTreeRowCollapsed: function dataTreeRowCollapsed() {}, //row has been collapsed\n\n\t\tdataTreeChildColumnCalcs: false, //include visible data tree rows in column calculations\n\n\t\tdataTreeSelectPropagate: false, //seleccting a parent row selects its children\n\n\n\t\tprintAsHtml: false, //enable print as html\n\n\t\tprintFormatter: false, //printing page formatter\n\n\t\tprintHeader: false, //page header contents\n\n\t\tprintFooter: false, //page footer contents\n\n\t\tprintCopyStyle: true, //DEPRICATED - REMOVE in 5.0\n\n\t\tprintStyled: true, //enable print as html styling\n\n\t\tprintVisibleRows: true, //DEPRICATED - REMOVE in 5.0\n\n\t\tprintRowRange: \"visible\", //restrict print to visible rows only\n\n\t\tprintConfig: {}, //print config options\n\n\n\t\taddRowPos: \"bottom\", //position to insert blank rows, top|bottom\n\n\n\t\tselectable: \"highlight\", //highlight rows on hover\n\n\t\tselectableRangeMode: \"drag\", //highlight rows on hover\n\n\t\tselectableRollingSelection: true, //roll selection once maximum number of selectable rows is reached\n\n\t\tselectablePersistence: true, // maintain selection when table view is updated\n\n\t\tselectableCheck: function selectableCheck(data, row) {\n\t\t\treturn true;\n\t\t}, //check wheather row is selectable\n\n\n\t\theaderFilterLiveFilterDelay: 300, //delay before updating column after user types in header filter\n\n\t\theaderFilterPlaceholder: false, //placeholder text to display in header filters\n\n\n\t\theaderVisible: true, //hide header\n\n\n\t\thistory: false, //enable edit history\n\n\n\t\tlocale: false, //current system language\n\n\t\tlangs: {},\n\n\t\tvirtualDom: true, //enable DOM virtualization\n\n\t\tvirtualDomBuffer: 0, // set virtual DOM buffer size\n\n\n\t\tpersistentLayout: false, //DEPRICATED - REMOVE in 5.0\n\n\t\tpersistentSort: false, //DEPRICATED - REMOVE in 5.0\n\n\t\tpersistentFilter: false, //DEPRICATED - REMOVE in 5.0\n\n\t\tpersistenceID: \"\", //key for persistent storage\n\n\t\tpersistenceMode: true, //mode for storing persistence information\n\n\t\tpersistenceReaderFunc: false, //function for handling persistence data reading\n\n\t\tpersistenceWriterFunc: false, //function for handling persistence data writing\n\n\n\t\tpersistence: false,\n\n\t\tresponsiveLayout: false, //responsive layout flags\n\n\t\tresponsiveLayoutCollapseStartOpen: true, //start showing collapsed data\n\n\t\tresponsiveLayoutCollapseUseFormatters: true, //responsive layout collapse formatter\n\n\t\tresponsiveLayoutCollapseFormatter: false, //responsive layout collapse formatter\n\n\n\t\tpagination: false, //set pagination type\n\n\t\tpaginationSize: false, //set number of rows to a page\n\n\t\tpaginationInitialPage: 1, //initail page to show on load\n\n\t\tpaginationButtonCount: 5, // set count of page button\n\n\t\tpaginationSizeSelector: false, //add pagination size selector element\n\n\t\tpaginationElement: false, //element to hold pagination numbers\n\n\t\tpaginationDataSent: {}, //pagination data sent to the server\n\n\t\tpaginationDataReceived: {}, //pagination data received from the server\n\n\t\tpaginationAddRow: \"page\", //add rows on table or page\n\n\n\t\tajaxURL: false, //url for ajax loading\n\n\t\tajaxURLGenerator: false,\n\n\t\tajaxParams: {}, //params for ajax loading\n\n\t\tajaxConfig: \"get\", //ajax request type\n\n\t\tajaxContentType: \"form\", //ajax request type\n\n\t\tajaxRequestFunc: false, //promise function\n\n\t\tajaxLoader: true, //show loader\n\n\t\tajaxLoaderLoading: false, //loader element\n\n\t\tajaxLoaderError: false, //loader element\n\n\t\tajaxFiltering: false,\n\n\t\tajaxSorting: false,\n\n\t\tajaxProgressiveLoad: false, //progressive loading\n\n\t\tajaxProgressiveLoadDelay: 0, //delay between requests\n\n\t\tajaxProgressiveLoadScrollMargin: 0, //margin before scroll begins\n\n\n\t\tgroupBy: false, //enable table grouping and set field to group by\n\n\t\tgroupStartOpen: true, //starting state of group\n\n\t\tgroupValues: false,\n\n\t\tgroupHeader: false, //header generation function\n\n\t\tgroupHeaderPrint: null,\n\n\t\tgroupHeaderClipboard: null,\n\n\t\tgroupHeaderHtmlOutput: null,\n\n\t\tgroupHeaderDownload: null,\n\n\t\thtmlOutputConfig: false, //html outypu config\n\n\n\t\tmovableColumns: false, //enable movable columns\n\n\n\t\tmovableRows: false, //enable movable rows\n\n\t\tmovableRowsConnectedTables: false, //tables for movable rows to be connected to\n\n\t\tmovableRowsConnectedElements: false, //other elements for movable rows to be connected to\n\n\t\tmovableRowsSender: false,\n\n\t\tmovableRowsReceiver: \"insert\",\n\n\t\tmovableRowsSendingStart: function movableRowsSendingStart() {},\n\n\t\tmovableRowsSent: function movableRowsSent() {},\n\n\t\tmovableRowsSentFailed: function movableRowsSentFailed() {},\n\n\t\tmovableRowsSendingStop: function movableRowsSendingStop() {},\n\n\t\tmovableRowsReceivingStart: function movableRowsReceivingStart() {},\n\n\t\tmovableRowsReceived: function movableRowsReceived() {},\n\n\t\tmovableRowsReceivedFailed: function movableRowsReceivedFailed() {},\n\n\t\tmovableRowsReceivingStop: function movableRowsReceivingStop() {},\n\n\t\tmovableRowsElementDrop: function movableRowsElementDrop() {},\n\n\t\tscrollToRowPosition: \"top\",\n\n\t\tscrollToRowIfVisible: true,\n\n\t\tscrollToColumnPosition: \"left\",\n\n\t\tscrollToColumnIfVisible: true,\n\n\t\trowFormatter: false,\n\n\t\trowFormatterPrint: null,\n\n\t\trowFormatterClipboard: null,\n\n\t\trowFormatterHtmlOutput: null,\n\n\t\tplaceholder: false,\n\n\t\t//table building callbacks\n\n\t\ttableBuilding: function tableBuilding() {},\n\n\t\ttableBuilt: function tableBuilt() {},\n\n\t\t//render callbacks\n\n\t\trenderStarted: function renderStarted() {},\n\n\t\trenderComplete: function renderComplete() {},\n\n\t\t//row callbacks\n\n\t\trowClick: false,\n\n\t\trowDblClick: false,\n\n\t\trowContext: false,\n\n\t\trowTap: false,\n\n\t\trowDblTap: false,\n\n\t\trowTapHold: false,\n\n\t\trowMouseEnter: false,\n\n\t\trowMouseLeave: false,\n\n\t\trowMouseOver: false,\n\n\t\trowMouseOut: false,\n\n\t\trowMouseMove: false,\n\n\t\trowContextMenu: false,\n\n\t\trowAdded: function rowAdded() {},\n\n\t\trowDeleted: function rowDeleted() {},\n\n\t\trowMoved: function rowMoved() {},\n\n\t\trowUpdated: function rowUpdated() {},\n\n\t\trowSelectionChanged: function rowSelectionChanged() {},\n\n\t\trowSelected: function rowSelected() {},\n\n\t\trowDeselected: function rowDeselected() {},\n\n\t\trowResized: function rowResized() {},\n\n\t\t//cell callbacks\n\n\t\t//row callbacks\n\n\t\tcellClick: false,\n\n\t\tcellDblClick: false,\n\n\t\tcellContext: false,\n\n\t\tcellTap: false,\n\n\t\tcellDblTap: false,\n\n\t\tcellTapHold: false,\n\n\t\tcellMouseEnter: false,\n\n\t\tcellMouseLeave: false,\n\n\t\tcellMouseOver: false,\n\n\t\tcellMouseOut: false,\n\n\t\tcellMouseMove: false,\n\n\t\tcellEditing: function cellEditing() {},\n\n\t\tcellEdited: function cellEdited() {},\n\n\t\tcellEditCancelled: function cellEditCancelled() {},\n\n\t\t//column callbacks\n\n\t\tcolumnMoved: false,\n\n\t\tcolumnResized: function columnResized() {},\n\n\t\tcolumnTitleChanged: function columnTitleChanged() {},\n\n\t\tcolumnVisibilityChanged: function columnVisibilityChanged() {},\n\n\t\t//HTML iport callbacks\n\n\t\thtmlImporting: function htmlImporting() {},\n\n\t\thtmlImported: function htmlImported() {},\n\n\t\t//data callbacks\n\n\t\tdataLoading: function dataLoading() {},\n\n\t\tdataLoaded: function dataLoaded() {},\n\n\t\tdataEdited: function dataEdited() {},\n\n\t\t//ajax callbacks\n\n\t\tajaxRequesting: function ajaxRequesting() {},\n\n\t\tajaxResponse: false,\n\n\t\tajaxError: function ajaxError() {},\n\n\t\t//filtering callbacks\n\n\t\tdataFiltering: false,\n\n\t\tdataFiltered: false,\n\n\t\t//sorting callbacks\n\n\t\tdataSorting: function dataSorting() {},\n\n\t\tdataSorted: function dataSorted() {},\n\n\t\t//grouping callbacks\n\n\t\tgroupToggleElement: \"arrow\",\n\n\t\tgroupClosedShowCalcs: false,\n\n\t\tdataGrouping: function dataGrouping() {},\n\n\t\tdataGrouped: false,\n\n\t\tgroupVisibilityChanged: function groupVisibilityChanged() {},\n\n\t\tgroupClick: false,\n\n\t\tgroupDblClick: false,\n\n\t\tgroupContext: false,\n\n\t\tgroupContextMenu: false,\n\n\t\tgroupTap: false,\n\n\t\tgroupDblTap: false,\n\n\t\tgroupTapHold: false,\n\n\t\tcolumnCalcs: true,\n\n\t\t//pagination callbacks\n\n\t\tpageLoaded: function pageLoaded() {},\n\n\t\t//localization callbacks\n\n\t\tlocalized: function localized() {},\n\n\t\t//validation callbacks\n\n\t\tvalidationMode: \"blocking\",\n\n\t\tvalidationFailed: function validationFailed() {},\n\n\t\t//history callbacks\n\n\t\thistoryUndo: function historyUndo() {},\n\n\t\thistoryRedo: function historyRedo() {},\n\n\t\t//scroll callbacks\n\n\t\tscrollHorizontal: function scrollHorizontal() {},\n\n\t\tscrollVertical: function scrollVertical() {}\n\n\t};\n\n\tTabulator.prototype.initializeOptions = function (options) {\n\n\t\t//warn user if option is not available\n\n\t\tif (options.invalidOptionWarnings !== false) {\n\n\t\t\tfor (var key in options) {\n\n\t\t\t\tif (typeof this.defaultOptions[key] === \"undefined\") {\n\n\t\t\t\t\tconsole.warn(\"Invalid table constructor option:\", key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//assign options to table\n\n\t\tfor (var key in this.defaultOptions) {\n\n\t\t\tif (key in options) {\n\n\t\t\t\tthis.options[key] = options[key];\n\t\t\t} else {\n\n\t\t\t\tif (Array.isArray(this.defaultOptions[key])) {\n\n\t\t\t\t\tthis.options[key] = [];\n\t\t\t\t} else if (_typeof(this.defaultOptions[key]) === \"object\" && this.defaultOptions[key] !== null) {\n\n\t\t\t\t\tthis.options[key] = {};\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.options[key] = this.defaultOptions[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.initializeElement = function (element) {\n\n\t\tif (typeof HTMLElement !== \"undefined\" && element instanceof HTMLElement) {\n\n\t\t\tthis.element = element;\n\n\t\t\treturn true;\n\t\t} else if (typeof element === \"string\") {\n\n\t\t\tthis.element = document.querySelector(element);\n\n\t\t\tif (this.element) {\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\n\t\t\t\tconsole.error(\"Tabulator Creation Error - no element found matching selector: \", element);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\n\t\t\tconsole.error(\"Tabulator Creation Error - Invalid element provided:\", element);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t//convert depricated functionality to new functions\n\n\tTabulator.prototype._mapDepricatedFunctionality = function () {\n\n\t\t//map depricated persistance setup options\n\n\t\tif (this.options.persistentLayout || this.options.persistentSort || this.options.persistentFilter) {\n\n\t\t\tif (!this.options.persistence) {\n\n\t\t\t\tthis.options.persistence = {};\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.downloadDataFormatter) {\n\n\t\t\tconsole.warn(\"DEPRECATION WARNING - downloadDataFormatter option has been deprecated\");\n\t\t}\n\n\t\tif (typeof this.options.clipboardCopyHeader !== \"undefined\") {\n\n\t\t\tthis.options.columnHeaders = this.options.clipboardCopyHeader;\n\n\t\t\tconsole.warn(\"DEPRECATION WARNING - clipboardCopyHeader option has been deprecated, please use the columnHeaders property on the clipboardCopyConfig option\");\n\t\t}\n\n\t\tif (this.options.printVisibleRows !== true) {\n\n\t\t\tconsole.warn(\"printVisibleRows option is deprecated, you should now use the printRowRange option\");\n\n\t\t\tthis.options.persistence.printRowRange = \"active\";\n\t\t}\n\n\t\tif (this.options.printCopyStyle !== true) {\n\n\t\t\tconsole.warn(\"printCopyStyle option is deprecated, you should now use the printStyled option\");\n\n\t\t\tthis.options.persistence.printStyled = this.options.printCopyStyle;\n\t\t}\n\n\t\tif (this.options.persistentLayout) {\n\n\t\t\tconsole.warn(\"persistentLayout option is deprecated, you should now use the persistence option\");\n\n\t\t\tif (this.options.persistence !== true && typeof this.options.persistence.columns === \"undefined\") {\n\n\t\t\t\tthis.options.persistence.columns = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.persistentSort) {\n\n\t\t\tconsole.warn(\"persistentSort option is deprecated, you should now use the persistence option\");\n\n\t\t\tif (this.options.persistence !== true && typeof this.options.persistence.sort === \"undefined\") {\n\n\t\t\t\tthis.options.persistence.sort = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.persistentFilter) {\n\n\t\t\tconsole.warn(\"persistentFilter option is deprecated, you should now use the persistence option\");\n\n\t\t\tif (this.options.persistence !== true && typeof this.options.persistence.filter === \"undefined\") {\n\n\t\t\t\tthis.options.persistence.filter = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.columnVertAlign) {\n\n\t\t\tconsole.warn(\"columnVertAlign option is deprecated, you should now use the columnHeaderVertAlign option\");\n\n\t\t\tthis.options.columnHeaderVertAlign = this.options.columnVertAlign;\n\t\t}\n\t};\n\n\tTabulator.prototype._clearSelection = function () {\n\n\t\tthis.element.classList.add(\"tabulator-block-select\");\n\n\t\tif (window.getSelection) {\n\n\t\t\tif (window.getSelection().empty) {\n\t\t\t\t// Chrome\n\n\t\t\t\twindow.getSelection().empty();\n\t\t\t} else if (window.getSelection().removeAllRanges) {\n\t\t\t\t// Firefox\n\n\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t}\n\t\t} else if (document.selection) {\n\t\t\t// IE?\n\n\t\t\tdocument.selection.empty();\n\t\t}\n\n\t\tthis.element.classList.remove(\"tabulator-block-select\");\n\t};\n\n\t//concreate table\n\n\tTabulator.prototype._create = function () {\n\n\t\tthis._clearObjectPointers();\n\n\t\tthis._mapDepricatedFunctionality();\n\n\t\tthis.bindModules();\n\n\t\tif (this.element.tagName === \"TABLE\") {\n\n\t\t\tif (this.modExists(\"htmlTableImport\", true)) {\n\n\t\t\t\tthis.modules.htmlTableImport.parseTable();\n\t\t\t}\n\t\t}\n\n\t\tthis.columnManager = new ColumnManager(this);\n\n\t\tthis.rowManager = new RowManager(this);\n\n\t\tthis.footerManager = new FooterManager(this);\n\n\t\tthis.columnManager.setRowManager(this.rowManager);\n\n\t\tthis.rowManager.setColumnManager(this.columnManager);\n\n\t\tthis._buildElement();\n\n\t\tthis._loadInitialData();\n\t};\n\n\t//clear pointers to objects in default config object\n\n\tTabulator.prototype._clearObjectPointers = function () {\n\n\t\tthis.options.columns = this.options.columns.slice(0);\n\n\t\tif (!this.options.reactiveData) {\n\n\t\t\tthis.options.data = this.options.data.slice(0);\n\t\t}\n\t};\n\n\t//build tabulator element\n\n\tTabulator.prototype._buildElement = function () {\n\t\tvar _this17 = this;\n\n\t\tvar element = this.element,\n\t\t    mod = this.modules,\n\t\t    options = this.options;\n\n\t\toptions.tableBuilding.call(this);\n\n\t\telement.classList.add(\"tabulator\");\n\n\t\telement.setAttribute(\"role\", \"grid\");\n\n\t\t//empty element\n\n\t\twhile (element.firstChild) {\n\t\t\telement.removeChild(element.firstChild);\n\t\t} //set table height\n\n\t\tif (options.height) {\n\n\t\t\toptions.height = isNaN(options.height) ? options.height : options.height + \"px\";\n\n\t\t\telement.style.height = options.height;\n\t\t}\n\n\t\t//set table min height\n\n\t\tif (options.minHeight !== false) {\n\n\t\t\toptions.minHeight = isNaN(options.minHeight) ? options.minHeight : options.minHeight + \"px\";\n\n\t\t\telement.style.minHeight = options.minHeight;\n\t\t}\n\n\t\t//set table maxHeight\n\n\t\tif (options.maxHeight !== false) {\n\n\t\t\toptions.maxHeight = isNaN(options.maxHeight) ? options.maxHeight : options.maxHeight + \"px\";\n\n\t\t\telement.style.maxHeight = options.maxHeight;\n\t\t}\n\n\t\tthis.columnManager.initialize();\n\n\t\tthis.rowManager.initialize();\n\n\t\tthis._detectBrowser();\n\n\t\tif (this.modExists(\"layout\", true)) {\n\n\t\t\tmod.layout.initialize(options.layout);\n\t\t}\n\n\t\t//set localization\n\n\t\tif (options.headerFilterPlaceholder !== false) {\n\n\t\t\tmod.localize.setHeaderFilterPlaceholder(options.headerFilterPlaceholder);\n\t\t}\n\n\t\tfor (var locale in options.langs) {\n\n\t\t\tmod.localize.installLang(locale, options.langs[locale]);\n\t\t}\n\n\t\tmod.localize.setLocale(options.locale);\n\n\t\t//configure placeholder element\n\n\t\tif (typeof options.placeholder == \"string\") {\n\n\t\t\tvar el = document.createElement(\"div\");\n\n\t\t\tel.classList.add(\"tabulator-placeholder\");\n\n\t\t\tvar span = document.createElement(\"span\");\n\n\t\t\tspan.innerHTML = options.placeholder;\n\n\t\t\tel.appendChild(span);\n\n\t\t\toptions.placeholder = el;\n\t\t}\n\n\t\t//build table elements\n\n\t\telement.appendChild(this.columnManager.getElement());\n\n\t\telement.appendChild(this.rowManager.getElement());\n\n\t\tif (options.footerElement) {\n\n\t\t\tthis.footerManager.activate();\n\t\t}\n\n\t\tif (options.persistence && this.modExists(\"persistence\", true)) {\n\n\t\t\tmod.persistence.initialize();\n\t\t}\n\n\t\tif (options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.columns) {\n\n\t\t\toptions.columns = mod.persistence.load(\"columns\", options.columns);\n\t\t}\n\n\t\tif (options.movableRows && this.modExists(\"moveRow\")) {\n\n\t\t\tmod.moveRow.initialize();\n\t\t}\n\n\t\tif (options.autoColumns && this.options.data) {\n\n\t\t\tthis.columnManager.generateColumnsFromRowData(this.options.data);\n\t\t}\n\n\t\tif (this.modExists(\"columnCalcs\")) {\n\n\t\t\tmod.columnCalcs.initialize();\n\t\t}\n\n\t\tthis.columnManager.setColumns(options.columns);\n\n\t\tif (options.dataTree && this.modExists(\"dataTree\", true)) {\n\n\t\t\tmod.dataTree.initialize();\n\t\t}\n\n\t\tif (this.modExists(\"frozenRows\")) {\n\n\t\t\tthis.modules.frozenRows.initialize();\n\t\t}\n\n\t\tif ((options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.sort || options.initialSort) && this.modExists(\"sort\", true)) {\n\n\t\t\tvar sorters = [];\n\n\t\t\tif (options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.sort) {\n\n\t\t\t\tsorters = mod.persistence.load(\"sort\");\n\n\t\t\t\tif (sorters === false && options.initialSort) {\n\n\t\t\t\t\tsorters = options.initialSort;\n\t\t\t\t}\n\t\t\t} else if (options.initialSort) {\n\n\t\t\t\tsorters = options.initialSort;\n\t\t\t}\n\n\t\t\tmod.sort.setSort(sorters);\n\t\t}\n\n\t\tif ((options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.filter || options.initialFilter) && this.modExists(\"filter\", true)) {\n\n\t\t\tvar filters = [];\n\n\t\t\tif (options.persistence && this.modExists(\"persistence\", true) && mod.persistence.config.filter) {\n\n\t\t\t\tfilters = mod.persistence.load(\"filter\");\n\n\t\t\t\tif (filters === false && options.initialFilter) {\n\n\t\t\t\t\tfilters = options.initialFilter;\n\t\t\t\t}\n\t\t\t} else if (options.initialFilter) {\n\n\t\t\t\tfilters = options.initialFilter;\n\t\t\t}\n\n\t\t\tmod.filter.setFilter(filters);\n\t\t}\n\n\t\tif (options.initialHeaderFilter && this.modExists(\"filter\", true)) {\n\n\t\t\toptions.initialHeaderFilter.forEach(function (item) {\n\n\t\t\t\tvar column = _this17.columnManager.findColumn(item.field);\n\n\t\t\t\tif (column) {\n\n\t\t\t\t\tmod.filter.setHeaderFilterValue(column, item.value);\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn(\"Column Filter Error - No matching column found:\", item.field);\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this.modExists(\"ajax\")) {\n\n\t\t\tmod.ajax.initialize();\n\t\t}\n\n\t\tif (options.pagination && this.modExists(\"page\", true)) {\n\n\t\t\tmod.page.initialize();\n\t\t}\n\n\t\tif (options.groupBy && this.modExists(\"groupRows\", true)) {\n\n\t\t\tmod.groupRows.initialize();\n\t\t}\n\n\t\tif (this.modExists(\"keybindings\")) {\n\n\t\t\tmod.keybindings.initialize();\n\t\t}\n\n\t\tif (this.modExists(\"selectRow\")) {\n\n\t\t\tmod.selectRow.clearSelectionData(true);\n\t\t}\n\n\t\tif (options.autoResize && this.modExists(\"resizeTable\")) {\n\n\t\t\tmod.resizeTable.initialize();\n\t\t}\n\n\t\tif (this.modExists(\"clipboard\")) {\n\n\t\t\tmod.clipboard.initialize();\n\t\t}\n\n\t\tif (options.printAsHtml && this.modExists(\"print\")) {\n\n\t\t\tmod.print.initialize();\n\t\t}\n\n\t\toptions.tableBuilt.call(this);\n\t};\n\n\tTabulator.prototype._loadInitialData = function () {\n\n\t\tvar self = this;\n\n\t\tif (self.options.pagination && self.modExists(\"page\")) {\n\n\t\t\tself.modules.page.reset(true, true);\n\n\t\t\tif (self.options.pagination == \"local\") {\n\n\t\t\t\tif (self.options.data.length) {\n\n\t\t\t\t\tself.rowManager.setData(self.options.data, false, true);\n\t\t\t\t} else {\n\n\t\t\t\t\tif ((self.options.ajaxURL || self.options.ajaxURLGenerator) && self.modExists(\"ajax\")) {\n\n\t\t\t\t\t\tself.modules.ajax.loadData(false, true).then(function () {}).catch(function () {\n\n\t\t\t\t\t\t\tif (self.options.paginationInitialPage) {\n\n\t\t\t\t\t\t\t\tself.modules.page.setPage(self.options.paginationInitialPage);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tself.rowManager.setData(self.options.data, false, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (self.options.paginationInitialPage) {\n\n\t\t\t\t\tself.modules.page.setPage(self.options.paginationInitialPage);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (self.options.ajaxURL) {\n\n\t\t\t\t\tself.modules.page.setPage(self.options.paginationInitialPage).then(function () {}).catch(function () {});\n\t\t\t\t} else {\n\n\t\t\t\t\tself.rowManager.setData([], false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\tif (self.options.data.length) {\n\n\t\t\t\tself.rowManager.setData(self.options.data);\n\t\t\t} else {\n\n\t\t\t\tif ((self.options.ajaxURL || self.options.ajaxURLGenerator) && self.modExists(\"ajax\")) {\n\n\t\t\t\t\tself.modules.ajax.loadData(false, true).then(function () {}).catch(function () {});\n\t\t\t\t} else {\n\n\t\t\t\t\tself.rowManager.setData(self.options.data, false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//deconstructor\n\n\tTabulator.prototype.destroy = function () {\n\n\t\tvar element = this.element;\n\n\t\tTabulator.prototype.comms.deregister(this); //deregister table from inderdevice communication\n\n\n\t\tif (this.options.reactiveData && this.modExists(\"reactiveData\", true)) {\n\n\t\t\tthis.modules.reactiveData.unwatchData();\n\t\t}\n\n\t\t//clear row data\n\n\t\tthis.rowManager.rows.forEach(function (row) {\n\n\t\t\trow.wipe();\n\t\t});\n\n\t\tthis.rowManager.rows = [];\n\n\t\tthis.rowManager.activeRows = [];\n\n\t\tthis.rowManager.displayRows = [];\n\n\t\t//clear event bindings\n\n\t\tif (this.options.autoResize && this.modExists(\"resizeTable\")) {\n\n\t\t\tthis.modules.resizeTable.clearBindings();\n\t\t}\n\n\t\tif (this.modExists(\"keybindings\")) {\n\n\t\t\tthis.modules.keybindings.clearBindings();\n\t\t}\n\n\t\t//clear DOM\n\n\t\twhile (element.firstChild) {\n\t\t\telement.removeChild(element.firstChild);\n\t\t}element.classList.remove(\"tabulator\");\n\t};\n\n\tTabulator.prototype._detectBrowser = function () {\n\n\t\tvar ua = navigator.userAgent || navigator.vendor || window.opera;\n\n\t\tif (ua.indexOf(\"Trident\") > -1) {\n\n\t\t\tthis.browser = \"ie\";\n\n\t\t\tthis.browserSlow = true;\n\t\t} else if (ua.indexOf(\"Edge\") > -1) {\n\n\t\t\tthis.browser = \"edge\";\n\n\t\t\tthis.browserSlow = true;\n\t\t} else if (ua.indexOf(\"Firefox\") > -1) {\n\n\t\t\tthis.browser = \"firefox\";\n\n\t\t\tthis.browserSlow = false;\n\t\t} else {\n\n\t\t\tthis.browser = \"other\";\n\n\t\t\tthis.browserSlow = false;\n\t\t}\n\n\t\tthis.browserMobile = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(ua.substr(0, 4));\n\t};\n\n\t////////////////// Data Handling //////////////////\n\n\n\t//block table redrawing\n\n\tTabulator.prototype.blockRedraw = function () {\n\n\t\treturn this.rowManager.blockRedraw();\n\t};\n\n\t//restore table redrawing\n\n\tTabulator.prototype.restoreRedraw = function () {\n\n\t\treturn this.rowManager.restoreRedraw();\n\t};\n\n\t//local data from local file\n\n\tTabulator.prototype.setDataFromLocalFile = function (extensions) {\n\t\tvar _this18 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar input = document.createElement(\"input\");\n\n\t\t\tinput.type = \"file\";\n\n\t\t\tinput.accept = extensions || \".json,application/json\";\n\n\t\t\tinput.addEventListener(\"change\", function (e) {\n\n\t\t\t\tvar file = input.files[0],\n\t\t\t\t    reader = new FileReader(),\n\t\t\t\t    data;\n\n\t\t\t\treader.readAsText(file);\n\n\t\t\t\treader.onload = function (e) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tdata = JSON.parse(reader.result);\n\t\t\t\t\t} catch (e) {\n\n\t\t\t\t\t\tconsole.warn(\"File Load Error - File contents is invalid JSON\", e);\n\n\t\t\t\t\t\treject(e);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t_this18.setData(data).then(function (data) {\n\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\t\tresolve(err);\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\treader.onerror = function (e) {\n\n\t\t\t\t\tconsole.warn(\"File Load Error - Unable to read file\");\n\n\t\t\t\t\treject();\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tinput.click();\n\t\t});\n\t};\n\n\t//load data\n\n\tTabulator.prototype.setData = function (data, params, config) {\n\n\t\tif (this.modExists(\"ajax\")) {\n\n\t\t\tthis.modules.ajax.blockActiveRequest();\n\t\t}\n\n\t\treturn this._setData(data, params, config, false, true);\n\t};\n\n\tTabulator.prototype._setData = function (data, params, config, inPosition, columnsChanged) {\n\n\t\tvar self = this;\n\n\t\tif (typeof data === \"string\") {\n\n\t\t\tif (data.indexOf(\"{\") == 0 || data.indexOf(\"[\") == 0) {\n\n\t\t\t\t//data is a json encoded string\n\n\t\t\t\treturn self.rowManager.setData(JSON.parse(data), inPosition, columnsChanged);\n\t\t\t} else {\n\n\t\t\t\tif (self.modExists(\"ajax\", true)) {\n\n\t\t\t\t\tif (params) {\n\n\t\t\t\t\t\tself.modules.ajax.setParams(params);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (config) {\n\n\t\t\t\t\t\tself.modules.ajax.setConfig(config);\n\t\t\t\t\t}\n\n\t\t\t\t\tself.modules.ajax.setUrl(data);\n\n\t\t\t\t\tif (self.options.pagination == \"remote\" && self.modExists(\"page\", true)) {\n\n\t\t\t\t\t\tself.modules.page.reset(true, true);\n\n\t\t\t\t\t\treturn self.modules.page.setPage(1);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t//assume data is url, make ajax call to url to get data\n\n\t\t\t\t\t\treturn self.modules.ajax.loadData(inPosition, columnsChanged);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\tif (data) {\n\n\t\t\t\t//asume data is already an object\n\n\t\t\t\treturn self.rowManager.setData(data, inPosition, columnsChanged);\n\t\t\t} else {\n\n\t\t\t\t//no data provided, check if ajaxURL is present;\n\n\t\t\t\tif (self.modExists(\"ajax\") && (self.modules.ajax.getUrl || self.options.ajaxURLGenerator)) {\n\n\t\t\t\t\tif (self.options.pagination == \"remote\" && self.modExists(\"page\", true)) {\n\n\t\t\t\t\t\tself.modules.page.reset(true, true);\n\n\t\t\t\t\t\treturn self.modules.page.setPage(1);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn self.modules.ajax.loadData(inPosition, columnsChanged);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\t//empty data\n\n\t\t\t\t\treturn self.rowManager.setData([], inPosition, columnsChanged);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//clear data\n\n\tTabulator.prototype.clearData = function () {\n\n\t\tif (this.modExists(\"ajax\")) {\n\n\t\t\tthis.modules.ajax.blockActiveRequest();\n\t\t}\n\n\t\tthis.rowManager.clearData();\n\t};\n\n\t//get table data array\n\n\tTabulator.prototype.getData = function (active) {\n\n\t\tif (active === true) {\n\n\t\t\tconsole.warn(\"passing a boolean to the getData function is deprecated, you should now pass the string 'active'\");\n\n\t\t\tactive = \"active\";\n\t\t}\n\n\t\treturn this.rowManager.getData(active);\n\t};\n\n\t//get table data array count\n\n\tTabulator.prototype.getDataCount = function (active) {\n\n\t\tif (active === true) {\n\n\t\t\tconsole.warn(\"passing a boolean to the getDataCount function is deprecated, you should now pass the string 'active'\");\n\n\t\t\tactive = \"active\";\n\t\t}\n\n\t\treturn this.rowManager.getDataCount(active);\n\t};\n\n\t//search for specific row components\n\n\tTabulator.prototype.searchRows = function (field, type, value) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\treturn this.modules.filter.search(\"rows\", field, type, value);\n\t\t}\n\t};\n\n\t//search for specific data\n\n\tTabulator.prototype.searchData = function (field, type, value) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\treturn this.modules.filter.search(\"data\", field, type, value);\n\t\t}\n\t};\n\n\t//get table html\n\n\tTabulator.prototype.getHtml = function (visible, style, config) {\n\n\t\tif (this.modExists(\"export\", true)) {\n\n\t\t\treturn this.modules.export.getHtml(visible, style, config);\n\t\t}\n\t};\n\n\t//get print html\n\n\tTabulator.prototype.print = function (visible, style, config) {\n\n\t\tif (this.modExists(\"print\", true)) {\n\n\t\t\treturn this.modules.print.printFullscreen(visible, style, config);\n\t\t}\n\t};\n\n\t//retrieve Ajax URL\n\n\tTabulator.prototype.getAjaxUrl = function () {\n\n\t\tif (this.modExists(\"ajax\", true)) {\n\n\t\t\treturn this.modules.ajax.getUrl();\n\t\t}\n\t};\n\n\t//replace data, keeping table in position with same sort\n\n\tTabulator.prototype.replaceData = function (data, params, config) {\n\n\t\tif (this.modExists(\"ajax\")) {\n\n\t\t\tthis.modules.ajax.blockActiveRequest();\n\t\t}\n\n\t\treturn this._setData(data, params, config, true);\n\t};\n\n\t//update table data\n\n\tTabulator.prototype.updateData = function (data) {\n\t\tvar _this19 = this;\n\n\t\tvar self = this;\n\n\t\tvar responses = 0;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (_this19.modExists(\"ajax\")) {\n\n\t\t\t\t_this19.modules.ajax.blockActiveRequest();\n\t\t\t}\n\n\t\t\tif (typeof data === \"string\") {\n\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\n\t\t\tif (data) {\n\n\t\t\t\tdata.forEach(function (item) {\n\n\t\t\t\t\tvar row = self.rowManager.findRow(item[self.options.index]);\n\n\t\t\t\t\tif (row) {\n\n\t\t\t\t\t\tresponses++;\n\n\t\t\t\t\t\trow.updateData(item).then(function () {\n\n\t\t\t\t\t\t\tresponses--;\n\n\t\t\t\t\t\t\tif (!responses) {\n\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Update Error - No data provided\");\n\n\t\t\t\treject(\"Update Error - No data provided\");\n\t\t\t}\n\t\t});\n\t};\n\n\tTabulator.prototype.addData = function (data, pos, index) {\n\t\tvar _this20 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (_this20.modExists(\"ajax\")) {\n\n\t\t\t\t_this20.modules.ajax.blockActiveRequest();\n\t\t\t}\n\n\t\t\tif (typeof data === \"string\") {\n\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\n\t\t\tif (data) {\n\n\t\t\t\t_this20.rowManager.addRows(data, pos, index).then(function (rows) {\n\n\t\t\t\t\tvar output = [];\n\n\t\t\t\t\trows.forEach(function (row) {\n\n\t\t\t\t\t\toutput.push(row.getComponent());\n\t\t\t\t\t});\n\n\t\t\t\t\tresolve(output);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Update Error - No data provided\");\n\n\t\t\t\treject(\"Update Error - No data provided\");\n\t\t\t}\n\t\t});\n\t};\n\n\t//update table data\n\n\tTabulator.prototype.updateOrAddData = function (data) {\n\t\tvar _this21 = this;\n\n\t\tvar self = this,\n\t\t    rows = [],\n\t\t    responses = 0;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (_this21.modExists(\"ajax\")) {\n\n\t\t\t\t_this21.modules.ajax.blockActiveRequest();\n\t\t\t}\n\n\t\t\tif (typeof data === \"string\") {\n\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\n\t\t\tif (data) {\n\n\t\t\t\tdata.forEach(function (item) {\n\n\t\t\t\t\tvar row = self.rowManager.findRow(item[self.options.index]);\n\n\t\t\t\t\tresponses++;\n\n\t\t\t\t\tif (row) {\n\n\t\t\t\t\t\trow.updateData(item).then(function () {\n\n\t\t\t\t\t\t\tresponses--;\n\n\t\t\t\t\t\t\trows.push(row.getComponent());\n\n\t\t\t\t\t\t\tif (!responses) {\n\n\t\t\t\t\t\t\t\tresolve(rows);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tself.rowManager.addRows(item).then(function (newRows) {\n\n\t\t\t\t\t\t\tresponses--;\n\n\t\t\t\t\t\t\trows.push(newRows[0].getComponent());\n\n\t\t\t\t\t\t\tif (!responses) {\n\n\t\t\t\t\t\t\t\tresolve(rows);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Update Error - No data provided\");\n\n\t\t\t\treject(\"Update Error - No data provided\");\n\t\t\t}\n\t\t});\n\t};\n\n\t//get row object\n\n\tTabulator.prototype.getRow = function (index) {\n\n\t\tvar row = this.rowManager.findRow(index);\n\n\t\tif (row) {\n\n\t\t\treturn row.getComponent();\n\t\t} else {\n\n\t\t\tconsole.warn(\"Find Error - No matching row found:\", index);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t//get row object\n\n\tTabulator.prototype.getRowFromPosition = function (position, active) {\n\n\t\tvar row = this.rowManager.getRowFromPosition(position, active);\n\n\t\tif (row) {\n\n\t\t\treturn row.getComponent();\n\t\t} else {\n\n\t\t\tconsole.warn(\"Find Error - No matching row found:\", position);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t//delete row from table\n\n\tTabulator.prototype.deleteRow = function (index) {\n\t\tvar _this22 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar self = _this22,\n\t\t\t    count = 0,\n\t\t\t    successCount = 0,\n\t\t\t    foundRows = [];\n\n\t\t\tfunction doneCheck() {\n\n\t\t\t\tcount++;\n\n\t\t\t\tif (count == index.length) {\n\n\t\t\t\t\tif (successCount) {\n\n\t\t\t\t\t\tself.rowManager.reRenderInPosition();\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!Array.isArray(index)) {\n\n\t\t\t\tindex = [index];\n\t\t\t}\n\n\t\t\t//find matching rows\n\n\t\t\tindex.forEach(function (item) {\n\n\t\t\t\tvar row = _this22.rowManager.findRow(item, true);\n\n\t\t\t\tif (row) {\n\n\t\t\t\t\tfoundRows.push(row);\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn(\"Delete Error - No matching row found:\", item);\n\n\t\t\t\t\treject(\"Delete Error - No matching row found\");\n\n\t\t\t\t\tdoneCheck();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//sort rows into correct order to ensure smooth delete from table\n\n\t\t\tfoundRows.sort(function (a, b) {\n\n\t\t\t\treturn _this22.rowManager.rows.indexOf(a) > _this22.rowManager.rows.indexOf(b) ? 1 : -1;\n\t\t\t});\n\n\t\t\tfoundRows.forEach(function (row) {\n\n\t\t\t\trow.delete().then(function () {\n\n\t\t\t\t\tsuccessCount++;\n\n\t\t\t\t\tdoneCheck();\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\tdoneCheck();\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\t//add row to table\n\n\tTabulator.prototype.addRow = function (data, pos, index) {\n\t\tvar _this23 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (typeof data === \"string\") {\n\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\n\t\t\t_this23.rowManager.addRows(data, pos, index).then(function (rows) {\n\n\t\t\t\t//recalc column calculations if present\n\n\t\t\t\tif (_this23.modExists(\"columnCalcs\")) {\n\n\t\t\t\t\t_this23.modules.columnCalcs.recalc(_this23.rowManager.activeRows);\n\t\t\t\t}\n\n\t\t\t\tresolve(rows[0].getComponent());\n\t\t\t});\n\t\t});\n\t};\n\n\t//update a row if it exitsts otherwise create it\n\n\tTabulator.prototype.updateOrAddRow = function (index, data) {\n\t\tvar _this24 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar row = _this24.rowManager.findRow(index);\n\n\t\t\tif (typeof data === \"string\") {\n\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\n\t\t\tif (row) {\n\n\t\t\t\trow.updateData(data).then(function () {\n\n\t\t\t\t\t//recalc column calculations if present\n\n\t\t\t\t\tif (_this24.modExists(\"columnCalcs\")) {\n\n\t\t\t\t\t\t_this24.modules.columnCalcs.recalc(_this24.rowManager.activeRows);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(row.getComponent());\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\trow = _this24.rowManager.addRows(data).then(function (rows) {\n\n\t\t\t\t\t//recalc column calculations if present\n\n\t\t\t\t\tif (_this24.modExists(\"columnCalcs\")) {\n\n\t\t\t\t\t\t_this24.modules.columnCalcs.recalc(_this24.rowManager.activeRows);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(rows[0].getComponent());\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\t//update row data\n\n\tTabulator.prototype.updateRow = function (index, data) {\n\t\tvar _this25 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar row = _this25.rowManager.findRow(index);\n\n\t\t\tif (typeof data === \"string\") {\n\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t}\n\n\t\t\tif (row) {\n\n\t\t\t\trow.updateData(data).then(function () {\n\n\t\t\t\t\tresolve(row.getComponent());\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Update Error - No matching row found:\", index);\n\n\t\t\t\treject(\"Update Error - No matching row found\");\n\t\t\t}\n\t\t});\n\t};\n\n\t//scroll to row in DOM\n\n\tTabulator.prototype.scrollToRow = function (index, position, ifVisible) {\n\t\tvar _this26 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar row = _this26.rowManager.findRow(index);\n\n\t\t\tif (row) {\n\n\t\t\t\t_this26.rowManager.scrollToRow(row, position, ifVisible).then(function () {\n\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Scroll Error - No matching row found:\", index);\n\n\t\t\t\treject(\"Scroll Error - No matching row found\");\n\t\t\t}\n\t\t});\n\t};\n\n\tTabulator.prototype.moveRow = function (from, to, after) {\n\n\t\tvar fromRow = this.rowManager.findRow(from);\n\n\t\tif (fromRow) {\n\n\t\t\tfromRow.moveToRow(to, after);\n\t\t} else {\n\n\t\t\tconsole.warn(\"Move Error - No matching row found:\", from);\n\t\t}\n\t};\n\n\tTabulator.prototype.getRows = function (active) {\n\n\t\tif (active === true) {\n\n\t\t\tconsole.warn(\"passing a boolean to the getRows function is deprecated, you should now pass the string 'active'\");\n\n\t\t\tactive = \"active\";\n\t\t}\n\n\t\treturn this.rowManager.getComponents(active);\n\t};\n\n\t//get position of row in table\n\n\tTabulator.prototype.getRowPosition = function (index, active) {\n\n\t\tvar row = this.rowManager.findRow(index);\n\n\t\tif (row) {\n\n\t\t\treturn this.rowManager.getRowPosition(row, active);\n\t\t} else {\n\n\t\t\tconsole.warn(\"Position Error - No matching row found:\", index);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t//copy table data to clipboard\n\n\tTabulator.prototype.copyToClipboard = function (selector) {\n\n\t\tif (this.modExists(\"clipboard\", true)) {\n\n\t\t\tthis.modules.clipboard.copy(selector);\n\t\t}\n\t};\n\n\t/////////////// Column Functions  ///////////////\n\n\n\tTabulator.prototype.setColumns = function (definition) {\n\n\t\tthis.columnManager.setColumns(definition);\n\t};\n\n\tTabulator.prototype.getColumns = function (structured) {\n\n\t\treturn this.columnManager.getComponents(structured);\n\t};\n\n\tTabulator.prototype.getColumn = function (field) {\n\n\t\tvar col = this.columnManager.findColumn(field);\n\n\t\tif (col) {\n\n\t\t\treturn col.getComponent();\n\t\t} else {\n\n\t\t\tconsole.warn(\"Find Error - No matching column found:\", field);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.getColumnDefinitions = function () {\n\n\t\treturn this.columnManager.getDefinitionTree();\n\t};\n\n\tTabulator.prototype.getColumnLayout = function () {\n\n\t\tif (this.modExists(\"persistence\", true)) {\n\n\t\t\treturn this.modules.persistence.parseColumns(this.columnManager.getColumns());\n\t\t}\n\t};\n\n\tTabulator.prototype.setColumnLayout = function (layout) {\n\n\t\tif (this.modExists(\"persistence\", true)) {\n\n\t\t\tthis.columnManager.setColumns(this.modules.persistence.mergeDefinition(this.options.columns, layout));\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tTabulator.prototype.showColumn = function (field) {\n\n\t\tvar column = this.columnManager.findColumn(field);\n\n\t\tif (column) {\n\n\t\t\tcolumn.show();\n\n\t\t\tif (this.options.responsiveLayout && this.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.modules.responsiveLayout.update();\n\t\t\t}\n\t\t} else {\n\n\t\t\tconsole.warn(\"Column Show Error - No matching column found:\", field);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.hideColumn = function (field) {\n\n\t\tvar column = this.columnManager.findColumn(field);\n\n\t\tif (column) {\n\n\t\t\tcolumn.hide();\n\n\t\t\tif (this.options.responsiveLayout && this.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.modules.responsiveLayout.update();\n\t\t\t}\n\t\t} else {\n\n\t\t\tconsole.warn(\"Column Hide Error - No matching column found:\", field);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.toggleColumn = function (field) {\n\n\t\tvar column = this.columnManager.findColumn(field);\n\n\t\tif (column) {\n\n\t\t\tif (column.visible) {\n\n\t\t\t\tcolumn.hide();\n\t\t\t} else {\n\n\t\t\t\tcolumn.show();\n\t\t\t}\n\t\t} else {\n\n\t\t\tconsole.warn(\"Column Visibility Toggle Error - No matching column found:\", field);\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.addColumn = function (definition, before, field) {\n\t\tvar _this27 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar column = _this27.columnManager.findColumn(field);\n\n\t\t\t_this27.columnManager.addColumn(definition, before, column).then(function (column) {\n\n\t\t\t\tresolve(column.getComponent());\n\t\t\t}).catch(function (err) {\n\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t};\n\n\tTabulator.prototype.deleteColumn = function (field) {\n\t\tvar _this28 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar column = _this28.columnManager.findColumn(field);\n\n\t\t\tif (column) {\n\n\t\t\t\tcolumn.delete().then(function () {\n\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Column Delete Error - No matching column found:\", field);\n\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\tTabulator.prototype.updateColumnDefinition = function (field, definition) {\n\t\tvar _this29 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar column = _this29.columnManager.findColumn(field);\n\n\t\t\tif (column) {\n\n\t\t\t\tcolumn.updateDefinition(definition).then(function (col) {\n\n\t\t\t\t\tresolve(col);\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Column Update Error - No matching column found:\", field);\n\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\tTabulator.prototype.moveColumn = function (from, to, after) {\n\n\t\tvar fromColumn = this.columnManager.findColumn(from);\n\n\t\tvar toColumn = this.columnManager.findColumn(to);\n\n\t\tif (fromColumn) {\n\n\t\t\tif (toColumn) {\n\n\t\t\t\tthis.columnManager.moveColumn(fromColumn, toColumn, after);\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Move Error - No matching column found:\", toColumn);\n\t\t\t}\n\t\t} else {\n\n\t\t\tconsole.warn(\"Move Error - No matching column found:\", from);\n\t\t}\n\t};\n\n\t//scroll to column in DOM\n\n\tTabulator.prototype.scrollToColumn = function (field, position, ifVisible) {\n\t\tvar _this30 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar column = _this30.columnManager.findColumn(field);\n\n\t\t\tif (column) {\n\n\t\t\t\t_this30.columnManager.scrollToColumn(column, position, ifVisible).then(function () {\n\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function (err) {\n\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Scroll Error - No matching column found:\", field);\n\n\t\t\t\treject(\"Scroll Error - No matching column found\");\n\t\t\t}\n\t\t});\n\t};\n\n\t//////////// Localization Functions  ////////////\n\n\tTabulator.prototype.setLocale = function (locale) {\n\n\t\tthis.modules.localize.setLocale(locale);\n\t};\n\n\tTabulator.prototype.getLocale = function () {\n\n\t\treturn this.modules.localize.getLocale();\n\t};\n\n\tTabulator.prototype.getLang = function (locale) {\n\n\t\treturn this.modules.localize.getLang(locale);\n\t};\n\n\t//////////// General Public Functions ////////////\n\n\n\t//redraw list without updating data\n\n\tTabulator.prototype.redraw = function (force) {\n\n\t\tthis.columnManager.redraw(force);\n\n\t\tthis.rowManager.redraw(force);\n\t};\n\n\tTabulator.prototype.setHeight = function (height) {\n\n\t\tif (this.rowManager.renderMode !== \"classic\") {\n\n\t\t\tthis.options.height = isNaN(height) ? height : height + \"px\";\n\n\t\t\tthis.element.style.height = this.options.height;\n\n\t\t\tthis.rowManager.setRenderMode();\n\n\t\t\tthis.rowManager.redraw();\n\t\t} else {\n\n\t\t\tconsole.warn(\"setHeight function is not available in classic render mode\");\n\t\t}\n\t};\n\n\t///////////////////// Sorting ////////////////////\n\n\n\t//trigger sort\n\n\tTabulator.prototype.setSort = function (sortList, dir) {\n\n\t\tif (this.modExists(\"sort\", true)) {\n\n\t\t\tthis.modules.sort.setSort(sortList, dir);\n\n\t\t\tthis.rowManager.sorterRefresh();\n\t\t}\n\t};\n\n\tTabulator.prototype.getSorters = function () {\n\n\t\tif (this.modExists(\"sort\", true)) {\n\n\t\t\treturn this.modules.sort.getSort();\n\t\t}\n\t};\n\n\tTabulator.prototype.clearSort = function () {\n\n\t\tif (this.modExists(\"sort\", true)) {\n\n\t\t\tthis.modules.sort.clear();\n\n\t\t\tthis.rowManager.sorterRefresh();\n\t\t}\n\t};\n\n\t///////////////////// Filtering ////////////////////\n\n\n\t//set standard filters\n\n\tTabulator.prototype.setFilter = function (field, type, value, params) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tthis.modules.filter.setFilter(field, type, value, params);\n\n\t\t\tthis.rowManager.filterRefresh();\n\t\t}\n\t};\n\n\t//add filter to array\n\n\tTabulator.prototype.addFilter = function (field, type, value, params) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tthis.modules.filter.addFilter(field, type, value, params);\n\n\t\t\tthis.rowManager.filterRefresh();\n\t\t}\n\t};\n\n\t//get all filters\n\n\tTabulator.prototype.getFilters = function (all) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\treturn this.modules.filter.getFilters(all);\n\t\t}\n\t};\n\n\tTabulator.prototype.setHeaderFilterFocus = function (field) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tvar column = this.columnManager.findColumn(field);\n\n\t\t\tif (column) {\n\n\t\t\t\tthis.modules.filter.setHeaderFilterFocus(column);\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Column Filter Focus Error - No matching column found:\", field);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.getHeaderFilterValue = function (field) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tvar column = this.columnManager.findColumn(field);\n\n\t\t\tif (column) {\n\n\t\t\t\treturn this.modules.filter.getHeaderFilterValue(column);\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Column Filter Error - No matching column found:\", field);\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.setHeaderFilterValue = function (field, value) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tvar column = this.columnManager.findColumn(field);\n\n\t\t\tif (column) {\n\n\t\t\t\tthis.modules.filter.setHeaderFilterValue(column, value);\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Column Filter Error - No matching column found:\", field);\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.getHeaderFilters = function () {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\treturn this.modules.filter.getHeaderFilters();\n\t\t}\n\t};\n\n\t//remove filter from array\n\n\tTabulator.prototype.removeFilter = function (field, type, value) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tthis.modules.filter.removeFilter(field, type, value);\n\n\t\t\tthis.rowManager.filterRefresh();\n\t\t}\n\t};\n\n\t//clear filters\n\n\tTabulator.prototype.clearFilter = function (all) {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tthis.modules.filter.clearFilter(all);\n\n\t\t\tthis.rowManager.filterRefresh();\n\t\t}\n\t};\n\n\t//clear header filters\n\n\tTabulator.prototype.clearHeaderFilter = function () {\n\n\t\tif (this.modExists(\"filter\", true)) {\n\n\t\t\tthis.modules.filter.clearHeaderFilter();\n\n\t\t\tthis.rowManager.filterRefresh();\n\t\t}\n\t};\n\n\t///////////////////// select ////////////////////\n\n\tTabulator.prototype.selectRow = function (rows) {\n\n\t\tif (this.modExists(\"selectRow\", true)) {\n\n\t\t\tif (rows === true) {\n\n\t\t\t\tconsole.warn(\"passing a boolean to the selectRowselectRow function is deprecated, you should now pass the string 'active'\");\n\n\t\t\t\trows = \"active\";\n\t\t\t}\n\n\t\t\tthis.modules.selectRow.selectRows(rows);\n\t\t}\n\t};\n\n\tTabulator.prototype.deselectRow = function (rows) {\n\n\t\tif (this.modExists(\"selectRow\", true)) {\n\n\t\t\tthis.modules.selectRow.deselectRows(rows);\n\t\t}\n\t};\n\n\tTabulator.prototype.toggleSelectRow = function (row) {\n\n\t\tif (this.modExists(\"selectRow\", true)) {\n\n\t\t\tthis.modules.selectRow.toggleRow(row);\n\t\t}\n\t};\n\n\tTabulator.prototype.getSelectedRows = function () {\n\n\t\tif (this.modExists(\"selectRow\", true)) {\n\n\t\t\treturn this.modules.selectRow.getSelectedRows();\n\t\t}\n\t};\n\n\tTabulator.prototype.getSelectedData = function () {\n\n\t\tif (this.modExists(\"selectRow\", true)) {\n\n\t\t\treturn this.modules.selectRow.getSelectedData();\n\t\t}\n\t};\n\n\t///////////////////// validation  ////////////////////\n\n\tTabulator.prototype.getInvalidCells = function () {\n\n\t\tif (this.modExists(\"validate\", true)) {\n\n\t\t\treturn this.modules.validate.getInvalidCells();\n\t\t}\n\t};\n\n\tTabulator.prototype.clearCellValidation = function (cells) {\n\t\tvar _this31 = this;\n\n\t\tif (this.modExists(\"validate\", true)) {\n\n\t\t\tif (!cells) {\n\n\t\t\t\tcells = this.modules.validate.getInvalidCells();\n\t\t\t}\n\n\t\t\tif (!Array.isArray(cells)) {\n\n\t\t\t\tcells = [cells];\n\t\t\t}\n\n\t\t\tcells.forEach(function (cell) {\n\n\t\t\t\t_this31.modules.validate.clearValidation(cell._getSelf());\n\t\t\t});\n\t\t}\n\t};\n\n\tTabulator.prototype.validate = function (cells) {\n\n\t\tvar output = [];\n\n\t\t//clear row data\n\n\t\tthis.rowManager.rows.forEach(function (row) {\n\n\t\t\tvar valid = row.validate();\n\n\t\t\tif (valid !== true) {\n\n\t\t\t\toutput = output.concat(valid);\n\t\t\t}\n\t\t});\n\n\t\treturn output.length ? output : true;\n\t};\n\n\t//////////// Pagination Functions  ////////////\n\n\n\tTabulator.prototype.setMaxPage = function (max) {\n\n\t\tif (this.options.pagination && this.modExists(\"page\")) {\n\n\t\t\tthis.modules.page.setMaxPage(max);\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.setPage = function (page) {\n\n\t\tif (this.options.pagination && this.modExists(\"page\")) {\n\n\t\t\treturn this.modules.page.setPage(page);\n\t\t} else {\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\treject();\n\t\t\t});\n\t\t}\n\t};\n\n\tTabulator.prototype.setPageToRow = function (row) {\n\t\tvar _this32 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (_this32.options.pagination && _this32.modExists(\"page\")) {\n\n\t\t\t\trow = _this32.rowManager.findRow(row);\n\n\t\t\t\tif (row) {\n\n\t\t\t\t\t_this32.modules.page.setPageToRow(row).then(function () {\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}).catch(function () {\n\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\tTabulator.prototype.setPageSize = function (size) {\n\n\t\tif (this.options.pagination && this.modExists(\"page\")) {\n\n\t\t\tthis.modules.page.setPageSize(size);\n\n\t\t\tthis.modules.page.setPage(1).then(function () {}).catch(function () {});\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.getPageSize = function () {\n\n\t\tif (this.options.pagination && this.modExists(\"page\", true)) {\n\n\t\t\treturn this.modules.page.getPageSize();\n\t\t}\n\t};\n\n\tTabulator.prototype.previousPage = function () {\n\n\t\tif (this.options.pagination && this.modExists(\"page\")) {\n\n\t\t\tthis.modules.page.previousPage();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.nextPage = function () {\n\n\t\tif (this.options.pagination && this.modExists(\"page\")) {\n\n\t\t\tthis.modules.page.nextPage();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.getPage = function () {\n\n\t\tif (this.options.pagination && this.modExists(\"page\")) {\n\n\t\t\treturn this.modules.page.getPage();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.getPageMax = function () {\n\n\t\tif (this.options.pagination && this.modExists(\"page\")) {\n\n\t\t\treturn this.modules.page.getPageMax();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t///////////////// Grouping Functions ///////////////\n\n\n\tTabulator.prototype.setGroupBy = function (groups) {\n\n\t\tif (this.modExists(\"groupRows\", true)) {\n\n\t\t\tthis.options.groupBy = groups;\n\n\t\t\tthis.modules.groupRows.initialize();\n\n\t\t\tthis.rowManager.refreshActiveData(\"display\");\n\n\t\t\tif (this.options.persistence && this.modExists(\"persistence\", true) && this.modules.persistence.config.group) {\n\n\t\t\t\tthis.modules.persistence.save(\"group\");\n\t\t\t}\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.setGroupStartOpen = function (values) {\n\n\t\tif (this.modExists(\"groupRows\", true)) {\n\n\t\t\tthis.options.groupStartOpen = values;\n\n\t\t\tthis.modules.groupRows.initialize();\n\n\t\t\tif (this.options.groupBy) {\n\n\t\t\t\tthis.rowManager.refreshActiveData(\"group\");\n\n\t\t\t\tif (this.options.persistence && this.modExists(\"persistence\", true) && this.modules.persistence.config.group) {\n\n\t\t\t\t\tthis.modules.persistence.save(\"group\");\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Grouping Update - cant refresh view, no groups have been set\");\n\t\t\t}\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.setGroupHeader = function (values) {\n\n\t\tif (this.modExists(\"groupRows\", true)) {\n\n\t\t\tthis.options.groupHeader = values;\n\n\t\t\tthis.modules.groupRows.initialize();\n\n\t\t\tif (this.options.groupBy) {\n\n\t\t\t\tthis.rowManager.refreshActiveData(\"group\");\n\n\t\t\t\tif (this.options.persistence && this.modExists(\"persistence\", true) && this.modules.persistence.config.group) {\n\n\t\t\t\t\tthis.modules.persistence.save(\"group\");\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Grouping Update - cant refresh view, no groups have been set\");\n\t\t\t}\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.getGroups = function (values) {\n\n\t\tif (this.modExists(\"groupRows\", true)) {\n\n\t\t\treturn this.modules.groupRows.getGroups(true);\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t// get grouped table data in the same format as getData()\n\n\tTabulator.prototype.getGroupedData = function () {\n\n\t\tif (this.modExists(\"groupRows\", true)) {\n\n\t\t\treturn this.options.groupBy ? this.modules.groupRows.getGroupedData() : this.getData();\n\t\t}\n\t};\n\n\tTabulator.prototype.getEditedCells = function () {\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\treturn this.modules.edit.getEditedCells();\n\t\t}\n\t};\n\n\tTabulator.prototype.clearCellEdited = function (cells) {\n\t\tvar _this33 = this;\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\tif (!cells) {\n\n\t\t\t\tcells = this.modules.edit.getEditedCells();\n\t\t\t}\n\n\t\t\tif (!Array.isArray(cells)) {\n\n\t\t\t\tcells = [cells];\n\t\t\t}\n\n\t\t\tcells.forEach(function (cell) {\n\n\t\t\t\t_this33.modules.edit.clearEdited(cell._getSelf());\n\t\t\t});\n\t\t}\n\t};\n\n\t///////////////// Column Calculation Functions ///////////////\n\n\tTabulator.prototype.getCalcResults = function () {\n\n\t\tif (this.modExists(\"columnCalcs\", true)) {\n\n\t\t\treturn this.modules.columnCalcs.getResults();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.recalc = function () {\n\n\t\tif (this.modExists(\"columnCalcs\", true)) {\n\n\t\t\tthis.modules.columnCalcs.recalcAll(this.rowManager.activeRows);\n\t\t}\n\t};\n\n\t/////////////// Navigation Management //////////////\n\n\n\tTabulator.prototype.navigatePrev = function () {\n\n\t\tvar cell = false;\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\tcell = this.modules.edit.currentCell;\n\n\t\t\tif (cell) {\n\n\t\t\t\treturn cell.nav().prev();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tTabulator.prototype.navigateNext = function () {\n\n\t\tvar cell = false;\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\tcell = this.modules.edit.currentCell;\n\n\t\t\tif (cell) {\n\n\t\t\t\treturn cell.nav().next();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tTabulator.prototype.navigateLeft = function () {\n\n\t\tvar cell = false;\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\tcell = this.modules.edit.currentCell;\n\n\t\t\tif (cell) {\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\treturn cell.nav().left();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tTabulator.prototype.navigateRight = function () {\n\n\t\tvar cell = false;\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\tcell = this.modules.edit.currentCell;\n\n\t\t\tif (cell) {\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\treturn cell.nav().right();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tTabulator.prototype.navigateUp = function () {\n\n\t\tvar cell = false;\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\tcell = this.modules.edit.currentCell;\n\n\t\t\tif (cell) {\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\treturn cell.nav().up();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tTabulator.prototype.navigateDown = function () {\n\n\t\tvar cell = false;\n\n\t\tif (this.modExists(\"edit\", true)) {\n\n\t\t\tcell = this.modules.edit.currentCell;\n\n\t\t\tif (cell) {\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\treturn cell.nav().down();\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/////////////// History Management //////////////\n\n\tTabulator.prototype.undo = function () {\n\n\t\tif (this.options.history && this.modExists(\"history\", true)) {\n\n\t\t\treturn this.modules.history.undo();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.redo = function () {\n\n\t\tif (this.options.history && this.modExists(\"history\", true)) {\n\n\t\t\treturn this.modules.history.redo();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.getHistoryUndoSize = function () {\n\n\t\tif (this.options.history && this.modExists(\"history\", true)) {\n\n\t\t\treturn this.modules.history.getHistoryUndoSize();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.getHistoryRedoSize = function () {\n\n\t\tif (this.options.history && this.modExists(\"history\", true)) {\n\n\t\t\treturn this.modules.history.getHistoryRedoSize();\n\t\t} else {\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/////////////// Download Management //////////////\n\n\n\tTabulator.prototype.download = function (type, filename, options, active) {\n\n\t\tif (this.modExists(\"download\", true)) {\n\n\t\t\tthis.modules.download.download(type, filename, options, active);\n\t\t}\n\t};\n\n\tTabulator.prototype.downloadToTab = function (type, filename, options, active) {\n\n\t\tif (this.modExists(\"download\", true)) {\n\n\t\t\tthis.modules.download.download(type, filename, options, active, true);\n\t\t}\n\t};\n\n\t/////////// Inter Table Communications ///////////\n\n\n\tTabulator.prototype.tableComms = function (table, module, action, data) {\n\n\t\tthis.modules.comms.receive(table, module, action, data);\n\t};\n\n\t////////////// Extension Management //////////////\n\n\n\t//object to hold module\n\n\tTabulator.prototype.moduleBindings = {};\n\n\t//extend module\n\n\tTabulator.prototype.extendModule = function (name, property, values) {\n\n\t\tif (Tabulator.prototype.moduleBindings[name]) {\n\n\t\t\tvar source = Tabulator.prototype.moduleBindings[name].prototype[property];\n\n\t\t\tif (source) {\n\n\t\t\t\tif ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) == \"object\") {\n\n\t\t\t\t\tfor (var key in values) {\n\n\t\t\t\t\t\tsource[key] = values[key];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn(\"Module Error - Invalid value type, it must be an object\");\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tconsole.warn(\"Module Error - property does not exist:\", property);\n\t\t\t}\n\t\t} else {\n\n\t\t\tconsole.warn(\"Module Error - module does not exist:\", name);\n\t\t}\n\t};\n\n\t//add module to tabulator\n\n\tTabulator.prototype.registerModule = function (name, module) {\n\n\t\tvar self = this;\n\n\t\tTabulator.prototype.moduleBindings[name] = module;\n\t};\n\n\t//ensure that module are bound to instantiated function\n\n\tTabulator.prototype.bindModules = function () {\n\n\t\tthis.modules = {};\n\n\t\tfor (var name in Tabulator.prototype.moduleBindings) {\n\n\t\t\tthis.modules[name] = new Tabulator.prototype.moduleBindings[name](this);\n\t\t}\n\t};\n\n\t//Check for module\n\n\tTabulator.prototype.modExists = function (plugin, required) {\n\n\t\tif (this.modules[plugin]) {\n\n\t\t\treturn true;\n\t\t} else {\n\n\t\t\tif (required) {\n\n\t\t\t\tconsole.error(\"Tabulator Module Not Installed: \" + plugin);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tTabulator.prototype.helpers = {\n\n\t\telVisible: function elVisible(el) {\n\n\t\t\treturn !(el.offsetWidth <= 0 && el.offsetHeight <= 0);\n\t\t},\n\n\t\telOffset: function elOffset(el) {\n\n\t\t\tvar box = el.getBoundingClientRect();\n\n\t\t\treturn {\n\n\t\t\t\ttop: box.top + window.pageYOffset - document.documentElement.clientTop,\n\n\t\t\t\tleft: box.left + window.pageXOffset - document.documentElement.clientLeft\n\n\t\t\t};\n\t\t},\n\n\t\tdeepClone: function deepClone(obj) {\n\n\t\t\tvar clone = Array.isArray(obj) ? [] : {};\n\n\t\t\tfor (var i in obj) {\n\n\t\t\t\tif (obj[i] != null && _typeof(obj[i]) === \"object\") {\n\n\t\t\t\t\tif (obj[i] instanceof Date) {\n\n\t\t\t\t\t\tclone[i] = new Date(obj[i]);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tclone[i] = this.deepClone(obj[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tclone[i] = obj[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn clone;\n\t\t}\n\n\t};\n\n\tTabulator.prototype.comms = {\n\n\t\ttables: [],\n\n\t\tregister: function register(table) {\n\n\t\t\tTabulator.prototype.comms.tables.push(table);\n\t\t},\n\n\t\tderegister: function deregister(table) {\n\n\t\t\tvar index = Tabulator.prototype.comms.tables.indexOf(table);\n\n\t\t\tif (index > -1) {\n\n\t\t\t\tTabulator.prototype.comms.tables.splice(index, 1);\n\t\t\t}\n\t\t},\n\n\t\tlookupTable: function lookupTable(query, silent) {\n\n\t\t\tvar results = [],\n\t\t\t    matches,\n\t\t\t    match;\n\n\t\t\tif (typeof query === \"string\") {\n\n\t\t\t\tmatches = document.querySelectorAll(query);\n\n\t\t\t\tif (matches.length) {\n\n\t\t\t\t\tfor (var i = 0; i < matches.length; i++) {\n\n\t\t\t\t\t\tmatch = Tabulator.prototype.comms.matchElement(matches[i]);\n\n\t\t\t\t\t\tif (match) {\n\n\t\t\t\t\t\t\tresults.push(match);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (typeof HTMLElement !== \"undefined\" && query instanceof HTMLElement || query instanceof Tabulator) {\n\n\t\t\t\tmatch = Tabulator.prototype.comms.matchElement(query);\n\n\t\t\t\tif (match) {\n\n\t\t\t\t\tresults.push(match);\n\t\t\t\t}\n\t\t\t} else if (Array.isArray(query)) {\n\n\t\t\t\tquery.forEach(function (item) {\n\n\t\t\t\t\tresults = results.concat(Tabulator.prototype.comms.lookupTable(item));\n\t\t\t\t});\n\t\t\t} else {\n\n\t\t\t\tif (!silent) {\n\n\t\t\t\t\tconsole.warn(\"Table Connection Error - Invalid Selector\", query);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\n\t\tmatchElement: function matchElement(element) {\n\n\t\t\treturn Tabulator.prototype.comms.tables.find(function (table) {\n\n\t\t\t\treturn element instanceof Tabulator ? table === element : table.element === element;\n\t\t\t});\n\t\t}\n\n\t};\n\n\tTabulator.prototype.findTable = function (query) {\n\n\t\tvar results = Tabulator.prototype.comms.lookupTable(query, true);\n\n\t\treturn Array.isArray(results) && !results.length ? false : results;\n\t};\n\n\tvar Layout = function Layout(table) {\n\n\t\tthis.table = table;\n\n\t\tthis.mode = null;\n\t};\n\n\t//initialize layout system\n\n\n\tLayout.prototype.initialize = function (layout) {\n\n\t\tif (this.modes[layout]) {\n\n\t\t\tthis.mode = layout;\n\t\t} else {\n\n\t\t\tconsole.warn(\"Layout Error - invalid mode set, defaulting to 'fitData' : \" + layout);\n\n\t\t\tthis.mode = 'fitData';\n\t\t}\n\n\t\tthis.table.element.setAttribute(\"tabulator-layout\", this.mode);\n\t};\n\n\tLayout.prototype.getMode = function () {\n\n\t\treturn this.mode;\n\t};\n\n\t//trigger table layout\n\n\n\tLayout.prototype.layout = function () {\n\n\t\tthis.modes[this.mode].call(this, this.table.columnManager.columnsByIndex);\n\t};\n\n\t//layout render functions\n\n\n\tLayout.prototype.modes = {\n\n\t\t//resize columns to fit data they contain\n\n\n\t\t\"fitData\": function fitData(columns) {\n\n\t\t\tcolumns.forEach(function (column) {\n\n\t\t\t\tcolumn.reinitializeWidth();\n\t\t\t});\n\n\t\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.table.modules.responsiveLayout.update();\n\t\t\t}\n\t\t},\n\n\t\t//resize columns to fit data they contain and stretch row to fill table\n\n\n\t\t\"fitDataFill\": function fitDataFill(columns) {\n\n\t\t\tcolumns.forEach(function (column) {\n\n\t\t\t\tcolumn.reinitializeWidth();\n\t\t\t});\n\n\t\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.table.modules.responsiveLayout.update();\n\t\t\t}\n\t\t},\n\n\t\t//resize columns to fit data they contain\n\n\n\t\t\"fitDataTable\": function fitDataTable(columns) {\n\n\t\t\tcolumns.forEach(function (column) {\n\n\t\t\t\tcolumn.reinitializeWidth();\n\t\t\t});\n\n\t\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.table.modules.responsiveLayout.update();\n\t\t\t}\n\t\t},\n\n\t\t//resize columns to fit data the contain and stretch last column to fill table\n\n\n\t\t\"fitDataStretch\": function fitDataStretch(columns) {\n\t\t\tvar _this34 = this;\n\n\t\t\tvar colsWidth = 0,\n\t\t\t    tableWidth = this.table.rowManager.element.clientWidth,\n\t\t\t    gap = 0,\n\t\t\t    lastCol = false;\n\n\t\t\tcolumns.forEach(function (column, i) {\n\n\t\t\t\tif (!column.widthFixed) {\n\n\t\t\t\t\tcolumn.reinitializeWidth();\n\t\t\t\t}\n\n\t\t\t\tif (_this34.table.options.responsiveLayout ? column.modules.responsive.visible : column.visible) {\n\n\t\t\t\t\tlastCol = column;\n\t\t\t\t}\n\n\t\t\t\tif (column.visible) {\n\n\t\t\t\t\tcolsWidth += column.getWidth();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (lastCol) {\n\n\t\t\t\tgap = tableWidth - colsWidth + lastCol.getWidth();\n\n\t\t\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\t\tlastCol.setWidth(0);\n\n\t\t\t\t\tthis.table.modules.responsiveLayout.update();\n\t\t\t\t}\n\n\t\t\t\tif (gap > 0) {\n\n\t\t\t\t\tlastCol.setWidth(gap);\n\t\t\t\t} else {\n\n\t\t\t\t\tlastCol.reinitializeWidth();\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\t\tthis.table.modules.responsiveLayout.update();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t//resize columns to fit\n\n\n\t\t\"fitColumns\": function fitColumns(columns) {\n\n\t\t\tvar self = this;\n\n\t\t\tvar totalWidth = self.table.element.clientWidth; //table element width\n\n\n\t\t\tvar fixedWidth = 0; //total width of columns with a defined width\n\n\n\t\t\tvar flexWidth = 0; //total width available to flexible columns\n\n\n\t\t\tvar flexGrowUnits = 0; //total number of widthGrow blocks accross all columns\n\n\n\t\t\tvar flexColWidth = 0; //desired width of flexible columns\n\n\n\t\t\tvar flexColumns = []; //array of flexible width columns\n\n\n\t\t\tvar fixedShrinkColumns = []; //array of fixed width columns that can shrink\n\n\n\t\t\tvar flexShrinkUnits = 0; //total number of widthShrink blocks accross all columns\n\n\n\t\t\tvar overflowWidth = 0; //horizontal overflow width\n\n\n\t\t\tvar gapFill = 0; //number of pixels to be added to final column to close and half pixel gaps\n\n\n\t\t\tfunction calcWidth(width) {\n\n\t\t\t\tvar colWidth;\n\n\t\t\t\tif (typeof width == \"string\") {\n\n\t\t\t\t\tif (width.indexOf(\"%\") > -1) {\n\n\t\t\t\t\t\tcolWidth = totalWidth / 100 * parseInt(width);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcolWidth = parseInt(width);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tcolWidth = width;\n\t\t\t\t}\n\n\t\t\t\treturn colWidth;\n\t\t\t}\n\n\t\t\t//ensure columns resize to take up the correct amount of space\n\n\n\t\t\tfunction scaleColumns(columns, freeSpace, colWidth, shrinkCols) {\n\n\t\t\t\tvar oversizeCols = [],\n\t\t\t\t    oversizeSpace = 0,\n\t\t\t\t    remainingSpace = 0,\n\t\t\t\t    nextColWidth = 0,\n\t\t\t\t    gap = 0,\n\t\t\t\t    changeUnits = 0,\n\t\t\t\t    undersizeCols = [];\n\n\t\t\t\tfunction calcGrow(col) {\n\n\t\t\t\t\treturn colWidth * (col.column.definition.widthGrow || 1);\n\t\t\t\t}\n\n\t\t\t\tfunction calcShrink(col) {\n\n\t\t\t\t\treturn calcWidth(col.width) - colWidth * (col.column.definition.widthShrink || 0);\n\t\t\t\t}\n\n\t\t\t\tcolumns.forEach(function (col, i) {\n\n\t\t\t\t\tvar width = shrinkCols ? calcShrink(col) : calcGrow(col);\n\n\t\t\t\t\tif (col.column.minWidth >= width) {\n\n\t\t\t\t\t\toversizeCols.push(col);\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tundersizeCols.push(col);\n\n\t\t\t\t\t\tchangeUnits += shrinkCols ? col.column.definition.widthShrink || 1 : col.column.definition.widthGrow || 1;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (oversizeCols.length) {\n\n\t\t\t\t\toversizeCols.forEach(function (col) {\n\n\t\t\t\t\t\toversizeSpace += shrinkCols ? col.width - col.column.minWidth : col.column.minWidth;\n\n\t\t\t\t\t\tcol.width = col.column.minWidth;\n\t\t\t\t\t});\n\n\t\t\t\t\tremainingSpace = freeSpace - oversizeSpace;\n\n\t\t\t\t\tnextColWidth = changeUnits ? Math.floor(remainingSpace / changeUnits) : remainingSpace;\n\n\t\t\t\t\tgap = remainingSpace - nextColWidth * changeUnits;\n\n\t\t\t\t\tgap += scaleColumns(undersizeCols, remainingSpace, nextColWidth, shrinkCols);\n\t\t\t\t} else {\n\n\t\t\t\t\tgap = changeUnits ? freeSpace - Math.floor(freeSpace / changeUnits) * changeUnits : freeSpace;\n\n\t\t\t\t\tundersizeCols.forEach(function (column) {\n\n\t\t\t\t\t\tcolumn.width = shrinkCols ? calcShrink(column) : calcGrow(column);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn gap;\n\t\t\t}\n\n\t\t\tif (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n\n\t\t\t\tthis.table.modules.responsiveLayout.update();\n\t\t\t}\n\n\t\t\t//adjust for vertical scrollbar if present\n\n\n\t\t\tif (this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight) {\n\n\t\t\t\ttotalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;\n\t\t\t}\n\n\t\t\tcolumns.forEach(function (column) {\n\n\t\t\t\tvar width, minWidth, colWidth;\n\n\t\t\t\tif (column.visible) {\n\n\t\t\t\t\twidth = column.definition.width;\n\n\t\t\t\t\tminWidth = parseInt(column.minWidth);\n\n\t\t\t\t\tif (width) {\n\n\t\t\t\t\t\tcolWidth = calcWidth(width);\n\n\t\t\t\t\t\tfixedWidth += colWidth > minWidth ? colWidth : minWidth;\n\n\t\t\t\t\t\tif (column.definition.widthShrink) {\n\n\t\t\t\t\t\t\tfixedShrinkColumns.push({\n\n\t\t\t\t\t\t\t\tcolumn: column,\n\n\t\t\t\t\t\t\t\twidth: colWidth > minWidth ? colWidth : minWidth\n\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tflexShrinkUnits += column.definition.widthShrink;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tflexColumns.push({\n\n\t\t\t\t\t\t\tcolumn: column,\n\n\t\t\t\t\t\t\twidth: 0\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tflexGrowUnits += column.definition.widthGrow || 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//calculate available space\n\n\n\t\t\tflexWidth = totalWidth - fixedWidth;\n\n\t\t\t//calculate correct column size\n\n\n\t\t\tflexColWidth = Math.floor(flexWidth / flexGrowUnits);\n\n\t\t\t//generate column widths\n\n\n\t\t\tvar gapFill = scaleColumns(flexColumns, flexWidth, flexColWidth, false);\n\n\t\t\t//increase width of last column to account for rounding errors\n\n\n\t\t\tif (flexColumns.length && gapFill > 0) {\n\n\t\t\t\tflexColumns[flexColumns.length - 1].width += +gapFill;\n\t\t\t}\n\n\t\t\t//caculate space for columns to be shrunk into\n\n\n\t\t\tflexColumns.forEach(function (col) {\n\n\t\t\t\tflexWidth -= col.width;\n\t\t\t});\n\n\t\t\toverflowWidth = Math.abs(gapFill) + flexWidth;\n\n\t\t\t//shrink oversize columns if there is no available space\n\n\n\t\t\tif (overflowWidth > 0 && flexShrinkUnits) {\n\n\t\t\t\tgapFill = scaleColumns(fixedShrinkColumns, overflowWidth, Math.floor(overflowWidth / flexShrinkUnits), true);\n\t\t\t}\n\n\t\t\t//decrease width of last column to account for rounding errors\n\n\n\t\t\tif (fixedShrinkColumns.length) {\n\n\t\t\t\tfixedShrinkColumns[fixedShrinkColumns.length - 1].width -= gapFill;\n\t\t\t}\n\n\t\t\tflexColumns.forEach(function (col) {\n\n\t\t\t\tcol.column.setWidth(col.width);\n\t\t\t});\n\n\t\t\tfixedShrinkColumns.forEach(function (col) {\n\n\t\t\t\tcol.column.setWidth(col.width);\n\t\t\t});\n\t\t}\n\n\t};\n\n\tTabulator.prototype.registerModule(\"layout\", Layout);\n\n\tvar Localize = function Localize(table) {\n\n\t\tthis.table = table; //hold Tabulator object\n\n\t\tthis.locale = \"default\"; //current locale\n\n\t\tthis.lang = false; //current language\n\n\t\tthis.bindings = {}; //update events to call when locale is changed\n\t};\n\n\t//set header placehoder\n\n\tLocalize.prototype.setHeaderFilterPlaceholder = function (placeholder) {\n\n\t\tthis.langs.default.headerFilters.default = placeholder;\n\t};\n\n\t//set header filter placeholder by column\n\n\tLocalize.prototype.setHeaderFilterColumnPlaceholder = function (column, placeholder) {\n\n\t\tthis.langs.default.headerFilters.columns[column] = placeholder;\n\n\t\tif (this.lang && !this.lang.headerFilters.columns[column]) {\n\n\t\t\tthis.lang.headerFilters.columns[column] = placeholder;\n\t\t}\n\t};\n\n\t//setup a lang description object\n\n\tLocalize.prototype.installLang = function (locale, lang) {\n\n\t\tif (this.langs[locale]) {\n\n\t\t\tthis._setLangProp(this.langs[locale], lang);\n\t\t} else {\n\n\t\t\tthis.langs[locale] = lang;\n\t\t}\n\t};\n\n\tLocalize.prototype._setLangProp = function (lang, values) {\n\n\t\tfor (var key in values) {\n\n\t\t\tif (lang[key] && _typeof(lang[key]) == \"object\") {\n\n\t\t\t\tthis._setLangProp(lang[key], values[key]);\n\t\t\t} else {\n\n\t\t\t\tlang[key] = values[key];\n\t\t\t}\n\t\t}\n\t};\n\n\t//set current locale\n\n\tLocalize.prototype.setLocale = function (desiredLocale) {\n\n\t\tvar self = this;\n\n\t\tdesiredLocale = desiredLocale || \"default\";\n\n\t\t//fill in any matching languge values\n\n\t\tfunction traverseLang(trans, path) {\n\n\t\t\tfor (var prop in trans) {\n\n\t\t\t\tif (_typeof(trans[prop]) == \"object\") {\n\n\t\t\t\t\tif (!path[prop]) {\n\n\t\t\t\t\t\tpath[prop] = {};\n\t\t\t\t\t}\n\n\t\t\t\t\ttraverseLang(trans[prop], path[prop]);\n\t\t\t\t} else {\n\n\t\t\t\t\tpath[prop] = trans[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//determing correct locale to load\n\n\t\tif (desiredLocale === true && navigator.language) {\n\n\t\t\t//get local from system\n\n\t\t\tdesiredLocale = navigator.language.toLowerCase();\n\t\t}\n\n\t\tif (desiredLocale) {\n\n\t\t\t//if locale is not set, check for matching top level locale else use default\n\n\t\t\tif (!self.langs[desiredLocale]) {\n\n\t\t\t\tvar prefix = desiredLocale.split(\"-\")[0];\n\n\t\t\t\tif (self.langs[prefix]) {\n\n\t\t\t\t\tconsole.warn(\"Localization Error - Exact matching locale not found, using closest match: \", desiredLocale, prefix);\n\n\t\t\t\t\tdesiredLocale = prefix;\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn(\"Localization Error - Matching locale not found, using default: \", desiredLocale);\n\n\t\t\t\t\tdesiredLocale = \"default\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tself.locale = desiredLocale;\n\n\t\t//load default lang template\n\n\t\tself.lang = Tabulator.prototype.helpers.deepClone(self.langs.default || {});\n\n\t\tif (desiredLocale != \"default\") {\n\n\t\t\ttraverseLang(self.langs[desiredLocale], self.lang);\n\t\t}\n\n\t\tself.table.options.localized.call(self.table, self.locale, self.lang);\n\n\t\tself._executeBindings();\n\t};\n\n\t//get current locale\n\n\tLocalize.prototype.getLocale = function (locale) {\n\n\t\treturn self.locale;\n\t};\n\n\t//get lang object for given local or current if none provided\n\n\tLocalize.prototype.getLang = function (locale) {\n\n\t\treturn locale ? this.langs[locale] : this.lang;\n\t};\n\n\t//get text for current locale\n\n\tLocalize.prototype.getText = function (path, value) {\n\n\t\tvar path = value ? path + \"|\" + value : path,\n\t\t    pathArray = path.split(\"|\"),\n\t\t    text = this._getLangElement(pathArray, this.locale);\n\n\t\t// if(text === false){\n\n\t\t// \tconsole.warn(\"Localization Error - Matching localized text not found for given path: \", path);\n\n\t\t// }\n\n\n\t\treturn text || \"\";\n\t};\n\n\t//traverse langs object and find localized copy\n\n\tLocalize.prototype._getLangElement = function (path, locale) {\n\n\t\tvar self = this;\n\n\t\tvar root = self.lang;\n\n\t\tpath.forEach(function (level) {\n\n\t\t\tvar rootPath;\n\n\t\t\tif (root) {\n\n\t\t\t\trootPath = root[level];\n\n\t\t\t\tif (typeof rootPath != \"undefined\") {\n\n\t\t\t\t\troot = rootPath;\n\t\t\t\t} else {\n\n\t\t\t\t\troot = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn root;\n\t};\n\n\t//set update binding\n\n\tLocalize.prototype.bind = function (path, callback) {\n\n\t\tif (!this.bindings[path]) {\n\n\t\t\tthis.bindings[path] = [];\n\t\t}\n\n\t\tthis.bindings[path].push(callback);\n\n\t\tcallback(this.getText(path), this.lang);\n\t};\n\n\t//itterate through bindings and trigger updates\n\n\tLocalize.prototype._executeBindings = function () {\n\n\t\tvar self = this;\n\n\t\tvar _loop = function _loop(path) {\n\n\t\t\tself.bindings[path].forEach(function (binding) {\n\n\t\t\t\tbinding(self.getText(path), self.lang);\n\t\t\t});\n\t\t};\n\n\t\tfor (var path in self.bindings) {\n\t\t\t_loop(path);\n\t\t}\n\t};\n\n\t//Localized text listings\n\n\tLocalize.prototype.langs = {\n\n\t\t\"default\": { //hold default locale text\n\n\t\t\t\"groups\": {\n\n\t\t\t\t\"item\": \"item\",\n\n\t\t\t\t\"items\": \"items\"\n\n\t\t\t},\n\n\t\t\t\"columns\": {},\n\n\t\t\t\"ajax\": {\n\n\t\t\t\t\"loading\": \"Loading\",\n\n\t\t\t\t\"error\": \"Error\"\n\n\t\t\t},\n\n\t\t\t\"pagination\": {\n\n\t\t\t\t\"page_size\": \"Page Size\",\n\n\t\t\t\t\"page_title\": \"Show Page\",\n\n\t\t\t\t\"first\": \"First\",\n\n\t\t\t\t\"first_title\": \"First Page\",\n\n\t\t\t\t\"last\": \"Last\",\n\n\t\t\t\t\"last_title\": \"Last Page\",\n\n\t\t\t\t\"prev\": \"Prev\",\n\n\t\t\t\t\"prev_title\": \"Prev Page\",\n\n\t\t\t\t\"next\": \"Next\",\n\n\t\t\t\t\"next_title\": \"Next Page\",\n\n\t\t\t\t\"all\": \"All\"\n\n\t\t\t},\n\n\t\t\t\"headerFilters\": {\n\n\t\t\t\t\"default\": \"filter column...\",\n\n\t\t\t\t\"columns\": {}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tTabulator.prototype.registerModule(\"localize\", Localize);\n\n\tvar Comms = function Comms(table) {\n\n\t\tthis.table = table;\n\t};\n\n\tComms.prototype.getConnections = function (selectors) {\n\n\t\tvar self = this,\n\t\t    connections = [],\n\t\t    connection;\n\n\t\tconnection = Tabulator.prototype.comms.lookupTable(selectors);\n\n\t\tconnection.forEach(function (con) {\n\n\t\t\tif (self.table !== con) {\n\n\t\t\t\tconnections.push(con);\n\t\t\t}\n\t\t});\n\n\t\treturn connections;\n\t};\n\n\tComms.prototype.send = function (selectors, module, action, data) {\n\n\t\tvar self = this,\n\t\t    connections = this.getConnections(selectors);\n\n\t\tconnections.forEach(function (connection) {\n\n\t\t\tconnection.tableComms(self.table.element, module, action, data);\n\t\t});\n\n\t\tif (!connections.length && selectors) {\n\n\t\t\tconsole.warn(\"Table Connection Error - No tables matching selector found\", selectors);\n\t\t}\n\t};\n\n\tComms.prototype.receive = function (table, module, action, data) {\n\n\t\tif (this.table.modExists(module)) {\n\n\t\t\treturn this.table.modules[module].commsReceived(table, action, data);\n\t\t} else {\n\n\t\t\tconsole.warn(\"Inter-table Comms Error - no such module:\", module);\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"comms\", Comms);\n\n\tvar Accessor = function Accessor(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.allowedTypes = [\"\", \"data\", \"download\", \"clipboard\", \"print\", \"htmlOutput\"]; //list of accessor types\n\t};\n\n\t//initialize column accessor\n\tAccessor.prototype.initializeColumn = function (column) {\n\t\tvar self = this,\n\t\t    match = false,\n\t\t    config = {};\n\n\t\tthis.allowedTypes.forEach(function (type) {\n\t\t\tvar key = \"accessor\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n\t\t\t    accessor;\n\n\t\t\tif (column.definition[key]) {\n\t\t\t\taccessor = self.lookupAccessor(column.definition[key]);\n\n\t\t\t\tif (accessor) {\n\t\t\t\t\tmatch = true;\n\n\t\t\t\t\tconfig[key] = {\n\t\t\t\t\t\taccessor: accessor,\n\t\t\t\t\t\tparams: column.definition[key + \"Params\"] || {}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (match) {\n\t\t\tcolumn.modules.accessor = config;\n\t\t}\n\t};\n\n\tAccessor.prototype.lookupAccessor = function (value) {\n\t\tvar accessor = false;\n\n\t\t//set column accessor\n\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\t\t\tcase \"string\":\n\t\t\t\tif (this.accessors[value]) {\n\t\t\t\t\taccessor = this.accessors[value];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Accessor Error - No such accessor found, ignoring: \", value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\taccessor = value;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn accessor;\n\t};\n\n\t//apply accessor to row\n\tAccessor.prototype.transformRow = function (dataIn, type) {\n\t\tvar self = this,\n\t\t    key = \"accessor\" + (type.charAt(0).toUpperCase() + type.slice(1));\n\n\t\t//clone data object with deep copy to isolate internal data from returned result\n\t\tvar data = Tabulator.prototype.helpers.deepClone(dataIn || {});\n\n\t\tself.table.columnManager.traverse(function (column) {\n\t\t\tvar value, accessor, params, component;\n\n\t\t\tif (column.modules.accessor) {\n\n\t\t\t\taccessor = column.modules.accessor[key] || column.modules.accessor.accessor || false;\n\n\t\t\t\tif (accessor) {\n\t\t\t\t\tvalue = column.getFieldValue(data);\n\n\t\t\t\t\tif (value != \"undefined\") {\n\t\t\t\t\t\tcomponent = column.getComponent();\n\t\t\t\t\t\tparams = typeof accessor.params === \"function\" ? accessor.params(value, data, type, component) : accessor.params;\n\t\t\t\t\t\tcolumn.setFieldValue(data, accessor.accessor(value, data, type, params, component));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t},\n\n\t//default accessors\n\tAccessor.prototype.accessors = {};\n\n\tTabulator.prototype.registerModule(\"accessor\", Accessor);\n\tvar Ajax = function Ajax(table) {\n\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.config = false; //hold config object for ajax request\n\t\tthis.url = \"\"; //request URL\n\t\tthis.urlGenerator = false;\n\t\tthis.params = false; //request parameters\n\n\t\tthis.loaderElement = this.createLoaderElement(); //loader message div\n\t\tthis.msgElement = this.createMsgElement(); //message element\n\t\tthis.loadingElement = false;\n\t\tthis.errorElement = false;\n\t\tthis.loaderPromise = false;\n\n\t\tthis.progressiveLoad = false;\n\t\tthis.loading = false;\n\n\t\tthis.requestOrder = 0; //prevent requests comming out of sequence if overridden by another load request\n\t};\n\n\t//initialize setup options\n\tAjax.prototype.initialize = function () {\n\t\tvar template;\n\n\t\tthis.loaderElement.appendChild(this.msgElement);\n\n\t\tif (this.table.options.ajaxLoaderLoading) {\n\t\t\tif (typeof this.table.options.ajaxLoaderLoading == \"string\") {\n\t\t\t\ttemplate = document.createElement('template');\n\t\t\t\ttemplate.innerHTML = this.table.options.ajaxLoaderLoading.trim();\n\t\t\t\tthis.loadingElement = template.content.firstChild;\n\t\t\t} else {\n\t\t\t\tthis.loadingElement = this.table.options.ajaxLoaderLoading;\n\t\t\t}\n\t\t}\n\n\t\tthis.loaderPromise = this.table.options.ajaxRequestFunc || this.defaultLoaderPromise;\n\n\t\tthis.urlGenerator = this.table.options.ajaxURLGenerator || this.defaultURLGenerator;\n\n\t\tif (this.table.options.ajaxLoaderError) {\n\t\t\tif (typeof this.table.options.ajaxLoaderError == \"string\") {\n\t\t\t\ttemplate = document.createElement('template');\n\t\t\t\ttemplate.innerHTML = this.table.options.ajaxLoaderError.trim();\n\t\t\t\tthis.errorElement = template.content.firstChild;\n\t\t\t} else {\n\t\t\t\tthis.errorElement = this.table.options.ajaxLoaderError;\n\t\t\t}\n\t\t}\n\n\t\tif (this.table.options.ajaxParams) {\n\t\t\tthis.setParams(this.table.options.ajaxParams);\n\t\t}\n\n\t\tif (this.table.options.ajaxConfig) {\n\t\t\tthis.setConfig(this.table.options.ajaxConfig);\n\t\t}\n\n\t\tif (this.table.options.ajaxURL) {\n\t\t\tthis.setUrl(this.table.options.ajaxURL);\n\t\t}\n\n\t\tif (this.table.options.ajaxProgressiveLoad) {\n\t\t\tif (this.table.options.pagination) {\n\t\t\t\tthis.progressiveLoad = false;\n\t\t\t\tconsole.error(\"Progressive Load Error - Pagination and progressive load cannot be used at the same time\");\n\t\t\t} else {\n\t\t\t\tif (this.table.modExists(\"page\")) {\n\t\t\t\t\tthis.progressiveLoad = this.table.options.ajaxProgressiveLoad;\n\t\t\t\t\tthis.table.modules.page.initializeProgressive(this.progressiveLoad);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\"Pagination plugin is required for progressive ajax loading\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tAjax.prototype.createLoaderElement = function () {\n\t\tvar el = document.createElement(\"div\");\n\t\tel.classList.add(\"tabulator-loader\");\n\t\treturn el;\n\t};\n\n\tAjax.prototype.createMsgElement = function () {\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-loader-msg\");\n\t\tel.setAttribute(\"role\", \"alert\");\n\n\t\treturn el;\n\t};\n\n\t//set ajax params\n\tAjax.prototype.setParams = function (params, update) {\n\t\tif (update) {\n\t\t\tthis.params = this.params || {};\n\n\t\t\tfor (var key in params) {\n\t\t\t\tthis.params[key] = params[key];\n\t\t\t}\n\t\t} else {\n\t\t\tthis.params = params;\n\t\t}\n\t};\n\n\tAjax.prototype.getParams = function () {\n\t\treturn this.params || {};\n\t};\n\n\t//load config object\n\tAjax.prototype.setConfig = function (config) {\n\t\tthis._loadDefaultConfig();\n\n\t\tif (typeof config == \"string\") {\n\t\t\tthis.config.method = config;\n\t\t} else {\n\t\t\tfor (var key in config) {\n\t\t\t\tthis.config[key] = config[key];\n\t\t\t}\n\t\t}\n\t};\n\n\t//create config object from default\n\tAjax.prototype._loadDefaultConfig = function (force) {\n\t\tvar self = this;\n\t\tif (!self.config || force) {\n\n\t\t\tself.config = {};\n\n\t\t\t//load base config from defaults\n\t\t\tfor (var key in self.defaultConfig) {\n\t\t\t\tself.config[key] = self.defaultConfig[key];\n\t\t\t}\n\t\t}\n\t};\n\n\t//set request url\n\tAjax.prototype.setUrl = function (url) {\n\t\tthis.url = url;\n\t};\n\n\t//get request url\n\tAjax.prototype.getUrl = function () {\n\t\treturn this.url;\n\t};\n\n\t//lstandard loading function\n\tAjax.prototype.loadData = function (inPosition, columnsChanged) {\n\t\tvar self = this;\n\n\t\tif (this.progressiveLoad) {\n\t\t\treturn this._loadDataProgressive();\n\t\t} else {\n\t\t\treturn this._loadDataStandard(inPosition, columnsChanged);\n\t\t}\n\t};\n\n\tAjax.prototype.nextPage = function (diff) {\n\t\tvar margin;\n\n\t\tif (!this.loading) {\n\n\t\t\tmargin = this.table.options.ajaxProgressiveLoadScrollMargin || this.table.rowManager.getElement().clientHeight * 2;\n\n\t\t\tif (diff < margin) {\n\t\t\t\tthis.table.modules.page.nextPage().then(function () {}).catch(function () {});\n\t\t\t}\n\t\t}\n\t};\n\n\tAjax.prototype.blockActiveRequest = function () {\n\t\tthis.requestOrder++;\n\t};\n\n\tAjax.prototype._loadDataProgressive = function () {\n\t\tthis.table.rowManager.setData([]);\n\t\treturn this.table.modules.page.setPage(1);\n\t};\n\n\tAjax.prototype._loadDataStandard = function (inPosition, columnsChanged) {\n\t\tvar _this35 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\t_this35.sendRequest(inPosition).then(function (data) {\n\t\t\t\t_this35.table.rowManager.setData(data, inPosition, columnsChanged).then(function () {\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t});\n\t\t\t}).catch(function (e) {\n\t\t\t\treject(e);\n\t\t\t});\n\t\t});\n\t};\n\n\tAjax.prototype.generateParamsList = function (data, prefix) {\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\tprefix = prefix || \"\";\n\n\t\tif (Array.isArray(data)) {\n\t\t\tdata.forEach(function (item, i) {\n\t\t\t\toutput = output.concat(self.generateParamsList(item, prefix ? prefix + \"[\" + i + \"]\" : i));\n\t\t\t});\n\t\t} else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === \"object\") {\n\t\t\tfor (var key in data) {\n\t\t\t\toutput = output.concat(self.generateParamsList(data[key], prefix ? prefix + \"[\" + key + \"]\" : key));\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push({ key: prefix, value: data });\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tAjax.prototype.serializeParams = function (params) {\n\t\tvar output = this.generateParamsList(params),\n\t\t    encoded = [];\n\n\t\toutput.forEach(function (item) {\n\t\t\tencoded.push(encodeURIComponent(item.key) + \"=\" + encodeURIComponent(item.value));\n\t\t});\n\n\t\treturn encoded.join(\"&\");\n\t};\n\n\t//send ajax request\n\tAjax.prototype.sendRequest = function (silent) {\n\t\tvar _this36 = this;\n\n\t\tvar self = this,\n\t\t    url = self.url,\n\t\t    requestNo,\n\t\t    esc,\n\t\t    query;\n\n\t\tself.requestOrder++;\n\t\trequestNo = self.requestOrder;\n\n\t\tself._loadDefaultConfig();\n\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tif (self.table.options.ajaxRequesting.call(_this36.table, self.url, self.params) !== false) {\n\n\t\t\t\tself.loading = true;\n\n\t\t\t\tif (!silent) {\n\t\t\t\t\tself.showLoader();\n\t\t\t\t}\n\n\t\t\t\t_this36.loaderPromise(url, self.config, self.params).then(function (data) {\n\t\t\t\t\tif (requestNo === self.requestOrder) {\n\t\t\t\t\t\tif (self.table.options.ajaxResponse) {\n\t\t\t\t\t\t\tdata = self.table.options.ajaxResponse.call(self.table, self.url, self.params, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(data);\n\n\t\t\t\t\t\tself.hideLoader();\n\t\t\t\t\t\tself.loading = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Ajax Response Blocked - An active ajax request was blocked by an attempt to change table data while the request was being made\");\n\t\t\t\t\t}\n\t\t\t\t}).catch(function (error) {\n\t\t\t\t\tconsole.error(\"Ajax Load Error: \", error);\n\t\t\t\t\tself.table.options.ajaxError.call(self.table, error);\n\n\t\t\t\t\tself.showError();\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tself.hideLoader();\n\t\t\t\t\t}, 3000);\n\n\t\t\t\t\tself.loading = false;\n\n\t\t\t\t\treject();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\tAjax.prototype.showLoader = function () {\n\t\tvar shouldLoad = typeof this.table.options.ajaxLoader === \"function\" ? this.table.options.ajaxLoader() : this.table.options.ajaxLoader;\n\n\t\tif (shouldLoad) {\n\n\t\t\tthis.hideLoader();\n\n\t\t\twhile (this.msgElement.firstChild) {\n\t\t\t\tthis.msgElement.removeChild(this.msgElement.firstChild);\n\t\t\t}this.msgElement.classList.remove(\"tabulator-error\");\n\t\t\tthis.msgElement.classList.add(\"tabulator-loading\");\n\n\t\t\tif (this.loadingElement) {\n\t\t\t\tthis.msgElement.appendChild(this.loadingElement);\n\t\t\t} else {\n\t\t\t\tthis.msgElement.innerHTML = this.table.modules.localize.getText(\"ajax|loading\");\n\t\t\t}\n\n\t\t\tthis.table.element.appendChild(this.loaderElement);\n\t\t}\n\t};\n\n\tAjax.prototype.showError = function () {\n\t\tthis.hideLoader();\n\n\t\twhile (this.msgElement.firstChild) {\n\t\t\tthis.msgElement.removeChild(this.msgElement.firstChild);\n\t\t}this.msgElement.classList.remove(\"tabulator-loading\");\n\t\tthis.msgElement.classList.add(\"tabulator-error\");\n\n\t\tif (this.errorElement) {\n\t\t\tthis.msgElement.appendChild(this.errorElement);\n\t\t} else {\n\t\t\tthis.msgElement.innerHTML = this.table.modules.localize.getText(\"ajax|error\");\n\t\t}\n\n\t\tthis.table.element.appendChild(this.loaderElement);\n\t};\n\n\tAjax.prototype.hideLoader = function () {\n\t\tif (this.loaderElement.parentNode) {\n\t\t\tthis.loaderElement.parentNode.removeChild(this.loaderElement);\n\t\t}\n\t};\n\n\t//default ajax config object\n\tAjax.prototype.defaultConfig = {\n\t\tmethod: \"GET\"\n\t};\n\n\tAjax.prototype.defaultURLGenerator = function (url, config, params) {\n\n\t\tif (url) {\n\t\t\tif (params && Object.keys(params).length) {\n\t\t\t\tif (!config.method || config.method.toLowerCase() == \"get\") {\n\t\t\t\t\tconfig.method = \"get\";\n\n\t\t\t\t\turl += (url.includes(\"?\") ? \"&\" : \"?\") + this.serializeParams(params);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn url;\n\t};\n\n\tAjax.prototype.defaultLoaderPromise = function (url, config, params) {\n\t\tvar self = this,\n\t\t    contentType;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\t//set url\n\t\t\turl = self.urlGenerator(url, config, params);\n\n\t\t\t//set body content if not GET request\n\t\t\tif (config.method.toUpperCase() != \"GET\") {\n\t\t\t\tcontentType = _typeof(self.table.options.ajaxContentType) === \"object\" ? self.table.options.ajaxContentType : self.contentTypeFormatters[self.table.options.ajaxContentType];\n\t\t\t\tif (contentType) {\n\n\t\t\t\t\tfor (var key in contentType.headers) {\n\t\t\t\t\t\tif (!config.headers) {\n\t\t\t\t\t\t\tconfig.headers = {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof config.headers[key] === \"undefined\") {\n\t\t\t\t\t\t\tconfig.headers[key] = contentType.headers[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconfig.body = contentType.body.call(self, url, config, params);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Ajax Error - Invalid ajaxContentType value:\", self.table.options.ajaxContentType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (url) {\n\n\t\t\t\t//configure headers\n\t\t\t\tif (typeof config.headers === \"undefined\") {\n\t\t\t\t\tconfig.headers = {};\n\t\t\t\t}\n\n\t\t\t\tif (typeof config.headers.Accept === \"undefined\") {\n\t\t\t\t\tconfig.headers.Accept = \"application/json\";\n\t\t\t\t}\n\n\t\t\t\tif (typeof config.headers[\"X-Requested-With\"] === \"undefined\") {\n\t\t\t\t\tconfig.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\tif (typeof config.mode === \"undefined\") {\n\t\t\t\t\tconfig.mode = \"cors\";\n\t\t\t\t}\n\n\t\t\t\tif (config.mode == \"cors\") {\n\n\t\t\t\t\tif (typeof config.headers[\"Access-Control-Allow-Origin\"] === \"undefined\") {\n\t\t\t\t\t\tconfig.headers[\"Access-Control-Allow-Origin\"] = window.location.origin;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof config.credentials === \"undefined\") {\n\t\t\t\t\t\tconfig.credentials = 'same-origin';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof config.credentials === \"undefined\") {\n\t\t\t\t\t\tconfig.credentials = 'include';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//send request\n\t\t\t\tfetch(url, config).then(function (response) {\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tresponse.json().then(function (data) {\n\t\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t\t}).catch(function (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\tconsole.warn(\"Ajax Load Error - Invalid JSON returned\", error);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(\"Ajax Load Error - Connection Error: \" + response.status, response.statusText);\n\t\t\t\t\t\treject(response);\n\t\t\t\t\t}\n\t\t\t\t}).catch(function (error) {\n\t\t\t\t\tconsole.error(\"Ajax Load Error - Connection Error: \", error);\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Ajax Load Error - No URL Set\");\n\t\t\t\tresolve([]);\n\t\t\t}\n\t\t});\n\t};\n\n\tAjax.prototype.contentTypeFormatters = {\n\t\t\"json\": {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: function body(url, config, params) {\n\t\t\t\treturn JSON.stringify(params);\n\t\t\t}\n\t\t},\n\t\t\"form\": {\n\t\t\theaders: {},\n\t\t\tbody: function body(url, config, params) {\n\t\t\t\tvar output = this.generateParamsList(params),\n\t\t\t\t    form = new FormData();\n\n\t\t\t\toutput.forEach(function (item) {\n\t\t\t\t\tform.append(item.key, item.value);\n\t\t\t\t});\n\n\t\t\t\treturn form;\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"ajax\", Ajax);\n\n\tvar ColumnCalcs = function ColumnCalcs(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.topCalcs = [];\n\t\tthis.botCalcs = [];\n\t\tthis.genColumn = false;\n\t\tthis.topElement = this.createElement();\n\t\tthis.botElement = this.createElement();\n\t\tthis.topRow = false;\n\t\tthis.botRow = false;\n\t\tthis.topInitialized = false;\n\t\tthis.botInitialized = false;\n\n\t\tthis.initialize();\n\t};\n\n\tColumnCalcs.prototype.createElement = function () {\n\t\tvar el = document.createElement(\"div\");\n\t\tel.classList.add(\"tabulator-calcs-holder\");\n\t\treturn el;\n\t};\n\n\tColumnCalcs.prototype.initialize = function () {\n\t\tthis.genColumn = new Column({ field: \"value\" }, this);\n\t};\n\n\t//dummy functions to handle being mock column manager\n\tColumnCalcs.prototype.registerColumnField = function () {};\n\n\t//initialize column calcs\n\tColumnCalcs.prototype.initializeColumn = function (column) {\n\t\tvar def = column.definition;\n\n\t\tvar config = {\n\t\t\ttopCalcParams: def.topCalcParams || {},\n\t\t\tbotCalcParams: def.bottomCalcParams || {}\n\t\t};\n\n\t\tif (def.topCalc) {\n\n\t\t\tswitch (_typeof(def.topCalc)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tif (this.calculations[def.topCalc]) {\n\t\t\t\t\t\tconfig.topCalc = this.calculations[def.topCalc];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Column Calc Error - No such calculation found, ignoring: \", def.topCalc);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"function\":\n\t\t\t\t\tconfig.topCalc = def.topCalc;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif (config.topCalc) {\n\t\t\t\tcolumn.modules.columnCalcs = config;\n\t\t\t\tthis.topCalcs.push(column);\n\n\t\t\t\tif (this.table.options.columnCalcs != \"group\") {\n\t\t\t\t\tthis.initializeTopRow();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (def.bottomCalc) {\n\t\t\tswitch (_typeof(def.bottomCalc)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tif (this.calculations[def.bottomCalc]) {\n\t\t\t\t\t\tconfig.botCalc = this.calculations[def.bottomCalc];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Column Calc Error - No such calculation found, ignoring: \", def.bottomCalc);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"function\":\n\t\t\t\t\tconfig.botCalc = def.bottomCalc;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif (config.botCalc) {\n\t\t\t\tcolumn.modules.columnCalcs = config;\n\t\t\t\tthis.botCalcs.push(column);\n\n\t\t\t\tif (this.table.options.columnCalcs != \"group\") {\n\t\t\t\t\tthis.initializeBottomRow();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tColumnCalcs.prototype.removeCalcs = function () {\n\t\tvar changed = false;\n\n\t\tif (this.topInitialized) {\n\t\t\tthis.topInitialized = false;\n\t\t\tthis.topElement.parentNode.removeChild(this.topElement);\n\t\t\tchanged = true;\n\t\t}\n\n\t\tif (this.botInitialized) {\n\t\t\tthis.botInitialized = false;\n\t\t\tthis.table.footerManager.remove(this.botElement);\n\t\t\tchanged = true;\n\t\t}\n\n\t\tif (changed) {\n\t\t\tthis.table.rowManager.adjustTableSize();\n\t\t}\n\t};\n\n\tColumnCalcs.prototype.initializeTopRow = function () {\n\t\tif (!this.topInitialized) {\n\t\t\t// this.table.columnManager.headersElement.after(this.topElement);\n\t\t\tthis.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);\n\t\t\tthis.topInitialized = true;\n\t\t}\n\t};\n\n\tColumnCalcs.prototype.initializeBottomRow = function () {\n\t\tif (!this.botInitialized) {\n\t\t\tthis.table.footerManager.prepend(this.botElement);\n\t\t\tthis.botInitialized = true;\n\t\t}\n\t};\n\n\tColumnCalcs.prototype.scrollHorizontal = function (left) {\n\t\tvar hozAdjust = 0,\n\t\t    scrollWidth = this.table.columnManager.getElement().scrollWidth - this.table.element.clientWidth;\n\n\t\tif (this.botInitialized) {\n\t\t\tthis.botRow.getElement().style.marginLeft = -left + \"px\";\n\t\t}\n\t};\n\n\tColumnCalcs.prototype.recalc = function (rows) {\n\t\tvar data, row;\n\n\t\tif (this.topInitialized || this.botInitialized) {\n\t\t\tdata = this.rowsToData(rows);\n\n\t\t\tif (this.topInitialized) {\n\t\t\t\tif (this.topRow) {\n\t\t\t\t\tthis.topRow.deleteCells();\n\t\t\t\t}\n\n\t\t\t\trow = this.generateRow(\"top\", this.rowsToData(rows));\n\t\t\t\tthis.topRow = row;\n\t\t\t\twhile (this.topElement.firstChild) {\n\t\t\t\t\tthis.topElement.removeChild(this.topElement.firstChild);\n\t\t\t\t}this.topElement.appendChild(row.getElement());\n\t\t\t\trow.initialize(true);\n\t\t\t}\n\n\t\t\tif (this.botInitialized) {\n\t\t\t\tif (this.botRow) {\n\t\t\t\t\tthis.botRow.deleteCells();\n\t\t\t\t}\n\n\t\t\t\trow = this.generateRow(\"bottom\", this.rowsToData(rows));\n\t\t\t\tthis.botRow = row;\n\t\t\t\twhile (this.botElement.firstChild) {\n\t\t\t\t\tthis.botElement.removeChild(this.botElement.firstChild);\n\t\t\t\t}this.botElement.appendChild(row.getElement());\n\t\t\t\trow.initialize(true);\n\t\t\t}\n\n\t\t\tthis.table.rowManager.adjustTableSize();\n\n\t\t\t//set resizable handles\n\t\t\tif (this.table.modExists(\"frozenColumns\")) {\n\t\t\t\tthis.table.modules.frozenColumns.layout();\n\t\t\t}\n\t\t}\n\t};\n\n\tColumnCalcs.prototype.recalcRowGroup = function (row) {\n\t\tthis.recalcGroup(this.table.modules.groupRows.getRowGroup(row));\n\t};\n\n\tColumnCalcs.prototype.recalcAll = function () {\n\t\tvar _this37 = this;\n\n\t\tif (this.topCalcs.length || this.botCalcs.length) {\n\t\t\tif (this.table.options.columnCalcs !== \"group\") {\n\t\t\t\tthis.recalc(this.table.rowManager.activeRows);\n\t\t\t}\n\n\t\t\tif (this.table.options.groupBy && this.table.options.columnCalcs !== \"table\") {\n\n\t\t\t\tvar groups = table.modules.groupRows.getChildGroups();\n\n\t\t\t\tgroups.forEach(function (group) {\n\t\t\t\t\t_this37.recalcGroup(group);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tColumnCalcs.prototype.recalcGroup = function (group) {\n\t\tvar data, rowData;\n\n\t\tif (group) {\n\t\t\tif (group.calcs) {\n\t\t\t\tif (group.calcs.bottom) {\n\t\t\t\t\tdata = this.rowsToData(group.rows);\n\t\t\t\t\trowData = this.generateRowData(\"bottom\", data);\n\n\t\t\t\t\tgroup.calcs.bottom.updateData(rowData);\n\t\t\t\t\tgroup.calcs.bottom.reinitialize();\n\t\t\t\t}\n\n\t\t\t\tif (group.calcs.top) {\n\t\t\t\t\tdata = this.rowsToData(group.rows);\n\t\t\t\t\trowData = this.generateRowData(\"top\", data);\n\n\t\t\t\t\tgroup.calcs.top.updateData(rowData);\n\t\t\t\t\tgroup.calcs.top.reinitialize();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//generate top stats row\n\tColumnCalcs.prototype.generateTopRow = function (rows) {\n\t\treturn this.generateRow(\"top\", this.rowsToData(rows));\n\t};\n\t//generate bottom stats row\n\tColumnCalcs.prototype.generateBottomRow = function (rows) {\n\t\treturn this.generateRow(\"bottom\", this.rowsToData(rows));\n\t};\n\n\tColumnCalcs.prototype.rowsToData = function (rows) {\n\t\tvar _this38 = this;\n\n\t\tvar data = [];\n\n\t\trows.forEach(function (row) {\n\t\t\tdata.push(row.getData());\n\n\t\t\tif (_this38.table.options.dataTree && _this38.table.options.dataTreeChildColumnCalcs) {\n\t\t\t\tif (row.modules.dataTree.open) {\n\t\t\t\t\tvar children = _this38.rowsToData(_this38.table.modules.dataTree.getFilteredTreeChildren(row));\n\t\t\t\t\tdata = data.concat(children);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t};\n\n\t//generate stats row\n\tColumnCalcs.prototype.generateRow = function (pos, data) {\n\t\tvar self = this,\n\t\t    rowData = this.generateRowData(pos, data),\n\t\t    row;\n\n\t\tif (self.table.modExists(\"mutator\")) {\n\t\t\tself.table.modules.mutator.disable();\n\t\t}\n\n\t\trow = new Row(rowData, this, \"calc\");\n\n\t\tif (self.table.modExists(\"mutator\")) {\n\t\t\tself.table.modules.mutator.enable();\n\t\t}\n\n\t\trow.getElement().classList.add(\"tabulator-calcs\", \"tabulator-calcs-\" + pos);\n\n\t\trow.generateCells = function () {\n\n\t\t\tvar cells = [];\n\n\t\t\tself.table.columnManager.columnsByIndex.forEach(function (column) {\n\n\t\t\t\t//set field name of mock column\n\t\t\t\tself.genColumn.setField(column.getField());\n\t\t\t\tself.genColumn.hozAlign = column.hozAlign;\n\n\t\t\t\tif (column.definition[pos + \"CalcFormatter\"] && self.table.modExists(\"format\")) {\n\n\t\t\t\t\tself.genColumn.modules.format = {\n\t\t\t\t\t\tformatter: self.table.modules.format.getFormatter(column.definition[pos + \"CalcFormatter\"]),\n\t\t\t\t\t\tparams: column.definition[pos + \"CalcFormatterParams\"]\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tself.genColumn.modules.format = {\n\t\t\t\t\t\tformatter: self.table.modules.format.getFormatter(\"plaintext\"),\n\t\t\t\t\t\tparams: {}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t//ensure css class defintion is replicated to calculation cell\n\t\t\t\tself.genColumn.definition.cssClass = column.definition.cssClass;\n\n\t\t\t\t//generate cell and assign to correct column\n\t\t\t\tvar cell = new Cell(self.genColumn, row);\n\t\t\t\tcell.column = column;\n\t\t\t\tcell.setWidth();\n\n\t\t\t\tcolumn.cells.push(cell);\n\t\t\t\tcells.push(cell);\n\n\t\t\t\tif (!column.visible) {\n\t\t\t\t\tcell.hide();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.cells = cells;\n\t\t};\n\n\t\treturn row;\n\t};\n\n\t//generate stats row\n\tColumnCalcs.prototype.generateRowData = function (pos, data) {\n\t\tvar rowData = {},\n\t\t    calcs = pos == \"top\" ? this.topCalcs : this.botCalcs,\n\t\t    type = pos == \"top\" ? \"topCalc\" : \"botCalc\",\n\t\t    params,\n\t\t    paramKey;\n\n\t\tcalcs.forEach(function (column) {\n\t\t\tvar values = [];\n\n\t\t\tif (column.modules.columnCalcs && column.modules.columnCalcs[type]) {\n\t\t\t\tdata.forEach(function (item) {\n\t\t\t\t\tvalues.push(column.getFieldValue(item));\n\t\t\t\t});\n\n\t\t\t\tparamKey = type + \"Params\";\n\t\t\t\tparams = typeof column.modules.columnCalcs[paramKey] === \"function\" ? column.modules.columnCalcs[paramKey](values, data) : column.modules.columnCalcs[paramKey];\n\n\t\t\t\tcolumn.setFieldValue(rowData, column.modules.columnCalcs[type](values, data, params));\n\t\t\t}\n\t\t});\n\n\t\treturn rowData;\n\t};\n\n\tColumnCalcs.prototype.hasTopCalcs = function () {\n\t\treturn !!this.topCalcs.length;\n\t};\n\n\tColumnCalcs.prototype.hasBottomCalcs = function () {\n\t\treturn !!this.botCalcs.length;\n\t};\n\n\t//handle table redraw\n\tColumnCalcs.prototype.redraw = function () {\n\t\tif (this.topRow) {\n\t\t\tthis.topRow.normalizeHeight(true);\n\t\t}\n\t\tif (this.botRow) {\n\t\t\tthis.botRow.normalizeHeight(true);\n\t\t}\n\t};\n\n\t//return the calculated\n\tColumnCalcs.prototype.getResults = function () {\n\t\tvar self = this,\n\t\t    results = {},\n\t\t    groups;\n\n\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\t\t\tgroups = this.table.modules.groupRows.getGroups(true);\n\n\t\t\tgroups.forEach(function (group) {\n\t\t\t\tresults[group.getKey()] = self.getGroupResults(group);\n\t\t\t});\n\t\t} else {\n\t\t\tresults = {\n\t\t\t\ttop: this.topRow ? this.topRow.getData() : {},\n\t\t\t\tbottom: this.botRow ? this.botRow.getData() : {}\n\t\t\t};\n\t\t}\n\n\t\treturn results;\n\t};\n\n\t//get results from a group\n\tColumnCalcs.prototype.getGroupResults = function (group) {\n\t\tvar self = this,\n\t\t    groupObj = group._getSelf(),\n\t\t    subGroups = group.getSubGroups(),\n\t\t    subGroupResults = {},\n\t\t    results = {};\n\n\t\tsubGroups.forEach(function (subgroup) {\n\t\t\tsubGroupResults[subgroup.getKey()] = self.getGroupResults(subgroup);\n\t\t});\n\n\t\tresults = {\n\t\t\ttop: groupObj.calcs.top ? groupObj.calcs.top.getData() : {},\n\t\t\tbottom: groupObj.calcs.bottom ? groupObj.calcs.bottom.getData() : {},\n\t\t\tgroups: subGroupResults\n\t\t};\n\n\t\treturn results;\n\t};\n\n\t//default calculations\n\tColumnCalcs.prototype.calculations = {\n\t\t\"avg\": function avg(values, data, calcParams) {\n\t\t\tvar output = 0,\n\t\t\t    precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : 2;\n\n\t\t\tif (values.length) {\n\t\t\t\toutput = values.reduce(function (sum, value) {\n\t\t\t\t\tvalue = Number(value);\n\t\t\t\t\treturn sum + value;\n\t\t\t\t});\n\n\t\t\t\toutput = output / values.length;\n\n\t\t\t\toutput = precision !== false ? output.toFixed(precision) : output;\n\t\t\t}\n\n\t\t\treturn parseFloat(output).toString();\n\t\t},\n\t\t\"max\": function max(values, data, calcParams) {\n\t\t\tvar output = null,\n\t\t\t    precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n\n\t\t\tvalues.forEach(function (value) {\n\n\t\t\t\tvalue = Number(value);\n\n\t\t\t\tif (value > output || output === null) {\n\t\t\t\t\toutput = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn output !== null ? precision !== false ? output.toFixed(precision) : output : \"\";\n\t\t},\n\t\t\"min\": function min(values, data, calcParams) {\n\t\t\tvar output = null,\n\t\t\t    precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n\n\t\t\tvalues.forEach(function (value) {\n\n\t\t\t\tvalue = Number(value);\n\n\t\t\t\tif (value < output || output === null) {\n\t\t\t\t\toutput = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn output !== null ? precision !== false ? output.toFixed(precision) : output : \"\";\n\t\t},\n\t\t\"sum\": function sum(values, data, calcParams) {\n\t\t\tvar output = 0,\n\t\t\t    precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n\n\t\t\tif (values.length) {\n\t\t\t\tvalues.forEach(function (value) {\n\t\t\t\t\tvalue = Number(value);\n\n\t\t\t\t\toutput += !isNaN(value) ? Number(value) : 0;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn precision !== false ? output.toFixed(precision) : output;\n\t\t},\n\t\t\"concat\": function concat(values, data, calcParams) {\n\t\t\tvar output = 0;\n\n\t\t\tif (values.length) {\n\t\t\t\toutput = values.reduce(function (sum, value) {\n\t\t\t\t\treturn String(sum) + String(value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn output;\n\t\t},\n\t\t\"count\": function count(values, data, calcParams) {\n\t\t\tvar output = 0;\n\n\t\t\tif (values.length) {\n\t\t\t\tvalues.forEach(function (value) {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"columnCalcs\", ColumnCalcs);\n\n\tvar Clipboard = function Clipboard(table) {\n\t\tthis.table = table;\n\t\tthis.mode = true;\n\n\t\tthis.pasteParser = function () {};\n\t\tthis.pasteAction = function () {};\n\t\tthis.customSelection = false;\n\t\tthis.rowRange = false;\n\t\tthis.blocked = true; //block copy actions not originating from this command\n\t};\n\n\tClipboard.prototype.initialize = function () {\n\t\tvar _this39 = this;\n\n\t\tthis.mode = this.table.options.clipboard;\n\n\t\tthis.rowRange = this.table.options.clipboardCopyRowRange;\n\n\t\tif (this.mode === true || this.mode === \"copy\") {\n\t\t\tthis.table.element.addEventListener(\"copy\", function (e) {\n\t\t\t\tvar plain, html, list;\n\n\t\t\t\tif (!_this39.blocked) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tif (_this39.customSelection) {\n\t\t\t\t\t\tplain = _this39.customSelection;\n\n\t\t\t\t\t\tif (_this39.table.options.clipboardCopyFormatter) {\n\t\t\t\t\t\t\tplain = _this39.table.options.clipboardCopyFormatter(\"plain\", plain);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar list = _this39.table.modules.export.generateExportList(_this39.rowRange, _this39.table.options.clipboardCopyStyled, _this39.table.options.clipboardCopyConfig, \"clipboard\");\n\n\t\t\t\t\t\thtml = _this39.table.modules.export.genereateHTMLTable(list);\n\t\t\t\t\t\tplain = html ? _this39.generatePlainContent(list) : \"\";\n\n\t\t\t\t\t\tif (_this39.table.options.clipboardCopyFormatter) {\n\t\t\t\t\t\t\tplain = _this39.table.options.clipboardCopyFormatter(\"plain\", plain);\n\t\t\t\t\t\t\thtml = _this39.table.options.clipboardCopyFormatter(\"html\", html);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (window.clipboardData && window.clipboardData.setData) {\n\t\t\t\t\t\twindow.clipboardData.setData('Text', plain);\n\t\t\t\t\t} else if (e.clipboardData && e.clipboardData.setData) {\n\t\t\t\t\t\te.clipboardData.setData('text/plain', plain);\n\t\t\t\t\t\tif (html) {\n\t\t\t\t\t\t\te.clipboardData.setData('text/html', html);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (e.originalEvent && e.originalEvent.clipboardData.setData) {\n\t\t\t\t\t\te.originalEvent.clipboardData.setData('text/plain', plain);\n\t\t\t\t\t\tif (html) {\n\t\t\t\t\t\t\te.originalEvent.clipboardData.setData('text/html', html);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t_this39.table.options.clipboardCopied.call(_this39.table, plain, html);\n\n\t\t\t\t\t_this39.reset();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this.mode === true || this.mode === \"paste\") {\n\t\t\tthis.table.element.addEventListener(\"paste\", function (e) {\n\t\t\t\t_this39.paste(e);\n\t\t\t});\n\t\t}\n\n\t\tthis.setPasteParser(this.table.options.clipboardPasteParser);\n\t\tthis.setPasteAction(this.table.options.clipboardPasteAction);\n\t};\n\n\tClipboard.prototype.reset = function () {\n\t\tthis.blocked = false;\n\t\tthis.originalSelectionText = \"\";\n\t};\n\n\tClipboard.prototype.generatePlainContent = function (list) {\n\t\tvar output = [];\n\n\t\tlist.forEach(function (row) {\n\t\t\tvar rowData = [];\n\n\t\t\trow.columns.forEach(function (col) {\n\t\t\t\tvar value = \"\";\n\n\t\t\t\tif (col) {\n\n\t\t\t\t\tif (row.type === \"group\") {\n\t\t\t\t\t\tcol.value = col.component.getKey();\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (_typeof(col.value)) {\n\t\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\t\tvalue = JSON.stringify(col.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"undefined\":\n\t\t\t\t\t\tcase \"null\":\n\t\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tvalue = col.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trowData.push(value);\n\t\t\t});\n\n\t\t\toutput.push(rowData.join(\"\\t\"));\n\t\t});\n\n\t\treturn output.join(\"\\n\");\n\t};\n\n\tClipboard.prototype.copy = function (range, internal) {\n\t\tvar range, sel, textRange;\n\t\tthis.blocked = false;\n\t\tthis.customSelection = false;\n\n\t\tif (this.mode === true || this.mode === \"copy\") {\n\n\t\t\tthis.rowRange = range || this.table.options.clipboardCopyRowRange;\n\n\t\t\tif (typeof window.getSelection != \"undefined\" && typeof document.createRange != \"undefined\") {\n\t\t\t\trange = document.createRange();\n\t\t\t\trange.selectNodeContents(this.table.element);\n\t\t\t\tsel = window.getSelection();\n\n\t\t\t\tif (sel.toString() && internal) {\n\t\t\t\t\tthis.customSelection = sel.toString();\n\t\t\t\t}\n\n\t\t\t\tsel.removeAllRanges();\n\t\t\t\tsel.addRange(range);\n\t\t\t} else if (typeof document.selection != \"undefined\" && typeof document.body.createTextRange != \"undefined\") {\n\t\t\t\ttextRange = document.body.createTextRange();\n\t\t\t\ttextRange.moveToElementText(this.table.element);\n\t\t\t\ttextRange.select();\n\t\t\t}\n\n\t\t\tdocument.execCommand('copy');\n\n\t\t\tif (sel) {\n\t\t\t\tsel.removeAllRanges();\n\t\t\t}\n\t\t}\n\t};\n\n\t//PASTE EVENT HANDLING\n\n\tClipboard.prototype.setPasteAction = function (action) {\n\n\t\tswitch (typeof action === 'undefined' ? 'undefined' : _typeof(action)) {\n\t\t\tcase \"string\":\n\t\t\t\tthis.pasteAction = this.pasteActions[action];\n\n\t\t\t\tif (!this.pasteAction) {\n\t\t\t\t\tconsole.warn(\"Clipboard Error - No such paste action found:\", action);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tthis.pasteAction = action;\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tClipboard.prototype.setPasteParser = function (parser) {\n\t\tswitch (typeof parser === 'undefined' ? 'undefined' : _typeof(parser)) {\n\t\t\tcase \"string\":\n\t\t\t\tthis.pasteParser = this.pasteParsers[parser];\n\n\t\t\t\tif (!this.pasteParser) {\n\t\t\t\t\tconsole.warn(\"Clipboard Error - No such paste parser found:\", parser);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tthis.pasteParser = parser;\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tClipboard.prototype.paste = function (e) {\n\t\tvar data, rowData, rows;\n\n\t\tif (this.checkPaseOrigin(e)) {\n\n\t\t\tdata = this.getPasteData(e);\n\n\t\t\trowData = this.pasteParser.call(this, data);\n\n\t\t\tif (rowData) {\n\t\t\t\te.preventDefault();\n\n\t\t\t\tif (this.table.modExists(\"mutator\")) {\n\t\t\t\t\trowData = this.mutateData(rowData);\n\t\t\t\t}\n\n\t\t\t\trows = this.pasteAction.call(this, rowData);\n\t\t\t\tthis.table.options.clipboardPasted.call(this.table, data, rowData, rows);\n\t\t\t} else {\n\t\t\t\tthis.table.options.clipboardPasteError.call(this.table, data);\n\t\t\t}\n\t\t}\n\t};\n\n\tClipboard.prototype.mutateData = function (data) {\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\tif (Array.isArray(data)) {\n\t\t\tdata.forEach(function (row) {\n\t\t\t\toutput.push(self.table.modules.mutator.transformRow(row, \"clipboard\"));\n\t\t\t});\n\t\t} else {\n\t\t\toutput = data;\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tClipboard.prototype.checkPaseOrigin = function (e) {\n\t\tvar valid = true;\n\n\t\tif (e.target.tagName != \"DIV\" || this.table.modules.edit.currentCell) {\n\t\t\tvalid = false;\n\t\t}\n\n\t\treturn valid;\n\t};\n\n\tClipboard.prototype.getPasteData = function (e) {\n\t\tvar data;\n\n\t\tif (window.clipboardData && window.clipboardData.getData) {\n\t\t\tdata = window.clipboardData.getData('Text');\n\t\t} else if (e.clipboardData && e.clipboardData.getData) {\n\t\t\tdata = e.clipboardData.getData('text/plain');\n\t\t} else if (e.originalEvent && e.originalEvent.clipboardData.getData) {\n\t\t\tdata = e.originalEvent.clipboardData.getData('text/plain');\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tClipboard.prototype.pasteParsers = {\n\t\ttable: function table(clipboard) {\n\t\t\tvar data = [],\n\t\t\t    success = false,\n\t\t\t    headerFindSuccess = true,\n\t\t\t    columns = this.table.columnManager.columns,\n\t\t\t    columnMap = [],\n\t\t\t    rows = [];\n\n\t\t\t//get data from clipboard into array of columns and rows.\n\t\t\tclipboard = clipboard.split(\"\\n\");\n\n\t\t\tclipboard.forEach(function (row) {\n\t\t\t\tdata.push(row.split(\"\\t\"));\n\t\t\t});\n\n\t\t\tif (data.length && !(data.length === 1 && data[0].length < 2)) {\n\t\t\t\tsuccess = true;\n\n\t\t\t\t//check if headers are present by title\n\t\t\t\tdata[0].forEach(function (value) {\n\t\t\t\t\tvar column = columns.find(function (column) {\n\t\t\t\t\t\treturn value && column.definition.title && value.trim() && column.definition.title.trim() === value.trim();\n\t\t\t\t\t});\n\n\t\t\t\t\tif (column) {\n\t\t\t\t\t\tcolumnMap.push(column);\n\t\t\t\t\t} else {\n\t\t\t\t\t\theaderFindSuccess = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//check if column headers are present by field\n\t\t\t\tif (!headerFindSuccess) {\n\t\t\t\t\theaderFindSuccess = true;\n\t\t\t\t\tcolumnMap = [];\n\n\t\t\t\t\tdata[0].forEach(function (value) {\n\t\t\t\t\t\tvar column = columns.find(function (column) {\n\t\t\t\t\t\t\treturn value && column.field && value.trim() && column.field.trim() === value.trim();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (column) {\n\t\t\t\t\t\t\tcolumnMap.push(column);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\theaderFindSuccess = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!headerFindSuccess) {\n\t\t\t\t\t\tcolumnMap = this.table.columnManager.columnsByIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//remove header row if found\n\t\t\t\tif (headerFindSuccess) {\n\t\t\t\t\tdata.shift();\n\t\t\t\t}\n\n\t\t\t\tdata.forEach(function (item) {\n\t\t\t\t\tvar row = {};\n\n\t\t\t\t\titem.forEach(function (value, i) {\n\t\t\t\t\t\tif (columnMap[i]) {\n\t\t\t\t\t\t\trow[columnMap[i].field] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\trows.push(row);\n\t\t\t\t});\n\n\t\t\t\treturn rows;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\n\tClipboard.prototype.pasteActions = {\n\t\treplace: function replace(rows) {\n\t\t\treturn this.table.setData(rows);\n\t\t},\n\t\tupdate: function update(rows) {\n\t\t\treturn this.table.updateOrAddData(rows);\n\t\t},\n\t\tinsert: function insert(rows) {\n\t\t\treturn this.table.addData(rows);\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"clipboard\", Clipboard);\n\n\tvar DataTree = function DataTree(table) {\n\t\tthis.table = table;\n\t\tthis.indent = 10;\n\t\tthis.field = \"\";\n\t\tthis.collapseEl = null;\n\t\tthis.expandEl = null;\n\t\tthis.branchEl = null;\n\t\tthis.elementField = false;\n\n\t\tthis.startOpen = function () {};\n\n\t\tthis.displayIndex = 0;\n\t};\n\n\tDataTree.prototype.initialize = function () {\n\t\tvar dummyEl = null,\n\t\t    firstCol = this.table.columnManager.getFirstVisibileColumn(),\n\t\t    options = this.table.options;\n\n\t\tthis.field = options.dataTreeChildField;\n\t\tthis.indent = options.dataTreeChildIndent;\n\t\tthis.elementField = options.dataTreeElementColumn || (firstCol ? firstCol.field : false);\n\n\t\tif (options.dataTreeBranchElement) {\n\n\t\t\tif (options.dataTreeBranchElement === true) {\n\t\t\t\tthis.branchEl = document.createElement(\"div\");\n\t\t\t\tthis.branchEl.classList.add(\"tabulator-data-tree-branch\");\n\t\t\t} else {\n\t\t\t\tif (typeof options.dataTreeBranchElement === \"string\") {\n\t\t\t\t\tdummyEl = document.createElement(\"div\");\n\t\t\t\t\tdummyEl.innerHTML = options.dataTreeBranchElement;\n\t\t\t\t\tthis.branchEl = dummyEl.firstChild;\n\t\t\t\t} else {\n\t\t\t\t\tthis.branchEl = options.dataTreeBranchElement;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (options.dataTreeCollapseElement) {\n\t\t\tif (typeof options.dataTreeCollapseElement === \"string\") {\n\t\t\t\tdummyEl = document.createElement(\"div\");\n\t\t\t\tdummyEl.innerHTML = options.dataTreeCollapseElement;\n\t\t\t\tthis.collapseEl = dummyEl.firstChild;\n\t\t\t} else {\n\t\t\t\tthis.collapseEl = options.dataTreeCollapseElement;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.collapseEl = document.createElement(\"div\");\n\t\t\tthis.collapseEl.classList.add(\"tabulator-data-tree-control\");\n\t\t\tthis.collapseEl.tabIndex = 0;\n\t\t\tthis.collapseEl.innerHTML = \"<div class='tabulator-data-tree-control-collapse'></div>\";\n\t\t}\n\n\t\tif (options.dataTreeExpandElement) {\n\t\t\tif (typeof options.dataTreeExpandElement === \"string\") {\n\t\t\t\tdummyEl = document.createElement(\"div\");\n\t\t\t\tdummyEl.innerHTML = options.dataTreeExpandElement;\n\t\t\t\tthis.expandEl = dummyEl.firstChild;\n\t\t\t} else {\n\t\t\t\tthis.expandEl = options.dataTreeExpandElement;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.expandEl = document.createElement(\"div\");\n\t\t\tthis.expandEl.classList.add(\"tabulator-data-tree-control\");\n\t\t\tthis.expandEl.tabIndex = 0;\n\t\t\tthis.expandEl.innerHTML = \"<div class='tabulator-data-tree-control-expand'></div>\";\n\t\t}\n\n\t\tswitch (_typeof(options.dataTreeStartExpanded)) {\n\t\t\tcase \"boolean\":\n\t\t\t\tthis.startOpen = function (row, index) {\n\t\t\t\t\treturn options.dataTreeStartExpanded;\n\t\t\t\t};\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tthis.startOpen = options.dataTreeStartExpanded;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis.startOpen = function (row, index) {\n\t\t\t\t\treturn options.dataTreeStartExpanded[index];\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tDataTree.prototype.initializeRow = function (row) {\n\t\tvar childArray = row.getData()[this.field];\n\t\tvar isArray = Array.isArray(childArray);\n\n\t\tvar children = isArray || !isArray && (typeof childArray === 'undefined' ? 'undefined' : _typeof(childArray)) === \"object\" && childArray !== null;\n\n\t\tif (!children && row.modules.dataTree && row.modules.dataTree.branchEl) {\n\t\t\trow.modules.dataTree.branchEl.parentNode.removeChild(row.modules.dataTree.branchEl);\n\t\t}\n\n\t\tif (!children && row.modules.dataTree && row.modules.dataTree.controlEl) {\n\t\t\trow.modules.dataTree.controlEl.parentNode.removeChild(row.modules.dataTree.controlEl);\n\t\t}\n\n\t\trow.modules.dataTree = {\n\t\t\tindex: row.modules.dataTree ? row.modules.dataTree.index : 0,\n\t\t\topen: children ? row.modules.dataTree ? row.modules.dataTree.open : this.startOpen(row.getComponent(), 0) : false,\n\t\t\tcontrolEl: row.modules.dataTree && children ? row.modules.dataTree.controlEl : false,\n\t\t\tbranchEl: row.modules.dataTree && children ? row.modules.dataTree.branchEl : false,\n\t\t\tparent: row.modules.dataTree ? row.modules.dataTree.parent : false,\n\t\t\tchildren: children\n\t\t};\n\t};\n\n\tDataTree.prototype.layoutRow = function (row) {\n\t\tvar cell = this.elementField ? row.getCell(this.elementField) : row.getCells()[0],\n\t\t    el = cell.getElement(),\n\t\t    config = row.modules.dataTree;\n\n\t\tif (config.branchEl) {\n\t\t\tif (config.branchEl.parentNode) {\n\t\t\t\tconfig.branchEl.parentNode.removeChild(config.branchEl);\n\t\t\t}\n\t\t\tconfig.branchEl = false;\n\t\t}\n\n\t\tif (config.controlEl) {\n\t\t\tif (config.controlEl.parentNode) {\n\t\t\t\tconfig.controlEl.parentNode.removeChild(config.controlEl);\n\t\t\t}\n\t\t\tconfig.controlEl = false;\n\t\t}\n\n\t\tthis.generateControlElement(row, el);\n\n\t\trow.element.classList.add(\"tabulator-tree-level-\" + config.index);\n\n\t\tif (config.index) {\n\t\t\tif (this.branchEl) {\n\t\t\t\tconfig.branchEl = this.branchEl.cloneNode(true);\n\t\t\t\tel.insertBefore(config.branchEl, el.firstChild);\n\t\t\t\tconfig.branchEl.style.marginLeft = (config.branchEl.offsetWidth + config.branchEl.style.marginRight) * (config.index - 1) + config.index * this.indent + \"px\";\n\t\t\t} else {\n\t\t\t\tel.style.paddingLeft = parseInt(window.getComputedStyle(el, null).getPropertyValue('padding-left')) + config.index * this.indent + \"px\";\n\t\t\t}\n\t\t}\n\t};\n\n\tDataTree.prototype.generateControlElement = function (row, el) {\n\t\tvar _this40 = this;\n\n\t\tvar config = row.modules.dataTree,\n\t\t    el = el || row.getCells()[0].getElement(),\n\t\t    oldControl = config.controlEl;\n\n\t\tif (config.children !== false) {\n\n\t\t\tif (config.open) {\n\t\t\t\tconfig.controlEl = this.collapseEl.cloneNode(true);\n\t\t\t\tconfig.controlEl.addEventListener(\"click\", function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t_this40.collapseRow(row);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconfig.controlEl = this.expandEl.cloneNode(true);\n\t\t\t\tconfig.controlEl.addEventListener(\"click\", function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t_this40.expandRow(row);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconfig.controlEl.addEventListener(\"mousedown\", function (e) {\n\t\t\t\te.stopPropagation();\n\t\t\t});\n\n\t\t\tif (oldControl && oldControl.parentNode === el) {\n\t\t\t\toldControl.parentNode.replaceChild(config.controlEl, oldControl);\n\t\t\t} else {\n\t\t\t\tel.insertBefore(config.controlEl, el.firstChild);\n\t\t\t}\n\t\t}\n\t};\n\n\tDataTree.prototype.setDisplayIndex = function (index) {\n\t\tthis.displayIndex = index;\n\t};\n\n\tDataTree.prototype.getDisplayIndex = function () {\n\t\treturn this.displayIndex;\n\t};\n\n\tDataTree.prototype.getRows = function (rows) {\n\t\tvar _this41 = this;\n\n\t\tvar output = [];\n\n\t\trows.forEach(function (row, i) {\n\t\t\tvar config, children;\n\n\t\t\toutput.push(row);\n\n\t\t\tif (row instanceof Row) {\n\n\t\t\t\tconfig = row.modules.dataTree.children;\n\n\t\t\t\tif (!config.index && config.children !== false) {\n\t\t\t\t\tchildren = _this41.getChildren(row);\n\n\t\t\t\t\tchildren.forEach(function (child) {\n\t\t\t\t\t\toutput.push(child);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tDataTree.prototype.getChildren = function (row) {\n\t\tvar _this42 = this;\n\n\t\tvar config = row.modules.dataTree,\n\t\t    children = [],\n\t\t    output = [];\n\n\t\tif (config.children !== false && config.open) {\n\t\t\tif (!Array.isArray(config.children)) {\n\t\t\t\tconfig.children = this.generateChildren(row);\n\t\t\t}\n\n\t\t\tif (this.table.modExists(\"filter\")) {\n\t\t\t\tchildren = this.table.modules.filter.filter(config.children);\n\t\t\t} else {\n\t\t\t\tchildren = config.children;\n\t\t\t}\n\n\t\t\tif (this.table.modExists(\"sort\")) {\n\t\t\t\tthis.table.modules.sort.sort(children);\n\t\t\t}\n\n\t\t\tchildren.forEach(function (child) {\n\t\t\t\toutput.push(child);\n\n\t\t\t\tvar subChildren = _this42.getChildren(child);\n\n\t\t\t\tsubChildren.forEach(function (sub) {\n\t\t\t\t\toutput.push(sub);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tDataTree.prototype.generateChildren = function (row) {\n\t\tvar _this43 = this;\n\n\t\tvar children = [];\n\n\t\tvar childArray = row.getData()[this.field];\n\n\t\tif (!Array.isArray(childArray)) {\n\t\t\tchildArray = [childArray];\n\t\t}\n\n\t\tchildArray.forEach(function (childData) {\n\t\t\tvar childRow = new Row(childData || {}, _this43.table.rowManager);\n\t\t\tchildRow.modules.dataTree.index = row.modules.dataTree.index + 1;\n\t\t\tchildRow.modules.dataTree.parent = row;\n\t\t\tif (childRow.modules.dataTree.children) {\n\t\t\t\tchildRow.modules.dataTree.open = _this43.startOpen(childRow.getComponent(), childRow.modules.dataTree.index);\n\t\t\t}\n\t\t\tchildren.push(childRow);\n\t\t});\n\n\t\treturn children;\n\t};\n\n\tDataTree.prototype.expandRow = function (row, silent) {\n\t\tvar config = row.modules.dataTree;\n\n\t\tif (config.children !== false) {\n\t\t\tconfig.open = true;\n\n\t\t\trow.reinitialize();\n\n\t\t\tthis.table.rowManager.refreshActiveData(\"tree\", false, true);\n\n\t\t\tthis.table.options.dataTreeRowExpanded(row.getComponent(), row.modules.dataTree.index);\n\t\t}\n\t};\n\n\tDataTree.prototype.collapseRow = function (row) {\n\t\tvar config = row.modules.dataTree;\n\n\t\tif (config.children !== false) {\n\t\t\tconfig.open = false;\n\n\t\t\trow.reinitialize();\n\n\t\t\tthis.table.rowManager.refreshActiveData(\"tree\", false, true);\n\n\t\t\tthis.table.options.dataTreeRowCollapsed(row.getComponent(), row.modules.dataTree.index);\n\t\t}\n\t};\n\n\tDataTree.prototype.toggleRow = function (row) {\n\t\tvar config = row.modules.dataTree;\n\n\t\tif (config.children !== false) {\n\t\t\tif (config.open) {\n\t\t\t\tthis.collapseRow(row);\n\t\t\t} else {\n\t\t\t\tthis.expandRow(row);\n\t\t\t}\n\t\t}\n\t};\n\n\tDataTree.prototype.getTreeParent = function (row) {\n\t\treturn row.modules.dataTree.parent ? row.modules.dataTree.parent.getComponent() : false;\n\t};\n\n\tDataTree.prototype.getFilteredTreeChildren = function (row) {\n\t\tvar config = row.modules.dataTree,\n\t\t    output = [],\n\t\t    children;\n\n\t\tif (config.children) {\n\n\t\t\tif (!Array.isArray(config.children)) {\n\t\t\t\tconfig.children = this.generateChildren(row);\n\t\t\t}\n\n\t\t\tif (this.table.modExists(\"filter\")) {\n\t\t\t\tchildren = this.table.modules.filter.filter(config.children);\n\t\t\t} else {\n\t\t\t\tchildren = config.children;\n\t\t\t}\n\n\t\t\tchildren.forEach(function (childRow) {\n\t\t\t\tif (childRow instanceof Row) {\n\t\t\t\t\toutput.push(childRow);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tDataTree.prototype.rowDelete = function (row) {\n\t\tvar parent = row.modules.dataTree.parent,\n\t\t    childIndex;\n\n\t\tif (parent) {\n\t\t\tchildIndex = this.findChildIndex(row, parent);\n\n\t\t\tif (childIndex !== false) {\n\t\t\t\tparent.data[this.field].splice(childIndex, 1);\n\t\t\t}\n\n\t\t\tif (!parent.data[this.field].length) {\n\t\t\t\tdelete parent.data[this.field];\n\t\t\t}\n\n\t\t\tthis.initializeRow(parent);\n\t\t\tthis.layoutRow(parent);\n\t\t}\n\n\t\tthis.table.rowManager.refreshActiveData(\"tree\", false, true);\n\t};\n\n\tDataTree.prototype.addTreeChildRow = function (row, data, top, index) {\n\t\tvar childIndex = false;\n\n\t\tif (typeof data === \"string\") {\n\t\t\tdata = JSON.parse(data);\n\t\t}\n\n\t\tif (!Array.isArray(row.data[this.field])) {\n\t\t\trow.data[this.field] = [];\n\n\t\t\trow.modules.dataTree.open = this.startOpen(row.getComponent(), row.modules.dataTree.index);\n\t\t}\n\n\t\tif (typeof index !== \"undefined\") {\n\t\t\tchildIndex = this.findChildIndex(index, row);\n\n\t\t\tif (childIndex !== false) {\n\t\t\t\trow.data[this.field].splice(top ? childIndex : childIndex + 1, 0, data);\n\t\t\t}\n\t\t}\n\n\t\tif (childIndex === false) {\n\t\t\tif (top) {\n\t\t\t\trow.data[this.field].unshift(data);\n\t\t\t} else {\n\t\t\t\trow.data[this.field].push(data);\n\t\t\t}\n\t\t}\n\n\t\tthis.initializeRow(row);\n\t\tthis.layoutRow(row);\n\n\t\tthis.table.rowManager.refreshActiveData(\"tree\", false, true);\n\t};\n\n\tDataTree.prototype.findChildIndex = function (subject, parent) {\n\t\tvar _this44 = this;\n\n\t\tvar match = false;\n\n\t\tif ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n\n\t\t\tif (subject instanceof Row) {\n\t\t\t\t//subject is row element\n\t\t\t\tmatch = subject.data;\n\t\t\t} else if (subject instanceof RowComponent) {\n\t\t\t\t//subject is public row component\n\t\t\t\tmatch = subject._getSelf().data;\n\t\t\t} else if (typeof HTMLElement !== \"undefined\" && subject instanceof HTMLElement) {\n\t\t\t\tif (parent.modules.dataTree) {\n\t\t\t\t\tmatch = parent.modules.dataTree.children.find(function (childRow) {\n\t\t\t\t\t\treturn childRow instanceof Row ? childRow.element === subject : false;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tmatch = match.data;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (typeof subject == \"undefined\" || subject === null) {\n\t\t\tmatch = false;\n\t\t} else {\n\t\t\t//subject should be treated as the index of the row\n\t\t\tmatch = parent.data[this.field].find(function (row) {\n\t\t\t\treturn row.data[_this44.table.options.index] == subject;\n\t\t\t});\n\t\t}\n\n\t\tif (match) {\n\n\t\t\tif (Array.isArray(parent.data[this.field])) {\n\t\t\t\tmatch = parent.data[this.field].indexOf(match);\n\t\t\t}\n\n\t\t\tif (match == -1) {\n\t\t\t\tmatch = false;\n\t\t\t}\n\t\t}\n\n\t\t//catch all for any other type of input\n\n\t\treturn match;\n\t};\n\n\tDataTree.prototype.getTreeChildren = function (row) {\n\t\tvar config = row.modules.dataTree,\n\t\t    output = [];\n\n\t\tif (config.children) {\n\n\t\t\tif (!Array.isArray(config.children)) {\n\t\t\t\tconfig.children = this.generateChildren(row);\n\t\t\t}\n\n\t\t\tconfig.children.forEach(function (childRow) {\n\t\t\t\tif (childRow instanceof Row) {\n\t\t\t\t\toutput.push(childRow.getComponent());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tDataTree.prototype.checkForRestyle = function (cell) {\n\t\tif (!cell.row.cells.indexOf(cell)) {\n\t\t\tcell.row.reinitialize();\n\t\t}\n\t};\n\n\tDataTree.prototype.getChildField = function () {\n\t\treturn this.field;\n\t};\n\n\tDataTree.prototype.redrawNeeded = function (data) {\n\t\treturn (this.field ? typeof data[this.field] !== \"undefined\" : false) || (this.elementField ? typeof data[this.elementField] !== \"undefined\" : false);\n\t};\n\n\tTabulator.prototype.registerModule(\"dataTree\", DataTree);\n\n\tvar Download = function Download(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t};\n\n\t//trigger file download\n\tDownload.prototype.download = function (type, filename, options, range, interceptCallback) {\n\t\tvar self = this,\n\t\t    downloadFunc = false;\n\n\t\tfunction buildLink(data, mime) {\n\t\t\tif (interceptCallback) {\n\t\t\t\tif (interceptCallback === true) {\n\t\t\t\t\tself.triggerDownload(data, mime, type, filename, true);\n\t\t\t\t} else {\n\t\t\t\t\tinterceptCallback(data);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself.triggerDownload(data, mime, type, filename);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof type == \"function\") {\n\t\t\tdownloadFunc = type;\n\t\t} else {\n\t\t\tif (self.downloaders[type]) {\n\t\t\t\tdownloadFunc = self.downloaders[type];\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Download Error - No such download type found: \", type);\n\t\t\t}\n\t\t}\n\n\t\tif (downloadFunc) {\n\t\t\tvar list = this.generateExportList(range);\n\n\t\t\tdownloadFunc.call(this.table, list, options || {}, buildLink);\n\t\t}\n\t};\n\n\tDownload.prototype.generateExportList = function (range) {\n\t\tvar list = this.table.modules.export.generateExportList(this.table.options.downloadConfig, false, range || this.table.options.downloadRowRange, \"download\");\n\n\t\t//assign group header formatter\n\t\tvar groupHeader = this.table.options.groupHeaderDownload;\n\n\t\tif (groupHeader && !Array.isArray(groupHeader)) {\n\t\t\tgroupHeader = [groupHeader];\n\t\t}\n\n\t\tlist.forEach(function (row) {\n\t\t\tvar group;\n\n\t\t\tif (row.type === \"group\") {\n\t\t\t\tgroup = row.columns[0];\n\n\t\t\t\tif (groupHeader && groupHeader[row.indent]) {\n\t\t\t\t\tgroup.value = groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn list;\n\t};\n\n\tDownload.prototype.triggerDownload = function (data, mime, type, filename, newTab) {\n\t\tvar element = document.createElement('a'),\n\t\t    blob = new Blob([data], { type: mime }),\n\t\t    filename = filename || \"Tabulator.\" + (typeof type === \"function\" ? \"txt\" : type);\n\n\t\tblob = this.table.options.downloadReady.call(this.table, data, blob);\n\n\t\tif (blob) {\n\n\t\t\tif (newTab) {\n\t\t\t\twindow.open(window.URL.createObjectURL(blob));\n\t\t\t} else {\n\t\t\t\tif (navigator.msSaveOrOpenBlob) {\n\t\t\t\t\tnavigator.msSaveOrOpenBlob(blob, filename);\n\t\t\t\t} else {\n\t\t\t\t\telement.setAttribute('href', window.URL.createObjectURL(blob));\n\n\t\t\t\t\t//set file title\n\t\t\t\t\telement.setAttribute('download', filename);\n\n\t\t\t\t\t//trigger download\n\t\t\t\t\telement.style.display = 'none';\n\t\t\t\t\tdocument.body.appendChild(element);\n\t\t\t\t\telement.click();\n\n\t\t\t\t\t//remove temporary link element\n\t\t\t\t\tdocument.body.removeChild(element);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.table.options.downloadComplete) {\n\t\t\t\tthis.table.options.downloadComplete();\n\t\t\t}\n\t\t}\n\t};\n\n\tDownload.prototype.commsReceived = function (table, action, data) {\n\t\tswitch (action) {\n\t\t\tcase \"intercept\":\n\t\t\t\tthis.download(data.type, \"\", data.options, data.active, data.intercept);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t//downloaders\n\tDownload.prototype.downloaders = {\n\t\tcsv: function csv(list, options, setFileContents) {\n\t\t\tvar delimiter = options && options.delimiter ? options.delimiter : \",\",\n\t\t\t    fileContents = [],\n\t\t\t    headers = [];\n\n\t\t\tlist.forEach(function (row) {\n\t\t\t\tvar item = [];\n\n\t\t\t\tswitch (row.type) {\n\t\t\t\t\tcase \"group\":\n\t\t\t\t\t\tconsole.warn(\"Download Warning - CSV downloader cannot process row groups\");\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"calc\":\n\t\t\t\t\t\tconsole.warn(\"Download Warning - CSV downloader cannot process column calculations\");\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"header\":\n\t\t\t\t\t\trow.columns.forEach(function (col, i) {\n\t\t\t\t\t\t\tif (col && col.depth === 1) {\n\t\t\t\t\t\t\t\theaders[i] = typeof col.value == \"undefined\" || typeof col.value == \"null\" ? \"\" : col.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"row\":\n\t\t\t\t\t\trow.columns.forEach(function (col) {\n\n\t\t\t\t\t\t\tif (col) {\n\n\t\t\t\t\t\t\t\tswitch (_typeof(col.value)) {\n\t\t\t\t\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\t\t\t\t\tcol.value = JSON.stringify(col.value);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"undefined\":\n\t\t\t\t\t\t\t\t\tcase \"null\":\n\t\t\t\t\t\t\t\t\t\tcol.value = \"\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\titem.push('\"' + String(col.value).split('\"').join('\"\"') + '\"');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfileContents.push(item.join(delimiter));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (headers.length) {\n\t\t\t\tfileContents = [headers].concat(fileContents);\n\t\t\t}\n\n\t\t\tfileContents = fileContents.join(\"\\n\");\n\n\t\t\tif (options.bom) {\n\t\t\t\tfileContents = '\\uFEFF' + fileContents;\n\t\t\t}\n\n\t\t\tsetFileContents(fileContents, \"text/csv\");\n\t\t},\n\n\t\tjson: function json(list, options, setFileContents) {\n\t\t\tvar fileContents = [];\n\n\t\t\tlist.forEach(function (row) {\n\t\t\t\tvar item = {};\n\n\t\t\t\tswitch (row.type) {\n\t\t\t\t\tcase \"header\":\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"group\":\n\t\t\t\t\t\tconsole.warn(\"Download Warning - JSON downloader cannot process row groups\");\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"calc\":\n\t\t\t\t\t\tconsole.warn(\"Download Warning - JSON downloader cannot process column calculations\");\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"row\":\n\t\t\t\t\t\trow.columns.forEach(function (col) {\n\t\t\t\t\t\t\tif (col) {\n\t\t\t\t\t\t\t\titem[col.component.getField()] = col.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfileContents.push(item);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfileContents = JSON.stringify(fileContents, null, '\\t');\n\n\t\t\tsetFileContents(fileContents, \"application/json\");\n\t\t},\n\n\t\tpdf: function pdf(list, options, setFileContents) {\n\t\t\tvar header = [],\n\t\t\t    body = [],\n\t\t\t    autoTableParams = {},\n\t\t\t    rowGroupStyles = options.rowGroupStyles || {\n\t\t\t\tfontStyle: \"bold\",\n\t\t\t\tfontSize: 12,\n\t\t\t\tcellPadding: 6,\n\t\t\t\tfillColor: 220\n\t\t\t},\n\t\t\t    rowCalcStyles = options.rowCalcStyles || {\n\t\t\t\tfontStyle: \"bold\",\n\t\t\t\tfontSize: 10,\n\t\t\t\tcellPadding: 4,\n\t\t\t\tfillColor: 232\n\t\t\t},\n\t\t\t    jsPDFParams = options.jsPDF || {},\n\t\t\t    title = options && options.title ? options.title : \"\";\n\n\t\t\tif (!jsPDFParams.orientation) {\n\t\t\t\tjsPDFParams.orientation = options.orientation || \"landscape\";\n\t\t\t}\n\n\t\t\tif (!jsPDFParams.unit) {\n\t\t\t\tjsPDFParams.unit = \"pt\";\n\t\t\t}\n\n\t\t\t//parse row list\n\t\t\tlist.forEach(function (row) {\n\t\t\t\tvar item = {};\n\n\t\t\t\tswitch (row.type) {\n\t\t\t\t\tcase \"header\":\n\t\t\t\t\t\theader.push(parseRow(row));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"group\":\n\t\t\t\t\t\tbody.push(parseRow(row, rowGroupStyles));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"calc\":\n\t\t\t\t\t\tbody.push(parseRow(row, rowCalcStyles));\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"row\":\n\t\t\t\t\t\tbody.push(parseRow(row));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction parseRow(row, styles) {\n\t\t\t\tvar rowData = [];\n\n\t\t\t\trow.columns.forEach(function (col) {\n\t\t\t\t\tvar cell;\n\n\t\t\t\t\tif (col) {\n\t\t\t\t\t\tswitch (_typeof(col.value)) {\n\t\t\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\t\t\tcol.value = JSON.stringify(col.value);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"undefined\":\n\t\t\t\t\t\t\tcase \"null\":\n\t\t\t\t\t\t\t\tcol.value = \"\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcell = {\n\t\t\t\t\t\t\tcontent: col.value,\n\t\t\t\t\t\t\tcolSpan: col.width,\n\t\t\t\t\t\t\trowSpan: col.height\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (styles) {\n\t\t\t\t\t\t\tcell.styles = styles;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trowData.push(cell);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trowData.push(\"\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn rowData;\n\t\t\t}\n\n\t\t\t//configure PDF\n\t\t\tvar doc = new jsPDF(jsPDFParams); //set document to landscape, better for most tables\n\n\t\t\tif (options && options.autoTable) {\n\t\t\t\tif (typeof options.autoTable === \"function\") {\n\t\t\t\t\tautoTableParams = options.autoTable(doc) || {};\n\t\t\t\t} else {\n\t\t\t\t\tautoTableParams = options.autoTable;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (title) {\n\t\t\t\tautoTableParams.addPageContent = function (data) {\n\t\t\t\t\tdoc.text(title, 40, 30);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tautoTableParams.head = header;\n\t\t\tautoTableParams.body = body;\n\n\t\t\tdoc.autoTable(autoTableParams);\n\n\t\t\tif (options && options.documentProcessing) {\n\t\t\t\toptions.documentProcessing(doc);\n\t\t\t}\n\n\t\t\tsetFileContents(doc.output(\"arraybuffer\"), \"application/pdf\");\n\t\t},\n\n\t\txlsx: function xlsx(list, options, setFileContents) {\n\t\t\tvar self = this,\n\t\t\t    sheetName = options.sheetName || \"Sheet1\",\n\t\t\t    workbook = XLSX.utils.book_new(),\n\t\t\t    output;\n\n\t\t\tworkbook.SheetNames = [];\n\t\t\tworkbook.Sheets = {};\n\n\t\t\tfunction generateSheet() {\n\t\t\t\tvar rows = [],\n\t\t\t\t    merges = [],\n\t\t\t\t    worksheet = {},\n\t\t\t\t    range = { s: { c: 0, r: 0 }, e: { c: list[0] ? list[0].columns.reduce(function (a, b) {\n\t\t\t\t\t\t\treturn a + (b && b.width ? b.width : 1);\n\t\t\t\t\t\t}, 0) : 0, r: list.length } };\n\n\t\t\t\t//parse row list\n\t\t\t\tlist.forEach(function (row, i) {\n\t\t\t\t\tvar rowData = [];\n\n\t\t\t\t\trow.columns.forEach(function (col, j) {\n\n\t\t\t\t\t\tif (col) {\n\t\t\t\t\t\t\trowData.push(!(col.value instanceof Date) && _typeof(col.value) === \"object\" ? JSON.stringify(col.value) : col.value);\n\n\t\t\t\t\t\t\tif (col.width > 1 || col.height > -1) {\n\t\t\t\t\t\t\t\tmerges.push({ s: { r: i, c: j }, e: { r: i + col.height - 1, c: j + col.width - 1 } });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trowData.push(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\trows.push(rowData);\n\t\t\t\t});\n\n\t\t\t\t//convert rows to worksheet\n\t\t\t\tXLSX.utils.sheet_add_aoa(worksheet, rows);\n\n\t\t\t\tworksheet['!ref'] = XLSX.utils.encode_range(range);\n\n\t\t\t\tif (merges.length) {\n\t\t\t\t\tworksheet[\"!merges\"] = merges;\n\t\t\t\t}\n\n\t\t\t\treturn worksheet;\n\t\t\t}\n\n\t\t\tif (options.sheetOnly) {\n\t\t\t\tsetFileContents(generateSheet());\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (options.sheets) {\n\t\t\t\tfor (var sheet in options.sheets) {\n\n\t\t\t\t\tif (options.sheets[sheet] === true) {\n\t\t\t\t\t\tworkbook.SheetNames.push(sheet);\n\t\t\t\t\t\tworkbook.Sheets[sheet] = generateSheet();\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tworkbook.SheetNames.push(sheet);\n\n\t\t\t\t\t\tthis.table.modules.comms.send(options.sheets[sheet], \"download\", \"intercept\", {\n\t\t\t\t\t\t\ttype: \"xlsx\",\n\t\t\t\t\t\t\toptions: { sheetOnly: true },\n\t\t\t\t\t\t\tactive: self.active,\n\t\t\t\t\t\t\tintercept: function intercept(data) {\n\t\t\t\t\t\t\t\tworkbook.Sheets[sheet] = data;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tworkbook.SheetNames.push(sheetName);\n\t\t\t\tworkbook.Sheets[sheetName] = generateSheet();\n\t\t\t}\n\n\t\t\tif (options.documentProcessing) {\n\t\t\t\tworkbook = options.documentProcessing(workbook);\n\t\t\t}\n\n\t\t\t//convert workbook to binary array\n\t\t\tfunction s2ab(s) {\n\t\t\t\tvar buf = new ArrayBuffer(s.length);\n\t\t\t\tvar view = new Uint8Array(buf);\n\t\t\t\tfor (var i = 0; i != s.length; ++i) {\n\t\t\t\t\tview[i] = s.charCodeAt(i) & 0xFF;\n\t\t\t\t}return buf;\n\t\t\t}\n\n\t\t\toutput = XLSX.write(workbook, { bookType: 'xlsx', bookSST: true, type: 'binary' });\n\n\t\t\tsetFileContents(s2ab(output), \"application/octet-stream\");\n\t\t},\n\n\t\thtml: function html(list, options, setFileContents) {\n\t\t\tif (this.modExists(\"export\", true)) {\n\t\t\t\tsetFileContents(this.modules.export.genereateHTMLTable(list), \"text/html\");\n\t\t\t}\n\t\t}\n\n\t};\n\n\tTabulator.prototype.registerModule(\"download\", Download);\n\n\tvar Edit = function Edit(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.currentCell = false; //hold currently editing cell\n\t\tthis.mouseClick = false; //hold mousedown state to prevent click binding being overriden by editor opening\n\t\tthis.recursionBlock = false; //prevent focus recursion\n\t\tthis.invalidEdit = false;\n\t\tthis.editedCells = [];\n\t};\n\n\t//initialize column editor\n\tEdit.prototype.initializeColumn = function (column) {\n\t\tvar self = this,\n\t\t    config = {\n\t\t\teditor: false,\n\t\t\tblocked: false,\n\t\t\tcheck: column.definition.editable,\n\t\t\tparams: column.definition.editorParams || {}\n\t\t};\n\n\t\t//set column editor\n\t\tswitch (_typeof(column.definition.editor)) {\n\t\t\tcase \"string\":\n\n\t\t\t\tif (column.definition.editor === \"tick\") {\n\t\t\t\t\tcolumn.definition.editor = \"tickCross\";\n\t\t\t\t\tconsole.warn(\"DEPRECATION WARNING - the tick editor has been deprecated, please use the tickCross editor\");\n\t\t\t\t}\n\n\t\t\t\tif (self.editors[column.definition.editor]) {\n\t\t\t\t\tconfig.editor = self.editors[column.definition.editor];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Editor Error - No such editor found: \", column.definition.editor);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tconfig.editor = column.definition.editor;\n\t\t\t\tbreak;\n\n\t\t\tcase \"boolean\":\n\n\t\t\t\tif (column.definition.editor === true) {\n\n\t\t\t\t\tif (typeof column.definition.formatter !== \"function\") {\n\n\t\t\t\t\t\tif (column.definition.formatter === \"tick\") {\n\t\t\t\t\t\t\tcolumn.definition.formatter = \"tickCross\";\n\t\t\t\t\t\t\tconsole.warn(\"DEPRECATION WARNING - the tick editor has been deprecated, please use the tickCross editor\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (self.editors[column.definition.formatter]) {\n\t\t\t\t\t\t\tconfig.editor = self.editors[column.definition.formatter];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconfig.editor = self.editors[\"input\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Editor Error - Cannot auto lookup editor for a custom formatter: \", column.definition.formatter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (config.editor) {\n\t\t\tcolumn.modules.edit = config;\n\t\t}\n\t};\n\n\tEdit.prototype.getCurrentCell = function () {\n\t\treturn this.currentCell ? this.currentCell.getComponent() : false;\n\t};\n\n\tEdit.prototype.clearEditor = function (cancel) {\n\t\tvar cell = this.currentCell,\n\t\t    cellEl;\n\n\t\tthis.invalidEdit = false;\n\n\t\tif (cell) {\n\t\t\tthis.currentCell = false;\n\n\t\t\tcellEl = cell.getElement();\n\n\t\t\tif (cancel) {\n\t\t\t\tcell.validate();\n\t\t\t} else {\n\t\t\t\tcellEl.classList.remove(\"tabulator-validation-fail\");\n\t\t\t}\n\n\t\t\tcellEl.classList.remove(\"tabulator-editing\");\n\t\t\twhile (cellEl.firstChild) {\n\t\t\t\tcellEl.removeChild(cellEl.firstChild);\n\t\t\t}cell.row.getElement().classList.remove(\"tabulator-row-editing\");\n\t\t}\n\t};\n\n\tEdit.prototype.cancelEdit = function () {\n\n\t\tif (this.currentCell) {\n\t\t\tvar cell = this.currentCell;\n\t\t\tvar component = this.currentCell.getComponent();\n\n\t\t\tthis.clearEditor(true);\n\t\t\tcell.setValueActual(cell.getValue());\n\t\t\tcell.cellRendered();\n\n\t\t\tif (cell.column.cellEvents.cellEditCancelled) {\n\t\t\t\tcell.column.cellEvents.cellEditCancelled.call(this.table, component);\n\t\t\t}\n\n\t\t\tthis.table.options.cellEditCancelled.call(this.table, component);\n\t\t}\n\t};\n\n\t//return a formatted value for a cell\n\tEdit.prototype.bindEditor = function (cell) {\n\t\tvar self = this,\n\t\t    element = cell.getElement();\n\n\t\telement.setAttribute(\"tabindex\", 0);\n\n\t\telement.addEventListener(\"click\", function (e) {\n\t\t\tif (!element.classList.contains(\"tabulator-editing\")) {\n\t\t\t\telement.focus({ preventScroll: true });\n\t\t\t}\n\t\t});\n\n\t\telement.addEventListener(\"mousedown\", function (e) {\n\t\t\tself.mouseClick = true;\n\t\t});\n\n\t\telement.addEventListener(\"focus\", function (e) {\n\t\t\tif (!self.recursionBlock) {\n\t\t\t\tself.edit(cell, e, false);\n\t\t\t}\n\t\t});\n\t};\n\n\tEdit.prototype.focusCellNoEvent = function (cell, block) {\n\t\tthis.recursionBlock = true;\n\t\tif (!(block && this.table.browser === \"ie\")) {\n\t\t\tcell.getElement().focus({ preventScroll: true });\n\t\t}\n\t\tthis.recursionBlock = false;\n\t};\n\n\tEdit.prototype.editCell = function (cell, forceEdit) {\n\t\tthis.focusCellNoEvent(cell);\n\t\tthis.edit(cell, false, forceEdit);\n\t};\n\n\tEdit.prototype.focusScrollAdjust = function (cell) {\n\t\tif (this.table.rowManager.getRenderMode() == \"virtual\") {\n\t\t\tvar topEdge = this.table.rowManager.element.scrollTop,\n\t\t\t    bottomEdge = this.table.rowManager.element.clientHeight + this.table.rowManager.element.scrollTop,\n\t\t\t    rowEl = cell.row.getElement(),\n\t\t\t    offset = rowEl.offsetTop;\n\n\t\t\tif (rowEl.offsetTop < topEdge) {\n\t\t\t\tthis.table.rowManager.element.scrollTop -= topEdge - rowEl.offsetTop;\n\t\t\t} else {\n\t\t\t\tif (rowEl.offsetTop + rowEl.offsetHeight > bottomEdge) {\n\t\t\t\t\tthis.table.rowManager.element.scrollTop += rowEl.offsetTop + rowEl.offsetHeight - bottomEdge;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar leftEdge = this.table.rowManager.element.scrollLeft,\n\t\t\t    rightEdge = this.table.rowManager.element.clientWidth + this.table.rowManager.element.scrollLeft,\n\t\t\t    cellEl = cell.getElement(),\n\t\t\t    offset = cellEl.offsetLeft;\n\n\t\t\tif (this.table.modExists(\"frozenColumns\")) {\n\t\t\t\tleftEdge += parseInt(this.table.modules.frozenColumns.leftMargin);\n\t\t\t\trightEdge -= parseInt(this.table.modules.frozenColumns.rightMargin);\n\t\t\t}\n\n\t\t\tif (cellEl.offsetLeft < leftEdge) {\n\t\t\t\tthis.table.rowManager.element.scrollLeft -= leftEdge - cellEl.offsetLeft;\n\t\t\t} else {\n\t\t\t\tif (cellEl.offsetLeft + cellEl.offsetWidth > rightEdge) {\n\t\t\t\t\tthis.table.rowManager.element.scrollLeft += cellEl.offsetLeft + cellEl.offsetWidth - rightEdge;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tEdit.prototype.edit = function (cell, e, forceEdit) {\n\t\tvar self = this,\n\t\t    allowEdit = true,\n\t\t    rendered = function rendered() {},\n\t\t    element = cell.getElement(),\n\t\t    cellEditor,\n\t\t    component,\n\t\t    params;\n\n\t\t//prevent editing if another cell is refusing to leave focus (eg. validation fail)\n\t\tif (this.currentCell) {\n\t\t\tif (!this.invalidEdit) {\n\t\t\t\tthis.cancelEdit();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t//handle successfull value change\n\t\tfunction success(value) {\n\t\t\tif (self.currentCell === cell) {\n\t\t\t\tvar valid = true;\n\n\t\t\t\tif (cell.column.modules.validate && self.table.modExists(\"validate\") && self.table.options.validationMode != \"manual\") {\n\t\t\t\t\tvalid = self.table.modules.validate.validate(cell.column.modules.validate, cell, value);\n\t\t\t\t}\n\n\t\t\t\tif (valid === true || self.table.options.validationMode === \"highlight\") {\n\t\t\t\t\tself.clearEditor();\n\t\t\t\t\tcell.setValue(value, true);\n\n\t\t\t\t\tif (!cell.modules.edit) {\n\t\t\t\t\t\tcell.modules.edit = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tcell.modules.edit.edited = true;\n\n\t\t\t\t\tif (self.editedCells.indexOf(cell) == -1) {\n\t\t\t\t\t\tself.editedCells.push(cell);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n\t\t\t\t\t\tself.table.modules.dataTree.checkForRestyle(cell);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (valid !== true) {\n\t\t\t\t\t\telement.classList.add(\"tabulator-validation-fail\");\n\t\t\t\t\t\tself.table.options.validationFailed.call(self.table, cell.getComponent(), value, valid);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tself.invalidEdit = true;\n\t\t\t\t\telement.classList.add(\"tabulator-validation-fail\");\n\t\t\t\t\tself.focusCellNoEvent(cell, true);\n\t\t\t\t\trendered();\n\t\t\t\t\tself.table.options.validationFailed.call(self.table, cell.getComponent(), value, valid);\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// console.warn(\"Edit Success Error - cannot call success on a cell that is no longer being edited\");\n\t\t\t}\n\t\t}\n\n\t\t//handle aborted edit\n\t\tfunction cancel() {\n\t\t\tif (self.currentCell === cell) {\n\t\t\t\tself.cancelEdit();\n\n\t\t\t\tif (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n\t\t\t\t\tself.table.modules.dataTree.checkForRestyle(cell);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// console.warn(\"Edit Success Error - cannot call cancel on a cell that is no longer being edited\");\n\t\t\t}\n\t\t}\n\n\t\tfunction onRendered(callback) {\n\t\t\trendered = callback;\n\t\t}\n\n\t\tif (!cell.column.modules.edit.blocked) {\n\t\t\tif (e) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\n\t\t\tswitch (_typeof(cell.column.modules.edit.check)) {\n\t\t\t\tcase \"function\":\n\t\t\t\t\tallowEdit = cell.column.modules.edit.check(cell.getComponent());\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\tallowEdit = cell.column.modules.edit.check;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (allowEdit || forceEdit) {\n\n\t\t\t\tself.cancelEdit();\n\n\t\t\t\tself.currentCell = cell;\n\n\t\t\t\tthis.focusScrollAdjust(cell);\n\n\t\t\t\tcomponent = cell.getComponent();\n\n\t\t\t\tif (this.mouseClick) {\n\t\t\t\t\tthis.mouseClick = false;\n\n\t\t\t\t\tif (cell.column.cellEvents.cellClick) {\n\t\t\t\t\t\tcell.column.cellEvents.cellClick.call(this.table, e, component);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (cell.column.cellEvents.cellEditing) {\n\t\t\t\t\tcell.column.cellEvents.cellEditing.call(this.table, component);\n\t\t\t\t}\n\n\t\t\t\tself.table.options.cellEditing.call(this.table, component);\n\n\t\t\t\tparams = typeof cell.column.modules.edit.params === \"function\" ? cell.column.modules.edit.params(component) : cell.column.modules.edit.params;\n\n\t\t\t\tcellEditor = cell.column.modules.edit.editor.call(self, component, onRendered, success, cancel, params);\n\n\t\t\t\t//if editor returned, add to DOM, if false, abort edit\n\t\t\t\tif (cellEditor !== false) {\n\n\t\t\t\t\tif (cellEditor instanceof Node) {\n\t\t\t\t\t\telement.classList.add(\"tabulator-editing\");\n\t\t\t\t\t\tcell.row.getElement().classList.add(\"tabulator-row-editing\");\n\t\t\t\t\t\twhile (element.firstChild) {\n\t\t\t\t\t\t\telement.removeChild(element.firstChild);\n\t\t\t\t\t\t}element.appendChild(cellEditor);\n\n\t\t\t\t\t\t//trigger onRendered Callback\n\t\t\t\t\t\trendered();\n\n\t\t\t\t\t\t//prevent editing from triggering rowClick event\n\t\t\t\t\t\tvar children = element.children;\n\n\t\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\t\tchildren[i].addEventListener(\"click\", function (e) {\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Edit Error - Editor should return an instance of Node, the editor returned:\", cellEditor);\n\t\t\t\t\t\telement.blur();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\telement.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tthis.mouseClick = false;\n\t\t\t\telement.blur();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.mouseClick = false;\n\t\t\telement.blur();\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tEdit.prototype.maskInput = function (el, options) {\n\t\tvar mask = options.mask,\n\t\t    maskLetter = typeof options.maskLetterChar !== \"undefined\" ? options.maskLetterChar : \"A\",\n\t\t    maskNumber = typeof options.maskNumberChar !== \"undefined\" ? options.maskNumberChar : \"9\",\n\t\t    maskWildcard = typeof options.maskWildcardChar !== \"undefined\" ? options.maskWildcardChar : \"*\",\n\t\t    success = false;\n\n\t\tfunction fillSymbols(index) {\n\t\t\tvar symbol = mask[index];\n\t\t\tif (typeof symbol !== \"undefined\" && symbol !== maskWildcard && symbol !== maskLetter && symbol !== maskNumber) {\n\t\t\t\tel.value = el.value + \"\" + symbol;\n\t\t\t\tfillSymbols(index + 1);\n\t\t\t}\n\t\t}\n\n\t\tel.addEventListener(\"keydown\", function (e) {\n\t\t\tvar index = el.value.length,\n\t\t\t    char = e.key;\n\n\t\t\tif (e.keyCode > 46) {\n\t\t\t\tif (index >= mask.length) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tsuccess = false;\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tswitch (mask[index]) {\n\t\t\t\t\t\tcase maskLetter:\n\t\t\t\t\t\t\tif (char.toUpperCase() == char.toLowerCase()) {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase maskNumber:\n\t\t\t\t\t\t\tif (isNaN(char)) {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase maskWildcard:\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (char !== mask[index]) {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuccess = true;\n\t\t\t}\n\n\t\t\treturn;\n\t\t});\n\n\t\tel.addEventListener(\"keyup\", function (e) {\n\t\t\tif (e.keyCode > 46) {\n\t\t\t\tif (options.maskAutoFill) {\n\t\t\t\t\tfillSymbols(el.value.length);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (!el.placeholder) {\n\t\t\tel.placeholder = mask;\n\t\t}\n\n\t\tif (options.maskAutoFill) {\n\t\t\tfillSymbols(el.value.length);\n\t\t}\n\t};\n\n\tEdit.prototype.getEditedCells = function () {\n\t\tvar output = [];\n\n\t\tthis.editedCells.forEach(function (cell) {\n\t\t\toutput.push(cell.getComponent());\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tEdit.prototype.clearEdited = function (cell) {\n\t\tvar editIndex;\n\n\t\tif (cell.modules.validate && cell.modules.edit && cell.modules.edit.edited) {\n\t\t\tcell.modules.validate.invalid = false;\n\n\t\t\teditIndex = this.editedCells.indexOf(cell);\n\n\t\t\tif (editIndex > -1) {\n\t\t\t\tthis.editedCells.splice(editIndex, 1);\n\t\t\t}\n\t\t}\n\t};\n\n\t//default data editors\n\tEdit.prototype.editors = {\n\n\t\t//input element\n\t\tinput: function input(cell, onRendered, success, cancel, editorParams) {\n\n\t\t\t//create and style input\n\t\t\tvar cellValue = cell.getValue(),\n\t\t\t    input = document.createElement(\"input\");\n\n\t\t\tinput.setAttribute(\"type\", editorParams.search ? \"search\" : \"text\");\n\n\t\t\tinput.style.padding = \"4px\";\n\t\t\tinput.style.width = \"100%\";\n\t\t\tinput.style.boxSizing = \"border-box\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tinput.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinput.value = typeof cellValue !== \"undefined\" ? cellValue : \"\";\n\n\t\t\tonRendered(function () {\n\t\t\t\tinput.focus({ preventScroll: true });\n\t\t\t\tinput.style.height = \"100%\";\n\t\t\t});\n\n\t\t\tfunction onChange(e) {\n\t\t\t\tif ((cellValue === null || typeof cellValue === \"undefined\") && input.value !== \"\" || input.value !== cellValue) {\n\t\t\t\t\tif (success(input.value)) {\n\t\t\t\t\t\tcellValue = input.value; //persist value if successfully validated incase editor is used as header filter\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//submit new value on blur or change\n\t\t\tinput.addEventListener(\"change\", onChange);\n\t\t\tinput.addEventListener(\"blur\", onChange);\n\n\t\t\t//submit new value on enter\n\t\t\tinput.addEventListener(\"keydown\", function (e) {\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\t// case 9:\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\tonChange(e);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (editorParams.mask) {\n\t\t\t\tthis.table.modules.edit.maskInput(input, editorParams);\n\t\t\t}\n\n\t\t\treturn input;\n\t\t},\n\n\t\t//resizable text area element\n\t\ttextarea: function textarea(cell, onRendered, success, cancel, editorParams) {\n\t\t\tvar self = this,\n\t\t\t    cellValue = cell.getValue(),\n\t\t\t    vertNav = editorParams.verticalNavigation || \"hybrid\",\n\t\t\t    value = String(cellValue !== null && typeof cellValue !== \"undefined\" ? cellValue : \"\"),\n\t\t\t    count = (value.match(/(?:\\r\\n|\\r|\\n)/g) || []).length + 1,\n\t\t\t    input = document.createElement(\"textarea\"),\n\t\t\t    scrollHeight = 0;\n\n\t\t\t//create and style input\n\t\t\tinput.style.display = \"block\";\n\t\t\tinput.style.padding = \"2px\";\n\t\t\tinput.style.height = \"100%\";\n\t\t\tinput.style.width = \"100%\";\n\t\t\tinput.style.boxSizing = \"border-box\";\n\t\t\tinput.style.whiteSpace = \"pre-wrap\";\n\t\t\tinput.style.resize = \"none\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tinput.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinput.value = value;\n\n\t\t\tonRendered(function () {\n\t\t\t\tinput.focus({ preventScroll: true });\n\t\t\t\tinput.style.height = \"100%\";\n\t\t\t});\n\n\t\t\tfunction onChange(e) {\n\n\t\t\t\tif ((cellValue === null || typeof cellValue === \"undefined\") && input.value !== \"\" || input.value !== cellValue) {\n\n\t\t\t\t\tif (success(input.value)) {\n\t\t\t\t\t\tcellValue = input.value; //persist value if successfully validated incase editor is used as header filter\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tcell.getRow().normalizeHeight();\n\t\t\t\t\t}, 300);\n\t\t\t\t} else {\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//submit new value on blur or change\n\t\t\tinput.addEventListener(\"change\", onChange);\n\t\t\tinput.addEventListener(\"blur\", onChange);\n\n\t\t\tinput.addEventListener(\"keyup\", function () {\n\n\t\t\t\tinput.style.height = \"\";\n\n\t\t\t\tvar heightNow = input.scrollHeight;\n\n\t\t\t\tinput.style.height = heightNow + \"px\";\n\n\t\t\t\tif (heightNow != scrollHeight) {\n\t\t\t\t\tscrollHeight = heightNow;\n\t\t\t\t\tcell.getRow().normalizeHeight();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"keydown\", function (e) {\n\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\t//up arrow\n\t\t\t\t\t\tif (vertNav == \"editor\" || vertNav == \"hybrid\" && input.selectionStart) {\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 40:\n\t\t\t\t\t\t//down arrow\n\t\t\t\t\t\tif (vertNav == \"editor\" || vertNav == \"hybrid\" && input.selectionStart !== input.value.length) {\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (editorParams.mask) {\n\t\t\t\tthis.table.modules.edit.maskInput(input, editorParams);\n\t\t\t}\n\n\t\t\treturn input;\n\t\t},\n\n\t\t//input element with type of number\n\t\tnumber: function number(cell, onRendered, success, cancel, editorParams) {\n\n\t\t\tvar cellValue = cell.getValue(),\n\t\t\t    vertNav = editorParams.verticalNavigation || \"editor\",\n\t\t\t    input = document.createElement(\"input\");\n\n\t\t\tinput.setAttribute(\"type\", \"number\");\n\n\t\t\tif (typeof editorParams.max != \"undefined\") {\n\t\t\t\tinput.setAttribute(\"max\", editorParams.max);\n\t\t\t}\n\n\t\t\tif (typeof editorParams.min != \"undefined\") {\n\t\t\t\tinput.setAttribute(\"min\", editorParams.min);\n\t\t\t}\n\n\t\t\tif (typeof editorParams.step != \"undefined\") {\n\t\t\t\tinput.setAttribute(\"step\", editorParams.step);\n\t\t\t}\n\n\t\t\t//create and style input\n\t\t\tinput.style.padding = \"4px\";\n\t\t\tinput.style.width = \"100%\";\n\t\t\tinput.style.boxSizing = \"border-box\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tinput.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinput.value = cellValue;\n\n\t\t\tvar blurFunc = function blurFunc(e) {\n\t\t\t\tonChange();\n\t\t\t};\n\n\t\t\tonRendered(function () {\n\t\t\t\t//submit new value on blur\n\t\t\t\tinput.removeEventListener(\"blur\", blurFunc);\n\n\t\t\t\tinput.focus({ preventScroll: true });\n\t\t\t\tinput.style.height = \"100%\";\n\n\t\t\t\t//submit new value on blur\n\t\t\t\tinput.addEventListener(\"blur\", blurFunc);\n\t\t\t});\n\n\t\t\tfunction onChange() {\n\t\t\t\tvar value = input.value;\n\n\t\t\t\tif (!isNaN(value) && value !== \"\") {\n\t\t\t\t\tvalue = Number(value);\n\t\t\t\t}\n\n\t\t\t\tif (value !== cellValue) {\n\t\t\t\t\tif (success(value)) {\n\t\t\t\t\t\tcellValue = value; //persist value if successfully validated incase editor is used as header filter\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//submit new value on enter\n\t\t\tinput.addEventListener(\"keydown\", function (e) {\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\t// case 9:\n\t\t\t\t\t\tonChange();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 38: //up arrow\n\t\t\t\t\tcase 40:\n\t\t\t\t\t\t//down arrow\n\t\t\t\t\t\tif (vertNav == \"editor\") {\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (editorParams.mask) {\n\t\t\t\tthis.table.modules.edit.maskInput(input, editorParams);\n\t\t\t}\n\n\t\t\treturn input;\n\t\t},\n\n\t\t//input element with type of number\n\t\trange: function range(cell, onRendered, success, cancel, editorParams) {\n\n\t\t\tvar cellValue = cell.getValue(),\n\t\t\t    input = document.createElement(\"input\");\n\n\t\t\tinput.setAttribute(\"type\", \"range\");\n\n\t\t\tif (typeof editorParams.max != \"undefined\") {\n\t\t\t\tinput.setAttribute(\"max\", editorParams.max);\n\t\t\t}\n\n\t\t\tif (typeof editorParams.min != \"undefined\") {\n\t\t\t\tinput.setAttribute(\"min\", editorParams.min);\n\t\t\t}\n\n\t\t\tif (typeof editorParams.step != \"undefined\") {\n\t\t\t\tinput.setAttribute(\"step\", editorParams.step);\n\t\t\t}\n\n\t\t\t//create and style input\n\t\t\tinput.style.padding = \"4px\";\n\t\t\tinput.style.width = \"100%\";\n\t\t\tinput.style.boxSizing = \"border-box\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tinput.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinput.value = cellValue;\n\n\t\t\tonRendered(function () {\n\t\t\t\tinput.focus({ preventScroll: true });\n\t\t\t\tinput.style.height = \"100%\";\n\t\t\t});\n\n\t\t\tfunction onChange() {\n\t\t\t\tvar value = input.value;\n\n\t\t\t\tif (!isNaN(value) && value !== \"\") {\n\t\t\t\t\tvalue = Number(value);\n\t\t\t\t}\n\n\t\t\t\tif (value != cellValue) {\n\t\t\t\t\tif (success(value)) {\n\t\t\t\t\t\tcellValue = value; //persist value if successfully validated incase editor is used as header filter\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//submit new value on blur\n\t\t\tinput.addEventListener(\"blur\", function (e) {\n\t\t\t\tonChange();\n\t\t\t});\n\n\t\t\t//submit new value on enter\n\t\t\tinput.addEventListener(\"keydown\", function (e) {\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\t// case 9:\n\t\t\t\t\t\tonChange();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn input;\n\t\t},\n\n\t\t//select\n\t\tselect: function select(cell, onRendered, success, cancel, editorParams) {\n\t\t\tvar _this45 = this;\n\n\t\t\tvar self = this,\n\t\t\t    cellEl = cell.getElement(),\n\t\t\t    initialValue = cell.getValue(),\n\t\t\t    vertNav = editorParams.verticalNavigation || \"editor\",\n\t\t\t    initialDisplayValue = typeof initialValue !== \"undefined\" || initialValue === null ? Array.isArray(initialValue) ? initialValue : [initialValue] : typeof editorParams.defaultValue !== \"undefined\" ? editorParams.defaultValue : [],\n\t\t\t    input = document.createElement(\"input\"),\n\t\t\t    listEl = document.createElement(\"div\"),\n\t\t\t    multiselect = editorParams.multiselect,\n\t\t\t    dataItems = [],\n\t\t\t    currentItem = {},\n\t\t\t    displayItems = [],\n\t\t\t    currentItems = [],\n\t\t\t    blurable = true,\n\t\t\t    blockListShow = false;\n\n\t\t\tif (Array.isArray(editorParams) || !Array.isArray(editorParams) && (typeof editorParams === 'undefined' ? 'undefined' : _typeof(editorParams)) === \"object\" && !editorParams.values) {\n\t\t\t\tconsole.warn(\"DEPRECATION WARNING - values for the select editor must now be passed into the values property of the editorParams object, not as the editorParams object\");\n\t\t\t\teditorParams = { values: editorParams };\n\t\t\t}\n\n\t\t\tfunction getUniqueColumnValues(field) {\n\t\t\t\tvar output = {},\n\t\t\t\t    data = self.table.getData(),\n\t\t\t\t    column;\n\n\t\t\t\tif (field) {\n\t\t\t\t\tcolumn = self.table.columnManager.getColumnByField(field);\n\t\t\t\t} else {\n\t\t\t\t\tcolumn = cell.getColumn()._getSelf();\n\t\t\t\t}\n\n\t\t\t\tif (column) {\n\t\t\t\t\tdata.forEach(function (row) {\n\t\t\t\t\t\tvar val = column.getFieldValue(row);\n\n\t\t\t\t\t\tif (val !== null && typeof val !== \"undefined\" && val !== \"\") {\n\t\t\t\t\t\t\toutput[val] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (editorParams.sortValuesList) {\n\t\t\t\t\t\tif (editorParams.sortValuesList == \"asc\") {\n\t\t\t\t\t\t\toutput = Object.keys(output).sort();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutput = Object.keys(output).sort().reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput = Object.keys(output);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"unable to find matching column to create select lookup list:\", field);\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\t\t\t}\n\n\t\t\tfunction parseItems(inputValues, curentValues) {\n\t\t\t\tvar dataList = [];\n\t\t\t\tvar displayList = [];\n\n\t\t\t\tfunction processComplexListItem(item) {\n\t\t\t\t\tvar item = {\n\t\t\t\t\t\tlabel: item.label,\n\t\t\t\t\t\tvalue: item.value,\n\t\t\t\t\t\titemParams: item.itemParams,\n\t\t\t\t\t\telementAttributes: item.elementAttributes,\n\t\t\t\t\t\telement: false\n\t\t\t\t\t};\n\n\t\t\t\t\t// if(item.value === curentValue || (!isNaN(parseFloat(item.value)) && !isNaN(parseFloat(item.value)) && parseFloat(item.value) === parseFloat(curentValue))){\n\t\t\t\t\t// \tsetCurrentItem(item);\n\t\t\t\t\t// }\n\n\t\t\t\t\tif (curentValues.indexOf(item.value) > -1) {\n\t\t\t\t\t\tsetItem(item);\n\t\t\t\t\t}\n\n\t\t\t\t\tdataList.push(item);\n\t\t\t\t\tdisplayList.push(item);\n\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\n\t\t\t\tif (typeof inputValues == \"function\") {\n\t\t\t\t\tinputValues = inputValues(cell);\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(inputValues)) {\n\t\t\t\t\tinputValues.forEach(function (value) {\n\t\t\t\t\t\tvar item;\n\n\t\t\t\t\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\") {\n\n\t\t\t\t\t\t\tif (value.options) {\n\t\t\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\t\t\tlabel: value.label,\n\t\t\t\t\t\t\t\t\tgroup: true,\n\t\t\t\t\t\t\t\t\titemParams: value.itemParams,\n\t\t\t\t\t\t\t\t\telementAttributes: value.elementAttributes,\n\t\t\t\t\t\t\t\t\telement: false\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tdisplayList.push(item);\n\n\t\t\t\t\t\t\t\tvalue.options.forEach(function (item) {\n\t\t\t\t\t\t\t\t\tprocessComplexListItem(item);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprocessComplexListItem(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\titem = {\n\t\t\t\t\t\t\t\tlabel: value,\n\t\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\t\telement: false\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// if(item.value === curentValue || (!isNaN(parseFloat(item.value)) && !isNaN(parseFloat(item.value)) && parseFloat(item.value) === parseFloat(curentValue))){\n\t\t\t\t\t\t\t// \tsetCurrentItem(item);\n\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\tif (curentValues.indexOf(item.value) > -1) {\n\t\t\t\t\t\t\t\tsetItem(item);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdataList.push(item);\n\t\t\t\t\t\t\tdisplayList.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tfor (var key in inputValues) {\n\t\t\t\t\t\tvar item = {\n\t\t\t\t\t\t\tlabel: inputValues[key],\n\t\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t\telement: false\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// if(item.value === curentValue || (!isNaN(parseFloat(item.value)) && !isNaN(parseFloat(item.value)) && parseFloat(item.value) === parseFloat(curentValue))){\n\t\t\t\t\t\t// \tsetCurrentItem(item);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tif (curentValues.indexOf(item.value) > -1) {\n\t\t\t\t\t\t\tsetItem(item);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdataList.push(item);\n\t\t\t\t\t\tdisplayList.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdataItems = dataList;\n\t\t\t\tdisplayItems = displayList;\n\n\t\t\t\tfillList();\n\t\t\t}\n\n\t\t\tfunction fillList() {\n\t\t\t\twhile (listEl.firstChild) {\n\t\t\t\t\tlistEl.removeChild(listEl.firstChild);\n\t\t\t\t}displayItems.forEach(function (item) {\n\n\t\t\t\t\tvar el = item.element;\n\n\t\t\t\t\tif (!el) {\n\t\t\t\t\t\tel = document.createElement(\"div\");\n\t\t\t\t\t\titem.label = editorParams.listItemFormatter ? editorParams.listItemFormatter(item.value, item.label, cell, el, item.itemParams) : item.label;\n\t\t\t\t\t\tif (item.group) {\n\t\t\t\t\t\t\tel.classList.add(\"tabulator-edit-select-list-group\");\n\t\t\t\t\t\t\tel.tabIndex = 0;\n\t\t\t\t\t\t\tel.innerHTML = item.label === \"\" ? \"&nbsp;\" : item.label;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tel.classList.add(\"tabulator-edit-select-list-item\");\n\t\t\t\t\t\t\tel.tabIndex = 0;\n\t\t\t\t\t\t\tel.innerHTML = item.label === \"\" ? \"&nbsp;\" : item.label;\n\n\t\t\t\t\t\t\tel.addEventListener(\"click\", function () {\n\t\t\t\t\t\t\t\tblockListShow = true;\n\n\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\tblockListShow = false;\n\t\t\t\t\t\t\t\t}, 10);\n\n\t\t\t\t\t\t\t\t// setCurrentItem(item);\n\t\t\t\t\t\t\t\t// chooseItem();\n\t\t\t\t\t\t\t\tif (multiselect) {\n\t\t\t\t\t\t\t\t\ttoggleItem(item);\n\t\t\t\t\t\t\t\t\tinput.focus();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tchooseItem(item);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// if(item === currentItem){\n\t\t\t\t\t\t\t// \tel.classList.add(\"active\");\n\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\tif (currentItems.indexOf(item) > -1) {\n\t\t\t\t\t\t\t\tel.classList.add(\"active\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (item.elementAttributes && _typeof(item.elementAttributes) == \"object\") {\n\t\t\t\t\t\t\tfor (var key in item.elementAttributes) {\n\t\t\t\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\t\t\t\tel.setAttribute(key, input.getAttribute(key) + item.elementAttributes[\"+\" + key]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tel.setAttribute(key, item.elementAttributes[key]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tel.addEventListener(\"mousedown\", function () {\n\t\t\t\t\t\t\tblurable = false;\n\n\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\tblurable = true;\n\t\t\t\t\t\t\t}, 10);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\titem.element = el;\n\t\t\t\t\t}\n\n\t\t\t\t\tlistEl.appendChild(el);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction setCurrentItem(item, active) {\n\n\t\t\t\tif (!multiselect && currentItem && currentItem.element) {\n\t\t\t\t\tcurrentItem.element.classList.remove(\"active\");\n\t\t\t\t}\n\n\t\t\t\tif (currentItem && currentItem.element) {\n\t\t\t\t\tcurrentItem.element.classList.remove(\"focused\");\n\t\t\t\t}\n\n\t\t\t\tcurrentItem = item;\n\n\t\t\t\tif (item.element) {\n\t\t\t\t\titem.element.classList.add(\"focused\");\n\t\t\t\t\tif (active) {\n\t\t\t\t\t\titem.element.classList.add(\"active\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// function chooseItem(){\n\t\t\t// \thideList();\n\n\t\t\t// \tif(initialValue !== currentItem.value){\n\t\t\t// \t\tinitialValue = currentItem.value;\n\t\t\t// \t\tsuccess(currentItem.value);\n\t\t\t// \t}else{\n\t\t\t// \t\tcancel();\n\t\t\t// \t}\n\t\t\t// }\n\n\t\t\tfunction setItem(item) {\n\t\t\t\tvar index = currentItems.indexOf(item);\n\n\t\t\t\tif (index == -1) {\n\t\t\t\t\tcurrentItems.push(item);\n\t\t\t\t\tsetCurrentItem(item, true);\n\t\t\t\t}\n\n\t\t\t\tfillInput();\n\t\t\t}\n\n\t\t\tfunction unsetItem(index) {\n\t\t\t\tvar item = currentItems[index];\n\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tcurrentItems.splice(index, 1);\n\t\t\t\t\tif (item.element) {\n\t\t\t\t\t\titem.element.classList.remove(\"active\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction toggleItem(item) {\n\t\t\t\tif (!item) {\n\t\t\t\t\titem = currentItem;\n\t\t\t\t}\n\n\t\t\t\tvar index = currentItems.indexOf(item);\n\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tunsetItem(index);\n\t\t\t\t} else {\n\t\t\t\t\tif (multiselect !== true && currentItems.length >= multiselect) {\n\t\t\t\t\t\tunsetItem(0);\n\t\t\t\t\t}\n\n\t\t\t\t\tsetItem(item);\n\t\t\t\t}\n\n\t\t\t\tfillInput();\n\t\t\t}\n\n\t\t\tfunction chooseItem(item) {\n\t\t\t\thideList();\n\n\t\t\t\tif (!item) {\n\t\t\t\t\titem = currentItem;\n\t\t\t\t}\n\n\t\t\t\tif (item) {\n\t\t\t\t\tinput.value = item.label;\n\t\t\t\t\tsuccess(item.value);\n\t\t\t\t}\n\n\t\t\t\tinitialDisplayValue = input.value;\n\t\t\t}\n\n\t\t\tfunction chooseItems(silent) {\n\t\t\t\tif (!silent) {\n\t\t\t\t\thideList();\n\t\t\t\t}\n\n\t\t\t\tvar output = [];\n\n\t\t\t\tcurrentItems.forEach(function (item) {\n\t\t\t\t\toutput.push(item.value);\n\t\t\t\t});\n\n\t\t\t\tinitialDisplayValue = input.value;\n\n\t\t\t\tsuccess(output);\n\t\t\t}\n\n\t\t\tfunction fillInput() {\n\t\t\t\tvar output = [];\n\n\t\t\t\tcurrentItems.forEach(function (item) {\n\t\t\t\t\toutput.push(item.label);\n\t\t\t\t});\n\n\t\t\t\tinput.value = output.join(\", \");\n\n\t\t\t\tif (self.currentCell === false) {\n\t\t\t\t\tchooseItems(true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction unsetItems() {\n\n\t\t\t\tvar len = currentItems.length;\n\n\t\t\t\tfor (var _i6 = 0; _i6 < len; _i6++) {\n\t\t\t\t\tunsetItem(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cancelItem() {\n\t\t\t\thideList();\n\t\t\t\tcancel();\n\t\t\t}\n\n\t\t\tfunction showList() {\n\t\t\t\tcurrentItems = [];\n\n\t\t\t\tif (!listEl.parentNode) {\n\t\t\t\t\tif (editorParams.values === true) {\n\t\t\t\t\t\tparseItems(getUniqueColumnValues(), initialDisplayValue);\n\t\t\t\t\t} else if (typeof editorParams.values === \"string\") {\n\t\t\t\t\t\tparseItems(getUniqueColumnValues(editorParams.values), initialDisplayValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparseItems(editorParams.values || [], initialDisplayValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar offset = Tabulator.prototype.helpers.elOffset(cellEl);\n\n\t\t\t\t\tlistEl.style.minWidth = cellEl.offsetWidth + \"px\";\n\n\t\t\t\t\tlistEl.style.top = offset.top + cellEl.offsetHeight + \"px\";\n\t\t\t\t\tlistEl.style.left = offset.left + \"px\";\n\n\t\t\t\t\tlistEl.addEventListener(\"mousedown\", function (e) {\n\t\t\t\t\t\tblurable = false;\n\n\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\tblurable = true;\n\t\t\t\t\t\t}, 10);\n\t\t\t\t\t});\n\n\t\t\t\t\tdocument.body.appendChild(listEl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction hideList() {\n\t\t\t\tif (listEl.parentNode) {\n\t\t\t\t\tlistEl.parentNode.removeChild(listEl);\n\t\t\t\t}\n\n\t\t\t\tremoveScrollListener();\n\t\t\t}\n\n\t\t\tfunction removeScrollListener() {\n\t\t\t\tself.table.rowManager.element.removeEventListener(\"scroll\", cancelItem);\n\t\t\t}\n\n\t\t\t//style input\n\t\t\tinput.setAttribute(\"type\", \"text\");\n\n\t\t\tinput.style.padding = \"4px\";\n\t\t\tinput.style.width = \"100%\";\n\t\t\tinput.style.boxSizing = \"border-box\";\n\t\t\tinput.style.cursor = \"default\";\n\t\t\tinput.readOnly = this.currentCell != false;\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tinput.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinput.value = typeof initialValue !== \"undefined\" || initialValue === null ? initialValue : \"\";\n\n\t\t\t// if(editorParams.values === true){\n\t\t\t// \tparseItems(getUniqueColumnValues(), initialValue);\n\t\t\t// }else if(typeof editorParams.values === \"string\"){\n\t\t\t// \tparseItems(getUniqueColumnValues(editorParams.values), initialValue);\n\t\t\t// }else{\n\t\t\t// \tparseItems(editorParams.values || [], initialValue);\n\t\t\t// }\n\n\t\t\tinput.addEventListener(\"search\", function (e) {\n\t\t\t\tif (!input.value) {\n\t\t\t\t\tunsetItems();\n\t\t\t\t\tchooseItems();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//allow key based navigation\n\t\t\tinput.addEventListener(\"keydown\", function (e) {\n\t\t\t\tvar index;\n\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\t//up arrow\n\t\t\t\t\t\tindex = dataItems.indexOf(currentItem);\n\n\t\t\t\t\t\tif (vertNav == \"editor\" || vertNav == \"hybrid\" && index) {\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\t\tsetCurrentItem(dataItems[index - 1], !multiselect);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 40:\n\t\t\t\t\t\t//down arrow\n\t\t\t\t\t\tindex = dataItems.indexOf(currentItem);\n\n\t\t\t\t\t\tif (vertNav == \"editor\" || vertNav == \"hybrid\" && index < dataItems.length - 1) {\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t\tif (index < dataItems.length - 1) {\n\t\t\t\t\t\t\t\tif (index == -1) {\n\t\t\t\t\t\t\t\t\tsetCurrentItem(dataItems[0], !multiselect);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetCurrentItem(dataItems[index + 1], !multiselect);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 37: //left arrow\n\t\t\t\t\tcase 39:\n\t\t\t\t\t\t//right arrow\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\t//enter\n\t\t\t\t\t\t// chooseItem();\n\n\t\t\t\t\t\tif (multiselect) {\n\t\t\t\t\t\t\ttoggleItem();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchooseItem();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t//escape\n\t\t\t\t\t\tcancelItem();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\t//tab\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (self.currentCell === false) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"blur\", function (e) {\n\t\t\t\tif (blurable) {\n\t\t\t\t\tif (multiselect) {\n\t\t\t\t\t\tchooseItems();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcancelItem();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"focus\", function (e) {\n\t\t\t\tif (!blockListShow) {\n\t\t\t\t\tshowList();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//style list element\n\t\t\tlistEl = document.createElement(\"div\");\n\t\t\tlistEl.classList.add(\"tabulator-edit-select-list\");\n\n\t\t\tonRendered(function () {\n\t\t\t\tinput.style.height = \"100%\";\n\t\t\t\tinput.focus({ preventScroll: true });\n\t\t\t});\n\n\t\t\tsetTimeout(function () {\n\t\t\t\t_this45.table.rowManager.element.addEventListener(\"scroll\", cancelItem);\n\t\t\t}, 10);\n\n\t\t\treturn input;\n\t\t},\n\n\t\t//autocomplete\n\t\tautocomplete: function autocomplete(cell, onRendered, success, cancel, editorParams) {\n\t\t\tvar _this46 = this;\n\n\t\t\tvar self = this,\n\t\t\t    cellEl = cell.getElement(),\n\t\t\t    initialValue = cell.getValue(),\n\t\t\t    vertNav = editorParams.verticalNavigation || \"editor\",\n\t\t\t    initialDisplayValue = typeof initialValue !== \"undefined\" || initialValue === null ? initialValue : typeof editorParams.defaultValue !== \"undefined\" ? editorParams.defaultValue : \"\",\n\t\t\t    input = document.createElement(\"input\"),\n\t\t\t    listEl = document.createElement(\"div\"),\n\t\t\t    allItems = [],\n\t\t\t    displayItems = [],\n\t\t\t    values = [],\n\t\t\t    currentItem = false,\n\t\t\t    blurable = true,\n\t\t\t    uniqueColumnValues = false;\n\n\t\t\t//style input\n\t\t\tinput.setAttribute(\"type\", \"search\");\n\n\t\t\tinput.style.padding = \"4px\";\n\t\t\tinput.style.width = \"100%\";\n\t\t\tinput.style.boxSizing = \"border-box\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tinput.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//style list element\n\t\t\tlistEl.classList.add(\"tabulator-edit-select-list\");\n\n\t\t\tlistEl.addEventListener(\"mousedown\", function (e) {\n\t\t\t\tblurable = false;\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tblurable = true;\n\t\t\t\t}, 10);\n\t\t\t});\n\n\t\t\tfunction genUniqueColumnValues() {\n\t\t\t\tif (editorParams.values === true) {\n\t\t\t\t\tuniqueColumnValues = getUniqueColumnValues();\n\t\t\t\t} else if (typeof editorParams.values === \"string\") {\n\t\t\t\t\tuniqueColumnValues = getUniqueColumnValues(editorParams.values);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction getUniqueColumnValues(field) {\n\t\t\t\tvar output = {},\n\t\t\t\t    data = self.table.getData(),\n\t\t\t\t    column;\n\n\t\t\t\tif (field) {\n\t\t\t\t\tcolumn = self.table.columnManager.getColumnByField(field);\n\t\t\t\t} else {\n\t\t\t\t\tcolumn = cell.getColumn()._getSelf();\n\t\t\t\t}\n\n\t\t\t\tif (column) {\n\t\t\t\t\tdata.forEach(function (row) {\n\t\t\t\t\t\tvar val = column.getFieldValue(row);\n\n\t\t\t\t\t\tif (val !== null && typeof val !== \"undefined\" && val !== \"\") {\n\t\t\t\t\t\t\toutput[val] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (editorParams.sortValuesList) {\n\t\t\t\t\t\tif (editorParams.sortValuesList == \"asc\") {\n\t\t\t\t\t\t\toutput = Object.keys(output).sort();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutput = Object.keys(output).sort().reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput = Object.keys(output);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"unable to find matching column to create autocomplete lookup list:\", field);\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\t\t\t}\n\n\t\t\tfunction filterList(term, intialLoad) {\n\t\t\t\tvar matches = [],\n\t\t\t\t    values,\n\t\t\t\t    items,\n\t\t\t\t    searchEl;\n\n\t\t\t\t//lookup base values list\n\t\t\t\tif (uniqueColumnValues) {\n\t\t\t\t\tvalues = uniqueColumnValues;\n\t\t\t\t} else {\n\t\t\t\t\tvalues = editorParams.values || [];\n\t\t\t\t}\n\n\t\t\t\tif (editorParams.searchFunc) {\n\t\t\t\t\tmatches = editorParams.searchFunc(term, values);\n\n\t\t\t\t\tif (matches instanceof Promise) {\n\n\t\t\t\t\t\taddNotice(typeof editorParams.searchingPlaceholder !== \"undefined\" ? editorParams.searchingPlaceholder : \"Searching...\");\n\n\t\t\t\t\t\tmatches.then(function (result) {\n\t\t\t\t\t\t\tfillListIfNotEmpty(parseItems(result), intialLoad);\n\t\t\t\t\t\t}).catch(function (err) {\n\t\t\t\t\t\t\tconsole.err(\"error in autocomplete search promise:\", err);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfillListIfNotEmpty(parseItems(matches), intialLoad);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\titems = parseItems(values);\n\n\t\t\t\t\tif (term === \"\") {\n\t\t\t\t\t\tif (editorParams.showListOnEmpty) {\n\t\t\t\t\t\t\tmatches = items;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\titems.forEach(function (item) {\n\t\t\t\t\t\t\tif (item.value !== null || typeof item.value !== \"undefined\") {\n\t\t\t\t\t\t\t\tif (String(item.value).toLowerCase().indexOf(String(term).toLowerCase()) > -1 || String(item.title).toLowerCase().indexOf(String(term).toLowerCase()) > -1) {\n\t\t\t\t\t\t\t\t\tmatches.push(item);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tfillListIfNotEmpty(matches, intialLoad);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction addNotice(notice) {\n\t\t\t\tvar searchEl = document.createElement(\"div\");\n\n\t\t\t\tclearList();\n\n\t\t\t\tif (notice !== false) {\n\t\t\t\t\tsearchEl.classList.add(\"tabulator-edit-select-list-notice\");\n\t\t\t\t\tsearchEl.tabIndex = 0;\n\n\t\t\t\t\tif (notice instanceof Node) {\n\t\t\t\t\t\tsearchEl.appendChild(notice);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsearchEl.innerHTML = notice;\n\t\t\t\t\t}\n\n\t\t\t\t\tlistEl.appendChild(searchEl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction parseItems(inputValues) {\n\t\t\t\tvar itemList = [];\n\n\t\t\t\tif (Array.isArray(inputValues)) {\n\t\t\t\t\tinputValues.forEach(function (value) {\n\n\t\t\t\t\t\tvar item = {};\n\n\t\t\t\t\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\") {\n\t\t\t\t\t\t\titem.title = editorParams.listItemFormatter ? editorParams.listItemFormatter(value.value, value.label) : value.label;\n\t\t\t\t\t\t\titem.value = value.value;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titem.title = editorParams.listItemFormatter ? editorParams.listItemFormatter(value, value) : value;\n\t\t\t\t\t\t\titem.value = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\titemList.push(item);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tfor (var key in inputValues) {\n\t\t\t\t\t\tvar item = {\n\t\t\t\t\t\t\ttitle: editorParams.listItemFormatter ? editorParams.listItemFormatter(key, inputValues[key]) : inputValues[key],\n\t\t\t\t\t\t\tvalue: key\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\titemList.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn itemList;\n\t\t\t}\n\n\t\t\tfunction clearList() {\n\t\t\t\twhile (listEl.firstChild) {\n\t\t\t\t\tlistEl.removeChild(listEl.firstChild);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction fillListIfNotEmpty(items, intialLoad) {\n\t\t\t\tif (items.length) {\n\t\t\t\t\tfillList(items, intialLoad);\n\t\t\t\t} else {\n\t\t\t\t\tif (editorParams.emptyPlaceholder) {\n\t\t\t\t\t\taddNotice(editorParams.emptyPlaceholder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction fillList(items, intialLoad) {\n\t\t\t\tvar current = false;\n\n\t\t\t\tclearList();\n\n\t\t\t\tdisplayItems = items;\n\n\t\t\t\tdisplayItems.forEach(function (item) {\n\t\t\t\t\tvar el = item.element;\n\n\t\t\t\t\tif (!el) {\n\t\t\t\t\t\tel = document.createElement(\"div\");\n\t\t\t\t\t\tel.classList.add(\"tabulator-edit-select-list-item\");\n\t\t\t\t\t\tel.tabIndex = 0;\n\t\t\t\t\t\tel.innerHTML = item.title;\n\n\t\t\t\t\t\tel.addEventListener(\"click\", function (e) {\n\t\t\t\t\t\t\tsetCurrentItem(item);\n\t\t\t\t\t\t\tchooseItem();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tel.addEventListener(\"mousedown\", function (e) {\n\t\t\t\t\t\t\tblurable = false;\n\n\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\tblurable = true;\n\t\t\t\t\t\t\t}, 10);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\titem.element = el;\n\n\t\t\t\t\t\tif (intialLoad && item.value == initialValue) {\n\t\t\t\t\t\t\tinput.value = item.title;\n\t\t\t\t\t\t\titem.element.classList.add(\"active\");\n\t\t\t\t\t\t\tcurrent = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (item === currentItem) {\n\t\t\t\t\t\t\titem.element.classList.add(\"active\");\n\t\t\t\t\t\t\tcurrent = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlistEl.appendChild(el);\n\t\t\t\t});\n\n\t\t\t\tif (!current) {\n\t\t\t\t\tsetCurrentItem(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction chooseItem() {\n\t\t\t\thideList();\n\n\t\t\t\tif (currentItem) {\n\t\t\t\t\tif (initialValue !== currentItem.value) {\n\t\t\t\t\t\tinitialValue = currentItem.value;\n\t\t\t\t\t\tinput.value = currentItem.title;\n\t\t\t\t\t\tsuccess(currentItem.value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (editorParams.freetext) {\n\t\t\t\t\t\tinitialValue = input.value;\n\t\t\t\t\t\tsuccess(input.value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (editorParams.allowEmpty && input.value === \"\") {\n\t\t\t\t\t\t\tinitialValue = input.value;\n\t\t\t\t\t\t\tsuccess(input.value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcancel();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction showList() {\n\t\t\t\tif (!listEl.parentNode) {\n\t\t\t\t\twhile (listEl.firstChild) {\n\t\t\t\t\t\tlistEl.removeChild(listEl.firstChild);\n\t\t\t\t\t}var offset = Tabulator.prototype.helpers.elOffset(cellEl);\n\n\t\t\t\t\tlistEl.style.minWidth = cellEl.offsetWidth + \"px\";\n\n\t\t\t\t\tlistEl.style.top = offset.top + cellEl.offsetHeight + \"px\";\n\t\t\t\t\tlistEl.style.left = offset.left + \"px\";\n\t\t\t\t\tdocument.body.appendChild(listEl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction setCurrentItem(item, showInputValue) {\n\t\t\t\tif (currentItem && currentItem.element) {\n\t\t\t\t\tcurrentItem.element.classList.remove(\"active\");\n\t\t\t\t}\n\n\t\t\t\tcurrentItem = item;\n\n\t\t\t\tif (item && item.element) {\n\t\t\t\t\titem.element.classList.add(\"active\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction hideList() {\n\t\t\t\tif (listEl.parentNode) {\n\t\t\t\t\tlistEl.parentNode.removeChild(listEl);\n\t\t\t\t}\n\n\t\t\t\tremoveScrollListener();\n\t\t\t}\n\n\t\t\tfunction cancelItem() {\n\t\t\t\thideList();\n\t\t\t\tcancel();\n\t\t\t}\n\n\t\t\tfunction removeScrollListener() {\n\t\t\t\tself.table.rowManager.element.removeEventListener(\"scroll\", cancelItem);\n\t\t\t}\n\n\t\t\t//allow key based navigation\n\t\t\tinput.addEventListener(\"keydown\", function (e) {\n\t\t\t\tvar index;\n\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\t//up arrow\n\t\t\t\t\t\tindex = displayItems.indexOf(currentItem);\n\n\t\t\t\t\t\tif (vertNav == \"editor\" || vertNav == \"hybrid\" && index) {\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\t\tsetCurrentItem(displayItems[index - 1]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetCurrentItem(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 40:\n\t\t\t\t\t\t//down arrow\n\n\t\t\t\t\t\tindex = displayItems.indexOf(currentItem);\n\n\t\t\t\t\t\tif (vertNav == \"editor\" || vertNav == \"hybrid\" && index < displayItems.length - 1) {\n\n\t\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t\t\tif (index < displayItems.length - 1) {\n\t\t\t\t\t\t\t\tif (index == -1) {\n\t\t\t\t\t\t\t\t\tsetCurrentItem(displayItems[0]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetCurrentItem(displayItems[index + 1]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 37: //left arrow\n\t\t\t\t\tcase 39:\n\t\t\t\t\t\t//right arrow\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t// e.preventDefault();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\t//enter\n\t\t\t\t\t\tchooseItem();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t//escape\n\t\t\t\t\t\tcancelItem();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 36: //home\n\t\t\t\t\tcase 35:\n\t\t\t\t\t\t//end\n\t\t\t\t\t\t//prevent table navigation while using input element\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"keyup\", function (e) {\n\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 38: //up arrow\n\t\t\t\t\tcase 37: //left arrow\n\t\t\t\t\tcase 39: //up arrow\n\t\t\t\t\tcase 40: //right arrow\n\t\t\t\t\tcase 13: //enter\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t//escape\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfilterList(input.value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"search\", function (e) {\n\t\t\t\tfilterList(input.value);\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"blur\", function (e) {\n\t\t\t\tif (blurable) {\n\t\t\t\t\tchooseItem();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"focus\", function (e) {\n\t\t\t\tvar value = initialDisplayValue;\n\t\t\t\tgenUniqueColumnValues();\n\t\t\t\tshowList();\n\t\t\t\tinput.value = value;\n\t\t\t\tfilterList(value, true);\n\t\t\t});\n\n\t\t\tonRendered(function () {\n\t\t\t\tinput.style.height = \"100%\";\n\t\t\t\tinput.focus({ preventScroll: true });\n\t\t\t});\n\n\t\t\tif (editorParams.mask) {\n\t\t\t\tthis.table.modules.edit.maskInput(input, editorParams);\n\t\t\t}\n\n\t\t\tsetTimeout(function () {\n\t\t\t\t_this46.table.rowManager.element.addEventListener(\"scroll\", cancelItem);\n\t\t\t}, 10);\n\n\t\t\tgenUniqueColumnValues();\n\t\t\tinput.value = initialDisplayValue;\n\t\t\tfilterList(initialDisplayValue, true);\n\n\t\t\treturn input;\n\t\t},\n\n\t\t//star rating\n\t\tstar: function star(cell, onRendered, success, cancel, editorParams) {\n\t\t\tvar self = this,\n\t\t\t    element = cell.getElement(),\n\t\t\t    value = cell.getValue(),\n\t\t\t    maxStars = element.getElementsByTagName(\"svg\").length || 5,\n\t\t\t    size = element.getElementsByTagName(\"svg\")[0] ? element.getElementsByTagName(\"svg\")[0].getAttribute(\"width\") : 14,\n\t\t\t    stars = [],\n\t\t\t    starsHolder = document.createElement(\"div\"),\n\t\t\t    star = document.createElementNS('http://www.w3.org/2000/svg', \"svg\");\n\n\t\t\t//change star type\n\t\t\tfunction starChange(val) {\n\t\t\t\tstars.forEach(function (star, i) {\n\t\t\t\t\tif (i < val) {\n\t\t\t\t\t\tif (self.table.browser == \"ie\") {\n\t\t\t\t\t\t\tstar.setAttribute(\"class\", \"tabulator-star-active\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstar.classList.replace(\"tabulator-star-inactive\", \"tabulator-star-active\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstar.innerHTML = '<polygon fill=\"#488CE9\" stroke=\"#014AAE\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (self.table.browser == \"ie\") {\n\t\t\t\t\t\t\tstar.setAttribute(\"class\", \"tabulator-star-inactive\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstar.classList.replace(\"tabulator-star-active\", \"tabulator-star-inactive\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstar.innerHTML = '<polygon fill=\"#010155\" stroke=\"#686868\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//build stars\n\t\t\tfunction buildStar(i) {\n\n\t\t\t\tvar starHolder = document.createElement(\"span\");\n\t\t\t\tvar nextStar = star.cloneNode(true);\n\n\t\t\t\tstars.push(nextStar);\n\n\t\t\t\tstarHolder.addEventListener(\"mouseenter\", function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\tstarChange(i);\n\t\t\t\t});\n\n\t\t\t\tstarHolder.addEventListener(\"mousemove\", function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t});\n\n\t\t\t\tstarHolder.addEventListener(\"click\", function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\tsuccess(i);\n\t\t\t\t\telement.blur();\n\t\t\t\t});\n\n\t\t\t\tstarHolder.appendChild(nextStar);\n\t\t\t\tstarsHolder.appendChild(starHolder);\n\t\t\t}\n\n\t\t\t//handle keyboard navigation value change\n\t\t\tfunction changeValue(val) {\n\t\t\t\tvalue = val;\n\t\t\t\tstarChange(val);\n\t\t\t}\n\n\t\t\t//style cell\n\t\t\telement.style.whiteSpace = \"nowrap\";\n\t\t\telement.style.overflow = \"hidden\";\n\t\t\telement.style.textOverflow = \"ellipsis\";\n\n\t\t\t//style holding element\n\t\t\tstarsHolder.style.verticalAlign = \"middle\";\n\t\t\tstarsHolder.style.display = \"inline-block\";\n\t\t\tstarsHolder.style.padding = \"4px\";\n\n\t\t\t//style star\n\t\t\tstar.setAttribute(\"width\", size);\n\t\t\tstar.setAttribute(\"height\", size);\n\t\t\tstar.setAttribute(\"viewBox\", \"0 0 512 512\");\n\t\t\tstar.setAttribute(\"xml:space\", \"preserve\");\n\t\t\tstar.style.padding = \"0 1px\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tstarsHolder.setAttribute(key, starsHolder.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstarsHolder.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//create correct number of stars\n\t\t\tfor (var i = 1; i <= maxStars; i++) {\n\t\t\t\tbuildStar(i);\n\t\t\t}\n\n\t\t\t//ensure value does not exceed number of stars\n\t\t\tvalue = Math.min(parseInt(value), maxStars);\n\n\t\t\t// set initial styling of stars\n\t\t\tstarChange(value);\n\n\t\t\tstarsHolder.addEventListener(\"mousemove\", function (e) {\n\t\t\t\tstarChange(0);\n\t\t\t});\n\n\t\t\tstarsHolder.addEventListener(\"click\", function (e) {\n\t\t\t\tsuccess(0);\n\t\t\t});\n\n\t\t\telement.addEventListener(\"blur\", function (e) {\n\t\t\t\tcancel();\n\t\t\t});\n\n\t\t\t//allow key based navigation\n\t\t\telement.addEventListener(\"keydown\", function (e) {\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 39:\n\t\t\t\t\t\t//right arrow\n\t\t\t\t\t\tchangeValue(value + 1);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 37:\n\t\t\t\t\t\t//left arrow\n\t\t\t\t\t\tchangeValue(value - 1);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\t//enter\n\t\t\t\t\t\tsuccess(value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t//escape\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn starsHolder;\n\t\t},\n\n\t\t//draggable progress bar\n\t\tprogress: function progress(cell, onRendered, success, cancel, editorParams) {\n\t\t\tvar element = cell.getElement(),\n\t\t\t    max = typeof editorParams.max === \"undefined\" ? element.getElementsByTagName(\"div\")[0].getAttribute(\"max\") || 100 : editorParams.max,\n\t\t\t    min = typeof editorParams.min === \"undefined\" ? element.getElementsByTagName(\"div\")[0].getAttribute(\"min\") || 0 : editorParams.min,\n\t\t\t    percent = (max - min) / 100,\n\t\t\t    value = cell.getValue() || 0,\n\t\t\t    handle = document.createElement(\"div\"),\n\t\t\t    bar = document.createElement(\"div\"),\n\t\t\t    mouseDrag,\n\t\t\t    mouseDragWidth;\n\n\t\t\t//set new value\n\t\t\tfunction updateValue() {\n\t\t\t\tvar calcVal = percent * Math.round(bar.offsetWidth / (element.clientWidth / 100)) + min;\n\t\t\t\tsuccess(calcVal);\n\t\t\t\telement.setAttribute(\"aria-valuenow\", calcVal);\n\t\t\t\telement.setAttribute(\"aria-label\", value);\n\t\t\t}\n\n\t\t\t//style handle\n\t\t\thandle.style.position = \"absolute\";\n\t\t\thandle.style.right = \"0\";\n\t\t\thandle.style.top = \"0\";\n\t\t\thandle.style.bottom = \"0\";\n\t\t\thandle.style.width = \"5px\";\n\t\t\thandle.classList.add(\"tabulator-progress-handle\");\n\n\t\t\t//style bar\n\t\t\tbar.style.display = \"inline-block\";\n\t\t\tbar.style.position = \"relative\";\n\t\t\t// bar.style.top = \"8px\";\n\t\t\t// bar.style.bottom = \"8px\";\n\t\t\t// bar.style.left = \"4px\";\n\t\t\t// bar.style.marginRight = \"4px\";\n\t\t\tbar.style.height = \"100%\";\n\t\t\tbar.style.backgroundColor = \"#488CE9\";\n\t\t\tbar.style.maxWidth = \"100%\";\n\t\t\tbar.style.minWidth = \"0%\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tbar.setAttribute(key, bar.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbar.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//style cell\n\t\t\telement.style.padding = \"4px 4px\";\n\n\t\t\t//make sure value is in range\n\t\t\tvalue = Math.min(parseFloat(value), max);\n\t\t\tvalue = Math.max(parseFloat(value), min);\n\n\t\t\t//workout percentage\n\t\t\tvalue = Math.round((value - min) / percent);\n\t\t\t// bar.style.right = value + \"%\";\n\t\t\tbar.style.width = value + \"%\";\n\n\t\t\telement.setAttribute(\"aria-valuemin\", min);\n\t\t\telement.setAttribute(\"aria-valuemax\", max);\n\n\t\t\tbar.appendChild(handle);\n\n\t\t\thandle.addEventListener(\"mousedown\", function (e) {\n\t\t\t\tmouseDrag = e.screenX;\n\t\t\t\tmouseDragWidth = bar.offsetWidth;\n\t\t\t});\n\n\t\t\thandle.addEventListener(\"mouseover\", function () {\n\t\t\t\thandle.style.cursor = \"ew-resize\";\n\t\t\t});\n\n\t\t\telement.addEventListener(\"mousemove\", function (e) {\n\t\t\t\tif (mouseDrag) {\n\t\t\t\t\tbar.style.width = mouseDragWidth + e.screenX - mouseDrag + \"px\";\n\t\t\t\t}\n\t\t\t});\n\n\t\t\telement.addEventListener(\"mouseup\", function (e) {\n\t\t\t\tif (mouseDrag) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\te.stopImmediatePropagation();\n\n\t\t\t\t\tmouseDrag = false;\n\t\t\t\t\tmouseDragWidth = false;\n\n\t\t\t\t\tupdateValue();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//allow key based navigation\n\t\t\telement.addEventListener(\"keydown\", function (e) {\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase 39:\n\t\t\t\t\t\t//right arrow\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tbar.style.width = bar.clientWidth + element.clientWidth / 100 + \"px\";\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 37:\n\t\t\t\t\t\t//left arrow\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tbar.style.width = bar.clientWidth - element.clientWidth / 100 + \"px\";\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 9: //tab\n\t\t\t\t\tcase 13:\n\t\t\t\t\t\t//enter\n\t\t\t\t\t\tupdateValue();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 27:\n\t\t\t\t\t\t//escape\n\t\t\t\t\t\tcancel();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t});\n\n\t\t\telement.addEventListener(\"blur\", function () {\n\t\t\t\tcancel();\n\t\t\t});\n\n\t\t\treturn bar;\n\t\t},\n\n\t\t//checkbox\n\t\ttickCross: function tickCross(cell, onRendered, success, cancel, editorParams) {\n\t\t\tvar value = cell.getValue(),\n\t\t\t    input = document.createElement(\"input\"),\n\t\t\t    tristate = editorParams.tristate,\n\t\t\t    indetermValue = typeof editorParams.indeterminateValue === \"undefined\" ? null : editorParams.indeterminateValue,\n\t\t\t    indetermState = false;\n\n\t\t\tinput.setAttribute(\"type\", \"checkbox\");\n\t\t\tinput.style.marginTop = \"5px\";\n\t\t\tinput.style.boxSizing = \"border-box\";\n\n\t\t\tif (editorParams.elementAttributes && _typeof(editorParams.elementAttributes) == \"object\") {\n\t\t\t\tfor (var key in editorParams.elementAttributes) {\n\t\t\t\t\tif (key.charAt(0) == \"+\") {\n\t\t\t\t\t\tkey = key.slice(1);\n\t\t\t\t\t\tinput.setAttribute(key, input.getAttribute(key) + editorParams.elementAttributes[\"+\" + key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput.setAttribute(key, editorParams.elementAttributes[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinput.value = value;\n\n\t\t\tif (tristate && (typeof value === \"undefined\" || value === indetermValue || value === \"\")) {\n\t\t\t\tindetermState = true;\n\t\t\t\tinput.indeterminate = true;\n\t\t\t}\n\n\t\t\tif (this.table.browser != \"firefox\") {\n\t\t\t\t//prevent blur issue on mac firefox\n\t\t\t\tonRendered(function () {\n\t\t\t\t\tinput.focus({ preventScroll: true });\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tinput.checked = value === true || value === \"true\" || value === \"True\" || value === 1;\n\n\t\t\tfunction setValue(blur) {\n\t\t\t\tif (tristate) {\n\t\t\t\t\tif (!blur) {\n\t\t\t\t\t\tif (input.checked && !indetermState) {\n\t\t\t\t\t\t\tinput.checked = false;\n\t\t\t\t\t\t\tinput.indeterminate = true;\n\t\t\t\t\t\t\tindetermState = true;\n\t\t\t\t\t\t\treturn indetermValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindetermState = false;\n\t\t\t\t\t\t\treturn input.checked;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (indetermState) {\n\t\t\t\t\t\t\treturn indetermValue;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn input.checked;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn input.checked;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//submit new value on blur\n\t\t\tinput.addEventListener(\"change\", function (e) {\n\t\t\t\tsuccess(setValue());\n\t\t\t});\n\n\t\t\tinput.addEventListener(\"blur\", function (e) {\n\t\t\t\tsuccess(setValue(true));\n\t\t\t});\n\n\t\t\t//submit new value on enter\n\t\t\tinput.addEventListener(\"keydown\", function (e) {\n\t\t\t\tif (e.keyCode == 13) {\n\t\t\t\t\tsuccess(setValue());\n\t\t\t\t}\n\t\t\t\tif (e.keyCode == 27) {\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn input;\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"edit\", Edit);\n\n\tvar ExportRow = function ExportRow(type, columns, component, indent) {\n\t\tthis.type = type;\n\t\tthis.columns = columns;\n\t\tthis.component = component || false;\n\t\tthis.indent = indent || 0;\n\t};\n\n\tvar ExportColumn = function ExportColumn(value, component, width, height, depth) {\n\t\tthis.value = value;\n\t\tthis.component = component || false;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = depth;\n\t};\n\n\tvar Export = function Export(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.config = {};\n\t\tthis.cloneTableStyle = true;\n\t\tthis.colVisProp = \"\";\n\t};\n\n\tExport.prototype.generateExportList = function (config, style, range, colVisProp) {\n\t\tthis.cloneTableStyle = style;\n\t\tthis.config = config || {};\n\t\tthis.colVisProp = colVisProp;\n\n\t\tvar headers = this.config.columnHeaders !== false ? this.headersToExportRows(this.generateColumnGroupHeaders()) : [];\n\t\tvar body = this.bodyToExportRows(this.rowLookup(range));\n\n\t\treturn headers.concat(body);\n\t};\n\n\tExport.prototype.genereateTable = function (config, style, range, colVisProp) {\n\t\tvar list = this.generateExportList(config, style, range, colVisProp);\n\n\t\treturn this.genereateTableElement(list);\n\t};\n\n\tExport.prototype.rowLookup = function (range) {\n\t\tvar _this47 = this;\n\n\t\tvar rows = [];\n\n\t\tif (typeof range == \"function\") {\n\t\t\trange.call(this.table).forEach(function (row) {\n\t\t\t\trow = _this47.table.rowManager.findRow(row);\n\n\t\t\t\tif (row) {\n\t\t\t\t\trows.push(row);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tswitch (range) {\n\t\t\t\tcase true:\n\t\t\t\tcase \"visible\":\n\t\t\t\t\trows = this.table.rowManager.getVisibleRows(true);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"all\":\n\t\t\t\t\trows = this.table.rowManager.rows;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"selected\":\n\t\t\t\t\trows = this.table.modules.selectRow.selectedRows;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"active\":\n\t\t\t\tdefault:\n\t\t\t\t\trows = this.table.rowManager.getDisplayRows();\n\t\t\t}\n\t\t}\n\n\t\treturn Object.assign([], rows);\n\t};\n\n\tExport.prototype.generateColumnGroupHeaders = function () {\n\t\tvar _this48 = this;\n\n\t\tvar output = [];\n\n\t\tvar columns = this.config.columnGroups !== false ? this.table.columnManager.columns : this.table.columnManager.columnsByIndex;\n\n\t\tcolumns.forEach(function (column) {\n\t\t\tvar colData = _this48.processColumnGroup(column);\n\n\t\t\tif (colData) {\n\t\t\t\toutput.push(colData);\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tExport.prototype.processColumnGroup = function (column) {\n\t\tvar _this49 = this;\n\n\t\tvar subGroups = column.columns,\n\t\t    maxDepth = 0,\n\t\t    title = column.definition[\"title\" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))] || column.definition.title;\n\n\t\tvar groupData = {\n\t\t\ttitle: title,\n\t\t\tcolumn: column,\n\t\t\tdepth: 1\n\t\t};\n\n\t\tif (subGroups.length) {\n\t\t\tgroupData.subGroups = [];\n\t\t\tgroupData.width = 0;\n\n\t\t\tsubGroups.forEach(function (subGroup) {\n\t\t\t\tvar subGroupData = _this49.processColumnGroup(subGroup);\n\n\t\t\t\tif (subGroupData) {\n\t\t\t\t\tgroupData.width += subGroupData.width;\n\t\t\t\t\tgroupData.subGroups.push(subGroupData);\n\n\t\t\t\t\tif (subGroupData.depth > maxDepth) {\n\t\t\t\t\t\tmaxDepth = subGroupData.depth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tgroupData.depth += maxDepth;\n\n\t\t\tif (!groupData.width) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.columnVisCheck(column)) {\n\t\t\t\tgroupData.width = 1;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn groupData;\n\t};\n\n\tExport.prototype.columnVisCheck = function (column) {\n\t\treturn column.definition[this.colVisProp] !== false && (column.visible || !column.visible && column.definition[this.colVisProp]);\n\t};\n\n\tExport.prototype.headersToExportRows = function (columns) {\n\t\tvar headers = [],\n\t\t    headerDepth = 0,\n\t\t    exportRows = [];\n\n\t\tfunction parseColumnGroup(column, level) {\n\n\t\t\tvar depth = headerDepth - level;\n\n\t\t\tif (typeof headers[level] === \"undefined\") {\n\t\t\t\theaders[level] = [];\n\t\t\t}\n\n\t\t\tcolumn.height = column.subGroups ? 1 : depth - column.depth + 1;\n\n\t\t\theaders[level].push(column);\n\n\t\t\tif (column.height > 1) {\n\t\t\t\tfor (var _i7 = 1; _i7 < column.height; _i7++) {\n\n\t\t\t\t\tif (typeof headers[level + _i7] === \"undefined\") {\n\t\t\t\t\t\theaders[level + _i7] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\theaders[level + _i7].push(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (column.width > 1) {\n\t\t\t\tfor (var _i8 = 1; _i8 < column.width; _i8++) {\n\t\t\t\t\theaders[level].push(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (column.subGroups) {\n\t\t\t\tcolumn.subGroups.forEach(function (subGroup) {\n\t\t\t\t\tparseColumnGroup(subGroup, level + 1);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t//calculate maximum header debth\n\t\tcolumns.forEach(function (column) {\n\t\t\tif (column.depth > headerDepth) {\n\t\t\t\theaderDepth = column.depth;\n\t\t\t}\n\t\t});\n\n\t\tcolumns.forEach(function (column) {\n\t\t\tparseColumnGroup(column, 0);\n\t\t});\n\n\t\theaders.forEach(function (header) {\n\t\t\tvar columns = [];\n\n\t\t\theader.forEach(function (col) {\n\t\t\t\tif (col) {\n\t\t\t\t\tcolumns.push(new ExportColumn(col.title, col.column.getComponent(), col.width, col.height, col.depth));\n\t\t\t\t} else {\n\t\t\t\t\tcolumns.push(null);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texportRows.push(new ExportRow(\"header\", columns));\n\t\t});\n\n\t\treturn exportRows;\n\t};\n\n\tExport.prototype.bodyToExportRows = function (rows) {\n\t\tvar _this50 = this;\n\n\t\tvar columns = [];\n\t\tvar exportRows = [];\n\n\t\tthis.table.columnManager.columnsByIndex.forEach(function (column) {\n\t\t\tif (_this50.columnVisCheck(column)) {\n\t\t\t\tcolumns.push(column.getComponent());\n\t\t\t}\n\t\t});\n\n\t\tif (this.config.columnCalcs !== false && this.table.modExists(\"columnCalcs\")) {\n\t\t\tif (this.table.modules.columnCalcs.topInitialized) {\n\t\t\t\trows.unshift(this.table.modules.columnCalcs.topRow);\n\t\t\t}\n\n\t\t\tif (this.table.modules.columnCalcs.botInitialized) {\n\t\t\t\trows.push(this.table.modules.columnCalcs.botRow);\n\t\t\t}\n\t\t}\n\n\t\trows = rows.filter(function (row) {\n\t\t\tswitch (row.type) {\n\t\t\t\tcase \"group\":\n\t\t\t\t\treturn _this50.config.rowGroups !== false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"calc\":\n\t\t\t\t\treturn _this50.config.columnCalcs !== false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"row\":\n\t\t\t\t\treturn !(_this50.table.options.dataTree && _this50.config.dataTree === false && row.modules.dataTree.parent);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\trows.forEach(function (row, i) {\n\t\t\tvar rowData = row.getData(_this50.colVisProp);\n\t\t\tvar exportCols = [];\n\t\t\tvar indent = 0;\n\n\t\t\tswitch (row.type) {\n\t\t\t\tcase \"group\":\n\t\t\t\t\tindent = row.level;\n\t\t\t\t\texportCols.push(new ExportColumn(row.key, row.getComponent(), columns.length, 1));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"calc\":\n\t\t\t\tcase \"row\":\n\t\t\t\t\tcolumns.forEach(function (col) {\n\t\t\t\t\t\texportCols.push(new ExportColumn(col._column.getFieldValue(rowData), col, 1, 1));\n\t\t\t\t\t});\n\n\t\t\t\t\tif (_this50.table.options.dataTree && _this50.config.dataTree !== false) {\n\t\t\t\t\t\tindent = row.modules.dataTree.index;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\texportRows.push(new ExportRow(row.type, exportCols, row.getComponent(), indent));\n\t\t});\n\n\t\treturn exportRows;\n\t};\n\n\tExport.prototype.genereateTableElement = function (list) {\n\t\tvar _this51 = this;\n\n\t\tvar table = document.createElement(\"table\"),\n\t\t    headerEl = document.createElement(\"thead\"),\n\t\t    bodyEl = document.createElement(\"tbody\"),\n\t\t    styles = this.lookupTableStyles(),\n\t\t    rowFormatter = this.table.options[\"rowFormatter\" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))],\n\t\t    setup = {};\n\n\t\tsetup.rowFormatter = rowFormatter !== null ? rowFormatter : this.table.options.rowFormatter;\n\n\t\tif (this.table.options.dataTree && this.config.dataTree !== false && this.table.modExists(\"columnCalcs\")) {\n\t\t\tsetup.treeElementField = this.table.modules.dataTree.elementField;\n\t\t}\n\n\t\t//assign group header formatter\n\t\tsetup.groupHeader = this.table.options[\"groupHeader\" + (this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1))];\n\n\t\tif (setup.groupHeader && !Array.isArray(setup.groupHeader)) {\n\t\t\tsetup.groupHeader = [setup.groupHeader];\n\t\t}\n\n\t\ttable.classList.add(\"tabulator-print-table\");\n\n\t\tthis.mapElementStyles(this.table.columnManager.getHeadersElement(), headerEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n\n\t\tif (list.length > 1000) {\n\t\t\tconsole.warn(\"It may take a long time to render an HTML table with more than 1000 rows\");\n\t\t}\n\n\t\tlist.forEach(function (row, i) {\n\t\t\tswitch (row.type) {\n\t\t\t\tcase \"header\":\n\t\t\t\t\theaderEl.appendChild(_this51.genereateHeaderElement(row, setup, styles));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"group\":\n\t\t\t\t\tbodyEl.appendChild(_this51.genereateGroupElement(row, setup, styles));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"calc\":\n\t\t\t\t\tbodyEl.appendChild(_this51.genereateCalcElement(row, setup, styles));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"row\":\n\t\t\t\t\tvar rowEl = _this51.genereateRowElement(row, setup, styles);\n\t\t\t\t\t_this51.mapElementStyles(i % 2 && styles.evenRow ? styles.evenRow : styles.oddRow, rowEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n\t\t\t\t\tbodyEl.appendChild(rowEl);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tif (headerEl.innerHTML) {\n\t\t\ttable.appendChild(headerEl);\n\t\t}\n\n\t\ttable.appendChild(bodyEl);\n\n\t\tthis.mapElementStyles(this.table.element, table, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\"]);\n\t\treturn table;\n\t};\n\n\tExport.prototype.lookupTableStyles = function () {\n\t\tvar styles = {};\n\n\t\t//lookup row styles\n\t\tif (this.cloneTableStyle && window.getComputedStyle) {\n\t\t\tstyles.oddRow = this.table.element.querySelector(\".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)\");\n\t\t\tstyles.evenRow = this.table.element.querySelector(\".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)\");\n\t\t\tstyles.calcRow = this.table.element.querySelector(\".tabulator-row.tabulator-calcs\");\n\t\t\tstyles.firstRow = this.table.element.querySelector(\".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)\");\n\t\t\tstyles.firstGroup = this.table.element.getElementsByClassName(\"tabulator-group\")[0];\n\n\t\t\tif (styles.firstRow) {\n\t\t\t\tstyles.styleCells = styles.firstRow.getElementsByClassName(\"tabulator-cell\");\n\t\t\t\tstyles.firstCell = styles.styleCells[0];\n\t\t\t\tstyles.lastCell = styles.styleCells[styles.styleCells.length - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn styles;\n\t};\n\n\tExport.prototype.genereateHeaderElement = function (row, setup, styles) {\n\t\tvar _this52 = this;\n\n\t\tvar rowEl = document.createElement(\"tr\");\n\n\t\trow.columns.forEach(function (column) {\n\t\t\tif (column) {\n\t\t\t\tvar cellEl = document.createElement(\"th\");\n\t\t\t\tvar classNames = column.component._column.definition.cssClass ? column.component._column.definition.cssClass.split(\" \") : [];\n\n\t\t\t\tcellEl.colSpan = column.width;\n\t\t\t\tcellEl.rowSpan = column.height;\n\n\t\t\t\tcellEl.innerHTML = column.value;\n\n\t\t\t\tif (_this52.cloneTableStyle) {\n\t\t\t\t\tcellEl.style.boxSizing = \"border-box\";\n\t\t\t\t}\n\n\t\t\t\tclassNames.forEach(function (className) {\n\t\t\t\t\tcellEl.classList.add(className);\n\t\t\t\t});\n\n\t\t\t\t_this52.mapElementStyles(column.component.getElement(), cellEl, [\"text-align\", \"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n\t\t\t\t_this52.mapElementStyles(column.component._column.contentElement, cellEl, [\"padding-top\", \"padding-left\", \"padding-right\", \"padding-bottom\"]);\n\n\t\t\t\tif (column.component._column.visible) {\n\t\t\t\t\t_this52.mapElementStyles(column.component.getElement(), cellEl, [\"width\"]);\n\t\t\t\t} else {\n\t\t\t\t\tif (column.component._column.definition.width) {\n\t\t\t\t\t\tcellEl.style.width = column.component._column.definition.width + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (column.component._column.parent) {\n\t\t\t\t\t_this52.mapElementStyles(column.component._column.parent.groupElement, cellEl, [\"border-top\"]);\n\t\t\t\t}\n\n\t\t\t\trowEl.appendChild(cellEl);\n\t\t\t}\n\t\t});\n\n\t\treturn rowEl;\n\t};\n\n\tExport.prototype.genereateGroupElement = function (row, setup, styles) {\n\n\t\tvar rowEl = document.createElement(\"tr\"),\n\t\t    cellEl = document.createElement(\"td\"),\n\t\t    group = row.columns[0];\n\n\t\trowEl.classList.add(\"tabulator-print-table-row\");\n\n\t\tif (setup.groupHeader && setup.groupHeader[row.indent]) {\n\t\t\tgroup.value = setup.groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);\n\t\t} else {\n\t\t\tif (setup.groupHeader === false) {\n\t\t\t\tgroup.value = group.value;\n\t\t\t} else {\n\t\t\t\tgroup.value = row.component._group.generator(group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);\n\t\t\t}\n\t\t}\n\n\t\tcellEl.colSpan = group.width;\n\t\tcellEl.innerHTML = group.value;\n\n\t\trowEl.classList.add(\"tabulator-print-table-group\");\n\t\trowEl.classList.add(\"tabulator-group-level-\" + row.indent);\n\n\t\tif (group.component.getVisibility()) {\n\t\t\trowEl.classList.add(\"tabulator-group-visible\");\n\t\t}\n\n\t\tthis.mapElementStyles(styles.firstGroup, rowEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n\t\tthis.mapElementStyles(styles.firstGroup, cellEl, [\"padding-top\", \"padding-left\", \"padding-right\", \"padding-bottom\"]);\n\n\t\trowEl.appendChild(cellEl);\n\n\t\treturn rowEl;\n\t};\n\n\tExport.prototype.genereateCalcElement = function (row, setup, styles) {\n\t\tvar rowEl = this.genereateRowElement(row, setup, styles);\n\n\t\trowEl.classList.add(\"tabulator-print-table-calcs\");\n\t\tthis.mapElementStyles(styles.calcRow, rowEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n\n\t\treturn rowEl;\n\t};\n\n\tExport.prototype.genereateRowElement = function (row, setup, styles) {\n\t\tvar _this53 = this;\n\n\t\tvar rowEl = document.createElement(\"tr\");\n\n\t\trowEl.classList.add(\"tabulator-print-table-row\");\n\n\t\trow.columns.forEach(function (col) {\n\n\t\t\tif (col) {\n\t\t\t\tvar cellEl = document.createElement(\"td\"),\n\t\t\t\t    column = col.component._column,\n\t\t\t\t    value = col.value;\n\n\t\t\t\tvar cellWrapper = {\n\t\t\t\t\tmodules: {},\n\t\t\t\t\tgetValue: function getValue() {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t},\n\t\t\t\t\tgetField: function getField() {\n\t\t\t\t\t\treturn column.definition.field;\n\t\t\t\t\t},\n\t\t\t\t\tgetElement: function getElement() {\n\t\t\t\t\t\treturn cellEl;\n\t\t\t\t\t},\n\t\t\t\t\tgetColumn: function getColumn() {\n\t\t\t\t\t\treturn column.getComponent();\n\t\t\t\t\t},\n\t\t\t\t\tgetData: function getData() {\n\t\t\t\t\t\treturn rowData;\n\t\t\t\t\t},\n\t\t\t\t\tgetRow: function getRow() {\n\t\t\t\t\t\treturn row.getComponent();\n\t\t\t\t\t},\n\t\t\t\t\tgetComponent: function getComponent() {\n\t\t\t\t\t\treturn cellWrapper;\n\t\t\t\t\t},\n\t\t\t\t\tcolumn: column\n\t\t\t\t};\n\n\t\t\t\tvar classNames = column.definition.cssClass ? column.definition.cssClass.split(\" \") : [];\n\n\t\t\t\tclassNames.forEach(function (className) {\n\t\t\t\t\tcellEl.classList.add(className);\n\t\t\t\t});\n\n\t\t\t\tif (_this53.table.modExists(\"format\") && _this53.config.formatCells !== false) {\n\t\t\t\t\tvalue = _this53.table.modules.format.formatExportValue(cellWrapper, _this53.colVisProp);\n\t\t\t\t} else {\n\t\t\t\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\t\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\t\tvalue = JSON.stringify(value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"undefined\":\n\t\t\t\t\t\tcase \"null\":\n\t\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tvalue = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value instanceof Node) {\n\t\t\t\t\tcellEl.appendChild(value);\n\t\t\t\t} else {\n\t\t\t\t\tcellEl.innerHTML = value;\n\t\t\t\t}\n\n\t\t\t\tif (styles.firstCell) {\n\t\t\t\t\t_this53.mapElementStyles(styles.firstCell, cellEl, [\"padding-top\", \"padding-left\", \"padding-right\", \"padding-bottom\", \"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n\n\t\t\t\t\tif (column.definition.align) {\n\t\t\t\t\t\tcellEl.style.textAlign = column.definition.align;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (_this53.table.options.dataTree && _this53.config.dataTree !== false) {\n\t\t\t\t\tif (setup.treeElementField && setup.treeElementField == column.field || !setup.treeElementField && i == 0) {\n\t\t\t\t\t\tif (row.component._row.modules.dataTree.controlEl) {\n\t\t\t\t\t\t\tcellEl.insertBefore(row.component._row.modules.dataTree.controlEl.cloneNode(true), cellEl.firstChild);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (row.component._row.modules.dataTree.branchEl) {\n\t\t\t\t\t\t\tcellEl.insertBefore(row.component._row.modules.dataTree.branchEl.cloneNode(true), cellEl.firstChild);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\trowEl.appendChild(cellEl);\n\n\t\t\t\tif (cellWrapper.modules.format && cellWrapper.modules.format.renderedCallback) {\n\t\t\t\t\tcellWrapper.modules.format.renderedCallback();\n\t\t\t\t}\n\n\t\t\t\tif (setup.rowFormatter && _this53.config.formatCells !== false) {\n\t\t\t\t\tvar rowComponent = row.getComponent();\n\n\t\t\t\t\trowComponent.getElement = function () {\n\t\t\t\t\t\treturn rowEl;\n\t\t\t\t\t};\n\n\t\t\t\t\tsetup.rowFormatter(rowComponent);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn rowEl;\n\t};\n\n\tExport.prototype.genereateHTMLTable = function (list) {\n\t\tvar holder = document.createElement(\"div\");\n\n\t\tholder.appendChild(this.genereateTableElement(list));\n\n\t\treturn holder.innerHTML;\n\t};\n\n\tExport.prototype.getHtml = function (visible, style, config, colVisProp) {\n\t\tvar list = this.generateExportList(config || this.table.options.htmlOutputConfig, style, visible, colVisProp || \"htmlOutput\");\n\n\t\treturn this.genereateHTMLTable(list);\n\t};\n\n\tExport.prototype.mapElementStyles = function (from, to, props) {\n\t\tif (this.cloneTableStyle && from && to) {\n\n\t\t\tvar lookup = {\n\t\t\t\t\"background-color\": \"backgroundColor\",\n\t\t\t\t\"color\": \"fontColor\",\n\t\t\t\t\"width\": \"width\",\n\t\t\t\t\"font-weight\": \"fontWeight\",\n\t\t\t\t\"font-family\": \"fontFamily\",\n\t\t\t\t\"font-size\": \"fontSize\",\n\t\t\t\t\"text-align\": \"textAlign\",\n\t\t\t\t\"border-top\": \"borderTop\",\n\t\t\t\t\"border-left\": \"borderLeft\",\n\t\t\t\t\"border-right\": \"borderRight\",\n\t\t\t\t\"border-bottom\": \"borderBottom\",\n\t\t\t\t\"padding-top\": \"paddingTop\",\n\t\t\t\t\"padding-left\": \"paddingLeft\",\n\t\t\t\t\"padding-right\": \"paddingRight\",\n\t\t\t\t\"padding-bottom\": \"paddingBottom\"\n\t\t\t};\n\n\t\t\tif (window.getComputedStyle) {\n\t\t\t\tvar fromStyle = window.getComputedStyle(from);\n\n\t\t\t\tprops.forEach(function (prop) {\n\t\t\t\t\tto.style[lookup[prop]] = fromStyle.getPropertyValue(prop);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"export\", Export);\n\n\tvar Filter = function Filter(table) {\n\n\t\tthis.table = table; //hold Tabulator object\n\n\t\tthis.filterList = []; //hold filter list\n\t\tthis.headerFilters = {}; //hold column filters\n\t\tthis.headerFilterColumns = []; //hold columns that use header filters\n\n\t\tthis.prevHeaderFilterChangeCheck = \"\";\n\t\tthis.prevHeaderFilterChangeCheck = \"{}\";\n\n\t\tthis.changed = false; //has filtering changed since last render\n\t};\n\n\t//initialize column header filter\n\tFilter.prototype.initializeColumn = function (column, value) {\n\t\tvar self = this,\n\t\t    field = column.getField(),\n\t\t    params;\n\n\t\t//handle successfull value change\n\t\tfunction success(value) {\n\t\t\tvar filterType = column.modules.filter.tagType == \"input\" && column.modules.filter.attrType == \"text\" || column.modules.filter.tagType == \"textarea\" ? \"partial\" : \"match\",\n\t\t\t    type = \"\",\n\t\t\t    filterChangeCheck = \"\",\n\t\t\t    filterFunc;\n\n\t\t\tif (typeof column.modules.filter.prevSuccess === \"undefined\" || column.modules.filter.prevSuccess !== value) {\n\n\t\t\t\tcolumn.modules.filter.prevSuccess = value;\n\n\t\t\t\tif (!column.modules.filter.emptyFunc(value)) {\n\t\t\t\t\tcolumn.modules.filter.value = value;\n\n\t\t\t\t\tswitch (_typeof(column.definition.headerFilterFunc)) {\n\t\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\t\tif (self.filters[column.definition.headerFilterFunc]) {\n\t\t\t\t\t\t\t\ttype = column.definition.headerFilterFunc;\n\t\t\t\t\t\t\t\tfilterFunc = function filterFunc(data) {\n\t\t\t\t\t\t\t\t\tvar params = column.definition.headerFilterFuncParams || {};\n\t\t\t\t\t\t\t\t\tvar fieldVal = column.getFieldValue(data);\n\n\t\t\t\t\t\t\t\t\tparams = typeof params === \"function\" ? params(value, fieldVal, data) : params;\n\n\t\t\t\t\t\t\t\t\treturn self.filters[column.definition.headerFilterFunc](value, fieldVal, data, params);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn(\"Header Filter Error - Matching filter function not found: \", column.definition.headerFilterFunc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\t\tfilterFunc = function filterFunc(data) {\n\t\t\t\t\t\t\t\tvar params = column.definition.headerFilterFuncParams || {};\n\t\t\t\t\t\t\t\tvar fieldVal = column.getFieldValue(data);\n\n\t\t\t\t\t\t\t\tparams = typeof params === \"function\" ? params(value, fieldVal, data) : params;\n\n\t\t\t\t\t\t\t\treturn column.definition.headerFilterFunc(value, fieldVal, data, params);\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\ttype = filterFunc;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!filterFunc) {\n\t\t\t\t\t\tswitch (filterType) {\n\t\t\t\t\t\t\tcase \"partial\":\n\t\t\t\t\t\t\t\tfilterFunc = function filterFunc(data) {\n\t\t\t\t\t\t\t\t\tvar colVal = column.getFieldValue(data);\n\n\t\t\t\t\t\t\t\t\tif (typeof colVal !== 'undefined' && colVal !== null) {\n\t\t\t\t\t\t\t\t\t\treturn String(colVal).toLowerCase().indexOf(String(value).toLowerCase()) > -1;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\ttype = \"like\";\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tfilterFunc = function filterFunc(data) {\n\t\t\t\t\t\t\t\t\treturn column.getFieldValue(data) == value;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\ttype = \"=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tself.headerFilters[field] = { value: value, func: filterFunc, type: type, params: params || {} };\n\t\t\t\t} else {\n\t\t\t\t\tdelete self.headerFilters[field];\n\t\t\t\t}\n\n\t\t\t\tfilterChangeCheck = JSON.stringify(self.headerFilters);\n\n\t\t\t\tif (self.prevHeaderFilterChangeCheck !== filterChangeCheck) {\n\t\t\t\t\tself.prevHeaderFilterChangeCheck = filterChangeCheck;\n\n\t\t\t\t\tself.changed = true;\n\t\t\t\t\tself.table.rowManager.filterRefresh();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tcolumn.modules.filter = {\n\t\t\tsuccess: success,\n\t\t\tattrType: false,\n\t\t\ttagType: false,\n\t\t\temptyFunc: false\n\t\t};\n\n\t\tthis.generateHeaderFilterElement(column);\n\t};\n\n\tFilter.prototype.generateHeaderFilterElement = function (column, initialValue, reinitialize) {\n\t\tvar _this54 = this;\n\n\t\tvar self = this,\n\t\t    success = column.modules.filter.success,\n\t\t    field = column.getField(),\n\t\t    filterElement,\n\t\t    editor,\n\t\t    editorElement,\n\t\t    cellWrapper,\n\t\t    typingTimer,\n\t\t    searchTrigger,\n\t\t    params;\n\n\t\t//handle aborted edit\n\t\tfunction cancel() {}\n\n\t\tif (column.modules.filter.headerElement && column.modules.filter.headerElement.parentNode) {\n\t\t\tcolumn.contentElement.removeChild(column.modules.filter.headerElement.parentNode);\n\t\t}\n\n\t\tif (field) {\n\n\t\t\t//set empty value function\n\t\t\tcolumn.modules.filter.emptyFunc = column.definition.headerFilterEmptyCheck || function (value) {\n\t\t\t\treturn !value && value !== \"0\";\n\t\t\t};\n\n\t\t\tfilterElement = document.createElement(\"div\");\n\t\t\tfilterElement.classList.add(\"tabulator-header-filter\");\n\n\t\t\t//set column editor\n\t\t\tswitch (_typeof(column.definition.headerFilter)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tif (self.table.modules.edit.editors[column.definition.headerFilter]) {\n\t\t\t\t\t\teditor = self.table.modules.edit.editors[column.definition.headerFilter];\n\n\t\t\t\t\t\tif ((column.definition.headerFilter === \"tick\" || column.definition.headerFilter === \"tickCross\") && !column.definition.headerFilterEmptyCheck) {\n\t\t\t\t\t\t\tcolumn.modules.filter.emptyFunc = function (value) {\n\t\t\t\t\t\t\t\treturn value !== true && value !== false;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Filter Error - Cannot build header filter, No such editor found: \", column.definition.editor);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"function\":\n\t\t\t\t\teditor = column.definition.headerFilter;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\tif (column.modules.edit && column.modules.edit.editor) {\n\t\t\t\t\t\teditor = column.modules.edit.editor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (column.definition.formatter && self.table.modules.edit.editors[column.definition.formatter]) {\n\t\t\t\t\t\t\teditor = self.table.modules.edit.editors[column.definition.formatter];\n\n\t\t\t\t\t\t\tif ((column.definition.formatter === \"tick\" || column.definition.formatter === \"tickCross\") && !column.definition.headerFilterEmptyCheck) {\n\t\t\t\t\t\t\t\tcolumn.modules.filter.emptyFunc = function (value) {\n\t\t\t\t\t\t\t\t\treturn value !== true && value !== false;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teditor = self.table.modules.edit.editors[\"input\"];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (editor) {\n\n\t\t\t\tcellWrapper = {\n\t\t\t\t\tgetValue: function getValue() {\n\t\t\t\t\t\treturn typeof initialValue !== \"undefined\" ? initialValue : \"\";\n\t\t\t\t\t},\n\t\t\t\t\tgetField: function getField() {\n\t\t\t\t\t\treturn column.definition.field;\n\t\t\t\t\t},\n\t\t\t\t\tgetElement: function getElement() {\n\t\t\t\t\t\treturn filterElement;\n\t\t\t\t\t},\n\t\t\t\t\tgetColumn: function getColumn() {\n\t\t\t\t\t\treturn column.getComponent();\n\t\t\t\t\t},\n\t\t\t\t\tgetRow: function getRow() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tnormalizeHeight: function normalizeHeight() {}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tparams = column.definition.headerFilterParams || {};\n\n\t\t\t\tparams = typeof params === \"function\" ? params.call(self.table) : params;\n\n\t\t\t\teditorElement = editor.call(this.table.modules.edit, cellWrapper, function () {}, success, cancel, params);\n\n\t\t\t\tif (!editorElement) {\n\t\t\t\t\tconsole.warn(\"Filter Error - Cannot add filter to \" + field + \" column, editor returned a value of false\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!(editorElement instanceof Node)) {\n\t\t\t\t\tconsole.warn(\"Filter Error - Cannot add filter to \" + field + \" column, editor should return an instance of Node, the editor returned:\", editorElement);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//set Placeholder Text\n\t\t\t\tif (field) {\n\t\t\t\t\tself.table.modules.localize.bind(\"headerFilters|columns|\" + column.definition.field, function (value) {\n\t\t\t\t\t\teditorElement.setAttribute(\"placeholder\", typeof value !== \"undefined\" && value ? value : self.table.modules.localize.getText(\"headerFilters|default\"));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tself.table.modules.localize.bind(\"headerFilters|default\", function (value) {\n\t\t\t\t\t\teditorElement.setAttribute(\"placeholder\", typeof self.column.definition.headerFilterPlaceholder !== \"undefined\" && self.column.definition.headerFilterPlaceholder ? self.column.definition.headerFilterPlaceholder : value);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t//focus on element on click\n\t\t\t\teditorElement.addEventListener(\"click\", function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\teditorElement.focus();\n\t\t\t\t});\n\n\t\t\t\teditorElement.addEventListener(\"focus\", function (e) {\n\t\t\t\t\tvar left = _this54.table.columnManager.element.scrollLeft;\n\n\t\t\t\t\tif (left !== _this54.table.rowManager.element.scrollLeft) {\n\t\t\t\t\t\t_this54.table.rowManager.scrollHorizontal(left);\n\t\t\t\t\t\t_this54.table.columnManager.scrollHorizontal(left);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//live update filters as user types\n\t\t\t\ttypingTimer = false;\n\n\t\t\t\tsearchTrigger = function searchTrigger(e) {\n\t\t\t\t\tif (typingTimer) {\n\t\t\t\t\t\tclearTimeout(typingTimer);\n\t\t\t\t\t}\n\n\t\t\t\t\ttypingTimer = setTimeout(function () {\n\t\t\t\t\t\tsuccess(editorElement.value);\n\t\t\t\t\t}, self.table.options.headerFilterLiveFilterDelay);\n\t\t\t\t};\n\n\t\t\t\tcolumn.modules.filter.headerElement = editorElement;\n\t\t\t\tcolumn.modules.filter.attrType = editorElement.hasAttribute(\"type\") ? editorElement.getAttribute(\"type\").toLowerCase() : \"\";\n\t\t\t\tcolumn.modules.filter.tagType = editorElement.tagName.toLowerCase();\n\n\t\t\t\tif (column.definition.headerFilterLiveFilter !== false) {\n\n\t\t\t\t\tif (!(column.definition.headerFilter === 'autocomplete' || column.definition.headerFilter === 'tickCross' || (column.definition.editor === 'autocomplete' || column.definition.editor === 'tickCross') && column.definition.headerFilter === true)) {\n\t\t\t\t\t\teditorElement.addEventListener(\"keyup\", searchTrigger);\n\t\t\t\t\t\teditorElement.addEventListener(\"search\", searchTrigger);\n\n\t\t\t\t\t\t//update number filtered columns on change\n\t\t\t\t\t\tif (column.modules.filter.attrType == \"number\") {\n\t\t\t\t\t\t\teditorElement.addEventListener(\"change\", function (e) {\n\t\t\t\t\t\t\t\tsuccess(editorElement.value);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//change text inputs to search inputs to allow for clearing of field\n\t\t\t\t\t\tif (column.modules.filter.attrType == \"text\" && this.table.browser !== \"ie\") {\n\t\t\t\t\t\t\teditorElement.setAttribute(\"type\", \"search\");\n\t\t\t\t\t\t\t// editorElement.off(\"change blur\"); //prevent blur from triggering filter and preventing selection click\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//prevent input and select elements from propegating click to column sorters etc\n\t\t\t\t\tif (column.modules.filter.tagType == \"input\" || column.modules.filter.tagType == \"select\" || column.modules.filter.tagType == \"textarea\") {\n\t\t\t\t\t\teditorElement.addEventListener(\"mousedown\", function (e) {\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfilterElement.appendChild(editorElement);\n\n\t\t\t\tcolumn.contentElement.appendChild(filterElement);\n\n\t\t\t\tif (!reinitialize) {\n\t\t\t\t\tself.headerFilterColumns.push(column);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"Filter Error - Cannot add header filter, column has no field set:\", column.definition.title);\n\t\t}\n\t};\n\n\t//hide all header filter elements (used to ensure correct column widths in \"fitData\" layout mode)\n\tFilter.prototype.hideHeaderFilterElements = function () {\n\t\tthis.headerFilterColumns.forEach(function (column) {\n\t\t\tif (column.modules.filter && column.modules.filter.headerElement) {\n\t\t\t\tcolumn.modules.filter.headerElement.style.display = 'none';\n\t\t\t}\n\t\t});\n\t};\n\n\t//show all header filter elements (used to ensure correct column widths in \"fitData\" layout mode)\n\tFilter.prototype.showHeaderFilterElements = function () {\n\t\tthis.headerFilterColumns.forEach(function (column) {\n\t\t\tif (column.modules.filter && column.modules.filter.headerElement) {\n\t\t\t\tcolumn.modules.filter.headerElement.style.display = '';\n\t\t\t}\n\t\t});\n\t};\n\n\t//programatically set focus of header filter\n\tFilter.prototype.setHeaderFilterFocus = function (column) {\n\t\tif (column.modules.filter && column.modules.filter.headerElement) {\n\t\t\tcolumn.modules.filter.headerElement.focus();\n\t\t} else {\n\t\t\tconsole.warn(\"Column Filter Focus Error - No header filter set on column:\", column.getField());\n\t\t}\n\t};\n\n\t//programmatically get value of header filter\n\tFilter.prototype.getHeaderFilterValue = function (column) {\n\t\tif (column.modules.filter && column.modules.filter.headerElement) {\n\t\t\treturn column.modules.filter.headerElement.value;\n\t\t} else {\n\t\t\tconsole.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n\t\t}\n\t};\n\n\t//programatically set value of header filter\n\tFilter.prototype.setHeaderFilterValue = function (column, value) {\n\t\tif (column) {\n\t\t\tif (column.modules.filter && column.modules.filter.headerElement) {\n\t\t\t\tthis.generateHeaderFilterElement(column, value, true);\n\t\t\t\tcolumn.modules.filter.success(value);\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n\t\t\t}\n\t\t}\n\t};\n\n\tFilter.prototype.reloadHeaderFilter = function (column) {\n\t\tif (column) {\n\t\t\tif (column.modules.filter && column.modules.filter.headerElement) {\n\t\t\t\tthis.generateHeaderFilterElement(column, column.modules.filter.value, true);\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n\t\t\t}\n\t\t}\n\t};\n\n\t//check if the filters has changed since last use\n\tFilter.prototype.hasChanged = function () {\n\t\tvar changed = this.changed;\n\t\tthis.changed = false;\n\t\treturn changed;\n\t};\n\n\t//set standard filters\n\tFilter.prototype.setFilter = function (field, type, value, params) {\n\t\tvar self = this;\n\n\t\tself.filterList = [];\n\n\t\tif (!Array.isArray(field)) {\n\t\t\tfield = [{ field: field, type: type, value: value, params: params }];\n\t\t}\n\n\t\tself.addFilter(field);\n\t};\n\n\t//add filter to array\n\tFilter.prototype.addFilter = function (field, type, value, params) {\n\t\tvar self = this;\n\n\t\tif (!Array.isArray(field)) {\n\t\t\tfield = [{ field: field, type: type, value: value, params: params }];\n\t\t}\n\n\t\tfield.forEach(function (filter) {\n\n\t\t\tfilter = self.findFilter(filter);\n\n\t\t\tif (filter) {\n\t\t\t\tself.filterList.push(filter);\n\n\t\t\t\tself.changed = true;\n\t\t\t}\n\t\t});\n\n\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.filter) {\n\t\t\tthis.table.modules.persistence.save(\"filter\");\n\t\t}\n\t};\n\n\tFilter.prototype.findFilter = function (filter) {\n\t\tvar self = this,\n\t\t    column;\n\n\t\tif (Array.isArray(filter)) {\n\t\t\treturn this.findSubFilters(filter);\n\t\t}\n\n\t\tvar filterFunc = false;\n\n\t\tif (typeof filter.field == \"function\") {\n\t\t\tfilterFunc = function filterFunc(data) {\n\t\t\t\treturn filter.field(data, filter.type || {}); // pass params to custom filter function\n\t\t\t};\n\t\t} else {\n\n\t\t\tif (self.filters[filter.type]) {\n\n\t\t\t\tcolumn = self.table.columnManager.getColumnByField(filter.field);\n\n\t\t\t\tif (column) {\n\t\t\t\t\tfilterFunc = function filterFunc(data) {\n\t\t\t\t\t\treturn self.filters[filter.type](filter.value, column.getFieldValue(data), data, filter.params || {});\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tfilterFunc = function filterFunc(data) {\n\t\t\t\t\t\treturn self.filters[filter.type](filter.value, data[filter.field], data, filter.params || {});\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Filter Error - No such filter type found, ignoring: \", filter.type);\n\t\t\t}\n\t\t}\n\n\t\tfilter.func = filterFunc;\n\n\t\treturn filter.func ? filter : false;\n\t};\n\n\tFilter.prototype.findSubFilters = function (filters) {\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\tfilters.forEach(function (filter) {\n\t\t\tfilter = self.findFilter(filter);\n\n\t\t\tif (filter) {\n\t\t\t\toutput.push(filter);\n\t\t\t}\n\t\t});\n\n\t\treturn output.length ? output : false;\n\t};\n\n\t//get all filters\n\tFilter.prototype.getFilters = function (all, ajax) {\n\t\tvar output = [];\n\n\t\tif (all) {\n\t\t\toutput = this.getHeaderFilters();\n\t\t}\n\n\t\tif (ajax) {\n\t\t\toutput.forEach(function (item) {\n\t\t\t\tif (typeof item.type == \"function\") {\n\t\t\t\t\titem.type = \"function\";\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\toutput = output.concat(this.filtersToArray(this.filterList, ajax));\n\n\t\treturn output;\n\t};\n\n\t//filter to Object\n\tFilter.prototype.filtersToArray = function (filterList, ajax) {\n\t\tvar _this55 = this;\n\n\t\tvar output = [];\n\n\t\tfilterList.forEach(function (filter) {\n\t\t\tvar item;\n\n\t\t\tif (Array.isArray(filter)) {\n\t\t\t\toutput.push(_this55.filtersToArray(filter, ajax));\n\t\t\t} else {\n\t\t\t\titem = { field: filter.field, type: filter.type, value: filter.value };\n\n\t\t\t\tif (ajax) {\n\t\t\t\t\tif (typeof item.type == \"function\") {\n\t\t\t\t\t\titem.type = \"function\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toutput.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\t//get all filters\n\tFilter.prototype.getHeaderFilters = function () {\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\tfor (var key in this.headerFilters) {\n\t\t\toutput.push({ field: key, type: this.headerFilters[key].type, value: this.headerFilters[key].value });\n\t\t}\n\n\t\treturn output;\n\t};\n\n\t//remove filter from array\n\tFilter.prototype.removeFilter = function (field, type, value) {\n\t\tvar self = this;\n\n\t\tif (!Array.isArray(field)) {\n\t\t\tfield = [{ field: field, type: type, value: value }];\n\t\t}\n\n\t\tfield.forEach(function (filter) {\n\t\t\tvar index = -1;\n\n\t\t\tif (_typeof(filter.field) == \"object\") {\n\t\t\t\tindex = self.filterList.findIndex(function (element) {\n\t\t\t\t\treturn filter === element;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tindex = self.filterList.findIndex(function (element) {\n\t\t\t\t\treturn filter.field === element.field && filter.type === element.type && filter.value === element.value;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (index > -1) {\n\t\t\t\tself.filterList.splice(index, 1);\n\t\t\t\tself.changed = true;\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Filter Error - No matching filter type found, ignoring: \", filter.type);\n\t\t\t}\n\t\t});\n\n\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.filter) {\n\t\t\tthis.table.modules.persistence.save(\"filter\");\n\t\t}\n\t};\n\n\t//clear filters\n\tFilter.prototype.clearFilter = function (all) {\n\t\tthis.filterList = [];\n\n\t\tif (all) {\n\t\t\tthis.clearHeaderFilter();\n\t\t}\n\n\t\tthis.changed = true;\n\n\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.filter) {\n\t\t\tthis.table.modules.persistence.save(\"filter\");\n\t\t}\n\t};\n\n\t//clear header filters\n\tFilter.prototype.clearHeaderFilter = function () {\n\t\tvar self = this;\n\n\t\tthis.headerFilters = {};\n\t\tself.prevHeaderFilterChangeCheck = \"{}\";\n\n\t\tthis.headerFilterColumns.forEach(function (column) {\n\t\t\tcolumn.modules.filter.value = null;\n\t\t\tcolumn.modules.filter.prevSuccess = undefined;\n\t\t\tself.reloadHeaderFilter(column);\n\t\t});\n\n\t\tthis.changed = true;\n\t};\n\n\t//search data and return matching rows\n\tFilter.prototype.search = function (searchType, field, type, value) {\n\t\tvar self = this,\n\t\t    activeRows = [],\n\t\t    filterList = [];\n\n\t\tif (!Array.isArray(field)) {\n\t\t\tfield = [{ field: field, type: type, value: value }];\n\t\t}\n\n\t\tfield.forEach(function (filter) {\n\t\t\tfilter = self.findFilter(filter);\n\n\t\t\tif (filter) {\n\t\t\t\tfilterList.push(filter);\n\t\t\t}\n\t\t});\n\n\t\tthis.table.rowManager.rows.forEach(function (row) {\n\t\t\tvar match = true;\n\n\t\t\tfilterList.forEach(function (filter) {\n\t\t\t\tif (!self.filterRecurse(filter, row.getData())) {\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (match) {\n\t\t\t\tactiveRows.push(searchType === \"data\" ? row.getData(\"data\") : row.getComponent());\n\t\t\t}\n\t\t});\n\n\t\treturn activeRows;\n\t};\n\n\t//filter row array\n\tFilter.prototype.filter = function (rowList, filters) {\n\t\tvar self = this,\n\t\t    activeRows = [],\n\t\t    activeRowComponents = [];\n\n\t\tif (self.table.options.dataFiltering) {\n\t\t\tself.table.options.dataFiltering.call(self.table, self.getFilters());\n\t\t}\n\n\t\tif (!self.table.options.ajaxFiltering && (self.filterList.length || Object.keys(self.headerFilters).length)) {\n\n\t\t\trowList.forEach(function (row) {\n\t\t\t\tif (self.filterRow(row)) {\n\t\t\t\t\tactiveRows.push(row);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tactiveRows = rowList.slice(0);\n\t\t}\n\n\t\tif (self.table.options.dataFiltered) {\n\n\t\t\tactiveRows.forEach(function (row) {\n\t\t\t\tactiveRowComponents.push(row.getComponent());\n\t\t\t});\n\n\t\t\tself.table.options.dataFiltered.call(self.table, self.getFilters(), activeRowComponents);\n\t\t}\n\n\t\treturn activeRows;\n\t};\n\n\t//filter individual row\n\tFilter.prototype.filterRow = function (row, filters) {\n\t\tvar self = this,\n\t\t    match = true,\n\t\t    data = row.getData();\n\n\t\tself.filterList.forEach(function (filter) {\n\t\t\tif (!self.filterRecurse(filter, data)) {\n\t\t\t\tmatch = false;\n\t\t\t}\n\t\t});\n\n\t\tfor (var field in self.headerFilters) {\n\t\t\tif (!self.headerFilters[field].func(data)) {\n\t\t\t\tmatch = false;\n\t\t\t}\n\t\t}\n\n\t\treturn match;\n\t};\n\n\tFilter.prototype.filterRecurse = function (filter, data) {\n\t\tvar self = this,\n\t\t    match = false;\n\n\t\tif (Array.isArray(filter)) {\n\t\t\tfilter.forEach(function (subFilter) {\n\t\t\t\tif (self.filterRecurse(subFilter, data)) {\n\t\t\t\t\tmatch = true;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tmatch = filter.func(data);\n\t\t}\n\n\t\treturn match;\n\t};\n\n\t//list of available filters\n\tFilter.prototype.filters = {\n\n\t\t//equal to\n\t\t\"=\": function _(filterVal, rowVal, rowData, filterParams) {\n\t\t\treturn rowVal == filterVal ? true : false;\n\t\t},\n\n\t\t//less than\n\t\t\"<\": function _(filterVal, rowVal, rowData, filterParams) {\n\t\t\treturn rowVal < filterVal ? true : false;\n\t\t},\n\n\t\t//less than or equal to\n\t\t\"<=\": function _(filterVal, rowVal, rowData, filterParams) {\n\t\t\treturn rowVal <= filterVal ? true : false;\n\t\t},\n\n\t\t//greater than\n\t\t\">\": function _(filterVal, rowVal, rowData, filterParams) {\n\t\t\treturn rowVal > filterVal ? true : false;\n\t\t},\n\n\t\t//greater than or equal to\n\t\t\">=\": function _(filterVal, rowVal, rowData, filterParams) {\n\t\t\treturn rowVal >= filterVal ? true : false;\n\t\t},\n\n\t\t//not equal to\n\t\t\"!=\": function _(filterVal, rowVal, rowData, filterParams) {\n\t\t\treturn rowVal != filterVal ? true : false;\n\t\t},\n\n\t\t\"regex\": function regex(filterVal, rowVal, rowData, filterParams) {\n\n\t\t\tif (typeof filterVal == \"string\") {\n\t\t\t\tfilterVal = new RegExp(filterVal);\n\t\t\t}\n\n\t\t\treturn filterVal.test(rowVal);\n\t\t},\n\n\t\t//contains the string\n\t\t\"like\": function like(filterVal, rowVal, rowData, filterParams) {\n\t\t\tif (filterVal === null || typeof filterVal === \"undefined\") {\n\t\t\t\treturn rowVal === filterVal ? true : false;\n\t\t\t} else {\n\t\t\t\tif (typeof rowVal !== 'undefined' && rowVal !== null) {\n\t\t\t\t\treturn String(rowVal).toLowerCase().indexOf(filterVal.toLowerCase()) > -1;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t//contains the keywords\n\t\t\"keywords\": function keywords(filterVal, rowVal, rowData, filterParams) {\n\t\t\tvar keywords = filterVal.toLowerCase().split(typeof filterParams.separator === \"undefined\" ? \" \" : filterParams.separator),\n\t\t\t    value = String(rowVal === null || typeof rowVal === \"undefined\" ? \"\" : rowVal).toLowerCase(),\n\t\t\t    matches = [];\n\n\t\t\tkeywords.forEach(function (keyword) {\n\t\t\t\tif (value.includes(keyword)) {\n\t\t\t\t\tmatches.push(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn filterParams.matchAll ? matches.length === keywords.length : !!matches.length;\n\t\t},\n\n\t\t//starts with the string\n\t\t\"starts\": function starts(filterVal, rowVal, rowData, filterParams) {\n\t\t\tif (filterVal === null || typeof filterVal === \"undefined\") {\n\t\t\t\treturn rowVal === filterVal ? true : false;\n\t\t\t} else {\n\t\t\t\tif (typeof rowVal !== 'undefined' && rowVal !== null) {\n\t\t\t\t\treturn String(rowVal).toLowerCase().startsWith(filterVal.toLowerCase());\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t//ends with the string\n\t\t\"ends\": function ends(filterVal, rowVal, rowData, filterParams) {\n\t\t\tif (filterVal === null || typeof filterVal === \"undefined\") {\n\t\t\t\treturn rowVal === filterVal ? true : false;\n\t\t\t} else {\n\t\t\t\tif (typeof rowVal !== 'undefined' && rowVal !== null) {\n\t\t\t\t\treturn String(rowVal).toLowerCase().endsWith(filterVal.toLowerCase());\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t//in array\n\t\t\"in\": function _in(filterVal, rowVal, rowData, filterParams) {\n\t\t\tif (Array.isArray(filterVal)) {\n\t\t\t\treturn filterVal.length ? filterVal.indexOf(rowVal) > -1 : true;\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Filter Error - filter value is not an array:\", filterVal);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"filter\", Filter);\n\n\tvar Format = function Format(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t};\n\n\t//initialize column formatter\n\tFormat.prototype.initializeColumn = function (column) {\n\t\tcolumn.modules.format = this.lookupFormatter(column, \"\");\n\n\t\tif (typeof column.definition.formatterPrint !== \"undefined\") {\n\t\t\tcolumn.modules.format.print = this.lookupFormatter(column, \"Print\");\n\t\t}\n\n\t\tif (typeof column.definition.formatterClipboard !== \"undefined\") {\n\t\t\tcolumn.modules.format.clipboard = this.lookupFormatter(column, \"Clipboard\");\n\t\t}\n\n\t\tif (typeof column.definition.formatterHtmlOutput !== \"undefined\") {\n\t\t\tcolumn.modules.format.htmlOutput = this.lookupFormatter(column, \"HtmlOutput\");\n\t\t}\n\t};\n\n\tFormat.prototype.lookupFormatter = function (column, type) {\n\t\tvar config = { params: column.definition[\"formatter\" + type + \"Params\"] || {} },\n\t\t    formatter = column.definition[\"formatter\" + type];\n\n\t\t//set column formatter\n\t\tswitch (typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) {\n\t\t\tcase \"string\":\n\n\t\t\t\tif (formatter === \"tick\") {\n\t\t\t\t\tformatter = \"tickCross\";\n\n\t\t\t\t\tif (typeof config.params.crossElement == \"undefined\") {\n\t\t\t\t\t\tconfig.params.crossElement = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.warn(\"DEPRECATION WARNING - the tick formatter has been deprecated, please use the tickCross formatter with the crossElement param set to false\");\n\t\t\t\t}\n\n\t\t\t\tif (this.formatters[formatter]) {\n\t\t\t\t\tconfig.formatter = this.formatters[formatter];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Formatter Error - No such formatter found: \", formatter);\n\t\t\t\t\tconfig.formatter = this.formatters.plaintext;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tconfig.formatter = formatter;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconfig.formatter = this.formatters.plaintext;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn config;\n\t};\n\n\tFormat.prototype.cellRendered = function (cell) {\n\t\tif (cell.modules.format && cell.modules.format.renderedCallback) {\n\t\t\tcell.modules.format.renderedCallback();\n\t\t}\n\t};\n\n\t//return a formatted value for a cell\n\tFormat.prototype.formatValue = function (cell) {\n\t\tvar component = cell.getComponent(),\n\t\t    params = typeof cell.column.modules.format.params === \"function\" ? cell.column.modules.format.params(component) : cell.column.modules.format.params;\n\n\t\tfunction onRendered(callback) {\n\t\t\tif (!cell.modules.format) {\n\t\t\t\tcell.modules.format = {};\n\t\t\t}\n\n\t\t\tcell.modules.format.renderedCallback = callback;\n\t\t}\n\n\t\treturn cell.column.modules.format.formatter.call(this, component, params, onRendered);\n\t};\n\n\tFormat.prototype.formatExportValue = function (cell, type) {\n\t\tvar formatter = cell.column.modules.format[type],\n\t\t    params;\n\n\t\tif (formatter) {\n\t\t\tvar onRendered = function onRendered(callback) {\n\t\t\t\tif (!cell.modules.format) {\n\t\t\t\t\tcell.modules.format = {};\n\t\t\t\t}\n\n\t\t\t\tcell.modules.format.renderedCallback = callback;\n\t\t\t};\n\n\t\t\tparams = typeof formatter.params === \"function\" ? formatter.params(component) : formatter.params;\n\n\t\t\treturn formatter.formatter.call(this, cell.getComponent(), params, onRendered);\n\t\t} else {\n\t\t\treturn this.formatValue(cell);\n\t\t}\n\t};\n\n\tFormat.prototype.sanitizeHTML = function (value) {\n\t\tif (value) {\n\t\t\tvar entityMap = {\n\t\t\t\t'&': '&amp;',\n\t\t\t\t'<': '&lt;',\n\t\t\t\t'>': '&gt;',\n\t\t\t\t'\"': '&quot;',\n\t\t\t\t\"'\": '&#39;',\n\t\t\t\t'/': '&#x2F;',\n\t\t\t\t'`': '&#x60;',\n\t\t\t\t'=': '&#x3D;'\n\t\t\t};\n\n\t\t\treturn String(value).replace(/[&<>\"'`=\\/]/g, function (s) {\n\t\t\t\treturn entityMap[s];\n\t\t\t});\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t};\n\n\tFormat.prototype.emptyToSpace = function (value) {\n\t\treturn value === null || typeof value === \"undefined\" || value === \"\" ? \"&nbsp;\" : value;\n\t};\n\n\t//get formatter for cell\n\tFormat.prototype.getFormatter = function (formatter) {\n\t\tvar formatter;\n\n\t\tswitch (typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) {\n\t\t\tcase \"string\":\n\t\t\t\tif (this.formatters[formatter]) {\n\t\t\t\t\tformatter = this.formatters[formatter];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Formatter Error - No such formatter found: \", formatter);\n\t\t\t\t\tformatter = this.formatters.plaintext;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tformatter = formatter;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tformatter = this.formatters.plaintext;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn formatter;\n\t};\n\n\t//default data formatters\n\tFormat.prototype.formatters = {\n\t\t//plain text value\n\t\tplaintext: function plaintext(cell, formatterParams, onRendered) {\n\t\t\treturn this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n\t\t},\n\n\t\t//html text value\n\t\thtml: function html(cell, formatterParams, onRendered) {\n\t\t\treturn cell.getValue();\n\t\t},\n\n\t\t//multiline text area\n\t\ttextarea: function textarea(cell, formatterParams, onRendered) {\n\t\t\tcell.getElement().style.whiteSpace = \"pre-wrap\";\n\t\t\treturn this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n\t\t},\n\n\t\t//currency formatting\n\t\tmoney: function money(cell, formatterParams, onRendered) {\n\t\t\tvar floatVal = parseFloat(cell.getValue()),\n\t\t\t    number,\n\t\t\t    integer,\n\t\t\t    decimal,\n\t\t\t    rgx;\n\n\t\t\tvar decimalSym = formatterParams.decimal || \".\";\n\t\t\tvar thousandSym = formatterParams.thousand || \",\";\n\t\t\tvar symbol = formatterParams.symbol || \"\";\n\t\t\tvar after = !!formatterParams.symbolAfter;\n\t\t\tvar precision = typeof formatterParams.precision !== \"undefined\" ? formatterParams.precision : 2;\n\n\t\t\tif (isNaN(floatVal)) {\n\t\t\t\treturn this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n\t\t\t}\n\n\t\t\tnumber = precision !== false ? floatVal.toFixed(precision) : floatVal;\n\t\t\tnumber = String(number).split(\".\");\n\n\t\t\tinteger = number[0];\n\t\t\tdecimal = number.length > 1 ? decimalSym + number[1] : \"\";\n\n\t\t\trgx = /(\\d+)(\\d{3})/;\n\n\t\t\twhile (rgx.test(integer)) {\n\t\t\t\tinteger = integer.replace(rgx, \"$1\" + thousandSym + \"$2\");\n\t\t\t}\n\n\t\t\treturn after ? integer + decimal + symbol : symbol + integer + decimal;\n\t\t},\n\n\t\t//clickable anchor tag\n\t\tlink: function link(cell, formatterParams, onRendered) {\n\t\t\tvar value = cell.getValue(),\n\t\t\t    urlPrefix = formatterParams.urlPrefix || \"\",\n\t\t\t    download = formatterParams.download,\n\t\t\t    label = value,\n\t\t\t    el = document.createElement(\"a\"),\n\t\t\t    data;\n\n\t\t\tif (formatterParams.labelField) {\n\t\t\t\tdata = cell.getData();\n\t\t\t\tlabel = data[formatterParams.labelField];\n\t\t\t}\n\n\t\t\tif (formatterParams.label) {\n\t\t\t\tswitch (_typeof(formatterParams.label)) {\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\tlabel = formatterParams.label;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\tlabel = formatterParams.label(cell);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (label) {\n\t\t\t\tif (formatterParams.urlField) {\n\t\t\t\t\tdata = cell.getData();\n\t\t\t\t\tvalue = data[formatterParams.urlField];\n\t\t\t\t}\n\n\t\t\t\tif (formatterParams.url) {\n\t\t\t\t\tswitch (_typeof(formatterParams.url)) {\n\t\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\t\tvalue = formatterParams.url;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\t\tvalue = formatterParams.url(cell);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tel.setAttribute(\"href\", urlPrefix + value);\n\n\t\t\t\tif (formatterParams.target) {\n\t\t\t\t\tel.setAttribute(\"target\", formatterParams.target);\n\t\t\t\t}\n\n\t\t\t\tif (formatterParams.download) {\n\n\t\t\t\t\tif (typeof download == \"function\") {\n\t\t\t\t\t\tdownload = download(cell);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdownload = download === true ? \"\" : download;\n\t\t\t\t\t}\n\n\t\t\t\t\tel.setAttribute(\"download\", download);\n\t\t\t\t}\n\n\t\t\t\tel.innerHTML = this.emptyToSpace(this.sanitizeHTML(label));\n\n\t\t\t\treturn el;\n\t\t\t} else {\n\t\t\t\treturn \"&nbsp;\";\n\t\t\t}\n\t\t},\n\n\t\t//image element\n\t\timage: function image(cell, formatterParams, onRendered) {\n\t\t\tvar el = document.createElement(\"img\");\n\t\t\tel.setAttribute(\"src\", cell.getValue());\n\n\t\t\tswitch (_typeof(formatterParams.height)) {\n\t\t\t\tcase \"number\":\n\t\t\t\t\tel.style.height = formatterParams.height + \"px\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"string\":\n\t\t\t\t\tel.style.height = formatterParams.height;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tswitch (_typeof(formatterParams.width)) {\n\t\t\t\tcase \"number\":\n\t\t\t\t\tel.style.width = formatterParams.width + \"px\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"string\":\n\t\t\t\t\tel.style.width = formatterParams.width;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tel.addEventListener(\"load\", function () {\n\t\t\t\tcell.getRow().normalizeHeight();\n\t\t\t});\n\n\t\t\treturn el;\n\t\t},\n\n\t\t//tick or cross\n\t\ttickCross: function tickCross(cell, formatterParams, onRendered) {\n\t\t\tvar value = cell.getValue(),\n\t\t\t    element = cell.getElement(),\n\t\t\t    empty = formatterParams.allowEmpty,\n\t\t\t    truthy = formatterParams.allowTruthy,\n\t\t\t    tick = typeof formatterParams.tickElement !== \"undefined\" ? formatterParams.tickElement : '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#2DC214\" clip-rule=\"evenodd\" d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill-rule=\"evenodd\"/></svg>',\n\t\t\t    cross = typeof formatterParams.crossElement !== \"undefined\" ? formatterParams.crossElement : '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\"  viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#CE1515\" d=\"M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z\"/></svg>';\n\n\t\t\tif (truthy && value || value === true || value === \"true\" || value === \"True\" || value === 1 || value === \"1\") {\n\t\t\t\telement.setAttribute(\"aria-checked\", true);\n\t\t\t\treturn tick || \"\";\n\t\t\t} else {\n\t\t\t\tif (empty && (value === \"null\" || value === \"\" || value === null || typeof value === \"undefined\")) {\n\t\t\t\t\telement.setAttribute(\"aria-checked\", \"mixed\");\n\t\t\t\t\treturn \"\";\n\t\t\t\t} else {\n\t\t\t\t\telement.setAttribute(\"aria-checked\", false);\n\t\t\t\t\treturn cross || \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tdatetime: function datetime(cell, formatterParams, onRendered) {\n\t\t\tvar inputFormat = formatterParams.inputFormat || \"YYYY-MM-DD hh:mm:ss\";\n\t\t\tvar outputFormat = formatterParams.outputFormat || \"DD/MM/YYYY hh:mm:ss\";\n\t\t\tvar invalid = typeof formatterParams.invalidPlaceholder !== \"undefined\" ? formatterParams.invalidPlaceholder : \"\";\n\t\t\tvar value = cell.getValue();\n\n\t\t\tvar newDatetime = moment(value, inputFormat);\n\n\t\t\tif (newDatetime.isValid()) {\n\t\t\t\treturn formatterParams.timezone ? newDatetime.tz(formatterParams.timezone).format(outputFormat) : newDatetime.format(outputFormat);\n\t\t\t} else {\n\n\t\t\t\tif (invalid === true) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else if (typeof invalid === \"function\") {\n\t\t\t\t\treturn invalid(value);\n\t\t\t\t} else {\n\t\t\t\t\treturn invalid;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tdatetimediff: function datetime(cell, formatterParams, onRendered) {\n\t\t\tvar inputFormat = formatterParams.inputFormat || \"YYYY-MM-DD hh:mm:ss\";\n\t\t\tvar invalid = typeof formatterParams.invalidPlaceholder !== \"undefined\" ? formatterParams.invalidPlaceholder : \"\";\n\t\t\tvar suffix = typeof formatterParams.suffix !== \"undefined\" ? formatterParams.suffix : false;\n\t\t\tvar unit = typeof formatterParams.unit !== \"undefined\" ? formatterParams.unit : undefined;\n\t\t\tvar humanize = typeof formatterParams.humanize !== \"undefined\" ? formatterParams.humanize : false;\n\t\t\tvar date = typeof formatterParams.date !== \"undefined\" ? formatterParams.date : moment();\n\t\t\tvar value = cell.getValue();\n\n\t\t\tvar newDatetime = moment(value, inputFormat);\n\n\t\t\tif (newDatetime.isValid()) {\n\t\t\t\tif (humanize) {\n\t\t\t\t\treturn moment.duration(newDatetime.diff(date)).humanize(suffix);\n\t\t\t\t} else {\n\t\t\t\t\treturn newDatetime.diff(date, unit) + (suffix ? \" \" + suffix : \"\");\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (invalid === true) {\n\t\t\t\t\treturn value;\n\t\t\t\t} else if (typeof invalid === \"function\") {\n\t\t\t\t\treturn invalid(value);\n\t\t\t\t} else {\n\t\t\t\t\treturn invalid;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t//select\n\t\tlookup: function lookup(cell, formatterParams, onRendered) {\n\t\t\tvar value = cell.getValue();\n\n\t\t\tif (typeof formatterParams[value] === \"undefined\") {\n\t\t\t\tconsole.warn('Missing display value for ' + value);\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn formatterParams[value];\n\t\t},\n\n\t\t//star rating\n\t\tstar: function star(cell, formatterParams, onRendered) {\n\t\t\tvar value = cell.getValue(),\n\t\t\t    element = cell.getElement(),\n\t\t\t    maxStars = formatterParams && formatterParams.stars ? formatterParams.stars : 5,\n\t\t\t    stars = document.createElement(\"span\"),\n\t\t\t    star = document.createElementNS('http://www.w3.org/2000/svg', \"svg\"),\n\t\t\t    starActive = '<polygon fill=\"#FFEA00\" stroke=\"#C1AB60\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>',\n\t\t\t    starInactive = '<polygon fill=\"#D2D2D2\" stroke=\"#686868\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>';\n\n\t\t\t//style stars holder\n\t\t\tstars.style.verticalAlign = \"middle\";\n\n\t\t\t//style star\n\t\t\tstar.setAttribute(\"width\", \"14\");\n\t\t\tstar.setAttribute(\"height\", \"14\");\n\t\t\tstar.setAttribute(\"viewBox\", \"0 0 512 512\");\n\t\t\tstar.setAttribute(\"xml:space\", \"preserve\");\n\t\t\tstar.style.padding = \"0 1px\";\n\n\t\t\tvalue = value && !isNaN(value) ? parseInt(value) : 0;\n\n\t\t\tvalue = Math.max(0, Math.min(value, maxStars));\n\n\t\t\tfor (var i = 1; i <= maxStars; i++) {\n\t\t\t\tvar nextStar = star.cloneNode(true);\n\t\t\t\tnextStar.innerHTML = i <= value ? starActive : starInactive;\n\n\t\t\t\tstars.appendChild(nextStar);\n\t\t\t}\n\n\t\t\telement.style.whiteSpace = \"nowrap\";\n\t\t\telement.style.overflow = \"hidden\";\n\t\t\telement.style.textOverflow = \"ellipsis\";\n\n\t\t\telement.setAttribute(\"aria-label\", value);\n\n\t\t\treturn stars;\n\t\t},\n\n\t\ttraffic: function traffic(cell, formatterParams, onRendered) {\n\t\t\tvar value = this.sanitizeHTML(cell.getValue()) || 0,\n\t\t\t    el = document.createElement(\"span\"),\n\t\t\t    max = formatterParams && formatterParams.max ? formatterParams.max : 100,\n\t\t\t    min = formatterParams && formatterParams.min ? formatterParams.min : 0,\n\t\t\t    colors = formatterParams && typeof formatterParams.color !== \"undefined\" ? formatterParams.color : [\"red\", \"orange\", \"green\"],\n\t\t\t    color = \"#666666\",\n\t\t\t    percent,\n\t\t\t    percentValue;\n\n\t\t\tif (isNaN(value) || typeof cell.getValue() === \"undefined\") {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tel.classList.add(\"tabulator-traffic-light\");\n\n\t\t\t//make sure value is in range\n\t\t\tpercentValue = parseFloat(value) <= max ? parseFloat(value) : max;\n\t\t\tpercentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min;\n\n\t\t\t//workout percentage\n\t\t\tpercent = (max - min) / 100;\n\t\t\tpercentValue = Math.round((percentValue - min) / percent);\n\n\t\t\t//set color\n\t\t\tswitch (typeof colors === 'undefined' ? 'undefined' : _typeof(colors)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tcolor = colors;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"function\":\n\t\t\t\t\tcolor = colors(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"object\":\n\t\t\t\t\tif (Array.isArray(colors)) {\n\t\t\t\t\t\tvar unit = 100 / colors.length;\n\t\t\t\t\t\tvar index = Math.floor(percentValue / unit);\n\n\t\t\t\t\t\tindex = Math.min(index, colors.length - 1);\n\t\t\t\t\t\tindex = Math.max(index, 0);\n\t\t\t\t\t\tcolor = colors[index];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tel.style.backgroundColor = color;\n\n\t\t\treturn el;\n\t\t},\n\n\t\t//progress bar\n\t\tprogress: function progress(cell, formatterParams, onRendered) {\n\t\t\t//progress bar\n\t\t\tvar value = this.sanitizeHTML(cell.getValue()) || 0,\n\t\t\t    element = cell.getElement(),\n\t\t\t    max = formatterParams && formatterParams.max ? formatterParams.max : 100,\n\t\t\t    min = formatterParams && formatterParams.min ? formatterParams.min : 0,\n\t\t\t    legendAlign = formatterParams && formatterParams.legendAlign ? formatterParams.legendAlign : \"center\",\n\t\t\t    percent,\n\t\t\t    percentValue,\n\t\t\t    color,\n\t\t\t    legend,\n\t\t\t    legendColor,\n\t\t\t    top,\n\t\t\t    left,\n\t\t\t    right,\n\t\t\t    bottom;\n\n\t\t\t//make sure value is in range\n\t\t\tpercentValue = parseFloat(value) <= max ? parseFloat(value) : max;\n\t\t\tpercentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min;\n\n\t\t\t//workout percentage\n\t\t\tpercent = (max - min) / 100;\n\t\t\tpercentValue = Math.round((percentValue - min) / percent);\n\n\t\t\t//set bar color\n\t\t\tswitch (_typeof(formatterParams.color)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tcolor = formatterParams.color;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"function\":\n\t\t\t\t\tcolor = formatterParams.color(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"object\":\n\t\t\t\t\tif (Array.isArray(formatterParams.color)) {\n\t\t\t\t\t\tvar unit = 100 / formatterParams.color.length;\n\t\t\t\t\t\tvar index = Math.floor(percentValue / unit);\n\n\t\t\t\t\t\tindex = Math.min(index, formatterParams.color.length - 1);\n\t\t\t\t\t\tindex = Math.max(index, 0);\n\t\t\t\t\t\tcolor = formatterParams.color[index];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tcolor = \"#2DC214\";\n\t\t\t}\n\n\t\t\t//generate legend\n\t\t\tswitch (_typeof(formatterParams.legend)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tlegend = formatterParams.legend;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"function\":\n\t\t\t\t\tlegend = formatterParams.legend(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\tlegend = value;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlegend = false;\n\t\t\t}\n\n\t\t\t//set legend color\n\t\t\tswitch (_typeof(formatterParams.legendColor)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tlegendColor = formatterParams.legendColor;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"function\":\n\t\t\t\t\tlegendColor = formatterParams.legendColor(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"object\":\n\t\t\t\t\tif (Array.isArray(formatterParams.legendColor)) {\n\t\t\t\t\t\tvar unit = 100 / formatterParams.legendColor.length;\n\t\t\t\t\t\tvar index = Math.floor(percentValue / unit);\n\n\t\t\t\t\t\tindex = Math.min(index, formatterParams.legendColor.length - 1);\n\t\t\t\t\t\tindex = Math.max(index, 0);\n\t\t\t\t\t\tlegendColor = formatterParams.legendColor[index];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlegendColor = \"#000\";\n\t\t\t}\n\n\t\t\telement.style.minWidth = \"30px\";\n\t\t\telement.style.position = \"relative\";\n\n\t\t\telement.setAttribute(\"aria-label\", percentValue);\n\n\t\t\tvar barEl = document.createElement(\"div\");\n\t\t\tbarEl.style.display = \"inline-block\";\n\t\t\tbarEl.style.position = \"relative\";\n\t\t\tbarEl.style.width = percentValue + \"%\";\n\t\t\tbarEl.style.backgroundColor = color;\n\t\t\tbarEl.style.height = \"100%\";\n\n\t\t\tbarEl.setAttribute('data-max', max);\n\t\t\tbarEl.setAttribute('data-min', min);\n\n\t\t\tif (legend) {\n\t\t\t\tvar legendEl = document.createElement(\"div\");\n\t\t\t\tlegendEl.style.position = \"absolute\";\n\t\t\t\tlegendEl.style.top = \"4px\";\n\t\t\t\tlegendEl.style.left = 0;\n\t\t\t\tlegendEl.style.textAlign = legendAlign;\n\t\t\t\tlegendEl.style.width = \"100%\";\n\t\t\t\tlegendEl.style.color = legendColor;\n\t\t\t\tlegendEl.innerHTML = legend;\n\t\t\t}\n\n\t\t\tonRendered(function () {\n\n\t\t\t\t//handle custom element needed if formatter is to be included in printed/downloaded output\n\t\t\t\tif (!(cell instanceof CellComponent)) {\n\t\t\t\t\tvar holderEl = document.createElement(\"div\");\n\t\t\t\t\tholderEl.style.position = \"absolute\";\n\t\t\t\t\tholderEl.style.top = \"4px\";\n\t\t\t\t\tholderEl.style.bottom = \"4px\";\n\t\t\t\t\tholderEl.style.left = \"4px\";\n\t\t\t\t\tholderEl.style.right = \"4px\";\n\n\t\t\t\t\telement.appendChild(holderEl);\n\n\t\t\t\t\telement = holderEl;\n\t\t\t\t}\n\n\t\t\t\telement.appendChild(barEl);\n\n\t\t\t\tif (legend) {\n\t\t\t\t\telement.appendChild(legendEl);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn \"\";\n\t\t},\n\n\t\t//background color\n\t\tcolor: function color(cell, formatterParams, onRendered) {\n\t\t\tcell.getElement().style.backgroundColor = this.sanitizeHTML(cell.getValue());\n\t\t\treturn \"\";\n\t\t},\n\n\t\t//tick icon\n\t\tbuttonTick: function buttonTick(cell, formatterParams, onRendered) {\n\t\t\treturn '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#2DC214\" clip-rule=\"evenodd\" d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill-rule=\"evenodd\"/></svg>';\n\t\t},\n\n\t\t//cross icon\n\t\tbuttonCross: function buttonCross(cell, formatterParams, onRendered) {\n\t\t\treturn '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#CE1515\" d=\"M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z\"/></svg>';\n\t\t},\n\n\t\t//current row number\n\t\trownum: function rownum(cell, formatterParams, onRendered) {\n\t\t\treturn this.table.rowManager.activeRows.indexOf(cell.getRow()._getSelf()) + 1;\n\t\t},\n\n\t\t//row handle\n\t\thandle: function handle(cell, formatterParams, onRendered) {\n\t\t\tcell.getElement().classList.add(\"tabulator-row-handle\");\n\t\t\treturn \"<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>\";\n\t\t},\n\n\t\tresponsiveCollapse: function responsiveCollapse(cell, formatterParams, onRendered) {\n\t\t\tvar self = this,\n\t\t\t    open = false,\n\t\t\t    el = document.createElement(\"div\"),\n\t\t\t    config = cell.getRow()._row.modules.responsiveLayout;\n\n\t\t\tel.classList.add(\"tabulator-responsive-collapse-toggle\");\n\t\t\tel.innerHTML = \"<span class='tabulator-responsive-collapse-toggle-open'>+</span><span class='tabulator-responsive-collapse-toggle-close'>-</span>\";\n\n\t\t\tcell.getElement().classList.add(\"tabulator-row-handle\");\n\n\t\t\tfunction toggleList(isOpen) {\n\t\t\t\tvar collapseEl = config.element;\n\n\t\t\t\tconfig.open = isOpen;\n\n\t\t\t\tif (collapseEl) {\n\n\t\t\t\t\tif (config.open) {\n\t\t\t\t\t\tel.classList.add(\"open\");\n\t\t\t\t\t\tcollapseEl.style.display = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tel.classList.remove(\"open\");\n\t\t\t\t\t\tcollapseEl.style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tel.addEventListener(\"click\", function (e) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t\ttoggleList(!config.open);\n\t\t\t});\n\n\t\t\ttoggleList(config.open);\n\n\t\t\treturn el;\n\t\t},\n\n\t\trowSelection: function rowSelection(cell) {\n\t\t\tvar _this56 = this;\n\n\t\t\tvar checkbox = document.createElement(\"input\");\n\n\t\t\tcheckbox.type = 'checkbox';\n\n\t\t\tif (this.table.modExists(\"selectRow\", true)) {\n\n\t\t\t\tcheckbox.addEventListener(\"click\", function (e) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t});\n\n\t\t\t\tif (typeof cell.getRow == 'function') {\n\t\t\t\t\tvar row = cell.getRow();\n\n\t\t\t\t\tcheckbox.addEventListener(\"change\", function (e) {\n\t\t\t\t\t\trow.toggleSelect();\n\t\t\t\t\t});\n\n\t\t\t\t\tcheckbox.checked = row.isSelected();\n\t\t\t\t\tthis.table.modules.selectRow.registerRowSelectCheckbox(row, checkbox);\n\t\t\t\t} else {\n\t\t\t\t\tcheckbox.addEventListener(\"change\", function (e) {\n\t\t\t\t\t\tif (_this56.table.modules.selectRow.selectedRows.length) {\n\t\t\t\t\t\t\t_this56.table.deselectRow();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this56.table.selectRow();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.table.modules.selectRow.registerHeaderSelectCheckbox(checkbox);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn checkbox;\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"format\", Format);\n\n\tvar FrozenColumns = function FrozenColumns(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.leftColumns = [];\n\t\tthis.rightColumns = [];\n\t\tthis.leftMargin = 0;\n\t\tthis.rightMargin = 0;\n\t\tthis.rightPadding = 0;\n\t\tthis.initializationMode = \"left\";\n\t\tthis.active = false;\n\t\tthis.scrollEndTimer = false;\n\t};\n\n\t//reset initial state\n\tFrozenColumns.prototype.reset = function () {\n\t\tthis.initializationMode = \"left\";\n\t\tthis.leftColumns = [];\n\t\tthis.rightColumns = [];\n\t\tthis.leftMargin = 0;\n\t\tthis.rightMargin = 0;\n\t\tthis.rightMargin = 0;\n\t\tthis.active = false;\n\n\t\tthis.table.columnManager.headersElement.style.marginLeft = 0;\n\t\tthis.table.columnManager.element.style.paddingRight = 0;\n\t};\n\n\t//initialize specific column\n\tFrozenColumns.prototype.initializeColumn = function (column) {\n\t\tvar config = { margin: 0, edge: false };\n\n\t\tif (!column.isGroup) {\n\n\t\t\tif (this.frozenCheck(column)) {\n\n\t\t\t\tconfig.position = this.initializationMode;\n\n\t\t\t\tif (this.initializationMode == \"left\") {\n\t\t\t\t\tthis.leftColumns.push(column);\n\t\t\t\t} else {\n\t\t\t\t\tthis.rightColumns.unshift(column);\n\t\t\t\t}\n\n\t\t\t\tthis.active = true;\n\n\t\t\t\tcolumn.modules.frozen = config;\n\t\t\t} else {\n\t\t\t\tthis.initializationMode = \"right\";\n\t\t\t}\n\t\t}\n\t};\n\n\tFrozenColumns.prototype.frozenCheck = function (column) {\n\t\tvar frozen = false;\n\n\t\tif (column.parent.isGroup && column.definition.frozen) {\n\t\t\tconsole.warn(\"Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups\");\n\t\t}\n\n\t\tif (column.parent.isGroup) {\n\t\t\treturn this.frozenCheck(column.parent);\n\t\t} else {\n\t\t\treturn column.definition.frozen;\n\t\t}\n\n\t\treturn frozen;\n\t};\n\n\t//quick layout to smooth horizontal scrolling\n\tFrozenColumns.prototype.scrollHorizontal = function () {\n\t\tvar _this57 = this;\n\n\t\tvar rows;\n\n\t\tif (this.active) {\n\t\t\tclearTimeout(this.scrollEndTimer);\n\n\t\t\t//layout all rows after scroll is complete\n\t\t\tthis.scrollEndTimer = setTimeout(function () {\n\t\t\t\t_this57.layout();\n\t\t\t}, 100);\n\n\t\t\trows = this.table.rowManager.getVisibleRows();\n\n\t\t\tthis.calcMargins();\n\n\t\t\tthis.layoutColumnPosition();\n\n\t\t\tthis.layoutCalcRows();\n\n\t\t\trows.forEach(function (row) {\n\t\t\t\tif (row.type === \"row\") {\n\t\t\t\t\t_this57.layoutRow(row);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.table.rowManager.tableElement.style.marginRight = this.rightMargin;\n\t\t}\n\t};\n\n\t//calculate margins for rows\n\tFrozenColumns.prototype.calcMargins = function () {\n\t\tthis.leftMargin = this._calcSpace(this.leftColumns, this.leftColumns.length) + \"px\";\n\t\tthis.table.columnManager.headersElement.style.marginLeft = this.leftMargin;\n\n\t\tthis.rightMargin = this._calcSpace(this.rightColumns, this.rightColumns.length) + \"px\";\n\t\tthis.table.columnManager.element.style.paddingRight = this.rightMargin;\n\n\t\t//calculate right frozen columns\n\t\tthis.rightPadding = this.table.rowManager.element.clientWidth + this.table.columnManager.scrollLeft;\n\t};\n\n\t//layout calculation rows\n\tFrozenColumns.prototype.layoutCalcRows = function () {\n\t\tif (this.table.modExists(\"columnCalcs\")) {\n\t\t\tif (this.table.modules.columnCalcs.topInitialized && this.table.modules.columnCalcs.topRow) {\n\t\t\t\tthis.layoutRow(this.table.modules.columnCalcs.topRow);\n\t\t\t}\n\t\t\tif (this.table.modules.columnCalcs.botInitialized && this.table.modules.columnCalcs.botRow) {\n\t\t\t\tthis.layoutRow(this.table.modules.columnCalcs.botRow);\n\t\t\t}\n\t\t}\n\t};\n\n\t//calculate column positions and layout headers\n\tFrozenColumns.prototype.layoutColumnPosition = function (allCells) {\n\t\tvar _this58 = this;\n\n\t\tvar leftParents = [];\n\n\t\tthis.leftColumns.forEach(function (column, i) {\n\t\t\tcolumn.modules.frozen.margin = _this58._calcSpace(_this58.leftColumns, i) + _this58.table.columnManager.scrollLeft + \"px\";\n\n\t\t\tif (i == _this58.leftColumns.length - 1) {\n\t\t\t\tcolumn.modules.frozen.edge = true;\n\t\t\t} else {\n\t\t\t\tcolumn.modules.frozen.edge = false;\n\t\t\t}\n\n\t\t\tif (column.parent.isGroup) {\n\t\t\t\tvar parentEl = _this58.getColGroupParentElement(column);\n\t\t\t\tif (!leftParents.includes(parentEl)) {\n\t\t\t\t\t_this58.layoutElement(parentEl, column);\n\t\t\t\t\tleftParents.push(parentEl);\n\t\t\t\t}\n\n\t\t\t\tif (column.modules.frozen.edge) {\n\t\t\t\t\tparentEl.classList.add(\"tabulator-frozen-\" + column.modules.frozen.position);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_this58.layoutElement(column.getElement(), column);\n\t\t\t}\n\n\t\t\tif (allCells) {\n\t\t\t\tcolumn.cells.forEach(function (cell) {\n\t\t\t\t\t_this58.layoutElement(cell.getElement(), column);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis.rightColumns.forEach(function (column, i) {\n\t\t\tcolumn.modules.frozen.margin = _this58.rightPadding - _this58._calcSpace(_this58.rightColumns, i + 1) + \"px\";\n\n\t\t\tif (i == _this58.rightColumns.length - 1) {\n\t\t\t\tcolumn.modules.frozen.edge = true;\n\t\t\t} else {\n\t\t\t\tcolumn.modules.frozen.edge = false;\n\t\t\t}\n\n\t\t\tif (column.parent.isGroup) {\n\t\t\t\t_this58.layoutElement(_this58.getColGroupParentElement(column), column);\n\t\t\t} else {\n\t\t\t\t_this58.layoutElement(column.getElement(), column);\n\t\t\t}\n\n\t\t\tif (allCells) {\n\t\t\t\tcolumn.cells.forEach(function (cell) {\n\t\t\t\t\t_this58.layoutElement(cell.getElement(), column);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n\n\tFrozenColumns.prototype.getColGroupParentElement = function (column) {\n\t\treturn column.parent.isGroup ? this.getColGroupParentElement(column.parent) : column.getElement();\n\t};\n\n\t//layout columns appropropriatly\n\tFrozenColumns.prototype.layout = function () {\n\t\tvar self = this,\n\t\t    rightMargin = 0;\n\n\t\tif (self.active) {\n\n\t\t\t//calculate row padding\n\t\t\tthis.calcMargins();\n\n\t\t\t// self.table.rowManager.activeRows.forEach(function(row){\n\t\t\t// \tself.layoutRow(row);\n\t\t\t// });\n\n\t\t\t// if(self.table.options.dataTree){\n\t\t\tself.table.rowManager.getDisplayRows().forEach(function (row) {\n\t\t\t\tif (row.type === \"row\") {\n\t\t\t\t\tself.layoutRow(row);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// }\n\n\t\t\tthis.layoutCalcRows();\n\n\t\t\t//calculate left columns\n\t\t\tthis.layoutColumnPosition(true);\n\n\t\t\t// if(tableHolder.scrollHeight > tableHolder.clientHeight){\n\t\t\t// \trightMargin -= tableHolder.offsetWidth - tableHolder.clientWidth;\n\t\t\t// }\n\n\t\t\tthis.table.rowManager.tableElement.style.marginRight = this.rightMargin;\n\t\t}\n\t};\n\n\tFrozenColumns.prototype.layoutRow = function (row) {\n\t\tvar _this59 = this;\n\n\t\tvar rowEl = row.getElement();\n\n\t\trowEl.style.paddingLeft = this.leftMargin;\n\t\t// rowEl.style.paddingRight = this.rightMargin + \"px\";\n\n\t\tthis.leftColumns.forEach(function (column) {\n\t\t\tvar cell = row.getCell(column);\n\n\t\t\tif (cell) {\n\t\t\t\t_this59.layoutElement(cell.getElement(), column);\n\t\t\t}\n\t\t});\n\n\t\tthis.rightColumns.forEach(function (column) {\n\t\t\tvar cell = row.getCell(column);\n\n\t\t\tif (cell) {\n\t\t\t\t_this59.layoutElement(cell.getElement(), column);\n\t\t\t}\n\t\t});\n\t};\n\n\tFrozenColumns.prototype.layoutElement = function (element, column) {\n\n\t\tif (column.modules.frozen) {\n\t\t\telement.style.position = \"absolute\";\n\t\t\telement.style.left = column.modules.frozen.margin;\n\n\t\t\telement.classList.add(\"tabulator-frozen\");\n\n\t\t\tif (column.modules.frozen.edge) {\n\t\t\t\telement.classList.add(\"tabulator-frozen-\" + column.modules.frozen.position);\n\t\t\t}\n\t\t}\n\t};\n\n\tFrozenColumns.prototype._calcSpace = function (columns, index) {\n\t\tvar width = 0;\n\n\t\tfor (var _i9 = 0; _i9 < index; _i9++) {\n\t\t\tif (columns[_i9].visible) {\n\t\t\t\twidth += columns[_i9].getWidth();\n\t\t\t}\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tTabulator.prototype.registerModule(\"frozenColumns\", FrozenColumns);\n\tvar FrozenRows = function FrozenRows(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.topElement = document.createElement(\"div\");\n\t\tthis.rows = [];\n\t\tthis.displayIndex = 0; //index in display pipeline\n\t};\n\n\tFrozenRows.prototype.initialize = function () {\n\t\tthis.rows = [];\n\n\t\tthis.topElement.classList.add(\"tabulator-frozen-rows-holder\");\n\n\t\t// this.table.columnManager.element.append(this.topElement);\n\t\tthis.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);\n\t};\n\n\tFrozenRows.prototype.setDisplayIndex = function (index) {\n\t\tthis.displayIndex = index;\n\t};\n\n\tFrozenRows.prototype.getDisplayIndex = function () {\n\t\treturn this.displayIndex;\n\t};\n\n\tFrozenRows.prototype.isFrozen = function () {\n\t\treturn !!this.rows.length;\n\t};\n\n\t//filter frozen rows out of display data\n\tFrozenRows.prototype.getRows = function (rows) {\n\t\tvar self = this,\n\t\t    frozen = [],\n\t\t    output = rows.slice(0);\n\n\t\tthis.rows.forEach(function (row) {\n\t\t\tvar index = output.indexOf(row);\n\n\t\t\tif (index > -1) {\n\t\t\t\toutput.splice(index, 1);\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tFrozenRows.prototype.freezeRow = function (row) {\n\t\tif (!row.modules.frozen) {\n\t\t\trow.modules.frozen = true;\n\t\t\tthis.topElement.appendChild(row.getElement());\n\t\t\trow.initialize();\n\t\t\trow.normalizeHeight();\n\t\t\tthis.table.rowManager.adjustTableSize();\n\n\t\t\tthis.rows.push(row);\n\n\t\t\tthis.table.rowManager.refreshActiveData(\"display\");\n\n\t\t\tthis.styleRows();\n\t\t} else {\n\t\t\tconsole.warn(\"Freeze Error - Row is already frozen\");\n\t\t}\n\t};\n\n\tFrozenRows.prototype.unfreezeRow = function (row) {\n\t\tvar index = this.rows.indexOf(row);\n\n\t\tif (row.modules.frozen) {\n\n\t\t\trow.modules.frozen = false;\n\n\t\t\tthis.detachRow(row);\n\n\t\t\tthis.table.rowManager.adjustTableSize();\n\n\t\t\tthis.table.rowManager.refreshActiveData(\"display\");\n\n\t\t\tif (this.rows.length) {\n\t\t\t\tthis.styleRows();\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\"Freeze Error - Row is already unfrozen\");\n\t\t}\n\t};\n\n\tFrozenRows.prototype.detachRow = function (row) {\n\t\tvar index = this.rows.indexOf(row);\n\n\t\tif (index > -1) {\n\t\t\tvar rowEl = row.getElement();\n\t\t\trowEl.parentNode.removeChild(rowEl);\n\n\t\t\tthis.rows.splice(index, 1);\n\t\t}\n\t};\n\n\tFrozenRows.prototype.styleRows = function (row) {\n\t\tvar self = this;\n\n\t\tthis.rows.forEach(function (row, i) {\n\t\t\tself.table.rowManager.styleRow(row, i);\n\t\t});\n\t};\n\n\tTabulator.prototype.registerModule(\"frozenRows\", FrozenRows);\n\n\t//public group object\n\tvar GroupComponent = function GroupComponent(group) {\n\t\tthis._group = group;\n\t\tthis.type = \"GroupComponent\";\n\t};\n\n\tGroupComponent.prototype.getKey = function () {\n\t\treturn this._group.key;\n\t};\n\n\tGroupComponent.prototype.getField = function () {\n\t\treturn this._group.field;\n\t};\n\n\tGroupComponent.prototype.getElement = function () {\n\t\treturn this._group.element;\n\t};\n\n\tGroupComponent.prototype.getRows = function () {\n\t\treturn this._group.getRows(true);\n\t};\n\n\tGroupComponent.prototype.getSubGroups = function () {\n\t\treturn this._group.getSubGroups(true);\n\t};\n\n\tGroupComponent.prototype.getParentGroup = function () {\n\t\treturn this._group.parent ? this._group.parent.getComponent() : false;\n\t};\n\n\tGroupComponent.prototype.getVisibility = function () {\n\t\tconsole.warn(\"getVisibility function is deprecated, you should now use the isVisible function\");\n\t\treturn this._group.visible;\n\t};\n\n\tGroupComponent.prototype.isVisible = function () {\n\t\treturn this._group.visible;\n\t};\n\n\tGroupComponent.prototype.show = function () {\n\t\tthis._group.show();\n\t};\n\n\tGroupComponent.prototype.hide = function () {\n\t\tthis._group.hide();\n\t};\n\n\tGroupComponent.prototype.toggle = function () {\n\t\tthis._group.toggleVisibility();\n\t};\n\n\tGroupComponent.prototype._getSelf = function () {\n\t\treturn this._group;\n\t};\n\n\tGroupComponent.prototype.getTable = function () {\n\t\treturn this._group.groupManager.table;\n\t};\n\n\t//////////////////////////////////////////////////\n\t//////////////// Group Functions /////////////////\n\t//////////////////////////////////////////////////\n\n\tvar Group = function Group(groupManager, parent, level, key, field, generator, oldGroup) {\n\n\t\tthis.groupManager = groupManager;\n\t\tthis.parent = parent;\n\t\tthis.key = key;\n\t\tthis.level = level;\n\t\tthis.field = field;\n\t\tthis.hasSubGroups = level < groupManager.groupIDLookups.length - 1;\n\t\tthis.addRow = this.hasSubGroups ? this._addRowToGroup : this._addRow;\n\t\tthis.type = \"group\"; //type of element\n\t\tthis.old = oldGroup;\n\t\tthis.rows = [];\n\t\tthis.groups = [];\n\t\tthis.groupList = [];\n\t\tthis.generator = generator;\n\t\tthis.elementContents = false;\n\t\tthis.height = 0;\n\t\tthis.outerHeight = 0;\n\t\tthis.initialized = false;\n\t\tthis.calcs = {};\n\t\tthis.initialized = false;\n\t\tthis.modules = {};\n\t\tthis.arrowElement = false;\n\n\t\tthis.visible = oldGroup ? oldGroup.visible : typeof groupManager.startOpen[level] !== \"undefined\" ? groupManager.startOpen[level] : groupManager.startOpen[0];\n\n\t\tthis.component = null;\n\n\t\tthis.createElements();\n\t\tthis.addBindings();\n\n\t\tthis.createValueGroups();\n\t};\n\n\tGroup.prototype.wipe = function () {\n\t\tif (this.groupList.length) {\n\t\t\tthis.groupList.forEach(function (group) {\n\t\t\t\tgroup.wipe();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.element = false;\n\t\t\tthis.arrowElement = false;\n\t\t\tthis.elementContents = false;\n\t\t}\n\t};\n\n\tGroup.prototype.createElements = function () {\n\t\tvar arrow = document.createElement(\"div\");\n\t\tarrow.classList.add(\"tabulator-arrow\");\n\n\t\tthis.element = document.createElement(\"div\");\n\t\tthis.element.classList.add(\"tabulator-row\");\n\t\tthis.element.classList.add(\"tabulator-group\");\n\t\tthis.element.classList.add(\"tabulator-group-level-\" + this.level);\n\t\tthis.element.setAttribute(\"role\", \"rowgroup\");\n\n\t\tthis.arrowElement = document.createElement(\"div\");\n\t\tthis.arrowElement.classList.add(\"tabulator-group-toggle\");\n\t\tthis.arrowElement.appendChild(arrow);\n\n\t\t//setup movable rows\n\t\tif (this.groupManager.table.options.movableRows !== false && this.groupManager.table.modExists(\"moveRow\")) {\n\t\t\tthis.groupManager.table.modules.moveRow.initializeGroupHeader(this);\n\t\t}\n\t};\n\n\tGroup.prototype.createValueGroups = function () {\n\t\tvar _this60 = this;\n\n\t\tvar level = this.level + 1;\n\t\tif (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {\n\t\t\tthis.groupManager.allowedValues[level].forEach(function (value) {\n\t\t\t\t_this60._createGroup(value, level);\n\t\t\t});\n\t\t}\n\t};\n\n\tGroup.prototype.addBindings = function () {\n\t\tvar self = this,\n\t\t    dblTap,\n\t\t    tapHold,\n\t\t    tap,\n\t\t    toggleElement;\n\n\t\t//handle group click events\n\t\tif (self.groupManager.table.options.groupClick) {\n\t\t\tself.element.addEventListener(\"click\", function (e) {\n\t\t\t\tself.groupManager.table.options.groupClick.call(self.groupManager.table, e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.groupManager.table.options.groupDblClick) {\n\t\t\tself.element.addEventListener(\"dblclick\", function (e) {\n\t\t\t\tself.groupManager.table.options.groupDblClick.call(self.groupManager.table, e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.groupManager.table.options.groupContext) {\n\t\t\tself.element.addEventListener(\"contextmenu\", function (e) {\n\t\t\t\tself.groupManager.table.options.groupContext.call(self.groupManager.table, e, self.getComponent());\n\t\t\t});\n\t\t}\n\n\t\tif (self.groupManager.table.options.groupContextMenu && self.groupManager.table.modExists(\"menu\")) {\n\t\t\tself.groupManager.table.modules.menu.initializeGroup.call(self.groupManager.table.modules.menu, self);\n\t\t}\n\n\t\tif (self.groupManager.table.options.groupTap) {\n\n\t\t\ttap = false;\n\n\t\t\tself.element.addEventListener(\"touchstart\", function (e) {\n\t\t\t\ttap = true;\n\t\t\t}, { passive: true });\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\t\t\t\tif (tap) {\n\t\t\t\t\tself.groupManager.table.options.groupTap(e, self.getComponent());\n\t\t\t\t}\n\n\t\t\t\ttap = false;\n\t\t\t});\n\t\t}\n\n\t\tif (self.groupManager.table.options.groupDblTap) {\n\n\t\t\tdblTap = null;\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\n\t\t\t\tif (dblTap) {\n\t\t\t\t\tclearTimeout(dblTap);\n\t\t\t\t\tdblTap = null;\n\n\t\t\t\t\tself.groupManager.table.options.groupDblTap(e, self.getComponent());\n\t\t\t\t} else {\n\n\t\t\t\t\tdblTap = setTimeout(function () {\n\t\t\t\t\t\tclearTimeout(dblTap);\n\t\t\t\t\t\tdblTap = null;\n\t\t\t\t\t}, 300);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (self.groupManager.table.options.groupTapHold) {\n\n\t\t\ttapHold = null;\n\n\t\t\tself.element.addEventListener(\"touchstart\", function (e) {\n\t\t\t\tclearTimeout(tapHold);\n\n\t\t\t\ttapHold = setTimeout(function () {\n\t\t\t\t\tclearTimeout(tapHold);\n\t\t\t\t\ttapHold = null;\n\t\t\t\t\ttap = false;\n\t\t\t\t\tself.groupManager.table.options.groupTapHold(e, self.getComponent());\n\t\t\t\t}, 1000);\n\t\t\t}, { passive: true });\n\n\t\t\tself.element.addEventListener(\"touchend\", function (e) {\n\t\t\t\tclearTimeout(tapHold);\n\t\t\t\ttapHold = null;\n\t\t\t});\n\t\t}\n\n\t\tif (self.groupManager.table.options.groupToggleElement) {\n\t\t\ttoggleElement = self.groupManager.table.options.groupToggleElement == \"arrow\" ? self.arrowElement : self.element;\n\n\t\t\ttoggleElement.addEventListener(\"click\", function (e) {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t\tself.toggleVisibility();\n\t\t\t});\n\t\t}\n\t};\n\n\tGroup.prototype._createGroup = function (groupID, level) {\n\t\tvar groupKey = level + \"_\" + groupID;\n\t\tvar group = new Group(this.groupManager, this, level, groupID, this.groupManager.groupIDLookups[level].field, this.groupManager.headerGenerator[level] || this.groupManager.headerGenerator[0], this.old ? this.old.groups[groupKey] : false);\n\n\t\tthis.groups[groupKey] = group;\n\t\tthis.groupList.push(group);\n\t};\n\n\tGroup.prototype._addRowToGroup = function (row) {\n\n\t\tvar level = this.level + 1;\n\n\t\tif (this.hasSubGroups) {\n\t\t\tvar groupID = this.groupManager.groupIDLookups[level].func(row.getData()),\n\t\t\t    groupKey = level + \"_\" + groupID;\n\n\t\t\tif (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {\n\t\t\t\tif (this.groups[groupKey]) {\n\t\t\t\t\tthis.groups[groupKey].addRow(row);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this.groups[groupKey]) {\n\t\t\t\t\tthis._createGroup(groupID, level);\n\t\t\t\t}\n\n\t\t\t\tthis.groups[groupKey].addRow(row);\n\t\t\t}\n\t\t}\n\t};\n\n\tGroup.prototype._addRow = function (row) {\n\t\tthis.rows.push(row);\n\t\trow.modules.group = this;\n\t};\n\n\tGroup.prototype.insertRow = function (row, to, after) {\n\t\tvar data = this.conformRowData({});\n\n\t\trow.updateData(data);\n\n\t\tvar toIndex = this.rows.indexOf(to);\n\n\t\tif (toIndex > -1) {\n\t\t\tif (after) {\n\t\t\t\tthis.rows.splice(toIndex + 1, 0, row);\n\t\t\t} else {\n\t\t\t\tthis.rows.splice(toIndex, 0, row);\n\t\t\t}\n\t\t} else {\n\t\t\tif (after) {\n\t\t\t\tthis.rows.push(row);\n\t\t\t} else {\n\t\t\t\tthis.rows.unshift(row);\n\t\t\t}\n\t\t}\n\n\t\trow.modules.group = this;\n\n\t\tthis.generateGroupHeaderContents();\n\n\t\tif (this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.options.columnCalcs != \"table\") {\n\t\t\tthis.groupManager.table.modules.columnCalcs.recalcGroup(this);\n\t\t}\n\n\t\tthis.groupManager.updateGroupRows(true);\n\t};\n\n\tGroup.prototype.scrollHeader = function (left) {\n\t\tthis.arrowElement.style.marginLeft = left;\n\n\t\tthis.groupList.forEach(function (child) {\n\t\t\tchild.scrollHeader(left);\n\t\t});\n\t};\n\n\tGroup.prototype.getRowIndex = function (row) {};\n\n\t//update row data to match grouping contraints\n\tGroup.prototype.conformRowData = function (data) {\n\t\tif (this.field) {\n\t\t\tdata[this.field] = this.key;\n\t\t} else {\n\t\t\tconsole.warn(\"Data Conforming Error - Cannot conform row data to match new group as groupBy is a function\");\n\t\t}\n\n\t\tif (this.parent) {\n\t\t\tdata = this.parent.conformRowData(data);\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tGroup.prototype.removeRow = function (row) {\n\t\tvar index = this.rows.indexOf(row);\n\t\tvar el = row.getElement();\n\n\t\tif (index > -1) {\n\t\t\tthis.rows.splice(index, 1);\n\t\t}\n\n\t\tif (!this.groupManager.table.options.groupValues && !this.rows.length) {\n\t\t\tif (this.parent) {\n\t\t\t\tthis.parent.removeGroup(this);\n\t\t\t} else {\n\t\t\t\tthis.groupManager.removeGroup(this);\n\t\t\t}\n\n\t\t\tthis.groupManager.updateGroupRows(true);\n\t\t} else {\n\n\t\t\tif (el.parentNode) {\n\t\t\t\tel.parentNode.removeChild(el);\n\t\t\t}\n\n\t\t\tthis.generateGroupHeaderContents();\n\n\t\t\tif (this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.options.columnCalcs != \"table\") {\n\t\t\t\tthis.groupManager.table.modules.columnCalcs.recalcGroup(this);\n\t\t\t}\n\t\t}\n\t};\n\n\tGroup.prototype.removeGroup = function (group) {\n\t\tvar groupKey = group.level + \"_\" + group.key,\n\t\t    index;\n\n\t\tif (this.groups[groupKey]) {\n\t\t\tdelete this.groups[groupKey];\n\n\t\t\tindex = this.groupList.indexOf(group);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.groupList.splice(index, 1);\n\t\t\t}\n\n\t\t\tif (!this.groupList.length) {\n\t\t\t\tif (this.parent) {\n\t\t\t\t\tthis.parent.removeGroup(this);\n\t\t\t\t} else {\n\t\t\t\t\tthis.groupManager.removeGroup(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tGroup.prototype.getHeadersAndRows = function (noCalc) {\n\t\tvar output = [];\n\n\t\toutput.push(this);\n\n\t\tthis._visSet();\n\n\t\tif (this.visible) {\n\t\t\tif (this.groupList.length) {\n\t\t\t\tthis.groupList.forEach(function (group) {\n\t\t\t\t\toutput = output.concat(group.getHeadersAndRows(noCalc));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!noCalc && this.groupManager.table.options.columnCalcs != \"table\" && this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {\n\t\t\t\t\tif (this.calcs.top) {\n\t\t\t\t\t\tthis.calcs.top.detachElement();\n\t\t\t\t\t\tthis.calcs.top.deleteCells();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);\n\t\t\t\t\toutput.push(this.calcs.top);\n\t\t\t\t}\n\n\t\t\t\toutput = output.concat(this.rows);\n\n\t\t\t\tif (!noCalc && this.groupManager.table.options.columnCalcs != \"table\" && this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {\n\t\t\t\t\tif (this.calcs.bottom) {\n\t\t\t\t\t\tthis.calcs.bottom.detachElement();\n\t\t\t\t\t\tthis.calcs.bottom.deleteCells();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);\n\t\t\t\t\toutput.push(this.calcs.bottom);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this.groupList.length && this.groupManager.table.options.columnCalcs != \"table\") {\n\n\t\t\t\tif (this.groupManager.table.modExists(\"columnCalcs\")) {\n\n\t\t\t\t\tif (!noCalc && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {\n\t\t\t\t\t\tif (this.calcs.top) {\n\t\t\t\t\t\t\tthis.calcs.top.detachElement();\n\t\t\t\t\t\t\tthis.calcs.top.deleteCells();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.groupManager.table.options.groupClosedShowCalcs) {\n\t\t\t\t\t\t\tthis.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);\n\t\t\t\t\t\t\toutput.push(this.calcs.top);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!noCalc && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {\n\t\t\t\t\t\tif (this.calcs.bottom) {\n\t\t\t\t\t\t\tthis.calcs.bottom.detachElement();\n\t\t\t\t\t\t\tthis.calcs.bottom.deleteCells();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.groupManager.table.options.groupClosedShowCalcs) {\n\t\t\t\t\t\t\tthis.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);\n\t\t\t\t\t\t\toutput.push(this.calcs.bottom);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tGroup.prototype.getData = function (visible, transform) {\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\tthis._visSet();\n\n\t\tif (!visible || visible && this.visible) {\n\t\t\tthis.rows.forEach(function (row) {\n\t\t\t\toutput.push(row.getData(transform || \"data\"));\n\t\t\t});\n\t\t}\n\n\t\treturn output;\n\t};\n\n\t// Group.prototype.getRows = function(){\n\t// \tthis._visSet();\n\n\t// \treturn this.visible ? this.rows : [];\n\t// };\n\n\tGroup.prototype.getRowCount = function () {\n\t\tvar count = 0;\n\n\t\tif (this.groupList.length) {\n\t\t\tthis.groupList.forEach(function (group) {\n\t\t\t\tcount += group.getRowCount();\n\t\t\t});\n\t\t} else {\n\t\t\tcount = this.rows.length;\n\t\t}\n\t\treturn count;\n\t};\n\n\tGroup.prototype.toggleVisibility = function () {\n\t\tif (this.visible) {\n\t\t\tthis.hide();\n\t\t} else {\n\t\t\tthis.show();\n\t\t}\n\t};\n\n\tGroup.prototype.hide = function () {\n\t\tthis.visible = false;\n\n\t\tif (this.groupManager.table.rowManager.getRenderMode() == \"classic\" && !this.groupManager.table.options.pagination) {\n\n\t\t\tthis.element.classList.remove(\"tabulator-group-visible\");\n\n\t\t\tif (this.groupList.length) {\n\t\t\t\tthis.groupList.forEach(function (group) {\n\n\t\t\t\t\tvar rows = group.getHeadersAndRows();\n\n\t\t\t\t\trows.forEach(function (row) {\n\t\t\t\t\t\trow.detachElement();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.rows.forEach(function (row) {\n\t\t\t\t\tvar rowEl = row.getElement();\n\t\t\t\t\trowEl.parentNode.removeChild(rowEl);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex());\n\n\t\t\tthis.groupManager.table.rowManager.checkClassicModeGroupHeaderWidth();\n\t\t} else {\n\t\t\tthis.groupManager.updateGroupRows(true);\n\t\t}\n\n\t\tthis.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), false);\n\t};\n\n\tGroup.prototype.show = function () {\n\t\tvar self = this;\n\n\t\tself.visible = true;\n\n\t\tif (this.groupManager.table.rowManager.getRenderMode() == \"classic\" && !this.groupManager.table.options.pagination) {\n\n\t\t\tthis.element.classList.add(\"tabulator-group-visible\");\n\n\t\t\tvar prev = self.getElement();\n\n\t\t\tif (this.groupList.length) {\n\t\t\t\tthis.groupList.forEach(function (group) {\n\t\t\t\t\tvar rows = group.getHeadersAndRows();\n\n\t\t\t\t\trows.forEach(function (row) {\n\t\t\t\t\t\tvar rowEl = row.getElement();\n\t\t\t\t\t\tprev.parentNode.insertBefore(rowEl, prev.nextSibling);\n\t\t\t\t\t\trow.initialize();\n\t\t\t\t\t\tprev = rowEl;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tself.rows.forEach(function (row) {\n\t\t\t\t\tvar rowEl = row.getElement();\n\t\t\t\t\tprev.parentNode.insertBefore(rowEl, prev.nextSibling);\n\t\t\t\t\trow.initialize();\n\t\t\t\t\tprev = rowEl;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex());\n\n\t\t\tthis.groupManager.table.rowManager.checkClassicModeGroupHeaderWidth();\n\t\t} else {\n\t\t\tthis.groupManager.updateGroupRows(true);\n\t\t}\n\n\t\tthis.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), true);\n\t};\n\n\tGroup.prototype._visSet = function () {\n\t\tvar data = [];\n\n\t\tif (typeof this.visible == \"function\") {\n\n\t\t\tthis.rows.forEach(function (row) {\n\t\t\t\tdata.push(row.getData());\n\t\t\t});\n\n\t\t\tthis.visible = this.visible(this.key, this.getRowCount(), data, this.getComponent());\n\t\t}\n\t};\n\n\tGroup.prototype.getRowGroup = function (row) {\n\t\tvar match = false;\n\t\tif (this.groupList.length) {\n\t\t\tthis.groupList.forEach(function (group) {\n\t\t\t\tvar result = group.getRowGroup(row);\n\n\t\t\t\tif (result) {\n\t\t\t\t\tmatch = result;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.rows.find(function (item) {\n\t\t\t\treturn item === row;\n\t\t\t})) {\n\t\t\t\tmatch = this;\n\t\t\t}\n\t\t}\n\n\t\treturn match;\n\t};\n\n\tGroup.prototype.getSubGroups = function (component) {\n\t\tvar output = [];\n\n\t\tthis.groupList.forEach(function (child) {\n\t\t\toutput.push(component ? child.getComponent() : child);\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tGroup.prototype.getRows = function (compoment) {\n\t\tvar output = [];\n\n\t\tthis.rows.forEach(function (row) {\n\t\t\toutput.push(compoment ? row.getComponent() : row);\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tGroup.prototype.generateGroupHeaderContents = function () {\n\t\tvar data = [];\n\n\t\tthis.rows.forEach(function (row) {\n\t\t\tdata.push(row.getData());\n\t\t});\n\n\t\tthis.elementContents = this.generator(this.key, this.getRowCount(), data, this.getComponent());\n\n\t\twhile (this.element.firstChild) {\n\t\t\tthis.element.removeChild(this.element.firstChild);\n\t\t}if (typeof this.elementContents === \"string\") {\n\t\t\tthis.element.innerHTML = this.elementContents;\n\t\t} else {\n\t\t\tthis.element.appendChild(this.elementContents);\n\t\t}\n\n\t\tthis.element.insertBefore(this.arrowElement, this.element.firstChild);\n\t};\n\n\t////////////// Standard Row Functions //////////////\n\n\tGroup.prototype.getElement = function () {\n\t\tthis.addBindingsd = false;\n\n\t\tthis._visSet();\n\n\t\tif (this.visible) {\n\t\t\tthis.element.classList.add(\"tabulator-group-visible\");\n\t\t} else {\n\t\t\tthis.element.classList.remove(\"tabulator-group-visible\");\n\t\t}\n\n\t\tfor (var i = 0; i < this.element.childNodes.length; ++i) {\n\t\t\tthis.element.childNodes[i].parentNode.removeChild(this.element.childNodes[i]);\n\t\t}\n\n\t\tthis.generateGroupHeaderContents();\n\n\t\t// this.addBindings();\n\n\t\treturn this.element;\n\t};\n\n\tGroup.prototype.detachElement = function () {\n\t\tif (this.element && this.element.parentNode) {\n\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t}\n\t};\n\n\t//normalize the height of elements in the row\n\tGroup.prototype.normalizeHeight = function () {\n\t\tthis.setHeight(this.element.clientHeight);\n\t};\n\n\tGroup.prototype.initialize = function (force) {\n\t\tif (!this.initialized || force) {\n\t\t\tthis.normalizeHeight();\n\t\t\tthis.initialized = true;\n\t\t}\n\t};\n\n\tGroup.prototype.reinitialize = function () {\n\t\tthis.initialized = false;\n\t\tthis.height = 0;\n\n\t\tif (Tabulator.prototype.helpers.elVisible(this.element)) {\n\t\t\tthis.initialize(true);\n\t\t}\n\t};\n\n\tGroup.prototype.setHeight = function (height) {\n\t\tif (this.height != height) {\n\t\t\tthis.height = height;\n\t\t\tthis.outerHeight = this.element.offsetHeight;\n\t\t}\n\t};\n\n\t//return rows outer height\n\tGroup.prototype.getHeight = function () {\n\t\treturn this.outerHeight;\n\t};\n\n\tGroup.prototype.getGroup = function () {\n\t\treturn this;\n\t};\n\n\tGroup.prototype.reinitializeHeight = function () {};\n\tGroup.prototype.calcHeight = function () {};\n\tGroup.prototype.setCellHeight = function () {};\n\tGroup.prototype.clearCellHeight = function () {};\n\n\t//////////////// Object Generation /////////////////\n\tGroup.prototype.getComponent = function () {\n\t\tif (!this.component) {\n\t\t\tthis.component = new GroupComponent(this);\n\t\t}\n\n\t\treturn this.component;\n\t};\n\n\t//////////////////////////////////////////////////\n\t////////////// Group Row Extension ///////////////\n\t//////////////////////////////////////////////////\n\n\tvar GroupRows = function GroupRows(table) {\n\n\t\tthis.table = table; //hold Tabulator object\n\n\t\tthis.groupIDLookups = false; //enable table grouping and set field to group by\n\t\tthis.startOpen = [function () {\n\t\t\treturn false;\n\t\t}]; //starting state of group\n\t\tthis.headerGenerator = [function () {\n\t\t\treturn \"\";\n\t\t}];\n\t\tthis.groupList = []; //ordered list of groups\n\t\tthis.allowedValues = false;\n\t\tthis.groups = {}; //hold row groups\n\t\tthis.displayIndex = 0; //index in display pipeline\n\t};\n\n\t//initialize group configuration\n\tGroupRows.prototype.initialize = function () {\n\t\tvar self = this,\n\t\t    groupBy = self.table.options.groupBy,\n\t\t    startOpen = self.table.options.groupStartOpen,\n\t\t    groupHeader = self.table.options.groupHeader;\n\n\t\tthis.allowedValues = self.table.options.groupValues;\n\n\t\tif (Array.isArray(groupBy) && Array.isArray(groupHeader) && groupBy.length > groupHeader.length) {\n\t\t\tconsole.warn(\"Error creating group headers, groupHeader array is shorter than groupBy array\");\n\t\t}\n\n\t\tself.headerGenerator = [function () {\n\t\t\treturn \"\";\n\t\t}];\n\t\tthis.startOpen = [function () {\n\t\t\treturn false;\n\t\t}]; //starting state of group\n\n\t\tself.table.modules.localize.bind(\"groups|item\", function (langValue, lang) {\n\t\t\tself.headerGenerator[0] = function (value, count, data) {\n\t\t\t\t//header layout function\n\t\t\t\treturn (typeof value === \"undefined\" ? \"\" : value) + \"<span>(\" + count + \" \" + (count === 1 ? langValue : lang.groups.items) + \")</span>\";\n\t\t\t};\n\t\t});\n\n\t\tthis.groupIDLookups = [];\n\n\t\tif (Array.isArray(groupBy) || groupBy) {\n\t\t\tif (this.table.modExists(\"columnCalcs\") && this.table.options.columnCalcs != \"table\" && this.table.options.columnCalcs != \"both\") {\n\t\t\t\tthis.table.modules.columnCalcs.removeCalcs();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.table.modExists(\"columnCalcs\") && this.table.options.columnCalcs != \"group\") {\n\n\t\t\t\tvar cols = this.table.columnManager.getRealColumns();\n\n\t\t\t\tcols.forEach(function (col) {\n\t\t\t\t\tif (col.definition.topCalc) {\n\t\t\t\t\t\tself.table.modules.columnCalcs.initializeTopRow();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (col.definition.bottomCalc) {\n\t\t\t\t\t\tself.table.modules.columnCalcs.initializeBottomRow();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (!Array.isArray(groupBy)) {\n\t\t\tgroupBy = [groupBy];\n\t\t}\n\n\t\tgroupBy.forEach(function (group, i) {\n\t\t\tvar lookupFunc, column;\n\n\t\t\tif (typeof group == \"function\") {\n\t\t\t\tlookupFunc = group;\n\t\t\t} else {\n\t\t\t\tcolumn = self.table.columnManager.getColumnByField(group);\n\n\t\t\t\tif (column) {\n\t\t\t\t\tlookupFunc = function lookupFunc(data) {\n\t\t\t\t\t\treturn column.getFieldValue(data);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tlookupFunc = function lookupFunc(data) {\n\t\t\t\t\t\treturn data[group];\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tself.groupIDLookups.push({\n\t\t\t\tfield: typeof group === \"function\" ? false : group,\n\t\t\t\tfunc: lookupFunc,\n\t\t\t\tvalues: self.allowedValues ? self.allowedValues[i] : false\n\t\t\t});\n\t\t});\n\n\t\tif (startOpen) {\n\n\t\t\tif (!Array.isArray(startOpen)) {\n\t\t\t\tstartOpen = [startOpen];\n\t\t\t}\n\n\t\t\tstartOpen.forEach(function (level) {\n\t\t\t\tlevel = typeof level == \"function\" ? level : function () {\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tself.startOpen = startOpen;\n\t\t}\n\n\t\tif (groupHeader) {\n\t\t\tself.headerGenerator = Array.isArray(groupHeader) ? groupHeader : [groupHeader];\n\t\t}\n\n\t\tthis.initialized = true;\n\t};\n\n\tGroupRows.prototype.setDisplayIndex = function (index) {\n\t\tthis.displayIndex = index;\n\t};\n\n\tGroupRows.prototype.getDisplayIndex = function () {\n\t\treturn this.displayIndex;\n\t};\n\n\t//return appropriate rows with group headers\n\tGroupRows.prototype.getRows = function (rows) {\n\t\tif (this.groupIDLookups.length) {\n\n\t\t\tthis.table.options.dataGrouping.call(this.table);\n\n\t\t\tthis.generateGroups(rows);\n\n\t\t\tif (this.table.options.dataGrouped) {\n\t\t\t\tthis.table.options.dataGrouped.call(this.table, this.getGroups(true));\n\t\t\t}\n\n\t\t\treturn this.updateGroupRows();\n\t\t} else {\n\t\t\treturn rows.slice(0);\n\t\t}\n\t};\n\n\tGroupRows.prototype.getGroups = function (compoment) {\n\t\tvar groupComponents = [];\n\n\t\tthis.groupList.forEach(function (group) {\n\t\t\tgroupComponents.push(compoment ? group.getComponent() : group);\n\t\t});\n\n\t\treturn groupComponents;\n\t};\n\n\tGroupRows.prototype.getChildGroups = function (group) {\n\t\tvar _this61 = this;\n\n\t\tvar groupComponents = [];\n\n\t\tif (!group) {\n\t\t\tgroup = this;\n\t\t}\n\n\t\tgroup.groupList.forEach(function (child) {\n\t\t\tif (child.groupList.length) {\n\t\t\t\tgroupComponents = groupComponents.concat(_this61.getChildGroups(child));\n\t\t\t} else {\n\t\t\t\tgroupComponents.push(child);\n\t\t\t}\n\t\t});\n\n\t\treturn groupComponents;\n\t};\n\n\tGroupRows.prototype.wipe = function () {\n\t\tthis.groupList.forEach(function (group) {\n\t\t\tgroup.wipe();\n\t\t});\n\t};\n\n\tGroupRows.prototype.pullGroupListData = function (groupList) {\n\t\tvar self = this;\n\t\tvar groupListData = [];\n\n\t\tgroupList.forEach(function (group) {\n\t\t\tvar groupHeader = {};\n\t\t\tgroupHeader.level = 0;\n\t\t\tgroupHeader.rowCount = 0;\n\t\t\tgroupHeader.headerContent = \"\";\n\t\t\tvar childData = [];\n\n\t\t\tif (group.hasSubGroups) {\n\t\t\t\tchildData = self.pullGroupListData(group.groupList);\n\n\t\t\t\tgroupHeader.level = group.level;\n\t\t\t\tgroupHeader.rowCount = childData.length - group.groupList.length; // data length minus number of sub-headers\n\t\t\t\tgroupHeader.headerContent = group.generator(group.key, groupHeader.rowCount, group.rows, group);\n\n\t\t\t\tgroupListData.push(groupHeader);\n\t\t\t\tgroupListData = groupListData.concat(childData);\n\t\t\t} else {\n\t\t\t\tgroupHeader.level = group.level;\n\t\t\t\tgroupHeader.headerContent = group.generator(group.key, group.rows.length, group.rows, group);\n\t\t\t\tgroupHeader.rowCount = group.getRows().length;\n\n\t\t\t\tgroupListData.push(groupHeader);\n\n\t\t\t\tgroup.getRows().forEach(function (row) {\n\t\t\t\t\tgroupListData.push(row.getData(\"data\"));\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn groupListData;\n\t};\n\n\tGroupRows.prototype.getGroupedData = function () {\n\n\t\treturn this.pullGroupListData(this.groupList);\n\t};\n\n\tGroupRows.prototype.getRowGroup = function (row) {\n\t\tvar match = false;\n\n\t\tthis.groupList.forEach(function (group) {\n\t\t\tvar result = group.getRowGroup(row);\n\n\t\t\tif (result) {\n\t\t\t\tmatch = result;\n\t\t\t}\n\t\t});\n\n\t\treturn match;\n\t};\n\n\tGroupRows.prototype.countGroups = function () {\n\t\treturn this.groupList.length;\n\t};\n\n\tGroupRows.prototype.generateGroups = function (rows) {\n\t\tvar self = this,\n\t\t    oldGroups = self.groups;\n\n\t\tself.groups = {};\n\t\tself.groupList = [];\n\n\t\tif (this.allowedValues && this.allowedValues[0]) {\n\t\t\tthis.allowedValues[0].forEach(function (value) {\n\t\t\t\tself.createGroup(value, 0, oldGroups);\n\t\t\t});\n\n\t\t\trows.forEach(function (row) {\n\t\t\t\tself.assignRowToExistingGroup(row, oldGroups);\n\t\t\t});\n\t\t} else {\n\t\t\trows.forEach(function (row) {\n\t\t\t\tself.assignRowToGroup(row, oldGroups);\n\t\t\t});\n\t\t}\n\t};\n\n\tGroupRows.prototype.createGroup = function (groupID, level, oldGroups) {\n\t\tvar groupKey = level + \"_\" + groupID,\n\t\t    group;\n\n\t\toldGroups = oldGroups || [];\n\n\t\tgroup = new Group(this, false, level, groupID, this.groupIDLookups[0].field, this.headerGenerator[0], oldGroups[groupKey]);\n\n\t\tthis.groups[groupKey] = group;\n\t\tthis.groupList.push(group);\n\t};\n\n\t// GroupRows.prototype.assignRowToGroup = function(row, oldGroups){\n\t// \tvar groupID = this.groupIDLookups[0].func(row.getData()),\n\t// \tgroupKey = \"0_\" + groupID;\n\n\t// \tif(!this.groups[groupKey]){\n\t// \t\tthis.createGroup(groupID, 0, oldGroups);\n\t// \t}\n\n\t// \tthis.groups[groupKey].addRow(row);\n\t// };\n\n\tGroupRows.prototype.assignRowToExistingGroup = function (row, oldGroups) {\n\t\tvar groupID = this.groupIDLookups[0].func(row.getData()),\n\t\t    groupKey = \"0_\" + groupID;\n\n\t\tif (this.groups[groupKey]) {\n\t\t\tthis.groups[groupKey].addRow(row);\n\t\t}\n\t};\n\n\tGroupRows.prototype.assignRowToGroup = function (row, oldGroups) {\n\t\tvar groupID = this.groupIDLookups[0].func(row.getData()),\n\t\t    newGroupNeeded = !this.groups[\"0_\" + groupID];\n\n\t\tif (newGroupNeeded) {\n\t\t\tthis.createGroup(groupID, 0, oldGroups);\n\t\t}\n\n\t\tthis.groups[\"0_\" + groupID].addRow(row);\n\n\t\treturn !newGroupNeeded;\n\t};\n\n\tGroupRows.prototype.updateGroupRows = function (force) {\n\t\tvar self = this,\n\t\t    output = [],\n\t\t    oldRowCount;\n\n\t\tself.groupList.forEach(function (group) {\n\t\t\toutput = output.concat(group.getHeadersAndRows());\n\t\t});\n\n\t\t//force update of table display\n\t\tif (force) {\n\n\t\t\tvar displayIndex = self.table.rowManager.setDisplayRows(output, this.getDisplayIndex());\n\n\t\t\tif (displayIndex !== true) {\n\t\t\t\tthis.setDisplayIndex(displayIndex);\n\t\t\t}\n\n\t\t\tself.table.rowManager.refreshActiveData(\"group\", true, true);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tGroupRows.prototype.scrollHeaders = function (left) {\n\t\tleft = left + \"px\";\n\n\t\tthis.groupList.forEach(function (group) {\n\t\t\tgroup.scrollHeader(left);\n\t\t});\n\t};\n\n\tGroupRows.prototype.removeGroup = function (group) {\n\t\tvar groupKey = group.level + \"_\" + group.key,\n\t\t    index;\n\n\t\tif (this.groups[groupKey]) {\n\t\t\tdelete this.groups[groupKey];\n\n\t\t\tindex = this.groupList.indexOf(group);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.groupList.splice(index, 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"groupRows\", GroupRows);\n\tvar History = function History(table) {\n\t\tthis.table = table; //hold Tabulator object\n\n\t\tthis.history = [];\n\t\tthis.index = -1;\n\t};\n\n\tHistory.prototype.clear = function () {\n\t\tthis.history = [];\n\t\tthis.index = -1;\n\t};\n\n\tHistory.prototype.action = function (type, component, data) {\n\n\t\tthis.history = this.history.slice(0, this.index + 1);\n\n\t\tthis.history.push({\n\t\t\ttype: type,\n\t\t\tcomponent: component,\n\t\t\tdata: data\n\t\t});\n\n\t\tthis.index++;\n\t};\n\n\tHistory.prototype.getHistoryUndoSize = function () {\n\t\treturn this.index + 1;\n\t};\n\n\tHistory.prototype.getHistoryRedoSize = function () {\n\t\treturn this.history.length - (this.index + 1);\n\t};\n\n\tHistory.prototype.undo = function () {\n\n\t\tif (this.index > -1) {\n\t\t\tvar action = this.history[this.index];\n\n\t\t\tthis.undoers[action.type].call(this, action);\n\n\t\t\tthis.index--;\n\n\t\t\tthis.table.options.historyUndo.call(this.table, action.type, action.component.getComponent(), action.data);\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tconsole.warn(\"History Undo Error - No more history to undo\");\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tHistory.prototype.redo = function () {\n\t\tif (this.history.length - 1 > this.index) {\n\n\t\t\tthis.index++;\n\n\t\t\tvar action = this.history[this.index];\n\n\t\t\tthis.redoers[action.type].call(this, action);\n\n\t\t\tthis.table.options.historyRedo.call(this.table, action.type, action.component.getComponent(), action.data);\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tconsole.warn(\"History Redo Error - No more history to redo\");\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tHistory.prototype.undoers = {\n\t\tcellEdit: function cellEdit(action) {\n\t\t\taction.component.setValueProcessData(action.data.oldValue);\n\t\t},\n\n\t\trowAdd: function rowAdd(action) {\n\t\t\taction.component.deleteActual();\n\t\t},\n\n\t\trowDelete: function rowDelete(action) {\n\t\t\tvar newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);\n\n\t\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\t\t\t\tthis.table.modules.groupRows.updateGroupRows(true);\n\t\t\t}\n\n\t\t\tthis._rebindRow(action.component, newRow);\n\t\t},\n\n\t\trowMove: function rowMove(action) {\n\t\t\tthis.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.posFrom], !action.data.after);\n\t\t\tthis.table.rowManager.redraw();\n\t\t}\n\t};\n\n\tHistory.prototype.redoers = {\n\t\tcellEdit: function cellEdit(action) {\n\t\t\taction.component.setValueProcessData(action.data.newValue);\n\t\t},\n\n\t\trowAdd: function rowAdd(action) {\n\t\t\tvar newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);\n\n\t\t\tif (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n\t\t\t\tthis.table.modules.groupRows.updateGroupRows(true);\n\t\t\t}\n\n\t\t\tthis._rebindRow(action.component, newRow);\n\t\t},\n\n\t\trowDelete: function rowDelete(action) {\n\t\t\taction.component.deleteActual();\n\t\t},\n\n\t\trowMove: function rowMove(action) {\n\t\t\tthis.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.posTo], action.data.after);\n\t\t\tthis.table.rowManager.redraw();\n\t\t}\n\t};\n\n\t//rebind rows to new element after deletion\n\tHistory.prototype._rebindRow = function (oldRow, newRow) {\n\t\tthis.history.forEach(function (action) {\n\t\t\tif (action.component instanceof Row) {\n\t\t\t\tif (action.component === oldRow) {\n\t\t\t\t\taction.component = newRow;\n\t\t\t\t}\n\t\t\t} else if (action.component instanceof Cell) {\n\t\t\t\tif (action.component.row === oldRow) {\n\t\t\t\t\tvar field = action.component.column.getField();\n\n\t\t\t\t\tif (field) {\n\t\t\t\t\t\taction.component = newRow.getCell(field);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tTabulator.prototype.registerModule(\"history\", History);\n\tvar HtmlTableImport = function HtmlTableImport(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.fieldIndex = [];\n\t\tthis.hasIndex = false;\n\t};\n\n\tHtmlTableImport.prototype.parseTable = function () {\n\t\tvar self = this,\n\t\t    element = self.table.element,\n\t\t    options = self.table.options,\n\t\t    columns = options.columns,\n\t\t    headers = element.getElementsByTagName(\"th\"),\n\t\t    rows = element.getElementsByTagName(\"tbody\")[0],\n\t\t    data = [],\n\t\t    newTable;\n\n\t\tself.hasIndex = false;\n\n\t\tself.table.options.htmlImporting.call(this.table);\n\n\t\trows = rows ? rows.getElementsByTagName(\"tr\") : [];\n\n\t\t//check for tablator inline options\n\t\tself._extractOptions(element, options);\n\n\t\tif (headers.length) {\n\t\t\tself._extractHeaders(headers, rows);\n\t\t} else {\n\t\t\tself._generateBlankHeaders(headers, rows);\n\t\t}\n\n\t\t//iterate through table rows and build data set\n\t\tfor (var index = 0; index < rows.length; index++) {\n\t\t\tvar row = rows[index],\n\t\t\t    cells = row.getElementsByTagName(\"td\"),\n\t\t\t    item = {};\n\n\t\t\t//create index if the dont exist in table\n\t\t\tif (!self.hasIndex) {\n\t\t\t\titem[options.index] = index;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++) {\n\t\t\t\tvar cell = cells[i];\n\t\t\t\tif (typeof this.fieldIndex[i] !== \"undefined\") {\n\t\t\t\t\titem[this.fieldIndex[i]] = cell.innerHTML;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//add row data to item\n\t\t\tdata.push(item);\n\t\t}\n\n\t\t//create new element\n\t\tvar newElement = document.createElement(\"div\");\n\n\t\t//transfer attributes to new element\n\t\tvar attributes = element.attributes;\n\n\t\t// loop through attributes and apply them on div\n\n\t\tfor (var i in attributes) {\n\t\t\tif (_typeof(attributes[i]) == \"object\") {\n\t\t\t\tnewElement.setAttribute(attributes[i].name, attributes[i].value);\n\t\t\t}\n\t\t}\n\n\t\t// replace table with div element\n\t\telement.parentNode.replaceChild(newElement, element);\n\n\t\toptions.data = data;\n\n\t\tself.table.options.htmlImported.call(this.table);\n\n\t\t// // newElement.tabulator(options);\n\n\t\tthis.table.element = newElement;\n\t};\n\n\t//extract tabulator attribute options\n\tHtmlTableImport.prototype._extractOptions = function (element, options, defaultOptions) {\n\t\tvar attributes = element.attributes;\n\t\tvar optionsArr = defaultOptions ? Object.assign([], defaultOptions) : Object.keys(options);\n\t\tvar optionsList = {};\n\n\t\toptionsArr.forEach(function (item) {\n\t\t\toptionsList[item.toLowerCase()] = item;\n\t\t});\n\n\t\tfor (var index in attributes) {\n\t\t\tvar attrib = attributes[index];\n\t\t\tvar name;\n\n\t\t\tif (attrib && (typeof attrib === 'undefined' ? 'undefined' : _typeof(attrib)) == \"object\" && attrib.name && attrib.name.indexOf(\"tabulator-\") === 0) {\n\t\t\t\tname = attrib.name.replace(\"tabulator-\", \"\");\n\n\t\t\t\tif (typeof optionsList[name] !== \"undefined\") {\n\t\t\t\t\toptions[optionsList[name]] = this._attribValue(attrib.value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//get value of attribute\n\tHtmlTableImport.prototype._attribValue = function (value) {\n\t\tif (value === \"true\") {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (value === \"false\") {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value;\n\t};\n\n\t//find column if it has already been defined\n\tHtmlTableImport.prototype._findCol = function (title) {\n\t\tvar match = this.table.options.columns.find(function (column) {\n\t\t\treturn column.title === title;\n\t\t});\n\n\t\treturn match || false;\n\t};\n\n\t//extract column from headers\n\tHtmlTableImport.prototype._extractHeaders = function (headers, rows) {\n\t\tfor (var index = 0; index < headers.length; index++) {\n\t\t\tvar header = headers[index],\n\t\t\t    exists = false,\n\t\t\t    col = this._findCol(header.textContent),\n\t\t\t    width,\n\t\t\t    attributes;\n\n\t\t\tif (col) {\n\t\t\t\texists = true;\n\t\t\t} else {\n\t\t\t\tcol = { title: header.textContent.trim() };\n\t\t\t}\n\n\t\t\tif (!col.field) {\n\t\t\t\tcol.field = header.textContent.trim().toLowerCase().replace(\" \", \"_\");\n\t\t\t}\n\n\t\t\twidth = header.getAttribute(\"width\");\n\n\t\t\tif (width && !col.width) {\n\t\t\t\tcol.width = width;\n\t\t\t}\n\n\t\t\t//check for tablator inline options\n\t\t\tattributes = header.attributes;\n\n\t\t\t// //check for tablator inline options\n\t\t\tthis._extractOptions(header, col, Column.prototype.defaultOptionList);\n\n\t\t\tthis.fieldIndex[index] = col.field;\n\n\t\t\tif (col.field == this.table.options.index) {\n\t\t\t\tthis.hasIndex = true;\n\t\t\t}\n\n\t\t\tif (!exists) {\n\t\t\t\tthis.table.options.columns.push(col);\n\t\t\t}\n\t\t}\n\t};\n\n\t//generate blank headers\n\tHtmlTableImport.prototype._generateBlankHeaders = function (headers, rows) {\n\t\tfor (var index = 0; index < headers.length; index++) {\n\t\t\tvar header = headers[index],\n\t\t\t    col = { title: \"\", field: \"col\" + index };\n\n\t\t\tthis.fieldIndex[index] = col.field;\n\n\t\t\tvar width = header.getAttribute(\"width\");\n\n\t\t\tif (width) {\n\t\t\t\tcol.width = width;\n\t\t\t}\n\n\t\t\tthis.table.options.columns.push(col);\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"htmlTableImport\", HtmlTableImport);\n\tvar Keybindings = function Keybindings(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.watchKeys = null;\n\t\tthis.pressedKeys = null;\n\t\tthis.keyupBinding = false;\n\t\tthis.keydownBinding = false;\n\t};\n\n\tKeybindings.prototype.initialize = function () {\n\t\tvar bindings = this.table.options.keybindings,\n\t\t    mergedBindings = {};\n\n\t\tthis.watchKeys = {};\n\t\tthis.pressedKeys = [];\n\n\t\tif (bindings !== false) {\n\n\t\t\tfor (var key in this.bindings) {\n\t\t\t\tmergedBindings[key] = this.bindings[key];\n\t\t\t}\n\n\t\t\tif (Object.keys(bindings).length) {\n\n\t\t\t\tfor (var _key in bindings) {\n\t\t\t\t\tmergedBindings[_key] = bindings[_key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.mapBindings(mergedBindings);\n\t\t\tthis.bindEvents();\n\t\t}\n\t};\n\n\tKeybindings.prototype.mapBindings = function (bindings) {\n\t\tvar _this62 = this;\n\n\t\tvar self = this;\n\n\t\tvar _loop2 = function _loop2(key) {\n\n\t\t\tif (_this62.actions[key]) {\n\n\t\t\t\tif (bindings[key]) {\n\n\t\t\t\t\tif (_typeof(bindings[key]) !== \"object\") {\n\t\t\t\t\t\tbindings[key] = [bindings[key]];\n\t\t\t\t\t}\n\n\t\t\t\t\tbindings[key].forEach(function (binding) {\n\t\t\t\t\t\tself.mapBinding(key, binding);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Key Binding Error - no such action:\", key);\n\t\t\t}\n\t\t};\n\n\t\tfor (var key in bindings) {\n\t\t\t_loop2(key);\n\t\t}\n\t};\n\n\tKeybindings.prototype.mapBinding = function (action, symbolsList) {\n\t\tvar self = this;\n\n\t\tvar binding = {\n\t\t\taction: this.actions[action],\n\t\t\tkeys: [],\n\t\t\tctrl: false,\n\t\t\tshift: false,\n\t\t\tmeta: false\n\t\t};\n\n\t\tvar symbols = symbolsList.toString().toLowerCase().split(\" \").join(\"\").split(\"+\");\n\n\t\tsymbols.forEach(function (symbol) {\n\t\t\tswitch (symbol) {\n\t\t\t\tcase \"ctrl\":\n\t\t\t\t\tbinding.ctrl = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"shift\":\n\t\t\t\t\tbinding.shift = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"meta\":\n\t\t\t\t\tbinding.meta = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tsymbol = parseInt(symbol);\n\t\t\t\t\tbinding.keys.push(symbol);\n\n\t\t\t\t\tif (!self.watchKeys[symbol]) {\n\t\t\t\t\t\tself.watchKeys[symbol] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tself.watchKeys[symbol].push(binding);\n\t\t\t}\n\t\t});\n\t};\n\n\tKeybindings.prototype.bindEvents = function () {\n\t\tvar self = this;\n\n\t\tthis.keyupBinding = function (e) {\n\t\t\tvar code = e.keyCode;\n\t\t\tvar bindings = self.watchKeys[code];\n\n\t\t\tif (bindings) {\n\n\t\t\t\tself.pressedKeys.push(code);\n\n\t\t\t\tbindings.forEach(function (binding) {\n\t\t\t\t\tself.checkBinding(e, binding);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis.keydownBinding = function (e) {\n\t\t\tvar code = e.keyCode;\n\t\t\tvar bindings = self.watchKeys[code];\n\n\t\t\tif (bindings) {\n\n\t\t\t\tvar index = self.pressedKeys.indexOf(code);\n\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tself.pressedKeys.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.table.element.addEventListener(\"keydown\", this.keyupBinding);\n\n\t\tthis.table.element.addEventListener(\"keyup\", this.keydownBinding);\n\t};\n\n\tKeybindings.prototype.clearBindings = function () {\n\t\tif (this.keyupBinding) {\n\t\t\tthis.table.element.removeEventListener(\"keydown\", this.keyupBinding);\n\t\t}\n\n\t\tif (this.keydownBinding) {\n\t\t\tthis.table.element.removeEventListener(\"keyup\", this.keydownBinding);\n\t\t}\n\t};\n\n\tKeybindings.prototype.checkBinding = function (e, binding) {\n\t\tvar self = this,\n\t\t    match = true;\n\n\t\tif (e.ctrlKey == binding.ctrl && e.shiftKey == binding.shift && e.metaKey == binding.meta) {\n\t\t\tbinding.keys.forEach(function (key) {\n\t\t\t\tvar index = self.pressedKeys.indexOf(key);\n\n\t\t\t\tif (index == -1) {\n\t\t\t\t\tmatch = false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (match) {\n\t\t\t\tbinding.action.call(self, e);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t//default bindings\n\tKeybindings.prototype.bindings = {\n\t\tnavPrev: \"shift + 9\",\n\t\tnavNext: 9,\n\t\tnavUp: 38,\n\t\tnavDown: 40,\n\t\tscrollPageUp: 33,\n\t\tscrollPageDown: 34,\n\t\tscrollToStart: 36,\n\t\tscrollToEnd: 35,\n\t\tundo: \"ctrl + 90\",\n\t\tredo: \"ctrl + 89\",\n\t\tcopyToClipboard: \"ctrl + 67\"\n\t};\n\n\t//default actions\n\tKeybindings.prototype.actions = {\n\t\tkeyBlock: function keyBlock(e) {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t},\n\t\tscrollPageUp: function scrollPageUp(e) {\n\t\t\tvar rowManager = this.table.rowManager,\n\t\t\t    newPos = rowManager.scrollTop - rowManager.height,\n\t\t\t    scrollMax = rowManager.element.scrollHeight;\n\n\t\t\te.preventDefault();\n\n\t\t\tif (rowManager.displayRowsCount) {\n\t\t\t\tif (newPos >= 0) {\n\t\t\t\t\trowManager.element.scrollTop = newPos;\n\t\t\t\t} else {\n\t\t\t\t\trowManager.scrollToRow(rowManager.getDisplayRows()[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.table.element.focus();\n\t\t},\n\t\tscrollPageDown: function scrollPageDown(e) {\n\t\t\tvar rowManager = this.table.rowManager,\n\t\t\t    newPos = rowManager.scrollTop + rowManager.height,\n\t\t\t    scrollMax = rowManager.element.scrollHeight;\n\n\t\t\te.preventDefault();\n\n\t\t\tif (rowManager.displayRowsCount) {\n\t\t\t\tif (newPos <= scrollMax) {\n\t\t\t\t\trowManager.element.scrollTop = newPos;\n\t\t\t\t} else {\n\t\t\t\t\trowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.table.element.focus();\n\t\t},\n\t\tscrollToStart: function scrollToStart(e) {\n\t\t\tvar rowManager = this.table.rowManager;\n\n\t\t\te.preventDefault();\n\n\t\t\tif (rowManager.displayRowsCount) {\n\t\t\t\trowManager.scrollToRow(rowManager.getDisplayRows()[0]);\n\t\t\t}\n\n\t\t\tthis.table.element.focus();\n\t\t},\n\t\tscrollToEnd: function scrollToEnd(e) {\n\t\t\tvar rowManager = this.table.rowManager;\n\n\t\t\te.preventDefault();\n\n\t\t\tif (rowManager.displayRowsCount) {\n\t\t\t\trowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);\n\t\t\t}\n\n\t\t\tthis.table.element.focus();\n\t\t},\n\t\tnavPrev: function navPrev(e) {\n\t\t\tvar cell = false;\n\n\t\t\tif (this.table.modExists(\"edit\")) {\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (cell) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tcell.nav().prev();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tnavNext: function navNext(e) {\n\t\t\tvar cell = false;\n\t\t\tvar newRow = this.table.options.tabEndNewRow;\n\t\t\tvar nav;\n\n\t\t\tif (this.table.modExists(\"edit\")) {\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (cell) {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tnav = cell.nav();\n\n\t\t\t\t\tif (!nav.next()) {\n\t\t\t\t\t\tif (newRow) {\n\n\t\t\t\t\t\t\tcell.getElement().firstChild.blur();\n\n\t\t\t\t\t\t\tif (newRow === true) {\n\t\t\t\t\t\t\t\tnewRow = this.table.addRow({});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (typeof newRow == \"function\") {\n\t\t\t\t\t\t\t\t\tnewRow = this.table.addRow(newRow(cell.row.getComponent()));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewRow = this.table.addRow(Object.assign({}, newRow));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnewRow.then(function () {\n\t\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t\tnav.next();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tnavLeft: function navLeft(e) {\n\t\t\tvar cell = false;\n\n\t\t\tif (this.table.modExists(\"edit\")) {\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (cell) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tcell.nav().left();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tnavRight: function navRight(e) {\n\t\t\tvar cell = false;\n\n\t\t\tif (this.table.modExists(\"edit\")) {\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (cell) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tcell.nav().right();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tnavUp: function navUp(e) {\n\t\t\tvar cell = false;\n\n\t\t\tif (this.table.modExists(\"edit\")) {\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (cell) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tcell.nav().up();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tnavDown: function navDown(e) {\n\t\t\tvar cell = false;\n\n\t\t\tif (this.table.modExists(\"edit\")) {\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (cell) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tcell.nav().down();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tundo: function undo(e) {\n\t\t\tvar cell = false;\n\t\t\tif (this.table.options.history && this.table.modExists(\"history\") && this.table.modExists(\"edit\")) {\n\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (!cell) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.table.modules.history.undo();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tredo: function redo(e) {\n\t\t\tvar cell = false;\n\t\t\tif (this.table.options.history && this.table.modExists(\"history\") && this.table.modExists(\"edit\")) {\n\n\t\t\t\tcell = this.table.modules.edit.currentCell;\n\n\t\t\t\tif (!cell) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.table.modules.history.redo();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tcopyToClipboard: function copyToClipboard(e) {\n\t\t\tif (!this.table.modules.edit.currentCell) {\n\t\t\t\tif (this.table.modExists(\"clipboard\", true)) {\n\t\t\t\t\tthis.table.modules.clipboard.copy(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"keybindings\", Keybindings);\n\tvar Menu = function Menu(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.menuEl = false;\n\t\tthis.blurEvent = this.hideMenu.bind(this);\n\t\tthis.escEvent = this.escMenu.bind(this);\n\t\tthis.nestedMenuBlock = false;\n\t};\n\n\tMenu.prototype.initializeColumnHeader = function (column) {\n\t\tvar _this63 = this;\n\n\t\tvar headerMenuEl;\n\n\t\tif (column.definition.headerContextMenu) {\n\t\t\tcolumn.getElement().addEventListener(\"contextmenu\", function (e) {\n\t\t\t\tvar menu = typeof column.definition.headerContextMenu == \"function\" ? column.definition.headerContextMenu(column.getComponent()) : column.definition.headerContextMenu;\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\t_this63.loadMenu(e, column, menu);\n\t\t\t});\n\t\t}\n\n\t\tif (column.definition.headerMenu) {\n\n\t\t\theaderMenuEl = document.createElement(\"span\");\n\t\t\theaderMenuEl.classList.add(\"tabulator-header-menu-button\");\n\t\t\theaderMenuEl.innerHTML = \"&vellip;\";\n\n\t\t\theaderMenuEl.addEventListener(\"click\", function (e) {\n\t\t\t\tvar menu = typeof column.definition.headerMenu == \"function\" ? column.definition.headerMenu(column.getComponent()) : column.definition.headerMenu;\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\n\t\t\t\t_this63.loadMenu(e, column, menu);\n\t\t\t});\n\n\t\t\tcolumn.titleElement.insertBefore(headerMenuEl, column.titleElement.firstChild);\n\t\t}\n\t};\n\n\tMenu.prototype.initializeCell = function (cell) {\n\t\tvar _this64 = this;\n\n\t\tcell.getElement().addEventListener(\"contextmenu\", function (e) {\n\t\t\tvar menu = typeof cell.column.definition.contextMenu == \"function\" ? cell.column.definition.contextMenu(cell.getComponent()) : cell.column.definition.contextMenu;\n\n\t\t\tif (menu) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t}\n\n\t\t\t_this64.loadMenu(e, cell, menu);\n\t\t});\n\t};\n\n\tMenu.prototype.initializeRow = function (row) {\n\t\tvar _this65 = this;\n\n\t\trow.getElement().addEventListener(\"contextmenu\", function (e) {\n\t\t\tvar menu = typeof _this65.table.options.rowContextMenu == \"function\" ? _this65.table.options.rowContextMenu(row.getComponent()) : _this65.table.options.rowContextMenu;\n\n\t\t\t_this65.loadMenu(e, row, menu);\n\t\t});\n\t};\n\n\tMenu.prototype.initializeGroup = function (group) {\n\t\tvar _this66 = this;\n\n\t\tgroup.getElement().addEventListener(\"contextmenu\", function (e) {\n\t\t\tvar menu = typeof _this66.table.options.groupContextMenu == \"function\" ? _this66.table.options.groupContextMenu(group.getComponent()) : _this66.table.options.groupContextMenu;\n\n\t\t\t_this66.loadMenu(e, group, menu);\n\t\t});\n\t};\n\n\tMenu.prototype.loadMenu = function (e, component, menu) {\n\t\tvar _this67 = this;\n\n\t\tvar docHeight = Math.max(document.body.offsetHeight, window.innerHeight);\n\n\t\te.preventDefault();\n\n\t\t//abort if no menu set\n\t\tif (!menu || !menu.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.nestedMenuBlock) {\n\t\t\t//abort if child menu already open\n\t\t\tif (this.isOpen()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.nestedMenuBlock = setTimeout(function () {\n\t\t\t\t_this67.nestedMenuBlock = false;\n\t\t\t}, 100);\n\t\t}\n\n\t\tthis.hideMenu();\n\n\t\tthis.menuEl = document.createElement(\"div\");\n\t\tthis.menuEl.classList.add(\"tabulator-menu\");\n\n\t\tmenu.forEach(function (item) {\n\t\t\tvar itemEl = document.createElement(\"div\");\n\t\t\tvar label = item.label;\n\t\t\tvar disabled = item.disabled;\n\n\t\t\tif (item.separator) {\n\t\t\t\titemEl.classList.add(\"tabulator-menu-separator\");\n\t\t\t} else {\n\t\t\t\titemEl.classList.add(\"tabulator-menu-item\");\n\n\t\t\t\tif (typeof label == \"function\") {\n\t\t\t\t\tlabel = label(component.getComponent());\n\t\t\t\t}\n\n\t\t\t\tif (label instanceof Node) {\n\t\t\t\t\titemEl.appendChild(label);\n\t\t\t\t} else {\n\t\t\t\t\titemEl.innerHTML = label;\n\t\t\t\t}\n\n\t\t\t\tif (typeof disabled == \"function\") {\n\t\t\t\t\tdisabled = disabled(component.getComponent());\n\t\t\t\t}\n\n\t\t\t\tif (disabled) {\n\t\t\t\t\titemEl.classList.add(\"tabulator-menu-item-disabled\");\n\t\t\t\t\titemEl.addEventListener(\"click\", function (e) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\titemEl.addEventListener(\"click\", function (e) {\n\t\t\t\t\t\t_this67.hideMenu();\n\t\t\t\t\t\titem.action(e, component.getComponent());\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this67.menuEl.appendChild(itemEl);\n\t\t});\n\n\t\tthis.menuEl.style.top = e.pageY + \"px\";\n\t\tthis.menuEl.style.left = e.pageX + \"px\";\n\n\t\tdocument.body.addEventListener(\"click\", this.blurEvent);\n\t\tthis.table.rowManager.element.addEventListener(\"scroll\", this.blurEvent);\n\n\t\tsetTimeout(function () {\n\t\t\tdocument.body.addEventListener(\"contextmenu\", _this67.blurEvent);\n\t\t}, 100);\n\n\t\tdocument.body.addEventListener(\"keydown\", this.escEvent);\n\n\t\tdocument.body.appendChild(this.menuEl);\n\n\t\t//move menu to start on right edge if it is too close to the edge of the screen\n\t\tif (e.pageX + this.menuEl.offsetWidth >= document.body.offsetWidth) {\n\t\t\tthis.menuEl.style.left = \"\";\n\t\t\tthis.menuEl.style.right = document.body.offsetWidth - e.pageX + \"px\";\n\t\t}\n\n\t\t//move menu to start on bottom edge if it is too close to the edge of the screen\n\t\tif (e.pageY + this.menuEl.offsetHeight >= docHeight) {\n\t\t\tthis.menuEl.style.top = \"\";\n\t\t\tthis.menuEl.style.bottom = docHeight - e.pageY + \"px\";\n\t\t}\n\t};\n\n\tMenu.prototype.isOpen = function () {\n\t\treturn !!this.menuEl.parentNode;\n\t};\n\n\tMenu.prototype.escMenu = function (e) {\n\t\tif (e.keyCode == 27) {\n\t\t\tthis.hideMenu();\n\t\t}\n\t};\n\n\tMenu.prototype.hideMenu = function () {\n\t\tif (this.menuEl.parentNode) {\n\t\t\tthis.menuEl.parentNode.removeChild(this.menuEl);\n\t\t}\n\n\t\tif (this.escEvent) {\n\t\t\tdocument.body.removeEventListener(\"keydown\", this.escEvent);\n\t\t}\n\n\t\tif (this.blurEvent) {\n\t\t\tdocument.body.removeEventListener(\"click\", this.blurEvent);\n\t\t\tdocument.body.removeEventListener(\"contextmenu\", this.blurEvent);\n\t\t\tthis.table.rowManager.element.removeEventListener(\"scroll\", this.blurEvent);\n\t\t}\n\t};\n\n\t//default accessors\n\tMenu.prototype.menus = {};\n\n\tTabulator.prototype.registerModule(\"menu\", Menu);\n\tvar MoveColumns = function MoveColumns(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.placeholderElement = this.createPlaceholderElement();\n\t\tthis.hoverElement = false; //floating column header element\n\t\tthis.checkTimeout = false; //click check timeout holder\n\t\tthis.checkPeriod = 250; //period to wait on mousedown to consider this a move and not a click\n\t\tthis.moving = false; //currently moving column\n\t\tthis.toCol = false; //destination column\n\t\tthis.toColAfter = false; //position of moving column relative to the desitnation column\n\t\tthis.startX = 0; //starting position within header element\n\t\tthis.autoScrollMargin = 40; //auto scroll on edge when within margin\n\t\tthis.autoScrollStep = 5; //auto scroll distance in pixels\n\t\tthis.autoScrollTimeout = false; //auto scroll timeout\n\t\tthis.touchMove = false;\n\n\t\tthis.moveHover = this.moveHover.bind(this);\n\t\tthis.endMove = this.endMove.bind(this);\n\t};\n\n\tMoveColumns.prototype.createPlaceholderElement = function () {\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-col\");\n\t\tel.classList.add(\"tabulator-col-placeholder\");\n\n\t\treturn el;\n\t};\n\n\tMoveColumns.prototype.initializeColumn = function (column) {\n\t\tvar self = this,\n\t\t    config = {},\n\t\t    colEl;\n\n\t\tif (!column.modules.frozen) {\n\n\t\t\tcolEl = column.getElement();\n\n\t\t\tconfig.mousemove = function (e) {\n\t\t\t\tif (column.parent === self.moving.parent) {\n\t\t\t\t\tif ((self.touchMove ? e.touches[0].pageX : e.pageX) - Tabulator.prototype.helpers.elOffset(colEl).left + self.table.columnManager.element.scrollLeft > column.getWidth() / 2) {\n\t\t\t\t\t\tif (self.toCol !== column || !self.toColAfter) {\n\t\t\t\t\t\t\tcolEl.parentNode.insertBefore(self.placeholderElement, colEl.nextSibling);\n\t\t\t\t\t\t\tself.moveColumn(column, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (self.toCol !== column || self.toColAfter) {\n\t\t\t\t\t\t\tcolEl.parentNode.insertBefore(self.placeholderElement, colEl);\n\t\t\t\t\t\t\tself.moveColumn(column, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.bind(self);\n\n\t\t\tcolEl.addEventListener(\"mousedown\", function (e) {\n\t\t\t\tself.touchMove = false;\n\t\t\t\tif (e.which === 1) {\n\t\t\t\t\tself.checkTimeout = setTimeout(function () {\n\t\t\t\t\t\tself.startMove(e, column);\n\t\t\t\t\t}, self.checkPeriod);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcolEl.addEventListener(\"mouseup\", function (e) {\n\t\t\t\tif (e.which === 1) {\n\t\t\t\t\tif (self.checkTimeout) {\n\t\t\t\t\t\tclearTimeout(self.checkTimeout);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tself.bindTouchEvents(column);\n\t\t}\n\n\t\tcolumn.modules.moveColumn = config;\n\t};\n\n\tMoveColumns.prototype.bindTouchEvents = function (column) {\n\t\tvar self = this,\n\t\t    colEl = column.getElement(),\n\t\t    startXMove = false,\n\t\t    //shifting center position of the cell\n\t\tdir = false,\n\t\t    currentCol,\n\t\t    nextCol,\n\t\t    prevCol,\n\t\t    nextColWidth,\n\t\t    prevColWidth,\n\t\t    nextColWidthLast,\n\t\t    prevColWidthLast;\n\n\t\tcolEl.addEventListener(\"touchstart\", function (e) {\n\t\t\tself.checkTimeout = setTimeout(function () {\n\t\t\t\tself.touchMove = true;\n\t\t\t\tcurrentCol = column;\n\t\t\t\tnextCol = column.nextColumn();\n\t\t\t\tnextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;\n\t\t\t\tprevCol = column.prevColumn();\n\t\t\t\tprevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;\n\t\t\t\tnextColWidthLast = 0;\n\t\t\t\tprevColWidthLast = 0;\n\t\t\t\tstartXMove = false;\n\n\t\t\t\tself.startMove(e, column);\n\t\t\t}, self.checkPeriod);\n\t\t}, { passive: true });\n\n\t\tcolEl.addEventListener(\"touchmove\", function (e) {\n\t\t\tvar halfCol, diff, moveToCol;\n\n\t\t\tif (self.moving) {\n\t\t\t\tself.moveHover(e);\n\n\t\t\t\tif (!startXMove) {\n\t\t\t\t\tstartXMove = e.touches[0].pageX;\n\t\t\t\t}\n\n\t\t\t\tdiff = e.touches[0].pageX - startXMove;\n\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tif (nextCol && diff - nextColWidthLast > nextColWidth) {\n\t\t\t\t\t\tmoveToCol = nextCol;\n\n\t\t\t\t\t\tif (moveToCol !== column) {\n\t\t\t\t\t\t\tstartXMove = e.touches[0].pageX;\n\t\t\t\t\t\t\tmoveToCol.getElement().parentNode.insertBefore(self.placeholderElement, moveToCol.getElement().nextSibling);\n\t\t\t\t\t\t\tself.moveColumn(moveToCol, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (prevCol && -diff - prevColWidthLast > prevColWidth) {\n\t\t\t\t\t\tmoveToCol = prevCol;\n\n\t\t\t\t\t\tif (moveToCol !== column) {\n\t\t\t\t\t\t\tstartXMove = e.touches[0].pageX;\n\t\t\t\t\t\t\tmoveToCol.getElement().parentNode.insertBefore(self.placeholderElement, moveToCol.getElement());\n\t\t\t\t\t\t\tself.moveColumn(moveToCol, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (moveToCol) {\n\t\t\t\t\tcurrentCol = moveToCol;\n\t\t\t\t\tnextCol = moveToCol.nextColumn();\n\t\t\t\t\tnextColWidthLast = nextColWidth;\n\t\t\t\t\tnextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;\n\t\t\t\t\tprevCol = moveToCol.prevColumn();\n\t\t\t\t\tprevColWidthLast = prevColWidth;\n\t\t\t\t\tprevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}, { passive: true });\n\n\t\tcolEl.addEventListener(\"touchend\", function (e) {\n\t\t\tif (self.checkTimeout) {\n\t\t\t\tclearTimeout(self.checkTimeout);\n\t\t\t}\n\t\t\tif (self.moving) {\n\t\t\t\tself.endMove(e);\n\t\t\t}\n\t\t});\n\t};\n\n\tMoveColumns.prototype.startMove = function (e, column) {\n\t\tvar element = column.getElement();\n\n\t\tthis.moving = column;\n\t\tthis.startX = (this.touchMove ? e.touches[0].pageX : e.pageX) - Tabulator.prototype.helpers.elOffset(element).left;\n\n\t\tthis.table.element.classList.add(\"tabulator-block-select\");\n\n\t\t//create placeholder\n\t\tthis.placeholderElement.style.width = column.getWidth() + \"px\";\n\t\tthis.placeholderElement.style.height = column.getHeight() + \"px\";\n\n\t\telement.parentNode.insertBefore(this.placeholderElement, element);\n\t\telement.parentNode.removeChild(element);\n\n\t\t//create hover element\n\t\tthis.hoverElement = element.cloneNode(true);\n\t\tthis.hoverElement.classList.add(\"tabulator-moving\");\n\n\t\tthis.table.columnManager.getElement().appendChild(this.hoverElement);\n\n\t\tthis.hoverElement.style.left = \"0\";\n\t\tthis.hoverElement.style.bottom = \"0\";\n\n\t\tif (!this.touchMove) {\n\t\t\tthis._bindMouseMove();\n\n\t\t\tdocument.body.addEventListener(\"mousemove\", this.moveHover);\n\t\t\tdocument.body.addEventListener(\"mouseup\", this.endMove);\n\t\t}\n\n\t\tthis.moveHover(e);\n\t};\n\n\tMoveColumns.prototype._bindMouseMove = function () {\n\t\tthis.table.columnManager.columnsByIndex.forEach(function (column) {\n\t\t\tif (column.modules.moveColumn.mousemove) {\n\t\t\t\tcolumn.getElement().addEventListener(\"mousemove\", column.modules.moveColumn.mousemove);\n\t\t\t}\n\t\t});\n\t};\n\n\tMoveColumns.prototype._unbindMouseMove = function () {\n\t\tthis.table.columnManager.columnsByIndex.forEach(function (column) {\n\t\t\tif (column.modules.moveColumn.mousemove) {\n\t\t\t\tcolumn.getElement().removeEventListener(\"mousemove\", column.modules.moveColumn.mousemove);\n\t\t\t}\n\t\t});\n\t};\n\n\tMoveColumns.prototype.moveColumn = function (column, after) {\n\t\tvar movingCells = this.moving.getCells();\n\n\t\tthis.toCol = column;\n\t\tthis.toColAfter = after;\n\n\t\tif (after) {\n\t\t\tcolumn.getCells().forEach(function (cell, i) {\n\t\t\t\tvar cellEl = cell.getElement();\n\t\t\t\tcellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl.nextSibling);\n\t\t\t});\n\t\t} else {\n\t\t\tcolumn.getCells().forEach(function (cell, i) {\n\t\t\t\tvar cellEl = cell.getElement();\n\t\t\t\tcellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl);\n\t\t\t});\n\t\t}\n\t};\n\n\tMoveColumns.prototype.endMove = function (e) {\n\t\tif (e.which === 1 || this.touchMove) {\n\t\t\tthis._unbindMouseMove();\n\n\t\t\tthis.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);\n\t\t\tthis.placeholderElement.parentNode.removeChild(this.placeholderElement);\n\t\t\tthis.hoverElement.parentNode.removeChild(this.hoverElement);\n\n\t\t\tthis.table.element.classList.remove(\"tabulator-block-select\");\n\n\t\t\tif (this.toCol) {\n\t\t\t\tthis.table.columnManager.moveColumnActual(this.moving, this.toCol, this.toColAfter);\n\t\t\t}\n\n\t\t\tthis.moving = false;\n\t\t\tthis.toCol = false;\n\t\t\tthis.toColAfter = false;\n\n\t\t\tif (!this.touchMove) {\n\t\t\t\tdocument.body.removeEventListener(\"mousemove\", this.moveHover);\n\t\t\t\tdocument.body.removeEventListener(\"mouseup\", this.endMove);\n\t\t\t}\n\t\t}\n\t};\n\n\tMoveColumns.prototype.moveHover = function (e) {\n\t\tvar self = this,\n\t\t    columnHolder = self.table.columnManager.getElement(),\n\t\t    scrollLeft = columnHolder.scrollLeft,\n\t\t    xPos = (self.touchMove ? e.touches[0].pageX : e.pageX) - Tabulator.prototype.helpers.elOffset(columnHolder).left + scrollLeft,\n\t\t    scrollPos;\n\n\t\tself.hoverElement.style.left = xPos - self.startX + \"px\";\n\n\t\tif (xPos - scrollLeft < self.autoScrollMargin) {\n\t\t\tif (!self.autoScrollTimeout) {\n\t\t\t\tself.autoScrollTimeout = setTimeout(function () {\n\t\t\t\t\tscrollPos = Math.max(0, scrollLeft - 5);\n\t\t\t\t\tself.table.rowManager.getElement().scrollLeft = scrollPos;\n\t\t\t\t\tself.autoScrollTimeout = false;\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (scrollLeft + columnHolder.clientWidth - xPos < self.autoScrollMargin) {\n\t\t\tif (!self.autoScrollTimeout) {\n\t\t\t\tself.autoScrollTimeout = setTimeout(function () {\n\t\t\t\t\tscrollPos = Math.min(columnHolder.clientWidth, scrollLeft + 5);\n\t\t\t\t\tself.table.rowManager.getElement().scrollLeft = scrollPos;\n\t\t\t\t\tself.autoScrollTimeout = false;\n\t\t\t\t}, 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"moveColumn\", MoveColumns);\n\n\tvar MoveRows = function MoveRows(table) {\n\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.placeholderElement = this.createPlaceholderElement();\n\t\tthis.hoverElement = false; //floating row header element\n\t\tthis.checkTimeout = false; //click check timeout holder\n\t\tthis.checkPeriod = 150; //period to wait on mousedown to consider this a move and not a click\n\t\tthis.moving = false; //currently moving row\n\t\tthis.toRow = false; //destination row\n\t\tthis.toRowAfter = false; //position of moving row relative to the desitnation row\n\t\tthis.hasHandle = false; //row has handle instead of fully movable row\n\t\tthis.startY = 0; //starting Y position within header element\n\t\tthis.startX = 0; //starting X position within header element\n\n\t\tthis.moveHover = this.moveHover.bind(this);\n\t\tthis.endMove = this.endMove.bind(this);\n\t\tthis.tableRowDropEvent = false;\n\n\t\tthis.touchMove = false;\n\n\t\tthis.connection = false;\n\t\tthis.connectionSelectorsTables = false;\n\t\tthis.connectionSelectorsElements = false;\n\t\tthis.connectionElements = [];\n\t\tthis.connections = [];\n\n\t\tthis.connectedTable = false;\n\t\tthis.connectedRow = false;\n\t};\n\n\tMoveRows.prototype.createPlaceholderElement = function () {\n\t\tvar el = document.createElement(\"div\");\n\n\t\tel.classList.add(\"tabulator-row\");\n\t\tel.classList.add(\"tabulator-row-placeholder\");\n\n\t\treturn el;\n\t};\n\n\tMoveRows.prototype.initialize = function (handle) {\n\t\tthis.connectionSelectorsTables = this.table.options.movableRowsConnectedTables;\n\t\tthis.connectionSelectorsElements = this.table.options.movableRowsConnectedElements;\n\n\t\tthis.connection = this.connectionSelectorsTables || this.connectionSelectorsElements;\n\t};\n\n\tMoveRows.prototype.setHandle = function (handle) {\n\t\tthis.hasHandle = handle;\n\t};\n\n\tMoveRows.prototype.initializeGroupHeader = function (group) {\n\t\tvar self = this,\n\t\t    config = {},\n\t\t    rowEl;\n\n\t\t//inter table drag drop\n\t\tconfig.mouseup = function (e) {\n\t\t\tself.tableRowDrop(e, row);\n\t\t}.bind(self);\n\n\t\t//same table drag drop\n\t\tconfig.mousemove = function (e) {\n\t\t\tif (e.pageY - Tabulator.prototype.helpers.elOffset(group.element).top + self.table.rowManager.element.scrollTop > group.getHeight() / 2) {\n\t\t\t\tif (self.toRow !== group || !self.toRowAfter) {\n\t\t\t\t\tvar rowEl = group.getElement();\n\t\t\t\t\trowEl.parentNode.insertBefore(self.placeholderElement, rowEl.nextSibling);\n\t\t\t\t\tself.moveRow(group, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (self.toRow !== group || self.toRowAfter) {\n\t\t\t\t\tvar rowEl = group.getElement();\n\t\t\t\t\tif (rowEl.previousSibling) {\n\t\t\t\t\t\trowEl.parentNode.insertBefore(self.placeholderElement, rowEl);\n\t\t\t\t\t\tself.moveRow(group, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(self);\n\n\t\tgroup.modules.moveRow = config;\n\t};\n\n\tMoveRows.prototype.initializeRow = function (row) {\n\t\tvar self = this,\n\t\t    config = {},\n\t\t    rowEl;\n\n\t\t//inter table drag drop\n\t\tconfig.mouseup = function (e) {\n\t\t\tself.tableRowDrop(e, row);\n\t\t}.bind(self);\n\n\t\t//same table drag drop\n\t\tconfig.mousemove = function (e) {\n\t\t\tif (e.pageY - Tabulator.prototype.helpers.elOffset(row.element).top + self.table.rowManager.element.scrollTop > row.getHeight() / 2) {\n\t\t\t\tif (self.toRow !== row || !self.toRowAfter) {\n\t\t\t\t\tvar rowEl = row.getElement();\n\t\t\t\t\trowEl.parentNode.insertBefore(self.placeholderElement, rowEl.nextSibling);\n\t\t\t\t\tself.moveRow(row, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (self.toRow !== row || self.toRowAfter) {\n\t\t\t\t\tvar rowEl = row.getElement();\n\t\t\t\t\trowEl.parentNode.insertBefore(self.placeholderElement, rowEl);\n\t\t\t\t\tself.moveRow(row, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(self);\n\n\t\tif (!this.hasHandle) {\n\n\t\t\trowEl = row.getElement();\n\n\t\t\trowEl.addEventListener(\"mousedown\", function (e) {\n\t\t\t\tif (e.which === 1) {\n\t\t\t\t\tself.checkTimeout = setTimeout(function () {\n\t\t\t\t\t\tself.startMove(e, row);\n\t\t\t\t\t}, self.checkPeriod);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\trowEl.addEventListener(\"mouseup\", function (e) {\n\t\t\t\tif (e.which === 1) {\n\t\t\t\t\tif (self.checkTimeout) {\n\t\t\t\t\t\tclearTimeout(self.checkTimeout);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.bindTouchEvents(row, row.getElement());\n\t\t}\n\n\t\trow.modules.moveRow = config;\n\t};\n\n\tMoveRows.prototype.initializeCell = function (cell) {\n\t\tvar self = this,\n\t\t    cellEl = cell.getElement();\n\n\t\tcellEl.addEventListener(\"mousedown\", function (e) {\n\t\t\tif (e.which === 1) {\n\t\t\t\tself.checkTimeout = setTimeout(function () {\n\t\t\t\t\tself.startMove(e, cell.row);\n\t\t\t\t}, self.checkPeriod);\n\t\t\t}\n\t\t});\n\n\t\tcellEl.addEventListener(\"mouseup\", function (e) {\n\t\t\tif (e.which === 1) {\n\t\t\t\tif (self.checkTimeout) {\n\t\t\t\t\tclearTimeout(self.checkTimeout);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.bindTouchEvents(cell.row, cell.getElement());\n\t};\n\n\tMoveRows.prototype.bindTouchEvents = function (row, element) {\n\t\tvar self = this,\n\t\t    startYMove = false,\n\t\t    //shifting center position of the cell\n\t\tdir = false,\n\t\t    currentRow,\n\t\t    nextRow,\n\t\t    prevRow,\n\t\t    nextRowHeight,\n\t\t    prevRowHeight,\n\t\t    nextRowHeightLast,\n\t\t    prevRowHeightLast;\n\n\t\telement.addEventListener(\"touchstart\", function (e) {\n\t\t\tself.checkTimeout = setTimeout(function () {\n\t\t\t\tself.touchMove = true;\n\t\t\t\tcurrentRow = row;\n\t\t\t\tnextRow = row.nextRow();\n\t\t\t\tnextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;\n\t\t\t\tprevRow = row.prevRow();\n\t\t\t\tprevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;\n\t\t\t\tnextRowHeightLast = 0;\n\t\t\t\tprevRowHeightLast = 0;\n\t\t\t\tstartYMove = false;\n\n\t\t\t\tself.startMove(e, row);\n\t\t\t}, self.checkPeriod);\n\t\t}, { passive: true });\n\t\tthis.moving, this.toRow, this.toRowAfter;\n\t\telement.addEventListener(\"touchmove\", function (e) {\n\n\t\t\tvar halfCol, diff, moveToRow;\n\n\t\t\tif (self.moving) {\n\t\t\t\te.preventDefault();\n\n\t\t\t\tself.moveHover(e);\n\n\t\t\t\tif (!startYMove) {\n\t\t\t\t\tstartYMove = e.touches[0].pageY;\n\t\t\t\t}\n\n\t\t\t\tdiff = e.touches[0].pageY - startYMove;\n\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tif (nextRow && diff - nextRowHeightLast > nextRowHeight) {\n\t\t\t\t\t\tmoveToRow = nextRow;\n\n\t\t\t\t\t\tif (moveToRow !== row) {\n\t\t\t\t\t\t\tstartYMove = e.touches[0].pageY;\n\t\t\t\t\t\t\tmoveToRow.getElement().parentNode.insertBefore(self.placeholderElement, moveToRow.getElement().nextSibling);\n\t\t\t\t\t\t\tself.moveRow(moveToRow, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (prevRow && -diff - prevRowHeightLast > prevRowHeight) {\n\t\t\t\t\t\tmoveToRow = prevRow;\n\n\t\t\t\t\t\tif (moveToRow !== row) {\n\t\t\t\t\t\t\tstartYMove = e.touches[0].pageY;\n\t\t\t\t\t\t\tmoveToRow.getElement().parentNode.insertBefore(self.placeholderElement, moveToRow.getElement());\n\t\t\t\t\t\t\tself.moveRow(moveToRow, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (moveToRow) {\n\t\t\t\t\tcurrentRow = moveToRow;\n\t\t\t\t\tnextRow = moveToRow.nextRow();\n\t\t\t\t\tnextRowHeightLast = nextRowHeight;\n\t\t\t\t\tnextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;\n\t\t\t\t\tprevRow = moveToRow.prevRow();\n\t\t\t\t\tprevRowHeightLast = prevRowHeight;\n\t\t\t\t\tprevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\telement.addEventListener(\"touchend\", function (e) {\n\t\t\tif (self.checkTimeout) {\n\t\t\t\tclearTimeout(self.checkTimeout);\n\t\t\t}\n\t\t\tif (self.moving) {\n\t\t\t\tself.endMove(e);\n\t\t\t\tself.touchMove = false;\n\t\t\t}\n\t\t});\n\t};\n\n\tMoveRows.prototype._bindMouseMove = function () {\n\t\tvar self = this;\n\n\t\tself.table.rowManager.getDisplayRows().forEach(function (row) {\n\t\t\tif ((row.type === \"row\" || row.type === \"group\") && row.modules.moveRow.mousemove) {\n\t\t\t\trow.getElement().addEventListener(\"mousemove\", row.modules.moveRow.mousemove);\n\t\t\t}\n\t\t});\n\t};\n\n\tMoveRows.prototype._unbindMouseMove = function () {\n\t\tvar self = this;\n\n\t\tself.table.rowManager.getDisplayRows().forEach(function (row) {\n\t\t\tif ((row.type === \"row\" || row.type === \"group\") && row.modules.moveRow.mousemove) {\n\t\t\t\trow.getElement().removeEventListener(\"mousemove\", row.modules.moveRow.mousemove);\n\t\t\t}\n\t\t});\n\t};\n\n\tMoveRows.prototype.startMove = function (e, row) {\n\t\tvar element = row.getElement();\n\n\t\tthis.setStartPosition(e, row);\n\n\t\tthis.moving = row;\n\n\t\tthis.table.element.classList.add(\"tabulator-block-select\");\n\n\t\t//create placeholder\n\t\tthis.placeholderElement.style.width = row.getWidth() + \"px\";\n\t\tthis.placeholderElement.style.height = row.getHeight() + \"px\";\n\n\t\tif (!this.connection) {\n\t\t\telement.parentNode.insertBefore(this.placeholderElement, element);\n\t\t\telement.parentNode.removeChild(element);\n\t\t} else {\n\t\t\tthis.table.element.classList.add(\"tabulator-movingrow-sending\");\n\t\t\tthis.connectToTables(row);\n\t\t}\n\n\t\t//create hover element\n\t\tthis.hoverElement = element.cloneNode(true);\n\t\tthis.hoverElement.classList.add(\"tabulator-moving\");\n\n\t\tif (this.connection) {\n\t\t\tdocument.body.appendChild(this.hoverElement);\n\t\t\tthis.hoverElement.style.left = \"0\";\n\t\t\tthis.hoverElement.style.top = \"0\";\n\t\t\tthis.hoverElement.style.width = this.table.element.clientWidth + \"px\";\n\t\t\tthis.hoverElement.style.whiteSpace = \"nowrap\";\n\t\t\tthis.hoverElement.style.overflow = \"hidden\";\n\t\t\tthis.hoverElement.style.pointerEvents = \"none\";\n\t\t} else {\n\t\t\tthis.table.rowManager.getTableElement().appendChild(this.hoverElement);\n\n\t\t\tthis.hoverElement.style.left = \"0\";\n\t\t\tthis.hoverElement.style.top = \"0\";\n\n\t\t\tthis._bindMouseMove();\n\t\t}\n\n\t\tdocument.body.addEventListener(\"mousemove\", this.moveHover);\n\t\tdocument.body.addEventListener(\"mouseup\", this.endMove);\n\n\t\tthis.moveHover(e);\n\t};\n\n\tMoveRows.prototype.setStartPosition = function (e, row) {\n\t\tvar pageX = this.touchMove ? e.touches[0].pageX : e.pageX,\n\t\t    pageY = this.touchMove ? e.touches[0].pageY : e.pageY,\n\t\t    element,\n\t\t    position;\n\n\t\telement = row.getElement();\n\t\tif (this.connection) {\n\t\t\tposition = element.getBoundingClientRect();\n\n\t\t\tthis.startX = position.left - pageX + window.pageXOffset;\n\t\t\tthis.startY = position.top - pageY + window.pageYOffset;\n\t\t} else {\n\t\t\tthis.startY = pageY - element.getBoundingClientRect().top;\n\t\t}\n\t};\n\n\tMoveRows.prototype.endMove = function (e) {\n\t\tif (!e || e.which === 1 || this.touchMove) {\n\t\t\tthis._unbindMouseMove();\n\n\t\t\tif (!this.connection) {\n\t\t\t\tthis.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);\n\t\t\t\tthis.placeholderElement.parentNode.removeChild(this.placeholderElement);\n\t\t\t}\n\n\t\t\tthis.hoverElement.parentNode.removeChild(this.hoverElement);\n\n\t\t\tthis.table.element.classList.remove(\"tabulator-block-select\");\n\n\t\t\tif (this.toRow) {\n\t\t\t\tthis.table.rowManager.moveRow(this.moving, this.toRow, this.toRowAfter);\n\t\t\t}\n\n\t\t\tthis.moving = false;\n\t\t\tthis.toRow = false;\n\t\t\tthis.toRowAfter = false;\n\n\t\t\tdocument.body.removeEventListener(\"mousemove\", this.moveHover);\n\t\t\tdocument.body.removeEventListener(\"mouseup\", this.endMove);\n\n\t\t\tif (this.connection) {\n\t\t\t\tthis.table.element.classList.remove(\"tabulator-movingrow-sending\");\n\t\t\t\tthis.disconnectFromTables();\n\t\t\t}\n\t\t}\n\t};\n\n\tMoveRows.prototype.moveRow = function (row, after) {\n\t\tthis.toRow = row;\n\t\tthis.toRowAfter = after;\n\t};\n\n\tMoveRows.prototype.moveHover = function (e) {\n\t\tif (this.connection) {\n\t\t\tthis.moveHoverConnections.call(this, e);\n\t\t} else {\n\t\t\tthis.moveHoverTable.call(this, e);\n\t\t}\n\t};\n\n\tMoveRows.prototype.moveHoverTable = function (e) {\n\t\tvar rowHolder = this.table.rowManager.getElement(),\n\t\t    scrollTop = rowHolder.scrollTop,\n\t\t    yPos = (this.touchMove ? e.touches[0].pageY : e.pageY) - rowHolder.getBoundingClientRect().top + scrollTop,\n\t\t    scrollPos;\n\n\t\tthis.hoverElement.style.top = yPos - this.startY + \"px\";\n\t};\n\n\tMoveRows.prototype.moveHoverConnections = function (e) {\n\t\tthis.hoverElement.style.left = this.startX + (this.touchMove ? e.touches[0].pageX : e.pageX) + \"px\";\n\t\tthis.hoverElement.style.top = this.startY + (this.touchMove ? e.touches[0].pageY : e.pageY) + \"px\";\n\t};\n\n\tMoveRows.prototype.elementRowDrop = function (e, element, row) {\n\t\tif (this.table.options.movableRowsElementDrop) {\n\t\t\tthis.table.options.movableRowsElementDrop(e, element, row ? row.getComponent() : false);\n\t\t}\n\t};\n\n\t//establish connection with other tables\n\tMoveRows.prototype.connectToTables = function (row) {\n\t\tvar _this68 = this;\n\n\t\tvar connectionTables;\n\n\t\tif (this.connectionSelectorsTables) {\n\t\t\tconnectionTables = this.table.modules.comms.getConnections(this.connectionSelectorsTables);\n\n\t\t\tthis.table.options.movableRowsSendingStart.call(this.table, connectionTables);\n\n\t\t\tthis.table.modules.comms.send(this.connectionSelectorsTables, \"moveRow\", \"connect\", {\n\t\t\t\trow: row\n\t\t\t});\n\t\t}\n\n\t\tif (this.connectionSelectorsElements) {\n\n\t\t\tthis.connectionElements = [];\n\n\t\t\tif (!Array.isArray(this.connectionSelectorsElements)) {\n\t\t\t\tthis.connectionSelectorsElements = [this.connectionSelectorsElements];\n\t\t\t}\n\n\t\t\tthis.connectionSelectorsElements.forEach(function (query) {\n\t\t\t\tif (typeof query === \"string\") {\n\t\t\t\t\t_this68.connectionElements = _this68.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(query)));\n\t\t\t\t} else {\n\t\t\t\t\t_this68.connectionElements.push(query);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.connectionElements.forEach(function (element) {\n\t\t\t\tvar dropEvent = function dropEvent(e) {\n\t\t\t\t\t_this68.elementRowDrop(e, element, _this68.moving);\n\t\t\t\t};\n\n\t\t\t\telement.addEventListener(\"mouseup\", dropEvent);\n\t\t\t\telement.tabulatorElementDropEvent = dropEvent;\n\n\t\t\t\telement.classList.add(\"tabulator-movingrow-receiving\");\n\t\t\t});\n\t\t}\n\t};\n\n\t//disconnect from other tables\n\tMoveRows.prototype.disconnectFromTables = function () {\n\t\tvar connectionTables;\n\n\t\tif (this.connectionSelectorsTables) {\n\t\t\tconnectionTables = this.table.modules.comms.getConnections(this.connectionSelectorsTables);\n\n\t\t\tthis.table.options.movableRowsSendingStop.call(this.table, connectionTables);\n\n\t\t\tthis.table.modules.comms.send(this.connectionSelectorsTables, \"moveRow\", \"disconnect\");\n\t\t}\n\n\t\tthis.connectionElements.forEach(function (element) {\n\t\t\telement.classList.remove(\"tabulator-movingrow-receiving\");\n\t\t\telement.removeEventListener(\"mouseup\", element.tabulatorElementDropEvent);\n\t\t\tdelete element.tabulatorElementDropEvent;\n\t\t});\n\t};\n\n\t//accept incomming connection\n\tMoveRows.prototype.connect = function (table, row) {\n\t\tvar self = this;\n\t\tif (!this.connectedTable) {\n\t\t\tthis.connectedTable = table;\n\t\t\tthis.connectedRow = row;\n\n\t\t\tthis.table.element.classList.add(\"tabulator-movingrow-receiving\");\n\n\t\t\tself.table.rowManager.getDisplayRows().forEach(function (row) {\n\t\t\t\tif (row.type === \"row\" && row.modules.moveRow && row.modules.moveRow.mouseup) {\n\t\t\t\t\trow.getElement().addEventListener(\"mouseup\", row.modules.moveRow.mouseup);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tself.tableRowDropEvent = self.tableRowDrop.bind(self);\n\n\t\t\tself.table.element.addEventListener(\"mouseup\", self.tableRowDropEvent);\n\n\t\t\tthis.table.options.movableRowsReceivingStart.call(this.table, row, table);\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tconsole.warn(\"Move Row Error - Table cannot accept connection, already connected to table:\", this.connectedTable);\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t//close incomming connection\n\tMoveRows.prototype.disconnect = function (table) {\n\t\tvar self = this;\n\t\tif (table === this.connectedTable) {\n\t\t\tthis.connectedTable = false;\n\t\t\tthis.connectedRow = false;\n\n\t\t\tthis.table.element.classList.remove(\"tabulator-movingrow-receiving\");\n\n\t\t\tself.table.rowManager.getDisplayRows().forEach(function (row) {\n\t\t\t\tif (row.type === \"row\" && row.modules.moveRow && row.modules.moveRow.mouseup) {\n\t\t\t\t\trow.getElement().removeEventListener(\"mouseup\", row.modules.moveRow.mouseup);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tself.table.element.removeEventListener(\"mouseup\", self.tableRowDropEvent);\n\n\t\t\tthis.table.options.movableRowsReceivingStop.call(this.table, table);\n\t\t} else {\n\t\t\tconsole.warn(\"Move Row Error - trying to disconnect from non connected table\");\n\t\t}\n\t};\n\n\tMoveRows.prototype.dropComplete = function (table, row, success) {\n\t\tvar sender = false;\n\n\t\tif (success) {\n\n\t\t\tswitch (_typeof(this.table.options.movableRowsSender)) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tsender = this.senders[this.table.options.movableRowsSender];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"function\":\n\t\t\t\t\tsender = this.table.options.movableRowsSender;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (sender) {\n\t\t\t\tsender.call(this, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n\t\t\t} else {\n\t\t\t\tif (this.table.options.movableRowsSender) {\n\t\t\t\t\tconsole.warn(\"Mover Row Error - no matching sender found:\", this.table.options.movableRowsSender);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.table.options.movableRowsSent.call(this.table, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n\t\t} else {\n\t\t\tthis.table.options.movableRowsSentFailed.call(this.table, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n\t\t}\n\n\t\tthis.endMove();\n\t};\n\n\tMoveRows.prototype.tableRowDrop = function (e, row) {\n\t\tvar receiver = false,\n\t\t    success = false;\n\n\t\tconsole.trace(\"drop\");\n\n\t\te.stopImmediatePropagation();\n\n\t\tswitch (_typeof(this.table.options.movableRowsReceiver)) {\n\t\t\tcase \"string\":\n\t\t\t\treceiver = this.receivers[this.table.options.movableRowsReceiver];\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\treceiver = this.table.options.movableRowsReceiver;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (receiver) {\n\t\t\tsuccess = receiver.call(this, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n\t\t} else {\n\t\t\tconsole.warn(\"Mover Row Error - no matching receiver found:\", this.table.options.movableRowsReceiver);\n\t\t}\n\n\t\tif (success) {\n\t\t\tthis.table.options.movableRowsReceived.call(this.table, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n\t\t} else {\n\t\t\tthis.table.options.movableRowsReceivedFailed.call(this.table, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n\t\t}\n\n\t\tthis.table.modules.comms.send(this.connectedTable, \"moveRow\", \"dropcomplete\", {\n\t\t\trow: row,\n\t\t\tsuccess: success\n\t\t});\n\t};\n\n\tMoveRows.prototype.receivers = {\n\t\tinsert: function insert(fromRow, toRow, fromTable) {\n\t\t\tthis.table.addRow(fromRow.getData(), undefined, toRow);\n\t\t\treturn true;\n\t\t},\n\n\t\tadd: function add(fromRow, toRow, fromTable) {\n\t\t\tthis.table.addRow(fromRow.getData());\n\t\t\treturn true;\n\t\t},\n\n\t\tupdate: function update(fromRow, toRow, fromTable) {\n\t\t\tif (toRow) {\n\t\t\t\ttoRow.update(fromRow.getData());\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\treplace: function replace(fromRow, toRow, fromTable) {\n\t\t\tif (toRow) {\n\t\t\t\tthis.table.addRow(fromRow.getData(), undefined, toRow);\n\t\t\t\ttoRow.delete();\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tMoveRows.prototype.senders = {\n\t\tdelete: function _delete(fromRow, toRow, toTable) {\n\t\t\tfromRow.delete();\n\t\t}\n\t};\n\n\tMoveRows.prototype.commsReceived = function (table, action, data) {\n\t\tswitch (action) {\n\t\t\tcase \"connect\":\n\t\t\t\treturn this.connect(table, data.row);\n\t\t\t\tbreak;\n\n\t\t\tcase \"disconnect\":\n\t\t\t\treturn this.disconnect(table);\n\t\t\t\tbreak;\n\n\t\t\tcase \"dropcomplete\":\n\t\t\t\treturn this.dropComplete(table, data.row, data.success);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"moveRow\", MoveRows);\n\tvar Mutator = function Mutator(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.allowedTypes = [\"\", \"data\", \"edit\", \"clipboard\"]; //list of muatation types\n\t\tthis.enabled = true;\n\t};\n\n\t//initialize column mutator\n\tMutator.prototype.initializeColumn = function (column) {\n\t\tvar self = this,\n\t\t    match = false,\n\t\t    config = {};\n\n\t\tthis.allowedTypes.forEach(function (type) {\n\t\t\tvar key = \"mutator\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n\t\t\t    mutator;\n\n\t\t\tif (column.definition[key]) {\n\t\t\t\tmutator = self.lookupMutator(column.definition[key]);\n\n\t\t\t\tif (mutator) {\n\t\t\t\t\tmatch = true;\n\n\t\t\t\t\tconfig[key] = {\n\t\t\t\t\t\tmutator: mutator,\n\t\t\t\t\t\tparams: column.definition[key + \"Params\"] || {}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (match) {\n\t\t\tcolumn.modules.mutate = config;\n\t\t}\n\t};\n\n\tMutator.prototype.lookupMutator = function (value) {\n\t\tvar mutator = false;\n\n\t\t//set column mutator\n\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\t\t\tcase \"string\":\n\t\t\t\tif (this.mutators[value]) {\n\t\t\t\t\tmutator = this.mutators[value];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Mutator Error - No such mutator found, ignoring: \", value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tmutator = value;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn mutator;\n\t};\n\n\t//apply mutator to row\n\tMutator.prototype.transformRow = function (data, type, updatedData) {\n\t\tvar self = this,\n\t\t    key = \"mutator\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n\t\t    value;\n\n\t\tif (this.enabled) {\n\n\t\t\tself.table.columnManager.traverse(function (column) {\n\t\t\t\tvar mutator, params, component;\n\n\t\t\t\tif (column.modules.mutate) {\n\t\t\t\t\tmutator = column.modules.mutate[key] || column.modules.mutate.mutator || false;\n\n\t\t\t\t\tif (mutator) {\n\t\t\t\t\t\tvalue = column.getFieldValue(typeof updatedData !== \"undefined\" ? updatedData : data);\n\n\t\t\t\t\t\tif (type == \"data\" || typeof value !== \"undefined\") {\n\t\t\t\t\t\t\tcomponent = column.getComponent();\n\t\t\t\t\t\t\tparams = typeof mutator.params === \"function\" ? mutator.params(value, data, type, component) : mutator.params;\n\t\t\t\t\t\t\tcolumn.setFieldValue(data, mutator.mutator(value, data, type, params, component));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t};\n\n\t//apply mutator to new cell value\n\tMutator.prototype.transformCell = function (cell, value) {\n\t\tvar mutator = cell.column.modules.mutate.mutatorEdit || cell.column.modules.mutate.mutator || false,\n\t\t    tempData = {};\n\n\t\tif (mutator) {\n\t\t\ttempData = Object.assign(tempData, cell.row.getData());\n\t\t\tcell.column.setFieldValue(tempData, value);\n\t\t\treturn mutator.mutator(value, tempData, \"edit\", mutator.params, cell.getComponent());\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t};\n\n\tMutator.prototype.enable = function () {\n\t\tthis.enabled = true;\n\t};\n\n\tMutator.prototype.disable = function () {\n\t\tthis.enabled = false;\n\t};\n\n\t//default mutators\n\tMutator.prototype.mutators = {};\n\n\tTabulator.prototype.registerModule(\"mutator\", Mutator);\n\tvar Page = function Page(table) {\n\n\t\tthis.table = table; //hold Tabulator object\n\n\t\tthis.mode = \"local\";\n\t\tthis.progressiveLoad = false;\n\n\t\tthis.size = 0;\n\t\tthis.page = 1;\n\t\tthis.count = 5;\n\t\tthis.max = 1;\n\n\t\tthis.displayIndex = 0; //index in display pipeline\n\n\t\tthis.initialLoad = true;\n\n\t\tthis.pageSizes = [];\n\n\t\tthis.dataReceivedNames = {};\n\t\tthis.dataSentNames = {};\n\n\t\tthis.createElements();\n\t};\n\n\tPage.prototype.createElements = function () {\n\n\t\tvar button;\n\n\t\tthis.element = document.createElement(\"span\");\n\t\tthis.element.classList.add(\"tabulator-paginator\");\n\n\t\tthis.pagesElement = document.createElement(\"span\");\n\t\tthis.pagesElement.classList.add(\"tabulator-pages\");\n\n\t\tbutton = document.createElement(\"button\");\n\t\tbutton.classList.add(\"tabulator-page\");\n\t\tbutton.setAttribute(\"type\", \"button\");\n\t\tbutton.setAttribute(\"role\", \"button\");\n\t\tbutton.setAttribute(\"aria-label\", \"\");\n\t\tbutton.setAttribute(\"title\", \"\");\n\n\t\tthis.firstBut = button.cloneNode(true);\n\t\tthis.firstBut.setAttribute(\"data-page\", \"first\");\n\n\t\tthis.prevBut = button.cloneNode(true);\n\t\tthis.prevBut.setAttribute(\"data-page\", \"prev\");\n\n\t\tthis.nextBut = button.cloneNode(true);\n\t\tthis.nextBut.setAttribute(\"data-page\", \"next\");\n\n\t\tthis.lastBut = button.cloneNode(true);\n\t\tthis.lastBut.setAttribute(\"data-page\", \"last\");\n\n\t\tif (this.table.options.paginationSizeSelector) {\n\t\t\tthis.pageSizeSelect = document.createElement(\"select\");\n\t\t\tthis.pageSizeSelect.classList.add(\"tabulator-page-size\");\n\t\t}\n\t};\n\n\tPage.prototype.generatePageSizeSelectList = function () {\n\t\tvar _this69 = this;\n\n\t\tvar pageSizes = [];\n\n\t\tif (this.pageSizeSelect) {\n\n\t\t\tif (Array.isArray(this.table.options.paginationSizeSelector)) {\n\t\t\t\tpageSizes = this.table.options.paginationSizeSelector;\n\t\t\t\tthis.pageSizes = pageSizes;\n\n\t\t\t\tif (this.pageSizes.indexOf(this.size) == -1) {\n\t\t\t\t\tpageSizes.unshift(this.size);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (this.pageSizes.indexOf(this.size) == -1) {\n\t\t\t\t\tpageSizes = [];\n\n\t\t\t\t\tfor (var _i10 = 1; _i10 < 5; _i10++) {\n\t\t\t\t\t\tpageSizes.push(this.size * _i10);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.pageSizes = pageSizes;\n\t\t\t\t} else {\n\t\t\t\t\tpageSizes = this.pageSizes;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (this.pageSizeSelect.firstChild) {\n\t\t\t\tthis.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);\n\t\t\t}pageSizes.forEach(function (item) {\n\t\t\t\tvar itemEl = document.createElement(\"option\");\n\t\t\t\titemEl.value = item;\n\n\t\t\t\tif (item === true) {\n\t\t\t\t\t_this69.table.modules.localize.bind(\"pagination|all\", function (value) {\n\t\t\t\t\t\titemEl.innerHTML = value;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\titemEl.innerHTML = item;\n\t\t\t\t}\n\n\t\t\t\t_this69.pageSizeSelect.appendChild(itemEl);\n\t\t\t});\n\n\t\t\tthis.pageSizeSelect.value = this.size;\n\t\t}\n\t};\n\n\t//setup pageination\n\tPage.prototype.initialize = function (hidden) {\n\t\tvar self = this,\n\t\t    pageSelectLabel,\n\t\t    testElRow,\n\t\t    testElCell;\n\n\t\t//update param names\n\t\tthis.dataSentNames = Object.assign({}, this.paginationDataSentNames);\n\t\tthis.dataSentNames = Object.assign(this.dataSentNames, this.table.options.paginationDataSent);\n\n\t\tthis.dataReceivedNames = Object.assign({}, this.paginationDataReceivedNames);\n\t\tthis.dataReceivedNames = Object.assign(this.dataReceivedNames, this.table.options.paginationDataReceived);\n\n\t\t//build pagination element\n\n\t\t//bind localizations\n\t\tself.table.modules.localize.bind(\"pagination|first\", function (value) {\n\t\t\tself.firstBut.innerHTML = value;\n\t\t});\n\n\t\tself.table.modules.localize.bind(\"pagination|first_title\", function (value) {\n\t\t\tself.firstBut.setAttribute(\"aria-label\", value);\n\t\t\tself.firstBut.setAttribute(\"title\", value);\n\t\t});\n\n\t\tself.table.modules.localize.bind(\"pagination|prev\", function (value) {\n\t\t\tself.prevBut.innerHTML = value;\n\t\t});\n\n\t\tself.table.modules.localize.bind(\"pagination|prev_title\", function (value) {\n\t\t\tself.prevBut.setAttribute(\"aria-label\", value);\n\t\t\tself.prevBut.setAttribute(\"title\", value);\n\t\t});\n\n\t\tself.table.modules.localize.bind(\"pagination|next\", function (value) {\n\t\t\tself.nextBut.innerHTML = value;\n\t\t});\n\n\t\tself.table.modules.localize.bind(\"pagination|next_title\", function (value) {\n\t\t\tself.nextBut.setAttribute(\"aria-label\", value);\n\t\t\tself.nextBut.setAttribute(\"title\", value);\n\t\t});\n\n\t\tself.table.modules.localize.bind(\"pagination|last\", function (value) {\n\t\t\tself.lastBut.innerHTML = value;\n\t\t});\n\n\t\tself.table.modules.localize.bind(\"pagination|last_title\", function (value) {\n\t\t\tself.lastBut.setAttribute(\"aria-label\", value);\n\t\t\tself.lastBut.setAttribute(\"title\", value);\n\t\t});\n\n\t\t//click bindings\n\t\tself.firstBut.addEventListener(\"click\", function () {\n\t\t\tself.setPage(1);\n\t\t});\n\n\t\tself.prevBut.addEventListener(\"click\", function () {\n\t\t\tself.previousPage();\n\t\t});\n\n\t\tself.nextBut.addEventListener(\"click\", function () {\n\t\t\tself.nextPage().then(function () {}).catch(function () {});\n\t\t});\n\n\t\tself.lastBut.addEventListener(\"click\", function () {\n\t\t\tself.setPage(self.max);\n\t\t});\n\n\t\tif (self.table.options.paginationElement) {\n\t\t\tself.element = self.table.options.paginationElement;\n\t\t}\n\n\t\tif (this.pageSizeSelect) {\n\t\t\tpageSelectLabel = document.createElement(\"label\");\n\n\t\t\tself.table.modules.localize.bind(\"pagination|page_size\", function (value) {\n\t\t\t\tself.pageSizeSelect.setAttribute(\"aria-label\", value);\n\t\t\t\tself.pageSizeSelect.setAttribute(\"title\", value);\n\t\t\t\tpageSelectLabel.innerHTML = value;\n\t\t\t});\n\n\t\t\tself.element.appendChild(pageSelectLabel);\n\t\t\tself.element.appendChild(self.pageSizeSelect);\n\n\t\t\tself.pageSizeSelect.addEventListener(\"change\", function (e) {\n\t\t\t\tself.setPageSize(self.pageSizeSelect.value == \"true\" ? true : self.pageSizeSelect.value);\n\t\t\t\tself.setPage(1).then(function () {}).catch(function () {});\n\t\t\t});\n\t\t}\n\n\t\t//append to DOM\n\t\tself.element.appendChild(self.firstBut);\n\t\tself.element.appendChild(self.prevBut);\n\t\tself.element.appendChild(self.pagesElement);\n\t\tself.element.appendChild(self.nextBut);\n\t\tself.element.appendChild(self.lastBut);\n\n\t\tif (!self.table.options.paginationElement && !hidden) {\n\t\t\tself.table.footerManager.append(self.element, self);\n\t\t}\n\n\t\t//set default values\n\t\tself.mode = self.table.options.pagination;\n\n\t\tif (self.table.options.paginationSize) {\n\t\t\tself.size = self.table.options.paginationSize;\n\t\t} else {\n\t\t\ttestElRow = document.createElement(\"div\");\n\t\t\ttestElRow.classList.add(\"tabulator-row\");\n\t\t\ttestElRow.style.visibility = hidden;\n\n\t\t\ttestElCell = document.createElement(\"div\");\n\t\t\ttestElCell.classList.add(\"tabulator-cell\");\n\t\t\ttestElCell.innerHTML = \"Page Row Test\";\n\n\t\t\ttestElRow.appendChild(testElCell);\n\n\t\t\tself.table.rowManager.getTableElement().appendChild(testElRow);\n\n\t\t\tself.size = Math.floor(self.table.rowManager.getElement().clientHeight / testElRow.offsetHeight);\n\n\t\t\tself.table.rowManager.getTableElement().removeChild(testElRow);\n\t\t}\n\n\t\t// self.page = self.table.options.paginationInitialPage || 1;\n\t\tself.count = self.table.options.paginationButtonCount;\n\n\t\tself.generatePageSizeSelectList();\n\t};\n\n\tPage.prototype.initializeProgressive = function (mode) {\n\t\tthis.initialize(true);\n\t\tthis.mode = \"progressive_\" + mode;\n\t\tthis.progressiveLoad = true;\n\t};\n\n\tPage.prototype.setDisplayIndex = function (index) {\n\t\tthis.displayIndex = index;\n\t};\n\n\tPage.prototype.getDisplayIndex = function () {\n\t\treturn this.displayIndex;\n\t};\n\n\t//calculate maximum page from number of rows\n\tPage.prototype.setMaxRows = function (rowCount) {\n\t\tif (!rowCount) {\n\t\t\tthis.max = 1;\n\t\t} else {\n\t\t\tthis.max = this.size === true ? 1 : Math.ceil(rowCount / this.size);\n\t\t}\n\n\t\tif (this.page > this.max) {\n\t\t\tthis.page = this.max;\n\t\t}\n\t};\n\n\t//reset to first page without triggering action\n\tPage.prototype.reset = function (force, columnsChanged) {\n\t\tif (this.mode == \"local\" || force) {\n\t\t\tthis.page = 1;\n\t\t}\n\n\t\tif (columnsChanged) {\n\t\t\tthis.initialLoad = true;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t//set the maxmum page\n\tPage.prototype.setMaxPage = function (max) {\n\n\t\tmax = parseInt(max);\n\n\t\tthis.max = max || 1;\n\n\t\tif (this.page > this.max) {\n\t\t\tthis.page = this.max;\n\t\t\tthis.trigger();\n\t\t}\n\t};\n\n\t//set current page number\n\tPage.prototype.setPage = function (page) {\n\t\tvar _this70 = this;\n\n\t\tvar self = this;\n\n\t\tswitch (page) {\n\t\t\tcase \"first\":\n\t\t\t\treturn this.setPage(1);\n\t\t\t\tbreak;\n\n\t\t\tcase \"prev\":\n\t\t\t\treturn this.previousPage();\n\t\t\t\tbreak;\n\n\t\t\tcase \"next\":\n\t\t\t\treturn this.nextPage();\n\t\t\t\tbreak;\n\n\t\t\tcase \"last\":\n\t\t\t\treturn this.setPage(this.max);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tpage = parseInt(page);\n\n\t\t\tif (page > 0 && page <= _this70.max) {\n\t\t\t\t_this70.page = page;\n\t\t\t\t_this70.trigger().then(function () {\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function () {\n\t\t\t\t\treject();\n\t\t\t\t});\n\n\t\t\t\tif (self.table.options.persistence && self.table.modExists(\"persistence\", true) && self.table.modules.persistence.config.page) {\n\t\t\t\t\tself.table.modules.persistence.save(\"page\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Pagination Error - Requested page is out of range of 1 - \" + _this70.max + \":\", page);\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\tPage.prototype.setPageToRow = function (row) {\n\t\tvar _this71 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tvar rows = _this71.table.rowManager.getDisplayRows(_this71.displayIndex - 1);\n\t\t\tvar index = rows.indexOf(row);\n\n\t\t\tif (index > -1) {\n\t\t\t\tvar page = _this71.size === true ? 1 : Math.ceil((index + 1) / _this71.size);\n\n\t\t\t\t_this71.setPage(page).then(function () {\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function () {\n\t\t\t\t\treject();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Pagination Error - Requested row is not visible\");\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\tPage.prototype.setPageSize = function (size) {\n\t\tif (size !== true) {\n\t\t\tsize = parseInt(size);\n\t\t}\n\n\t\tif (size > 0) {\n\t\t\tthis.size = size;\n\t\t}\n\n\t\tif (this.pageSizeSelect) {\n\t\t\t// this.pageSizeSelect.value = size;\n\t\t\tthis.generatePageSizeSelectList();\n\t\t}\n\n\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.page) {\n\t\t\tthis.table.modules.persistence.save(\"page\");\n\t\t}\n\t};\n\n\t//setup the pagination buttons\n\tPage.prototype._setPageButtons = function () {\n\t\tvar self = this;\n\n\t\tvar leftSize = Math.floor((this.count - 1) / 2);\n\t\tvar rightSize = Math.ceil((this.count - 1) / 2);\n\t\tvar min = this.max - this.page + leftSize + 1 < this.count ? this.max - this.count + 1 : Math.max(this.page - leftSize, 1);\n\t\tvar max = this.page <= rightSize ? Math.min(this.count, this.max) : Math.min(this.page + rightSize, this.max);\n\n\t\twhile (self.pagesElement.firstChild) {\n\t\t\tself.pagesElement.removeChild(self.pagesElement.firstChild);\n\t\t}if (self.page == 1) {\n\t\t\tself.firstBut.disabled = true;\n\t\t\tself.prevBut.disabled = true;\n\t\t} else {\n\t\t\tself.firstBut.disabled = false;\n\t\t\tself.prevBut.disabled = false;\n\t\t}\n\n\t\tif (self.page == self.max) {\n\t\t\tself.lastBut.disabled = true;\n\t\t\tself.nextBut.disabled = true;\n\t\t} else {\n\t\t\tself.lastBut.disabled = false;\n\t\t\tself.nextBut.disabled = false;\n\t\t}\n\n\t\tfor (var _i11 = min; _i11 <= max; _i11++) {\n\t\t\tif (_i11 > 0 && _i11 <= self.max) {\n\t\t\t\tself.pagesElement.appendChild(self._generatePageButton(_i11));\n\t\t\t}\n\t\t}\n\n\t\tthis.footerRedraw();\n\t};\n\n\tPage.prototype._generatePageButton = function (page) {\n\t\tvar self = this,\n\t\t    button = document.createElement(\"button\");\n\n\t\tbutton.classList.add(\"tabulator-page\");\n\t\tif (page == self.page) {\n\t\t\tbutton.classList.add(\"active\");\n\t\t}\n\n\t\tbutton.setAttribute(\"type\", \"button\");\n\t\tbutton.setAttribute(\"role\", \"button\");\n\n\t\tself.table.modules.localize.bind(\"pagination|page_title\", function (value) {\n\t\t\tbutton.setAttribute(\"aria-label\", value + \" \" + page);\n\t\t\tbutton.setAttribute(\"title\", value + \" \" + page);\n\t\t});\n\n\t\tbutton.setAttribute(\"data-page\", page);\n\t\tbutton.textContent = page;\n\n\t\tbutton.addEventListener(\"click\", function (e) {\n\t\t\tself.setPage(page);\n\t\t});\n\n\t\treturn button;\n\t};\n\n\t//previous page\n\tPage.prototype.previousPage = function () {\n\t\tvar _this72 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tif (_this72.page > 1) {\n\t\t\t\t_this72.page--;\n\t\t\t\t_this72.trigger().then(function () {\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function () {\n\t\t\t\t\treject();\n\t\t\t\t});\n\n\t\t\t\tif (_this72.table.options.persistence && _this72.table.modExists(\"persistence\", true) && _this72.table.modules.persistence.config.page) {\n\t\t\t\t\t_this72.table.modules.persistence.save(\"page\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Pagination Error - Previous page would be less than page 1:\", 0);\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\t//next page\n\tPage.prototype.nextPage = function () {\n\t\tvar _this73 = this;\n\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tif (_this73.page < _this73.max) {\n\t\t\t\t_this73.page++;\n\t\t\t\t_this73.trigger().then(function () {\n\t\t\t\t\tresolve();\n\t\t\t\t}).catch(function () {\n\t\t\t\t\treject();\n\t\t\t\t});\n\n\t\t\t\tif (_this73.table.options.persistence && _this73.table.modExists(\"persistence\", true) && _this73.table.modules.persistence.config.page) {\n\t\t\t\t\t_this73.table.modules.persistence.save(\"page\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!_this73.progressiveLoad) {\n\t\t\t\t\tconsole.warn(\"Pagination Error - Next page would be greater than maximum page of \" + _this73.max + \":\", _this73.max + 1);\n\t\t\t\t}\n\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\t//return current page number\n\tPage.prototype.getPage = function () {\n\t\treturn this.page;\n\t};\n\n\t//return max page number\n\tPage.prototype.getPageMax = function () {\n\t\treturn this.max;\n\t};\n\n\tPage.prototype.getPageSize = function (size) {\n\t\treturn this.size;\n\t};\n\n\tPage.prototype.getMode = function () {\n\t\treturn this.mode;\n\t};\n\n\t//return appropriate rows for current page\n\tPage.prototype.getRows = function (data) {\n\t\tvar output, start, end;\n\n\t\tif (this.mode == \"local\") {\n\t\t\toutput = [];\n\n\t\t\tif (this.size === true) {\n\t\t\t\tstart = 0;\n\t\t\t\tend = data.length - 1;\n\t\t\t} else {\n\t\t\t\tstart = this.size * (this.page - 1);\n\t\t\t\tend = start + parseInt(this.size);\n\t\t\t}\n\n\t\t\tthis._setPageButtons();\n\n\t\t\tfor (var _i12 = start; _i12 < end; _i12++) {\n\t\t\t\tif (data[_i12]) {\n\t\t\t\t\toutput.push(data[_i12]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn output;\n\t\t} else {\n\n\t\t\tthis._setPageButtons();\n\n\t\t\treturn data.slice(0);\n\t\t}\n\t};\n\n\tPage.prototype.trigger = function () {\n\t\tvar _this74 = this;\n\n\t\tvar left;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tswitch (_this74.mode) {\n\t\t\t\tcase \"local\":\n\t\t\t\t\tleft = _this74.table.rowManager.scrollLeft;\n\n\t\t\t\t\t_this74.table.rowManager.refreshActiveData(\"page\");\n\t\t\t\t\t_this74.table.rowManager.scrollHorizontal(left);\n\n\t\t\t\t\t_this74.table.options.pageLoaded.call(_this74.table, _this74.getPage());\n\t\t\t\t\tresolve();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"remote\":\n\t\t\t\tcase \"progressive_load\":\n\t\t\t\tcase \"progressive_scroll\":\n\t\t\t\t\t_this74.table.modules.ajax.blockActiveRequest();\n\t\t\t\t\t_this74._getRemotePage().then(function () {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}).catch(function () {\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn(\"Pagination Error - no such pagination mode:\", _this74.mode);\n\t\t\t\t\treject();\n\t\t\t}\n\t\t});\n\t};\n\n\tPage.prototype._getRemotePage = function () {\n\t\tvar _this75 = this;\n\n\t\tvar self = this,\n\t\t    oldParams,\n\t\t    pageParams;\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tif (!self.table.modExists(\"ajax\", true)) {\n\t\t\t\treject();\n\t\t\t}\n\n\t\t\t//record old params and restore after request has been made\n\t\t\toldParams = Tabulator.prototype.helpers.deepClone(self.table.modules.ajax.getParams() || {});\n\t\t\tpageParams = self.table.modules.ajax.getParams();\n\n\t\t\t//configure request params\n\t\t\tpageParams[_this75.dataSentNames.page] = self.page;\n\n\t\t\t//set page size if defined\n\t\t\tif (_this75.size) {\n\t\t\t\tpageParams[_this75.dataSentNames.size] = _this75.size;\n\t\t\t}\n\n\t\t\t//set sort data if defined\n\t\t\tif (_this75.table.options.ajaxSorting && _this75.table.modExists(\"sort\")) {\n\t\t\t\tvar sorters = self.table.modules.sort.getSort();\n\n\t\t\t\tsorters.forEach(function (item) {\n\t\t\t\t\tdelete item.column;\n\t\t\t\t});\n\n\t\t\t\tpageParams[_this75.dataSentNames.sorters] = sorters;\n\t\t\t}\n\n\t\t\t//set filter data if defined\n\t\t\tif (_this75.table.options.ajaxFiltering && _this75.table.modExists(\"filter\")) {\n\t\t\t\tvar filters = self.table.modules.filter.getFilters(true, true);\n\t\t\t\tpageParams[_this75.dataSentNames.filters] = filters;\n\t\t\t}\n\n\t\t\tself.table.modules.ajax.setParams(pageParams);\n\n\t\t\tself.table.modules.ajax.sendRequest(_this75.progressiveLoad).then(function (data) {\n\t\t\t\tself._parseRemoteData(data);\n\t\t\t\tresolve();\n\t\t\t}).catch(function (e) {\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tself.table.modules.ajax.setParams(oldParams);\n\t\t});\n\t};\n\n\tPage.prototype._parseRemoteData = function (data) {\n\t\tvar self = this,\n\t\t    left,\n\t\t    data,\n\t\t    margin;\n\n\t\tif (typeof data[this.dataReceivedNames.last_page] === \"undefined\") {\n\t\t\tconsole.warn(\"Remote Pagination Error - Server response missing '\" + this.dataReceivedNames.last_page + \"' property\");\n\t\t}\n\n\t\tif (data[this.dataReceivedNames.data]) {\n\t\t\tthis.max = parseInt(data[this.dataReceivedNames.last_page]) || 1;\n\n\t\t\tif (this.progressiveLoad) {\n\t\t\t\tswitch (this.mode) {\n\t\t\t\t\tcase \"progressive_load\":\n\n\t\t\t\t\t\tif (this.page == 1) {\n\t\t\t\t\t\t\tthis.table.rowManager.setData(data[this.dataReceivedNames.data], false, this.initialLoad && this.page == 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.table.rowManager.addRows(data[this.dataReceivedNames.data]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.page < this.max) {\n\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\tself.nextPage().then(function () {}).catch(function () {});\n\t\t\t\t\t\t\t}, self.table.options.ajaxProgressiveLoadDelay);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"progressive_scroll\":\n\t\t\t\t\t\tdata = this.table.rowManager.getData().concat(data[this.dataReceivedNames.data]);\n\n\t\t\t\t\t\tthis.table.rowManager.setData(data, true, this.initialLoad && this.page == 1);\n\n\t\t\t\t\t\tmargin = this.table.options.ajaxProgressiveLoadScrollMargin || this.table.rowManager.element.clientHeight * 2;\n\n\t\t\t\t\t\tif (self.table.rowManager.element.scrollHeight <= self.table.rowManager.element.clientHeight + margin) {\n\t\t\t\t\t\t\tself.nextPage().then(function () {}).catch(function () {});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tleft = this.table.rowManager.scrollLeft;\n\n\t\t\t\tthis.table.rowManager.setData(data[this.dataReceivedNames.data], false, this.initialLoad && this.page == 1);\n\n\t\t\t\tthis.table.rowManager.scrollHorizontal(left);\n\n\t\t\t\tthis.table.columnManager.scrollHorizontal(left);\n\n\t\t\t\tthis.table.options.pageLoaded.call(this.table, this.getPage());\n\t\t\t}\n\n\t\t\tthis.initialLoad = false;\n\t\t} else {\n\t\t\tconsole.warn(\"Remote Pagination Error - Server response missing '\" + this.dataReceivedNames.data + \"' property\");\n\t\t}\n\t};\n\n\t//handle the footer element being redrawn\n\tPage.prototype.footerRedraw = function () {\n\t\tvar footer = this.table.footerManager.element;\n\n\t\tif (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {\n\t\t\tthis.pagesElement.style.display = 'none';\n\t\t} else {\n\t\t\tthis.pagesElement.style.display = '';\n\n\t\t\tif (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {\n\t\t\t\tthis.pagesElement.style.display = 'none';\n\t\t\t}\n\t\t}\n\t};\n\n\t//set the paramter names for pagination requests\n\tPage.prototype.paginationDataSentNames = {\n\t\t\"page\": \"page\",\n\t\t\"size\": \"size\",\n\t\t\"sorters\": \"sorters\",\n\t\t// \"sort_dir\":\"sort_dir\",\n\t\t\"filters\": \"filters\"\n\t\t// \"filter_value\":\"filter_value\",\n\t\t// \"filter_type\":\"filter_type\",\n\t};\n\n\t//set the property names for pagination responses\n\tPage.prototype.paginationDataReceivedNames = {\n\t\t\"current_page\": \"current_page\",\n\t\t\"last_page\": \"last_page\",\n\t\t\"data\": \"data\"\n\t};\n\n\tTabulator.prototype.registerModule(\"page\", Page);\n\n\tvar Persistence = function Persistence(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.mode = \"\";\n\t\tthis.id = \"\";\n\t\t// this.persistProps = [\"field\", \"width\", \"visible\"];\n\t\tthis.defWatcherBlock = false;\n\t\tthis.config = {};\n\t\tthis.readFunc = false;\n\t\tthis.writeFunc = false;\n\t};\n\n\t// Test for whether localStorage is available for use.\n\tPersistence.prototype.localStorageTest = function () {\n\t\tvar testKey = \"_tabulator_test\";\n\n\t\ttry {\n\t\t\twindow.localStorage.setItem(testKey, testKey);\n\t\t\twindow.localStorage.removeItem(testKey);\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t//setup parameters\n\tPersistence.prototype.initialize = function () {\n\t\t//determine persistent layout storage type\n\n\t\tvar mode = this.table.options.persistenceMode,\n\t\t    id = this.table.options.persistenceID,\n\t\t    retreivedData;\n\n\t\tthis.mode = mode !== true ? mode : this.localStorageTest() ? \"local\" : \"cookie\";\n\n\t\tif (this.table.options.persistenceReaderFunc) {\n\t\t\tif (typeof this.table.options.persistenceReaderFunc === \"function\") {\n\t\t\t\tthis.readFunc = this.table.options.persistenceReaderFunc;\n\t\t\t} else {\n\t\t\t\tif (this.readers[this.table.options.persistenceReaderFunc]) {\n\t\t\t\t\tthis.readFunc = this.readers[this.table.options.persistenceReaderFunc];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Persistence Read Error - invalid reader set\", this.table.options.persistenceReaderFunc);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.readers[this.mode]) {\n\t\t\t\tthis.readFunc = this.readers[this.mode];\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Persistence Read Error - invalid reader set\", this.mode);\n\t\t\t}\n\t\t}\n\n\t\tif (this.table.options.persistenceWriterFunc) {\n\t\t\tif (typeof this.table.options.persistenceWriterFunc === \"function\") {\n\t\t\t\tthis.writeFunc = this.table.options.persistenceWriterFunc;\n\t\t\t} else {\n\t\t\t\tif (this.readers[this.table.options.persistenceWriterFunc]) {\n\t\t\t\t\tthis.writeFunc = this.readers[this.table.options.persistenceWriterFunc];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Persistence Write Error - invalid reader set\", this.table.options.persistenceWriterFunc);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.writers[this.mode]) {\n\t\t\t\tthis.writeFunc = this.writers[this.mode];\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Persistence Write Error - invalid writer set\", this.mode);\n\t\t\t}\n\t\t}\n\n\t\t//set storage tag\n\t\tthis.id = \"tabulator-\" + (id || this.table.element.getAttribute(\"id\") || \"\");\n\n\t\tthis.config = {\n\t\t\tsort: this.table.options.persistence === true || this.table.options.persistence.sort,\n\t\t\tfilter: this.table.options.persistence === true || this.table.options.persistence.filter,\n\t\t\tgroup: this.table.options.persistence === true || this.table.options.persistence.group,\n\t\t\tpage: this.table.options.persistence === true || this.table.options.persistence.page,\n\t\t\tcolumns: this.table.options.persistence === true ? [\"title\", \"width\", \"visible\"] : this.table.options.persistence.columns\n\t\t};\n\n\t\t//load pagination data if needed\n\t\tif (this.config.page) {\n\t\t\tretreivedData = this.retreiveData(\"page\");\n\n\t\t\tif (retreivedData) {\n\t\t\t\tif (typeof retreivedData.paginationSize !== \"undefined\" && (this.config.page === true || this.config.page.size)) {\n\t\t\t\t\tthis.table.options.paginationSize = retreivedData.paginationSize;\n\t\t\t\t}\n\n\t\t\t\tif (typeof retreivedData.paginationInitialPage !== \"undefined\" && (this.config.page === true || this.config.page.page)) {\n\t\t\t\t\tthis.table.options.paginationInitialPage = retreivedData.paginationInitialPage;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//load group data if needed\n\t\tif (this.config.group) {\n\t\t\tretreivedData = this.retreiveData(\"group\");\n\n\t\t\tif (retreivedData) {\n\t\t\t\tif (typeof retreivedData.groupBy !== \"undefined\" && (this.config.group === true || this.config.group.groupBy)) {\n\t\t\t\t\tthis.table.options.groupBy = retreivedData.groupBy;\n\t\t\t\t}\n\t\t\t\tif (typeof retreivedData.groupStartOpen !== \"undefined\" && (this.config.group === true || this.config.group.groupStartOpen)) {\n\t\t\t\t\tthis.table.options.groupStartOpen = retreivedData.groupStartOpen;\n\t\t\t\t}\n\t\t\t\tif (typeof retreivedData.groupHeader !== \"undefined\" && (this.config.group === true || this.config.group.groupHeader)) {\n\t\t\t\t\tthis.table.options.groupHeader = retreivedData.groupHeader;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tPersistence.prototype.initializeColumn = function (column) {\n\t\tvar self = this,\n\t\t    def,\n\t\t    keys;\n\n\t\tif (this.config.columns) {\n\t\t\tthis.defWatcherBlock = true;\n\n\t\t\tdef = column.getDefinition();\n\n\t\t\tkeys = this.config.columns === true ? Object.keys(def) : this.config.columns;\n\n\t\t\tkeys.forEach(function (key) {\n\t\t\t\tvar props = Object.getOwnPropertyDescriptor(def, key);\n\t\t\t\tvar value = def[key];\n\t\t\t\tif (props) {\n\t\t\t\t\tObject.defineProperty(def, key, {\n\t\t\t\t\t\tset: function set(newValue) {\n\t\t\t\t\t\t\tvalue = newValue;\n\n\t\t\t\t\t\t\tif (!self.defWatcherBlock) {\n\t\t\t\t\t\t\t\tself.save(\"columns\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (props.set) {\n\t\t\t\t\t\t\t\tprops.set(newValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\tif (props.get) {\n\t\t\t\t\t\t\t\tprops.get();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.defWatcherBlock = false;\n\t\t}\n\t};\n\n\t//load saved definitions\n\tPersistence.prototype.load = function (type, current) {\n\t\tvar data = this.retreiveData(type);\n\n\t\tif (current) {\n\t\t\tdata = data ? this.mergeDefinition(current, data) : current;\n\t\t}\n\n\t\treturn data;\n\t};\n\n\t//retreive data from memory\n\tPersistence.prototype.retreiveData = function (type) {\n\t\treturn this.readFunc ? this.readFunc(this.id, type) : false;\n\t};\n\n\t//merge old and new column definitions\n\tPersistence.prototype.mergeDefinition = function (oldCols, newCols) {\n\t\tvar self = this,\n\t\t    output = [];\n\n\t\t// oldCols = oldCols || [];\n\t\tnewCols = newCols || [];\n\n\t\tnewCols.forEach(function (column, to) {\n\n\t\t\tvar from = self._findColumn(oldCols, column),\n\t\t\t    keys;\n\n\t\t\tif (from) {\n\n\t\t\t\tif (self.config.columns === true || self.config.columns == undefined) {\n\t\t\t\t\tkeys = Object.keys(from);\n\t\t\t\t\tkeys.push(\"width\");\n\t\t\t\t} else {\n\t\t\t\t\tkeys = self.config.columns;\n\t\t\t\t}\n\n\t\t\t\tkeys.forEach(function (key) {\n\t\t\t\t\tif (typeof column[key] !== \"undefined\") {\n\t\t\t\t\t\tfrom[key] = column[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (from.columns) {\n\t\t\t\t\tfrom.columns = self.mergeDefinition(from.columns, column.columns);\n\t\t\t\t}\n\n\t\t\t\toutput.push(from);\n\t\t\t}\n\t\t});\n\n\t\toldCols.forEach(function (column, i) {\n\t\t\tvar from = self._findColumn(newCols, column);\n\t\t\tif (!from) {\n\t\t\t\tif (output.length > i) {\n\t\t\t\t\toutput.splice(i, 0, column);\n\t\t\t\t} else {\n\t\t\t\t\toutput.push(column);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\t//find matching columns\n\tPersistence.prototype._findColumn = function (columns, subject) {\n\t\tvar type = subject.columns ? \"group\" : subject.field ? \"field\" : \"object\";\n\n\t\treturn columns.find(function (col) {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"group\":\n\t\t\t\t\treturn col.title === subject.title && col.columns.length === subject.columns.length;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"field\":\n\t\t\t\t\treturn col.field === subject.field;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"object\":\n\t\t\t\t\treturn col === subject;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t};\n\n\t//save data\n\tPersistence.prototype.save = function (type) {\n\t\tvar data = {};\n\n\t\tswitch (type) {\n\t\t\tcase \"columns\":\n\t\t\t\tdata = this.parseColumns(this.table.columnManager.getColumns());\n\t\t\t\tbreak;\n\n\t\t\tcase \"filter\":\n\t\t\t\tdata = this.table.modules.filter.getFilters();\n\t\t\t\tbreak;\n\n\t\t\tcase \"sort\":\n\t\t\t\tdata = this.validateSorters(this.table.modules.sort.getSort());\n\t\t\t\tbreak;\n\n\t\t\tcase \"group\":\n\t\t\t\tdata = this.getGroupConfig();\n\t\t\t\tbreak;\n\n\t\t\tcase \"page\":\n\t\t\t\tdata = this.getPageConfig();\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (this.writeFunc) {\n\t\t\tthis.writeFunc(this.id, type, data);\n\t\t}\n\t};\n\n\t//ensure sorters contain no function data\n\tPersistence.prototype.validateSorters = function (data) {\n\t\tdata.forEach(function (item) {\n\t\t\titem.column = item.field;\n\t\t\tdelete item.field;\n\t\t});\n\n\t\treturn data;\n\t};\n\n\tPersistence.prototype.getGroupConfig = function () {\n\t\tif (this.config.group) {\n\t\t\tif (this.config.group === true || this.config.group.groupBy) {\n\t\t\t\tdata.groupBy = this.table.options.groupBy;\n\t\t\t}\n\n\t\t\tif (this.config.group === true || this.config.group.groupStartOpen) {\n\t\t\t\tdata.groupStartOpen = this.table.options.groupStartOpen;\n\t\t\t}\n\n\t\t\tif (this.config.group === true || this.config.group.groupHeader) {\n\t\t\t\tdata.groupHeader = this.table.options.groupHeader;\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t};\n\n\tPersistence.prototype.getPageConfig = function () {\n\t\tvar data = {};\n\n\t\tif (this.config.page) {\n\t\t\tif (this.config.page === true || this.config.page.size) {\n\t\t\t\tdata.paginationSize = this.table.modules.page.getPageSize();\n\t\t\t}\n\n\t\t\tif (this.config.page === true || this.config.page.page) {\n\t\t\t\tdata.paginationInitialPage = this.table.modules.page.getPage();\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t};\n\n\t//parse columns for data to store\n\tPersistence.prototype.parseColumns = function (columns) {\n\t\tvar self = this,\n\t\t    definitions = [];\n\n\t\tcolumns.forEach(function (column) {\n\t\t\tvar defStore = {},\n\t\t\t    colDef = column.getDefinition(),\n\t\t\t    keys;\n\n\t\t\tif (column.isGroup) {\n\t\t\t\tdefStore.title = colDef.title;\n\t\t\t\tdefStore.columns = self.parseColumns(column.getColumns());\n\t\t\t} else {\n\t\t\t\tdefStore.field = column.getField();\n\n\t\t\t\tif (self.config.columns === true || self.config.columns == undefined) {\n\t\t\t\t\tkeys = Object.keys(colDef);\n\t\t\t\t\tkeys.push(\"width\");\n\t\t\t\t} else {\n\t\t\t\t\tkeys = self.config.columns;\n\t\t\t\t}\n\n\t\t\t\tkeys.forEach(function (key) {\n\n\t\t\t\t\tswitch (key) {\n\t\t\t\t\t\tcase \"width\":\n\t\t\t\t\t\t\tdefStore.width = column.getWidth();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"visible\":\n\t\t\t\t\t\t\tdefStore.visible = column.visible;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefStore[key] = colDef[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tdefinitions.push(defStore);\n\t\t});\n\n\t\treturn definitions;\n\t};\n\n\t// read peristence information from storage\n\tPersistence.prototype.readers = {\n\t\tlocal: function local(id, type) {\n\t\t\tvar data = localStorage.getItem(id + \"-\" + type);\n\n\t\t\treturn data ? JSON.parse(data) : false;\n\t\t},\n\t\tcookie: function cookie(id, type) {\n\t\t\tvar cookie = document.cookie,\n\t\t\t    key = id + \"-\" + type,\n\t\t\t    cookiePos = cookie.indexOf(key + \"=\"),\n\t\t\t    end,\n\t\t\t    data;\n\n\t\t\t//if cookie exists, decode and load column data into tabulator\n\t\t\tif (cookiePos > -1) {\n\t\t\t\tcookie = cookie.substr(cookiePos);\n\n\t\t\t\tend = cookie.indexOf(\";\");\n\n\t\t\t\tif (end > -1) {\n\t\t\t\t\tcookie = cookie.substr(0, end);\n\t\t\t\t}\n\n\t\t\t\tdata = cookie.replace(key + \"=\", \"\");\n\t\t\t}\n\n\t\t\treturn data ? JSON.parse(data) : false;\n\t\t}\n\t};\n\n\t//write persistence information to storage\n\tPersistence.prototype.writers = {\n\t\tlocal: function local(id, type, data) {\n\t\t\tlocalStorage.setItem(id + \"-\" + type, JSON.stringify(data));\n\t\t},\n\t\tcookie: function cookie(id, type, data) {\n\t\t\tvar expireDate = new Date();\n\n\t\t\texpireDate.setDate(expireDate.getDate() + 10000);\n\n\t\t\tdocument.cookie = id + \"-\" + type + \"=\" + JSON.stringify(data) + \"; expires=\" + expireDate.toUTCString();\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"persistence\", Persistence);\n\n\tvar Print = function Print(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.element = false;\n\t\tthis.manualBlock = false;\n\t};\n\n\tPrint.prototype.initialize = function () {\n\t\twindow.addEventListener(\"beforeprint\", this.replaceTable.bind(this));\n\t\twindow.addEventListener(\"afterprint\", this.cleanup.bind(this));\n\t};\n\n\tPrint.prototype.replaceTable = function () {\n\t\tif (!this.manualBlock) {\n\t\t\tthis.element = document.createElement(\"div\");\n\t\t\tthis.element.classList.add(\"tabulator-print-table\");\n\n\t\t\tthis.element.appendChild(this.table.modules.export.genereateTable(this.table.options.printConfig, this.table.options.printStyled, this.table.options.printRowRange, \"print\"));\n\n\t\t\tthis.table.element.style.display = \"none\";\n\n\t\t\tthis.table.element.parentNode.insertBefore(this.element, this.table.element);\n\t\t}\n\t};\n\n\tPrint.prototype.cleanup = function () {\n\t\tdocument.body.classList.remove(\"tabulator-print-fullscreen-hide\");\n\n\t\tif (this.element && this.element.parentNode) {\n\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\tthis.table.element.style.display = \"\";\n\t\t}\n\t};\n\n\tPrint.prototype.printFullscreen = function (visible, style, config) {\n\t\tvar scrollX = window.scrollX,\n\t\t    scrollY = window.scrollY,\n\t\t    headerEl = document.createElement(\"div\"),\n\t\t    footerEl = document.createElement(\"div\"),\n\t\t    tableEl = this.table.modules.export.genereateTable(typeof config != \"undefined\" ? config : this.table.options.printConfig, typeof style != \"undefined\" ? style : this.table.options.printStyled, visible, \"print\"),\n\t\t    headerContent,\n\t\t    footerContent;\n\n\t\tthis.manualBlock = true;\n\n\t\tthis.element = document.createElement(\"div\");\n\t\tthis.element.classList.add(\"tabulator-print-fullscreen\");\n\n\t\tif (this.table.options.printHeader) {\n\t\t\theaderEl.classList.add(\"tabulator-print-header\");\n\n\t\t\theaderContent = typeof this.table.options.printHeader == \"function\" ? this.table.options.printHeader.call(this.table) : this.table.options.printHeader;\n\n\t\t\tif (typeof headerContent == \"string\") {\n\t\t\t\theaderEl.innerHTML = headerContent;\n\t\t\t} else {\n\t\t\t\theaderEl.appendChild(headerContent);\n\t\t\t}\n\n\t\t\tthis.element.appendChild(headerEl);\n\t\t}\n\n\t\tthis.element.appendChild(tableEl);\n\n\t\tif (this.table.options.printFooter) {\n\t\t\tfooterEl.classList.add(\"tabulator-print-footer\");\n\n\t\t\tfooterContent = typeof this.table.options.printFooter == \"function\" ? this.table.options.printFooter.call(this.table) : this.table.options.printFooter;\n\n\t\t\tif (typeof footerContent == \"string\") {\n\t\t\t\tfooterEl.innerHTML = footerContent;\n\t\t\t} else {\n\t\t\t\tfooterEl.appendChild(footerContent);\n\t\t\t}\n\n\t\t\tthis.element.appendChild(footerEl);\n\t\t}\n\n\t\tdocument.body.classList.add(\"tabulator-print-fullscreen-hide\");\n\t\tdocument.body.appendChild(this.element);\n\n\t\tif (this.table.options.printFormatter) {\n\t\t\tthis.table.options.printFormatter(this.element, tableEl);\n\t\t}\n\n\t\twindow.print();\n\n\t\tthis.cleanup();\n\n\t\twindow.scrollTo(scrollX, scrollY);\n\n\t\tthis.manualBlock = false;\n\t};\n\n\tTabulator.prototype.registerModule(\"print\", Print);\n\tvar ReactiveData = function ReactiveData(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.data = false;\n\t\tthis.blocked = false; //block reactivity while performing update\n\t\tthis.origFuncs = {}; // hold original data array functions to allow replacement after data is done with\n\t\tthis.currentVersion = 0;\n\t};\n\n\tReactiveData.prototype.watchData = function (data) {\n\t\tvar self = this,\n\t\t    pushFunc,\n\t\t    version;\n\n\t\tthis.currentVersion++;\n\n\t\tversion = this.currentVersion;\n\n\t\tself.unwatchData();\n\n\t\tself.data = data;\n\n\t\t//override array push function\n\t\tself.origFuncs.push = data.push;\n\n\t\tObject.defineProperty(self.data, \"push\", {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tvalue: function value() {\n\t\t\t\tvar args = Array.from(arguments);\n\n\t\t\t\tif (!self.blocked && version === self.currentVersion) {\n\t\t\t\t\targs.forEach(function (arg) {\n\t\t\t\t\t\tself.table.rowManager.addRowActual(arg, false);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn self.origFuncs.push.apply(data, arguments);\n\t\t\t}\n\t\t});\n\n\t\t//override array unshift function\n\t\tself.origFuncs.unshift = data.unshift;\n\n\t\tObject.defineProperty(self.data, \"unshift\", {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tvalue: function value() {\n\t\t\t\tvar args = Array.from(arguments);\n\n\t\t\t\tif (!self.blocked && version === self.currentVersion) {\n\t\t\t\t\targs.forEach(function (arg) {\n\t\t\t\t\t\tself.table.rowManager.addRowActual(arg, true);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn self.origFuncs.unshift.apply(data, arguments);\n\t\t\t}\n\t\t});\n\n\t\t//override array shift function\n\t\tself.origFuncs.shift = data.shift;\n\n\t\tObject.defineProperty(self.data, \"shift\", {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tvalue: function value() {\n\t\t\t\tvar row;\n\n\t\t\t\tif (!self.blocked && version === self.currentVersion) {\n\t\t\t\t\tif (self.data.length) {\n\t\t\t\t\t\trow = self.table.rowManager.getRowFromDataObject(self.data[0]);\n\n\t\t\t\t\t\tif (row) {\n\t\t\t\t\t\t\trow.deleteActual();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn self.origFuncs.shift.call(data);\n\t\t\t}\n\t\t});\n\n\t\t//override array pop function\n\t\tself.origFuncs.pop = data.pop;\n\n\t\tObject.defineProperty(self.data, \"pop\", {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tvalue: function value() {\n\t\t\t\tvar row;\n\t\t\t\tif (!self.blocked && version === self.currentVersion) {\n\t\t\t\t\tif (self.data.length) {\n\t\t\t\t\t\trow = self.table.rowManager.getRowFromDataObject(self.data[self.data.length - 1]);\n\n\t\t\t\t\t\tif (row) {\n\t\t\t\t\t\t\trow.deleteActual();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn self.origFuncs.pop.call(data);\n\t\t\t}\n\t\t});\n\n\t\t//override array splice function\n\t\tself.origFuncs.splice = data.splice;\n\n\t\tObject.defineProperty(self.data, \"splice\", {\n\t\t\tenumerable: false,\n\t\t\tconfigurable: true,\n\t\t\tvalue: function value() {\n\t\t\t\tvar args = Array.from(arguments),\n\t\t\t\t    start = args[0] < 0 ? data.length + args[0] : args[0],\n\t\t\t\t    end = args[1],\n\t\t\t\t    newRows = args[2] ? args.slice(2) : false,\n\t\t\t\t    startRow;\n\n\t\t\t\tif (!self.blocked && version === self.currentVersion) {\n\n\t\t\t\t\t//add new rows\n\t\t\t\t\tif (newRows) {\n\t\t\t\t\t\tstartRow = data[start] ? self.table.rowManager.getRowFromDataObject(data[start]) : false;\n\n\t\t\t\t\t\tif (startRow) {\n\t\t\t\t\t\t\tnewRows.forEach(function (rowData) {\n\t\t\t\t\t\t\t\tself.table.rowManager.addRowActual(rowData, true, startRow, true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewRows = newRows.slice().reverse();\n\n\t\t\t\t\t\t\tnewRows.forEach(function (rowData) {\n\t\t\t\t\t\t\t\tself.table.rowManager.addRowActual(rowData, true, false, true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//delete removed rows\n\t\t\t\t\tif (end !== 0) {\n\t\t\t\t\t\tvar oldRows = data.slice(start, typeof args[1] === \"undefined\" ? args[1] : start + end);\n\n\t\t\t\t\t\toldRows.forEach(function (rowData, i) {\n\t\t\t\t\t\t\tvar row = self.table.rowManager.getRowFromDataObject(rowData);\n\n\t\t\t\t\t\t\tif (row) {\n\t\t\t\t\t\t\t\trow.deleteActual(i !== oldRows.length - 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newRows || end !== 0) {\n\t\t\t\t\t\tself.table.rowManager.reRenderInPosition();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn self.origFuncs.splice.apply(data, arguments);\n\t\t\t}\n\t\t});\n\t};\n\n\tReactiveData.prototype.unwatchData = function () {\n\t\tif (this.data !== false) {\n\t\t\tfor (var key in this.origFuncs) {\n\t\t\t\tObject.defineProperty(this.data, key, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: this.origFuncs.key\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tReactiveData.prototype.watchRow = function (row) {\n\t\tvar self = this,\n\t\t    data = row.getData();\n\n\t\tthis.blocked = true;\n\n\t\tfor (var key in data) {\n\t\t\tthis.watchKey(row, data, key);\n\t\t}\n\n\t\tthis.blocked = false;\n\t};\n\n\tReactiveData.prototype.watchKey = function (row, data, key) {\n\t\tvar self = this,\n\t\t    props = Object.getOwnPropertyDescriptor(data, key),\n\t\t    value = data[key],\n\t\t    version = this.currentVersion;\n\n\t\tObject.defineProperty(data, key, {\n\t\t\tset: function set(newValue) {\n\t\t\t\tvalue = newValue;\n\t\t\t\tif (!self.blocked && version === self.currentVersion) {\n\t\t\t\t\tvar update = {};\n\t\t\t\t\tupdate[key] = newValue;\n\t\t\t\t\trow.updateData(update);\n\t\t\t\t}\n\n\t\t\t\tif (props.set) {\n\t\t\t\t\tprops.set(newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t\tget: function get() {\n\n\t\t\t\tif (props.get) {\n\t\t\t\t\tprops.get();\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t}\n\t\t});\n\t};\n\n\tReactiveData.prototype.unwatchRow = function (row) {\n\t\tvar data = row.getData();\n\n\t\tfor (var key in data) {\n\t\t\tObject.defineProperty(data, key, {\n\t\t\t\tvalue: data[key]\n\t\t\t});\n\t\t}\n\t};\n\n\tReactiveData.prototype.block = function () {\n\t\tthis.blocked = true;\n\t};\n\n\tReactiveData.prototype.unblock = function () {\n\t\tthis.blocked = false;\n\t};\n\n\tTabulator.prototype.registerModule(\"reactiveData\", ReactiveData);\n\n\tvar ResizeColumns = function ResizeColumns(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.startColumn = false;\n\t\tthis.startX = false;\n\t\tthis.startWidth = false;\n\t\tthis.handle = null;\n\t\tthis.prevHandle = null;\n\t};\n\n\tResizeColumns.prototype.initializeColumn = function (type, column, element) {\n\t\tvar self = this,\n\t\t    variableHeight = false,\n\t\t    mode = this.table.options.resizableColumns;\n\n\t\t//set column resize mode\n\t\tif (type === \"header\") {\n\t\t\tvariableHeight = column.definition.formatter == \"textarea\" || column.definition.variableHeight;\n\t\t\tcolumn.modules.resize = { variableHeight: variableHeight };\n\t\t}\n\n\t\tif (mode === true || mode == type) {\n\n\t\t\tvar handle = document.createElement('div');\n\t\t\thandle.className = \"tabulator-col-resize-handle\";\n\n\t\t\tvar prevHandle = document.createElement('div');\n\t\t\tprevHandle.className = \"tabulator-col-resize-handle prev\";\n\n\t\t\thandle.addEventListener(\"click\", function (e) {\n\t\t\t\te.stopPropagation();\n\t\t\t});\n\n\t\t\tvar handleDown = function handleDown(e) {\n\t\t\t\tvar nearestColumn = column.getLastColumn();\n\n\t\t\t\tif (nearestColumn && self._checkResizability(nearestColumn)) {\n\t\t\t\t\tself.startColumn = column;\n\t\t\t\t\tself._mouseDown(e, nearestColumn, handle);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\thandle.addEventListener(\"mousedown\", handleDown);\n\t\t\thandle.addEventListener(\"touchstart\", handleDown, { passive: true });\n\n\t\t\t//reszie column on  double click\n\t\t\thandle.addEventListener(\"dblclick\", function (e) {\n\t\t\t\tvar col = column.getLastColumn();\n\n\t\t\t\tif (col && self._checkResizability(col)) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\tcol.reinitializeWidth(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tprevHandle.addEventListener(\"click\", function (e) {\n\t\t\t\te.stopPropagation();\n\t\t\t});\n\n\t\t\tvar prevHandleDown = function prevHandleDown(e) {\n\t\t\t\tvar nearestColumn, colIndex, prevColumn;\n\n\t\t\t\tnearestColumn = column.getFirstColumn();\n\n\t\t\t\tif (nearestColumn) {\n\t\t\t\t\tcolIndex = self.table.columnManager.findColumnIndex(nearestColumn);\n\t\t\t\t\tprevColumn = colIndex > 0 ? self.table.columnManager.getColumnByIndex(colIndex - 1) : false;\n\n\t\t\t\t\tif (prevColumn && self._checkResizability(prevColumn)) {\n\t\t\t\t\t\tself.startColumn = column;\n\t\t\t\t\t\tself._mouseDown(e, prevColumn, prevHandle);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tprevHandle.addEventListener(\"mousedown\", prevHandleDown);\n\t\t\tprevHandle.addEventListener(\"touchstart\", prevHandleDown, { passive: true });\n\n\t\t\t//resize column on double click\n\t\t\tprevHandle.addEventListener(\"dblclick\", function (e) {\n\t\t\t\tvar nearestColumn, colIndex, prevColumn;\n\n\t\t\t\tnearestColumn = column.getFirstColumn();\n\n\t\t\t\tif (nearestColumn) {\n\t\t\t\t\tcolIndex = self.table.columnManager.findColumnIndex(nearestColumn);\n\t\t\t\t\tprevColumn = colIndex > 0 ? self.table.columnManager.getColumnByIndex(colIndex - 1) : false;\n\n\t\t\t\t\tif (prevColumn && self._checkResizability(prevColumn)) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tprevColumn.reinitializeWidth(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\telement.appendChild(handle);\n\t\t\telement.appendChild(prevHandle);\n\t\t}\n\t};\n\n\tResizeColumns.prototype._checkResizability = function (column) {\n\t\treturn typeof column.definition.resizable != \"undefined\" ? column.definition.resizable : this.table.options.resizableColumns;\n\t};\n\n\tResizeColumns.prototype._mouseDown = function (e, column, handle) {\n\t\tvar self = this;\n\n\t\tself.table.element.classList.add(\"tabulator-block-select\");\n\n\t\tfunction mouseMove(e) {\n\t\t\t// self.table.columnManager.tempScrollBlock();\n\n\t\t\tcolumn.setWidth(self.startWidth + ((typeof e.screenX === \"undefined\" ? e.touches[0].screenX : e.screenX) - self.startX));\n\n\t\t\tif (!self.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {\n\t\t\t\tcolumn.checkCellHeights();\n\t\t\t}\n\t\t}\n\n\t\tfunction mouseUp(e) {\n\n\t\t\t//block editor from taking action while resizing is taking place\n\t\t\tif (self.startColumn.modules.edit) {\n\t\t\t\tself.startColumn.modules.edit.blocked = false;\n\t\t\t}\n\n\t\t\tif (self.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {\n\t\t\t\tcolumn.checkCellHeights();\n\t\t\t}\n\n\t\t\tdocument.body.removeEventListener(\"mouseup\", mouseUp);\n\t\t\tdocument.body.removeEventListener(\"mousemove\", mouseMove);\n\n\t\t\thandle.removeEventListener(\"touchmove\", mouseMove);\n\t\t\thandle.removeEventListener(\"touchend\", mouseUp);\n\n\t\t\tself.table.element.classList.remove(\"tabulator-block-select\");\n\n\t\t\tif (self.table.options.persistence && self.table.modExists(\"persistence\", true) && self.table.modules.persistence.config.columns) {\n\t\t\t\tself.table.modules.persistence.save(\"columns\");\n\t\t\t}\n\n\t\t\tself.table.options.columnResized.call(self.table, column.getComponent());\n\t\t}\n\n\t\te.stopPropagation(); //prevent resize from interfereing with movable columns\n\n\t\t//block editor from taking action while resizing is taking place\n\t\tif (self.startColumn.modules.edit) {\n\t\t\tself.startColumn.modules.edit.blocked = true;\n\t\t}\n\n\t\tself.startX = typeof e.screenX === \"undefined\" ? e.touches[0].screenX : e.screenX;\n\t\tself.startWidth = column.getWidth();\n\n\t\tdocument.body.addEventListener(\"mousemove\", mouseMove);\n\t\tdocument.body.addEventListener(\"mouseup\", mouseUp);\n\t\thandle.addEventListener(\"touchmove\", mouseMove, { passive: true });\n\t\thandle.addEventListener(\"touchend\", mouseUp);\n\t};\n\n\tTabulator.prototype.registerModule(\"resizeColumns\", ResizeColumns);\n\tvar ResizeRows = function ResizeRows(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.startColumn = false;\n\t\tthis.startY = false;\n\t\tthis.startHeight = false;\n\t\tthis.handle = null;\n\t\tthis.prevHandle = null;\n\t};\n\n\tResizeRows.prototype.initializeRow = function (row) {\n\t\tvar self = this,\n\t\t    rowEl = row.getElement();\n\n\t\tvar handle = document.createElement('div');\n\t\thandle.className = \"tabulator-row-resize-handle\";\n\n\t\tvar prevHandle = document.createElement('div');\n\t\tprevHandle.className = \"tabulator-row-resize-handle prev\";\n\n\t\thandle.addEventListener(\"click\", function (e) {\n\t\t\te.stopPropagation();\n\t\t});\n\n\t\tvar handleDown = function handleDown(e) {\n\t\t\tself.startRow = row;\n\t\t\tself._mouseDown(e, row, handle);\n\t\t};\n\n\t\thandle.addEventListener(\"mousedown\", handleDown);\n\t\thandle.addEventListener(\"touchstart\", handleDown, { passive: true });\n\n\t\tprevHandle.addEventListener(\"click\", function (e) {\n\t\t\te.stopPropagation();\n\t\t});\n\n\t\tvar prevHandleDown = function prevHandleDown(e) {\n\t\t\tvar prevRow = self.table.rowManager.prevDisplayRow(row);\n\n\t\t\tif (prevRow) {\n\t\t\t\tself.startRow = prevRow;\n\t\t\t\tself._mouseDown(e, prevRow, prevHandle);\n\t\t\t}\n\t\t};\n\n\t\tprevHandle.addEventListener(\"mousedown\", prevHandleDown);\n\t\tprevHandle.addEventListener(\"touchstart\", prevHandleDown, { passive: true });\n\n\t\trowEl.appendChild(handle);\n\t\trowEl.appendChild(prevHandle);\n\t};\n\n\tResizeRows.prototype._mouseDown = function (e, row, handle) {\n\t\tvar self = this;\n\n\t\tself.table.element.classList.add(\"tabulator-block-select\");\n\n\t\tfunction mouseMove(e) {\n\t\t\trow.setHeight(self.startHeight + ((typeof e.screenY === \"undefined\" ? e.touches[0].screenY : e.screenY) - self.startY));\n\t\t}\n\n\t\tfunction mouseUp(e) {\n\n\t\t\t// //block editor from taking action while resizing is taking place\n\t\t\t// if(self.startColumn.modules.edit){\n\t\t\t// \tself.startColumn.modules.edit.blocked = false;\n\t\t\t// }\n\n\t\t\tdocument.body.removeEventListener(\"mouseup\", mouseMove);\n\t\t\tdocument.body.removeEventListener(\"mousemove\", mouseMove);\n\n\t\t\thandle.removeEventListener(\"touchmove\", mouseMove);\n\t\t\thandle.removeEventListener(\"touchend\", mouseUp);\n\n\t\t\tself.table.element.classList.remove(\"tabulator-block-select\");\n\n\t\t\tself.table.options.rowResized.call(this.table, row.getComponent());\n\t\t}\n\n\t\te.stopPropagation(); //prevent resize from interfereing with movable columns\n\n\t\t//block editor from taking action while resizing is taking place\n\t\t// if(self.startColumn.modules.edit){\n\t\t// \tself.startColumn.modules.edit.blocked = true;\n\t\t// }\n\n\t\tself.startY = typeof e.screenY === \"undefined\" ? e.touches[0].screenY : e.screenY;\n\t\tself.startHeight = row.getHeight();\n\n\t\tdocument.body.addEventListener(\"mousemove\", mouseMove);\n\t\tdocument.body.addEventListener(\"mouseup\", mouseUp);\n\n\t\thandle.addEventListener(\"touchmove\", mouseMove, { passive: true });\n\t\thandle.addEventListener(\"touchend\", mouseUp);\n\t};\n\n\tTabulator.prototype.registerModule(\"resizeRows\", ResizeRows);\n\tvar ResizeTable = function ResizeTable(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.binding = false;\n\t\tthis.observer = false;\n\t\tthis.containerObserver = false;\n\n\t\tthis.tableHeight = 0;\n\t\tthis.tableWidth = 0;\n\t\tthis.containerHeight = 0;\n\t\tthis.containerWidth = 0;\n\n\t\tthis.autoResize = false;\n\t};\n\n\tResizeTable.prototype.initialize = function (row) {\n\t\tvar _this76 = this;\n\n\t\tvar table = this.table,\n\t\t    tableStyle;\n\n\t\tthis.tableHeight = table.element.clientHeight;\n\t\tthis.tableWidth = table.element.clientWidth;\n\n\t\tif (table.element.parentNode) {\n\t\t\tthis.containerHeight = table.element.parentNode.clientHeight;\n\t\t\tthis.containerWidth = table.element.parentNode.clientWidth;\n\t\t}\n\n\t\tif (typeof ResizeObserver !== \"undefined\" && table.rowManager.getRenderMode() === \"virtual\") {\n\n\t\t\tthis.autoResize = true;\n\n\t\t\tthis.observer = new ResizeObserver(function (entry) {\n\t\t\t\tif (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {\n\n\t\t\t\t\tvar nodeHeight = Math.floor(entry[0].contentRect.height);\n\t\t\t\t\tvar nodeWidth = Math.floor(entry[0].contentRect.width);\n\n\t\t\t\t\tif (_this76.tableHeight != nodeHeight || _this76.tableWidth != nodeWidth) {\n\t\t\t\t\t\t_this76.tableHeight = nodeHeight;\n\t\t\t\t\t\t_this76.tableWidth = nodeWidth;\n\n\t\t\t\t\t\tif (table.element.parentNode) {\n\t\t\t\t\t\t\t_this76.containerHeight = table.element.parentNode.clientHeight;\n\t\t\t\t\t\t\t_this76.containerWidth = table.element.parentNode.clientWidth;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttable.redraw();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.observer.observe(table.element);\n\n\t\t\ttableStyle = window.getComputedStyle(table.element);\n\n\t\t\tif (this.table.element.parentNode && !this.table.rowManager.fixedHeight && (tableStyle.getPropertyValue(\"max-height\") || tableStyle.getPropertyValue(\"min-height\"))) {\n\n\t\t\t\tthis.containerObserver = new ResizeObserver(function (entry) {\n\t\t\t\t\tif (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {\n\n\t\t\t\t\t\tvar nodeHeight = Math.floor(entry[0].contentRect.height);\n\t\t\t\t\t\tvar nodeWidth = Math.floor(entry[0].contentRect.width);\n\n\t\t\t\t\t\tif (_this76.containerHeight != nodeHeight || _this76.containerWidth != nodeWidth) {\n\t\t\t\t\t\t\t_this76.containerHeight = nodeHeight;\n\t\t\t\t\t\t\t_this76.containerWidth = nodeWidth;\n\t\t\t\t\t\t\t_this76.tableHeight = table.element.clientHeight;\n\t\t\t\t\t\t\t_this76.tableWidth = table.element.clientWidth;\n\n\t\t\t\t\t\t\ttable.redraw();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttable.redraw();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.containerObserver.observe(this.table.element.parentNode);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.binding = function () {\n\t\t\t\tif (!table.browserMobile || table.browserMobile && !table.modules.edit.currentCell) {\n\t\t\t\t\ttable.redraw();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twindow.addEventListener(\"resize\", this.binding);\n\t\t}\n\t};\n\n\tResizeTable.prototype.clearBindings = function (row) {\n\t\tif (this.binding) {\n\t\t\twindow.removeEventListener(\"resize\", this.binding);\n\t\t}\n\n\t\tif (this.observer) {\n\t\t\tthis.observer.unobserve(this.table.element);\n\t\t}\n\n\t\tif (this.containerObserver) {\n\t\t\tthis.containerObserver.unobserve(this.table.element.parentNode);\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"resizeTable\", ResizeTable);\n\tvar ResponsiveLayout = function ResponsiveLayout(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.columns = [];\n\t\tthis.hiddenColumns = [];\n\t\tthis.mode = \"\";\n\t\tthis.index = 0;\n\t\tthis.collapseFormatter = [];\n\t\tthis.collapseStartOpen = true;\n\t\tthis.collapseHandleColumn = false;\n\t};\n\n\t//generate resposive columns list\n\tResponsiveLayout.prototype.initialize = function () {\n\t\tvar self = this,\n\t\t    columns = [];\n\n\t\tthis.mode = this.table.options.responsiveLayout;\n\t\tthis.collapseFormatter = this.table.options.responsiveLayoutCollapseFormatter || this.formatCollapsedData;\n\t\tthis.collapseStartOpen = this.table.options.responsiveLayoutCollapseStartOpen;\n\t\tthis.hiddenColumns = [];\n\n\t\t//detemine level of responsivity for each column\n\t\tthis.table.columnManager.columnsByIndex.forEach(function (column, i) {\n\t\t\tif (column.modules.responsive) {\n\t\t\t\tif (column.modules.responsive.order && column.modules.responsive.visible) {\n\t\t\t\t\tcolumn.modules.responsive.index = i;\n\t\t\t\t\tcolumns.push(column);\n\n\t\t\t\t\tif (!column.visible && self.mode === \"collapse\") {\n\t\t\t\t\t\tself.hiddenColumns.push(column);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t//sort list by responsivity\n\t\tcolumns = columns.reverse();\n\t\tcolumns = columns.sort(function (a, b) {\n\t\t\tvar diff = b.modules.responsive.order - a.modules.responsive.order;\n\t\t\treturn diff || b.modules.responsive.index - a.modules.responsive.index;\n\t\t});\n\n\t\tthis.columns = columns;\n\n\t\tif (this.mode === \"collapse\") {\n\t\t\tthis.generateCollapsedContent();\n\t\t}\n\n\t\t//assign collapse column\n\t\tfor (var _iterator = this.table.columnManager.columnsByIndex, _isArray = Array.isArray(_iterator), _i13 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\tvar _ref;\n\n\t\t\tif (_isArray) {\n\t\t\t\tif (_i13 >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i13++];\n\t\t\t} else {\n\t\t\t\t_i13 = _iterator.next();\n\t\t\t\tif (_i13.done) break;\n\t\t\t\t_ref = _i13.value;\n\t\t\t}\n\n\t\t\tvar col = _ref;\n\n\t\t\tif (col.definition.formatter == \"responsiveCollapse\") {\n\t\t\t\tthis.collapseHandleColumn = col;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this.collapseHandleColumn) {\n\t\t\tif (this.hiddenColumns.length) {\n\t\t\t\tthis.collapseHandleColumn.show();\n\t\t\t} else {\n\t\t\t\tthis.collapseHandleColumn.hide();\n\t\t\t}\n\t\t}\n\t};\n\n\t//define layout information\n\tResponsiveLayout.prototype.initializeColumn = function (column) {\n\t\tvar def = column.getDefinition();\n\n\t\tcolumn.modules.responsive = { order: typeof def.responsive === \"undefined\" ? 1 : def.responsive, visible: def.visible === false ? false : true };\n\t};\n\n\tResponsiveLayout.prototype.initializeRow = function (row) {\n\t\tvar el;\n\n\t\tif (row.type !== \"calc\") {\n\t\t\tel = document.createElement(\"div\");\n\t\t\tel.classList.add(\"tabulator-responsive-collapse\");\n\n\t\t\trow.modules.responsiveLayout = {\n\t\t\t\telement: el,\n\t\t\t\topen: this.collapseStartOpen\n\t\t\t};\n\n\t\t\tif (!this.collapseStartOpen) {\n\t\t\t\tel.style.display = 'none';\n\t\t\t}\n\t\t}\n\t};\n\n\tResponsiveLayout.prototype.layoutRow = function (row) {\n\t\tvar rowEl = row.getElement();\n\n\t\tif (row.modules.responsiveLayout) {\n\t\t\trowEl.appendChild(row.modules.responsiveLayout.element);\n\t\t\tthis.generateCollapsedRowContent(row);\n\t\t}\n\t};\n\n\t//update column visibility\n\tResponsiveLayout.prototype.updateColumnVisibility = function (column, visible) {\n\t\tvar index;\n\t\tif (column.modules.responsive) {\n\t\t\tcolumn.modules.responsive.visible = visible;\n\t\t\tthis.initialize();\n\t\t}\n\t};\n\n\tResponsiveLayout.prototype.hideColumn = function (column) {\n\t\tvar colCount = this.hiddenColumns.length;\n\n\t\tcolumn.hide(false, true);\n\n\t\tif (this.mode === \"collapse\") {\n\t\t\tthis.hiddenColumns.unshift(column);\n\t\t\tthis.generateCollapsedContent();\n\n\t\t\tif (this.collapseHandleColumn && !colCount) {\n\t\t\t\tthis.collapseHandleColumn.show();\n\t\t\t}\n\t\t}\n\t};\n\n\tResponsiveLayout.prototype.showColumn = function (column) {\n\t\tvar index;\n\n\t\tcolumn.show(false, true);\n\t\t//set column width to prevent calculation loops on uninitialized columns\n\t\tcolumn.setWidth(column.getWidth());\n\n\t\tif (this.mode === \"collapse\") {\n\t\t\tindex = this.hiddenColumns.indexOf(column);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.hiddenColumns.splice(index, 1);\n\t\t\t}\n\n\t\t\tthis.generateCollapsedContent();\n\n\t\t\tif (this.collapseHandleColumn && !this.hiddenColumns.length) {\n\t\t\t\tthis.collapseHandleColumn.hide();\n\t\t\t}\n\t\t}\n\t};\n\n\t//redraw columns to fit space\n\tResponsiveLayout.prototype.update = function () {\n\t\tvar self = this,\n\t\t    working = true;\n\n\t\twhile (working) {\n\n\t\t\tvar width = self.table.modules.layout.getMode() == \"fitColumns\" ? self.table.columnManager.getFlexBaseWidth() : self.table.columnManager.getWidth();\n\n\t\t\tvar diff = (self.table.options.headerVisible ? self.table.columnManager.element.clientWidth : self.table.element.clientWidth) - width;\n\n\t\t\tif (diff < 0) {\n\t\t\t\t//table is too wide\n\t\t\t\tvar column = self.columns[self.index];\n\n\t\t\t\tif (column) {\n\t\t\t\t\tself.hideColumn(column);\n\t\t\t\t\tself.index++;\n\t\t\t\t} else {\n\t\t\t\t\tworking = false;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t//table has spare space\n\t\t\t\tvar _column = self.columns[self.index - 1];\n\n\t\t\t\tif (_column) {\n\t\t\t\t\tif (diff > 0) {\n\t\t\t\t\t\tif (diff >= _column.getWidth()) {\n\t\t\t\t\t\t\tself.showColumn(_column);\n\t\t\t\t\t\t\tself.index--;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tworking = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tworking = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tworking = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!self.table.rowManager.activeRowsCount) {\n\t\t\t\tself.table.rowManager.renderEmptyScroll();\n\t\t\t}\n\t\t}\n\t};\n\n\tResponsiveLayout.prototype.generateCollapsedContent = function () {\n\t\tvar self = this,\n\t\t    rows = this.table.rowManager.getDisplayRows();\n\n\t\trows.forEach(function (row) {\n\t\t\tself.generateCollapsedRowContent(row);\n\t\t});\n\t};\n\n\tResponsiveLayout.prototype.generateCollapsedRowContent = function (row) {\n\t\tvar el, contents;\n\n\t\tif (row.modules.responsiveLayout) {\n\t\t\tel = row.modules.responsiveLayout.element;\n\n\t\t\twhile (el.firstChild) {\n\t\t\t\tel.removeChild(el.firstChild);\n\t\t\t}contents = this.collapseFormatter(this.generateCollapsedRowData(row));\n\t\t\tif (contents) {\n\t\t\t\tel.appendChild(contents);\n\t\t\t}\n\t\t}\n\t};\n\n\tResponsiveLayout.prototype.generateCollapsedRowData = function (row) {\n\t\tvar self = this,\n\t\t    data = row.getData(),\n\t\t    output = [],\n\t\t    mockCellComponent;\n\n\t\tthis.hiddenColumns.forEach(function (column) {\n\t\t\tvar value = column.getFieldValue(data);\n\n\t\t\tif (column.definition.title && column.field) {\n\t\t\t\tif (column.modules.format && self.table.options.responsiveLayoutCollapseUseFormatters) {\n\n\t\t\t\t\tmockCellComponent = {\n\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\tgetValue: function getValue() {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetData: function getData() {\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetElement: function getElement() {\n\t\t\t\t\t\t\treturn document.createElement(\"div\");\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetRow: function getRow() {\n\t\t\t\t\t\t\treturn row.getComponent();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetColumn: function getColumn() {\n\t\t\t\t\t\t\treturn column.getComponent();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\toutput.push({\n\t\t\t\t\t\ttitle: column.definition.title,\n\t\t\t\t\t\tvalue: column.modules.format.formatter.call(self.table.modules.format, mockCellComponent, column.modules.format.params)\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\toutput.push({\n\t\t\t\t\t\ttitle: column.definition.title,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tResponsiveLayout.prototype.formatCollapsedData = function (data) {\n\t\tvar list = document.createElement(\"table\"),\n\t\t    listContents = \"\";\n\n\t\tdata.forEach(function (item) {\n\t\t\tvar div = document.createElement(\"div\");\n\n\t\t\tif (item.value instanceof Node) {\n\t\t\t\tdiv.appendChild(item.value);\n\t\t\t\titem.value = div.innerHTML;\n\t\t\t}\n\n\t\t\tlistContents += \"<tr><td><strong>\" + item.title + \"</strong></td><td>\" + item.value + \"</td></tr>\";\n\t\t});\n\n\t\tlist.innerHTML = listContents;\n\n\t\treturn Object.keys(data).length ? list : \"\";\n\t};\n\n\tTabulator.prototype.registerModule(\"responsiveLayout\", ResponsiveLayout);\n\n\tvar SelectRow = function SelectRow(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.selecting = false; //flag selecting in progress\n\t\tthis.lastClickedRow = false; //last clicked row\n\t\tthis.selectPrev = []; //hold previously selected element for drag drop selection\n\t\tthis.selectedRows = []; //hold selected rows\n\t\tthis.headerCheckboxElement = null; // hold header select element\n\t};\n\n\tSelectRow.prototype.clearSelectionData = function (silent) {\n\t\tthis.selecting = false;\n\t\tthis.lastClickedRow = false;\n\t\tthis.selectPrev = [];\n\t\tthis.selectedRows = [];\n\n\t\tif (!silent) {\n\t\t\tthis._rowSelectionChanged();\n\t\t}\n\t};\n\n\tSelectRow.prototype.initializeRow = function (row) {\n\t\tvar self = this,\n\t\t    element = row.getElement();\n\n\t\t// trigger end of row selection\n\t\tvar endSelect = function endSelect() {\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tself.selecting = false;\n\t\t\t}, 50);\n\n\t\t\tdocument.body.removeEventListener(\"mouseup\", endSelect);\n\t\t};\n\n\t\trow.modules.select = { selected: false };\n\n\t\t//set row selection class\n\t\tif (self.table.options.selectableCheck.call(this.table, row.getComponent())) {\n\t\t\telement.classList.add(\"tabulator-selectable\");\n\t\t\telement.classList.remove(\"tabulator-unselectable\");\n\n\t\t\tif (self.table.options.selectable && self.table.options.selectable != \"highlight\") {\n\t\t\t\tif (self.table.options.selectableRangeMode === \"click\") {\n\t\t\t\t\telement.addEventListener(\"click\", function (e) {\n\t\t\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\t\t\tself.table._clearSelection();\n\t\t\t\t\t\t\tself.lastClickedRow = self.lastClickedRow || row;\n\n\t\t\t\t\t\t\tvar lastClickedRowIdx = self.table.rowManager.getDisplayRowIndex(self.lastClickedRow);\n\t\t\t\t\t\t\tvar rowIdx = self.table.rowManager.getDisplayRowIndex(row);\n\n\t\t\t\t\t\t\tvar fromRowIdx = lastClickedRowIdx <= rowIdx ? lastClickedRowIdx : rowIdx;\n\t\t\t\t\t\t\tvar toRowIdx = lastClickedRowIdx >= rowIdx ? lastClickedRowIdx : rowIdx;\n\n\t\t\t\t\t\t\tvar rows = self.table.rowManager.getDisplayRows().slice(0);\n\t\t\t\t\t\t\tvar toggledRows = rows.splice(fromRowIdx, toRowIdx - fromRowIdx + 1);\n\n\t\t\t\t\t\t\tif (e.ctrlKey || e.metaKey) {\n\t\t\t\t\t\t\t\ttoggledRows.forEach(function (toggledRow) {\n\t\t\t\t\t\t\t\t\tif (toggledRow !== self.lastClickedRow) {\n\n\t\t\t\t\t\t\t\t\t\tif (self.table.options.selectable !== true && !self.isRowSelected(row)) {\n\t\t\t\t\t\t\t\t\t\t\tif (self.selectedRows.length < self.table.options.selectable) {\n\t\t\t\t\t\t\t\t\t\t\t\tself.toggleRow(toggledRow);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tself.toggleRow(toggledRow);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tself.lastClickedRow = row;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tself.deselectRows(undefined, true);\n\n\t\t\t\t\t\t\t\tif (self.table.options.selectable !== true) {\n\t\t\t\t\t\t\t\t\tif (toggledRows.length > self.table.options.selectable) {\n\t\t\t\t\t\t\t\t\t\ttoggledRows = toggledRows.slice(0, self.table.options.selectable);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tself.selectRows(toggledRows);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself.table._clearSelection();\n\t\t\t\t\t\t} else if (e.ctrlKey || e.metaKey) {\n\t\t\t\t\t\t\tself.toggleRow(row);\n\t\t\t\t\t\t\tself.lastClickedRow = row;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.deselectRows(undefined, true);\n\t\t\t\t\t\t\tself.selectRows(row);\n\t\t\t\t\t\t\tself.lastClickedRow = row;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\telement.addEventListener(\"click\", function (e) {\n\t\t\t\t\t\tif (!self.table.modExists(\"edit\") || !self.table.modules.edit.getCurrentCell()) {\n\t\t\t\t\t\t\tself.table._clearSelection();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!self.selecting) {\n\t\t\t\t\t\t\tself.toggleRow(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\telement.addEventListener(\"mousedown\", function (e) {\n\t\t\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\t\t\tself.table._clearSelection();\n\n\t\t\t\t\t\t\tself.selecting = true;\n\n\t\t\t\t\t\t\tself.selectPrev = [];\n\n\t\t\t\t\t\t\tdocument.body.addEventListener(\"mouseup\", endSelect);\n\t\t\t\t\t\t\tdocument.body.addEventListener(\"keyup\", endSelect);\n\n\t\t\t\t\t\t\tself.toggleRow(row);\n\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\telement.addEventListener(\"mouseenter\", function (e) {\n\t\t\t\t\t\tif (self.selecting) {\n\t\t\t\t\t\t\tself.table._clearSelection();\n\t\t\t\t\t\t\tself.toggleRow(row);\n\n\t\t\t\t\t\t\tif (self.selectPrev[1] == row) {\n\t\t\t\t\t\t\t\tself.toggleRow(self.selectPrev[0]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\telement.addEventListener(\"mouseout\", function (e) {\n\t\t\t\t\t\tif (self.selecting) {\n\t\t\t\t\t\t\tself.table._clearSelection();\n\t\t\t\t\t\t\tself.selectPrev.unshift(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\telement.classList.add(\"tabulator-unselectable\");\n\t\t\telement.classList.remove(\"tabulator-selectable\");\n\t\t}\n\t};\n\n\t//toggle row selection\n\tSelectRow.prototype.toggleRow = function (row) {\n\t\tif (this.table.options.selectableCheck.call(this.table, row.getComponent())) {\n\t\t\tif (row.modules.select && row.modules.select.selected) {\n\t\t\t\tthis._deselectRow(row);\n\t\t\t} else {\n\t\t\t\tthis._selectRow(row);\n\t\t\t}\n\t\t}\n\t};\n\n\t//select a number of rows\n\tSelectRow.prototype.selectRows = function (rows) {\n\t\tvar _this77 = this;\n\n\t\tvar rowMatch;\n\n\t\tswitch (typeof rows === 'undefined' ? 'undefined' : _typeof(rows)) {\n\t\t\tcase \"undefined\":\n\t\t\t\tthis.table.rowManager.rows.forEach(function (row) {\n\t\t\t\t\t_this77._selectRow(row, true, true);\n\t\t\t\t});\n\n\t\t\t\tthis._rowSelectionChanged();\n\t\t\t\tbreak;\n\n\t\t\tcase \"string\":\n\n\t\t\t\trowMatch = this.table.rowManager.findRow(rows);\n\n\t\t\t\tif (rowMatch) {\n\t\t\t\t\tthis._selectRow(rowMatch, true, true);\n\t\t\t\t} else {\n\t\t\t\t\tthis.table.rowManager.getRows(rows).forEach(function (row) {\n\t\t\t\t\t\t_this77._selectRow(row, true, true);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis._rowSelectionChanged();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (Array.isArray(rows)) {\n\t\t\t\t\trows.forEach(function (row) {\n\t\t\t\t\t\t_this77._selectRow(row, true, true);\n\t\t\t\t\t});\n\n\t\t\t\t\tthis._rowSelectionChanged();\n\t\t\t\t} else {\n\t\t\t\t\tthis._selectRow(rows, false, true);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t//select an individual row\n\tSelectRow.prototype._selectRow = function (rowInfo, silent, force) {\n\t\tvar index;\n\n\t\t//handle max row count\n\t\tif (!isNaN(this.table.options.selectable) && this.table.options.selectable !== true && !force) {\n\t\t\tif (this.selectedRows.length >= this.table.options.selectable) {\n\t\t\t\tif (this.table.options.selectableRollingSelection) {\n\t\t\t\t\tthis._deselectRow(this.selectedRows[0]);\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar row = this.table.rowManager.findRow(rowInfo);\n\n\t\tif (row) {\n\t\t\tif (this.selectedRows.indexOf(row) == -1) {\n\t\t\t\tif (!row.modules.select) {\n\t\t\t\t\trow.modules.select = {};\n\t\t\t\t}\n\n\t\t\t\trow.modules.select.selected = true;\n\t\t\t\tif (row.modules.select.checkboxEl) {\n\t\t\t\t\trow.modules.select.checkboxEl.checked = true;\n\t\t\t\t}\n\t\t\t\trow.getElement().classList.add(\"tabulator-selected\");\n\n\t\t\t\tthis.selectedRows.push(row);\n\n\t\t\t\tif (this.table.options.dataTreeSelectPropagate) {\n\t\t\t\t\tthis.childRowSelection(row, true);\n\t\t\t\t}\n\n\t\t\t\tif (!silent) {\n\t\t\t\t\tthis.table.options.rowSelected.call(this.table, row.getComponent());\n\t\t\t\t}\n\n\t\t\t\tthis._rowSelectionChanged(silent);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!silent) {\n\t\t\t\tconsole.warn(\"Selection Error - No such row found, ignoring selection:\" + rowInfo);\n\t\t\t}\n\t\t}\n\t};\n\n\tSelectRow.prototype.isRowSelected = function (row) {\n\t\treturn this.selectedRows.indexOf(row) !== -1;\n\t};\n\n\t//deselect a number of rows\n\tSelectRow.prototype.deselectRows = function (rows, silent) {\n\t\tvar self = this,\n\t\t    rowCount;\n\n\t\tif (typeof rows == \"undefined\") {\n\n\t\t\trowCount = self.selectedRows.length;\n\n\t\t\tfor (var _i14 = 0; _i14 < rowCount; _i14++) {\n\t\t\t\tself._deselectRow(self.selectedRows[0], true);\n\t\t\t}\n\n\t\t\tself._rowSelectionChanged(silent);\n\t\t} else {\n\t\t\tif (Array.isArray(rows)) {\n\t\t\t\trows.forEach(function (row) {\n\t\t\t\t\tself._deselectRow(row, true);\n\t\t\t\t});\n\n\t\t\t\tself._rowSelectionChanged(silent);\n\t\t\t} else {\n\t\t\t\tself._deselectRow(rows, silent);\n\t\t\t}\n\t\t}\n\t};\n\n\t//deselect an individual row\n\tSelectRow.prototype._deselectRow = function (rowInfo, silent) {\n\t\tvar self = this,\n\t\t    row = self.table.rowManager.findRow(rowInfo),\n\t\t    index;\n\n\t\tif (row) {\n\t\t\tindex = self.selectedRows.findIndex(function (selectedRow) {\n\t\t\t\treturn selectedRow == row;\n\t\t\t});\n\n\t\t\tif (index > -1) {\n\n\t\t\t\tif (!row.modules.select) {\n\t\t\t\t\trow.modules.select = {};\n\t\t\t\t}\n\n\t\t\t\trow.modules.select.selected = false;\n\t\t\t\tif (row.modules.select.checkboxEl) {\n\t\t\t\t\trow.modules.select.checkboxEl.checked = false;\n\t\t\t\t}\n\t\t\t\trow.getElement().classList.remove(\"tabulator-selected\");\n\t\t\t\tself.selectedRows.splice(index, 1);\n\n\t\t\t\tif (this.table.options.dataTreeSelectPropagate) {\n\t\t\t\t\tthis.childRowSelection(row, false);\n\t\t\t\t}\n\n\t\t\t\tif (!silent) {\n\t\t\t\t\tself.table.options.rowDeselected.call(this.table, row.getComponent());\n\t\t\t\t}\n\n\t\t\t\tself._rowSelectionChanged(silent);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!silent) {\n\t\t\t\tconsole.warn(\"Deselection Error - No such row found, ignoring selection:\" + rowInfo);\n\t\t\t}\n\t\t}\n\t};\n\n\tSelectRow.prototype.getSelectedData = function () {\n\t\tvar data = [];\n\n\t\tthis.selectedRows.forEach(function (row) {\n\t\t\tdata.push(row.getData());\n\t\t});\n\n\t\treturn data;\n\t};\n\n\tSelectRow.prototype.getSelectedRows = function () {\n\n\t\tvar rows = [];\n\n\t\tthis.selectedRows.forEach(function (row) {\n\t\t\trows.push(row.getComponent());\n\t\t});\n\n\t\treturn rows;\n\t};\n\n\tSelectRow.prototype._rowSelectionChanged = function (silent) {\n\t\tif (this.headerCheckboxElement) {\n\t\t\tif (this.selectedRows.length === 0) {\n\t\t\t\tthis.headerCheckboxElement.checked = false;\n\t\t\t\tthis.headerCheckboxElement.indeterminate = false;\n\t\t\t} else if (this.table.rowManager.rows.length === this.selectedRows.length) {\n\t\t\t\tthis.headerCheckboxElement.checked = true;\n\t\t\t\tthis.headerCheckboxElement.indeterminate = false;\n\t\t\t} else {\n\t\t\t\tthis.headerCheckboxElement.indeterminate = true;\n\t\t\t\tthis.headerCheckboxElement.checked = false;\n\t\t\t}\n\t\t}\n\n\t\tif (!silent) {\n\t\t\tthis.table.options.rowSelectionChanged.call(this.table, this.getSelectedData(), this.getSelectedRows());\n\t\t}\n\t};\n\n\tSelectRow.prototype.registerRowSelectCheckbox = function (row, element) {\n\t\tif (!row._row.modules.select) {\n\t\t\trow._row.modules.select = {};\n\t\t}\n\n\t\trow._row.modules.select.checkboxEl = element;\n\t};\n\n\tSelectRow.prototype.registerHeaderSelectCheckbox = function (element) {\n\t\tthis.headerCheckboxElement = element;\n\t};\n\n\tSelectRow.prototype.childRowSelection = function (row, select) {\n\t\tvar children = this.table.modules.dataTree.getChildren(row);\n\n\t\tif (select) {\n\t\t\tfor (var _iterator2 = children, _isArray2 = Array.isArray(_iterator2), _i15 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i15 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i15++];\n\t\t\t\t} else {\n\t\t\t\t\t_i15 = _iterator2.next();\n\t\t\t\t\tif (_i15.done) break;\n\t\t\t\t\t_ref2 = _i15.value;\n\t\t\t\t}\n\n\t\t\t\tvar child = _ref2;\n\n\t\t\t\tthis._selectRow(child, true);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var _iterator3 = children, _isArray3 = Array.isArray(_iterator3), _i16 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i16 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i16++];\n\t\t\t\t} else {\n\t\t\t\t\t_i16 = _iterator3.next();\n\t\t\t\t\tif (_i16.done) break;\n\t\t\t\t\t_ref3 = _i16.value;\n\t\t\t\t}\n\n\t\t\t\tvar _child = _ref3;\n\n\t\t\t\tthis._deselectRow(_child, true);\n\t\t\t}\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"selectRow\", SelectRow);\n\n\tvar Sort = function Sort(table) {\n\t\tthis.table = table; //hold Tabulator object\n\t\tthis.sortList = []; //holder current sort\n\t\tthis.changed = false; //has the sort changed since last render\n\t};\n\n\t//initialize column header for sorting\n\tSort.prototype.initializeColumn = function (column, content) {\n\t\tvar self = this,\n\t\t    sorter = false,\n\t\t    colEl,\n\t\t    arrowEl;\n\n\t\tswitch (_typeof(column.definition.sorter)) {\n\t\t\tcase \"string\":\n\t\t\t\tif (self.sorters[column.definition.sorter]) {\n\t\t\t\t\tsorter = self.sorters[column.definition.sorter];\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\"Sort Error - No such sorter found: \", column.definition.sorter);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\tsorter = column.definition.sorter;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcolumn.modules.sort = {\n\t\t\tsorter: sorter, dir: \"none\",\n\t\t\tparams: column.definition.sorterParams || {},\n\t\t\tstartingDir: column.definition.headerSortStartingDir || \"asc\",\n\t\t\ttristate: typeof column.definition.headerSortTristate !== \"undefined\" ? column.definition.headerSortTristate : this.table.options.headerSortTristate\n\t\t};\n\n\t\tif (typeof column.definition.headerSort === \"undefined\" ? this.table.options.headerSort !== false : column.definition.headerSort !== false) {\n\n\t\t\tcolEl = column.getElement();\n\n\t\t\tcolEl.classList.add(\"tabulator-sortable\");\n\n\t\t\tarrowEl = document.createElement(\"div\");\n\t\t\tarrowEl.classList.add(\"tabulator-arrow\");\n\t\t\t//create sorter arrow\n\t\t\tcontent.appendChild(arrowEl);\n\n\t\t\t//sort on click\n\t\t\tcolEl.addEventListener(\"click\", function (e) {\n\t\t\t\tvar dir = \"\",\n\t\t\t\t    sorters = [],\n\t\t\t\t    match = false;\n\n\t\t\t\tif (column.modules.sort) {\n\t\t\t\t\tif (column.modules.sort.tristate) {\n\t\t\t\t\t\tif (column.modules.sort.dir == \"none\") {\n\t\t\t\t\t\t\tdir = column.modules.sort.startingDir;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (column.modules.sort.dir == column.modules.sort.startingDir) {\n\t\t\t\t\t\t\t\tdir = column.modules.sort.dir == \"asc\" ? \"desc\" : \"asc\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdir = \"none\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (column.modules.sort.dir) {\n\t\t\t\t\t\t\tcase \"asc\":\n\t\t\t\t\t\t\t\tdir = \"desc\";\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase \"desc\":\n\t\t\t\t\t\t\t\tdir = \"asc\";\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tdir = column.modules.sort.startingDir;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (self.table.options.columnHeaderSortMulti && (e.shiftKey || e.ctrlKey)) {\n\t\t\t\t\t\tsorters = self.getSort();\n\n\t\t\t\t\t\tmatch = sorters.findIndex(function (sorter) {\n\t\t\t\t\t\t\treturn sorter.field === column.getField();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (match > -1) {\n\t\t\t\t\t\t\tsorters[match].dir = dir;\n\n\t\t\t\t\t\t\tif (match != sorters.length - 1) {\n\t\t\t\t\t\t\t\tmatch = sorters.splice(match, 1)[0];\n\t\t\t\t\t\t\t\tif (dir != \"none\") {\n\t\t\t\t\t\t\t\t\tsorters.push(match);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (dir != \"none\") {\n\t\t\t\t\t\t\t\tsorters.push({ column: column, dir: dir });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//add to existing sort\n\t\t\t\t\t\tself.setSort(sorters);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (dir == \"none\") {\n\t\t\t\t\t\t\tself.clear();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//sort by column only\n\t\t\t\t\t\t\tself.setSort(column, dir);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tself.table.rowManager.sorterRefresh(!self.sortList.length);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t//check if the sorters have changed since last use\n\tSort.prototype.hasChanged = function () {\n\t\tvar changed = this.changed;\n\t\tthis.changed = false;\n\t\treturn changed;\n\t};\n\n\t//return current sorters\n\tSort.prototype.getSort = function () {\n\t\tvar self = this,\n\t\t    sorters = [];\n\n\t\tself.sortList.forEach(function (item) {\n\t\t\tif (item.column) {\n\t\t\t\tsorters.push({ column: item.column.getComponent(), field: item.column.getField(), dir: item.dir });\n\t\t\t}\n\t\t});\n\n\t\treturn sorters;\n\t};\n\n\t//change sort list and trigger sort\n\tSort.prototype.setSort = function (sortList, dir) {\n\t\tvar self = this,\n\t\t    newSortList = [];\n\n\t\tif (!Array.isArray(sortList)) {\n\t\t\tsortList = [{ column: sortList, dir: dir }];\n\t\t}\n\n\t\tsortList.forEach(function (item) {\n\t\t\tvar column;\n\n\t\t\tcolumn = self.table.columnManager.findColumn(item.column);\n\n\t\t\tif (column) {\n\t\t\t\titem.column = column;\n\t\t\t\tnewSortList.push(item);\n\t\t\t\tself.changed = true;\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"Sort Warning - Sort field does not exist and is being ignored: \", item.column);\n\t\t\t}\n\t\t});\n\n\t\tself.sortList = newSortList;\n\n\t\tif (this.table.options.persistence && this.table.modExists(\"persistence\", true) && this.table.modules.persistence.config.sort) {\n\t\t\tthis.table.modules.persistence.save(\"sort\");\n\t\t}\n\t};\n\n\t//clear sorters\n\tSort.prototype.clear = function () {\n\t\tthis.setSort([]);\n\t};\n\n\t//find appropriate sorter for column\n\tSort.prototype.findSorter = function (column) {\n\t\tvar row = this.table.rowManager.activeRows[0],\n\t\t    sorter = \"string\",\n\t\t    field,\n\t\t    value;\n\n\t\tif (row) {\n\t\t\trow = row.getData();\n\t\t\tfield = column.getField();\n\n\t\t\tif (field) {\n\n\t\t\t\tvalue = column.getFieldValue(row);\n\n\t\t\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\t\t\t\t\tcase \"undefined\":\n\t\t\t\t\t\tsorter = \"string\";\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\tsorter = \"boolean\";\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (!isNaN(value) && value !== \"\") {\n\t\t\t\t\t\t\tsorter = \"number\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {\n\t\t\t\t\t\t\t\tsorter = \"alphanum\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.sorters[sorter];\n\t};\n\n\t//work through sort list sorting data\n\tSort.prototype.sort = function (data) {\n\t\tvar self = this,\n\t\t    sortList = this.table.options.sortOrderReverse ? self.sortList.slice().reverse() : self.sortList,\n\t\t    sortListActual = [],\n\t\t    rowComponents = [],\n\t\t    lastSort;\n\n\t\tif (self.table.options.dataSorting) {\n\t\t\tself.table.options.dataSorting.call(self.table, self.getSort());\n\t\t}\n\n\t\tself.clearColumnHeaders();\n\n\t\tif (!self.table.options.ajaxSorting) {\n\n\t\t\t//build list of valid sorters and trigger column specific callbacks before sort begins\n\t\t\tsortList.forEach(function (item, i) {\n\t\t\t\tvar sortObj = item.column.modules.sort;\n\n\t\t\t\tif (item.column && sortObj) {\n\n\t\t\t\t\t//if no sorter has been defined, take a guess\n\t\t\t\t\tif (!sortObj.sorter) {\n\t\t\t\t\t\tsortObj.sorter = self.findSorter(item.column);\n\t\t\t\t\t}\n\n\t\t\t\t\titem.params = typeof sortObj.params === \"function\" ? sortObj.params(item.column.getComponent(), item.dir) : sortObj.params;\n\n\t\t\t\t\tsortListActual.push(item);\n\t\t\t\t}\n\n\t\t\t\tself.setColumnHeader(item.column, item.dir);\n\t\t\t});\n\n\t\t\t//sort data\n\t\t\tif (sortListActual.length) {\n\t\t\t\tself._sortItems(data, sortListActual);\n\t\t\t}\n\t\t} else {\n\t\t\tsortList.forEach(function (item, i) {\n\t\t\t\tself.setColumnHeader(item.column, item.dir);\n\t\t\t});\n\t\t}\n\n\t\tif (self.table.options.dataSorted) {\n\t\t\tdata.forEach(function (row) {\n\t\t\t\trowComponents.push(row.getComponent());\n\t\t\t});\n\n\t\t\tself.table.options.dataSorted.call(self.table, self.getSort(), rowComponents);\n\t\t}\n\t};\n\n\t//clear sort arrows on columns\n\tSort.prototype.clearColumnHeaders = function () {\n\t\tthis.table.columnManager.getRealColumns().forEach(function (column) {\n\t\t\tif (column.modules.sort) {\n\t\t\t\tcolumn.modules.sort.dir = \"none\";\n\t\t\t\tcolumn.getElement().setAttribute(\"aria-sort\", \"none\");\n\t\t\t}\n\t\t});\n\t};\n\n\t//set the column header sort direction\n\tSort.prototype.setColumnHeader = function (column, dir) {\n\t\tcolumn.modules.sort.dir = dir;\n\t\tcolumn.getElement().setAttribute(\"aria-sort\", dir);\n\t};\n\n\t//sort each item in sort list\n\tSort.prototype._sortItems = function (data, sortList) {\n\t\tvar _this78 = this;\n\n\t\tvar sorterCount = sortList.length - 1;\n\n\t\tdata.sort(function (a, b) {\n\t\t\tvar result;\n\n\t\t\tfor (var i = sorterCount; i >= 0; i--) {\n\t\t\t\tvar sortItem = sortList[i];\n\n\t\t\t\tresult = _this78._sortRow(a, b, sortItem.column, sortItem.dir, sortItem.params);\n\n\t\t\t\tif (result !== 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t};\n\n\t//process individual rows for a sort function on active data\n\tSort.prototype._sortRow = function (a, b, column, dir, params) {\n\t\tvar el1Comp, el2Comp, colComp;\n\n\t\t//switch elements depending on search direction\n\t\tvar el1 = dir == \"asc\" ? a : b;\n\t\tvar el2 = dir == \"asc\" ? b : a;\n\n\t\ta = column.getFieldValue(el1.getData());\n\t\tb = column.getFieldValue(el2.getData());\n\n\t\ta = typeof a !== \"undefined\" ? a : \"\";\n\t\tb = typeof b !== \"undefined\" ? b : \"\";\n\n\t\tel1Comp = el1.getComponent();\n\t\tel2Comp = el2.getComponent();\n\n\t\treturn column.modules.sort.sorter.call(this, a, b, el1Comp, el2Comp, column.getComponent(), dir, params);\n\t};\n\n\t//default data sorters\n\tSort.prototype.sorters = {\n\n\t\t//sort numbers\n\t\tnumber: function number(a, b, aRow, bRow, column, dir, params) {\n\t\t\tvar alignEmptyValues = params.alignEmptyValues;\n\t\t\tvar decimal = params.decimalSeparator || \".\";\n\t\t\tvar thousand = params.thousandSeparator || \",\";\n\t\t\tvar emptyAlign = 0;\n\n\t\t\ta = parseFloat(String(a).split(thousand).join(\"\").split(decimal).join(\".\"));\n\t\t\tb = parseFloat(String(b).split(thousand).join(\"\").split(decimal).join(\".\"));\n\n\t\t\t//handle non numeric values\n\t\t\tif (isNaN(a)) {\n\t\t\t\temptyAlign = isNaN(b) ? 0 : -1;\n\t\t\t} else if (isNaN(b)) {\n\t\t\t\temptyAlign = 1;\n\t\t\t} else {\n\t\t\t\t//compare valid values\n\t\t\t\treturn a - b;\n\t\t\t}\n\n\t\t\t//fix empty values in position\n\t\t\tif (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n\t\t\t\temptyAlign *= -1;\n\t\t\t}\n\n\t\t\treturn emptyAlign;\n\t\t},\n\n\t\t//sort strings\n\t\tstring: function string(a, b, aRow, bRow, column, dir, params) {\n\t\t\tvar alignEmptyValues = params.alignEmptyValues;\n\t\t\tvar emptyAlign = 0;\n\t\t\tvar locale;\n\n\t\t\t//handle empty values\n\t\t\tif (!a) {\n\t\t\t\temptyAlign = !b ? 0 : -1;\n\t\t\t} else if (!b) {\n\t\t\t\temptyAlign = 1;\n\t\t\t} else {\n\t\t\t\t//compare valid values\n\t\t\t\tswitch (_typeof(params.locale)) {\n\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\tif (params.locale) {\n\t\t\t\t\t\t\tlocale = this.table.modules.localize.getLocale();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\tlocale = params.locale;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn String(a).toLowerCase().localeCompare(String(b).toLowerCase(), locale);\n\t\t\t}\n\n\t\t\t//fix empty values in position\n\t\t\tif (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n\t\t\t\temptyAlign *= -1;\n\t\t\t}\n\n\t\t\treturn emptyAlign;\n\t\t},\n\n\t\t//sort date\n\t\tdate: function date(a, b, aRow, bRow, column, dir, params) {\n\t\t\tif (!params.format) {\n\t\t\t\tparams.format = \"DD/MM/YYYY\";\n\t\t\t}\n\n\t\t\treturn this.sorters.datetime.call(this, a, b, aRow, bRow, column, dir, params);\n\t\t},\n\n\t\t//sort HH:mm formatted times\n\t\ttime: function time(a, b, aRow, bRow, column, dir, params) {\n\t\t\tif (!params.format) {\n\t\t\t\tparams.format = \"HH:mm\";\n\t\t\t}\n\n\t\t\treturn this.sorters.datetime.call(this, a, b, aRow, bRow, column, dir, params);\n\t\t},\n\n\t\t//sort datetime\n\t\tdatetime: function datetime(a, b, aRow, bRow, column, dir, params) {\n\t\t\tvar format = params.format || \"DD/MM/YYYY HH:mm:ss\",\n\t\t\t    alignEmptyValues = params.alignEmptyValues,\n\t\t\t    emptyAlign = 0;\n\n\t\t\tif (typeof moment != \"undefined\") {\n\t\t\t\ta = moment(a, format);\n\t\t\t\tb = moment(b, format);\n\n\t\t\t\tif (!a.isValid()) {\n\t\t\t\t\temptyAlign = !b.isValid() ? 0 : -1;\n\t\t\t\t} else if (!b.isValid()) {\n\t\t\t\t\temptyAlign = 1;\n\t\t\t\t} else {\n\t\t\t\t\t//compare valid values\n\t\t\t\t\treturn a - b;\n\t\t\t\t}\n\n\t\t\t\t//fix empty values in position\n\t\t\t\tif (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n\t\t\t\t\temptyAlign *= -1;\n\t\t\t\t}\n\n\t\t\t\treturn emptyAlign;\n\t\t\t} else {\n\t\t\t\tconsole.error(\"Sort Error - 'datetime' sorter is dependant on moment.js\");\n\t\t\t}\n\t\t},\n\n\t\t//sort booleans\n\t\tboolean: function boolean(a, b, aRow, bRow, column, dir, params) {\n\t\t\tvar el1 = a === true || a === \"true\" || a === \"True\" || a === 1 ? 1 : 0;\n\t\t\tvar el2 = b === true || b === \"true\" || b === \"True\" || b === 1 ? 1 : 0;\n\n\t\t\treturn el1 - el2;\n\t\t},\n\n\t\t//sort if element contains any data\n\t\tarray: function array(a, b, aRow, bRow, column, dir, params) {\n\t\t\tvar el1 = 0;\n\t\t\tvar el2 = 0;\n\t\t\tvar type = params.type || \"length\";\n\t\t\tvar alignEmptyValues = params.alignEmptyValues;\n\t\t\tvar emptyAlign = 0;\n\n\t\t\tfunction calc(value) {\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase \"length\":\n\t\t\t\t\t\treturn value.length;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"sum\":\n\t\t\t\t\t\treturn value.reduce(function (c, d) {\n\t\t\t\t\t\t\treturn c + d;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"max\":\n\t\t\t\t\t\treturn Math.max.apply(null, value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"min\":\n\t\t\t\t\t\treturn Math.min.apply(null, value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"avg\":\n\t\t\t\t\t\treturn value.reduce(function (c, d) {\n\t\t\t\t\t\t\treturn c + d;\n\t\t\t\t\t\t}) / value.length;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//handle non array values\n\t\t\tif (!Array.isArray(a)) {\n\t\t\t\talignEmptyValues = !Array.isArray(b) ? 0 : -1;\n\t\t\t} else if (!Array.isArray(b)) {\n\t\t\t\talignEmptyValues = 1;\n\t\t\t} else {\n\n\t\t\t\t//compare valid values\n\t\t\t\tel1 = a ? calc(a) : 0;\n\t\t\t\tel2 = b ? calc(b) : 0;\n\n\t\t\t\treturn el1 - el2;\n\t\t\t}\n\n\t\t\t//fix empty values in position\n\t\t\tif (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n\t\t\t\temptyAlign *= -1;\n\t\t\t}\n\n\t\t\treturn emptyAlign;\n\t\t},\n\n\t\t//sort if element contains any data\n\t\texists: function exists(a, b, aRow, bRow, column, dir, params) {\n\t\t\tvar el1 = typeof a == \"undefined\" ? 0 : 1;\n\t\t\tvar el2 = typeof b == \"undefined\" ? 0 : 1;\n\n\t\t\treturn el1 - el2;\n\t\t},\n\n\t\t//sort alpha numeric strings\n\t\talphanum: function alphanum(as, bs, aRow, bRow, column, dir, params) {\n\t\t\tvar a,\n\t\t\t    b,\n\t\t\t    a1,\n\t\t\t    b1,\n\t\t\t    i = 0,\n\t\t\t    L,\n\t\t\t    rx = /(\\d+)|(\\D+)/g,\n\t\t\t    rd = /\\d/;\n\t\t\tvar alignEmptyValues = params.alignEmptyValues;\n\t\t\tvar emptyAlign = 0;\n\n\t\t\t//handle empty values\n\t\t\tif (!as && as !== 0) {\n\t\t\t\temptyAlign = !bs && bs !== 0 ? 0 : -1;\n\t\t\t} else if (!bs && bs !== 0) {\n\t\t\t\temptyAlign = 1;\n\t\t\t} else {\n\n\t\t\t\tif (isFinite(as) && isFinite(bs)) return as - bs;\n\t\t\t\ta = String(as).toLowerCase();\n\t\t\t\tb = String(bs).toLowerCase();\n\t\t\t\tif (a === b) return 0;\n\t\t\t\tif (!(rd.test(a) && rd.test(b))) return a > b ? 1 : -1;\n\t\t\t\ta = a.match(rx);\n\t\t\t\tb = b.match(rx);\n\t\t\t\tL = a.length > b.length ? b.length : a.length;\n\t\t\t\twhile (i < L) {\n\t\t\t\t\ta1 = a[i];\n\t\t\t\t\tb1 = b[i++];\n\t\t\t\t\tif (a1 !== b1) {\n\t\t\t\t\t\tif (isFinite(a1) && isFinite(b1)) {\n\t\t\t\t\t\t\tif (a1.charAt(0) === \"0\") a1 = \".\" + a1;\n\t\t\t\t\t\t\tif (b1.charAt(0) === \"0\") b1 = \".\" + b1;\n\t\t\t\t\t\t\treturn a1 - b1;\n\t\t\t\t\t\t} else return a1 > b1 ? 1 : -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn a.length > b.length;\n\t\t\t}\n\n\t\t\t//fix empty values in position\n\t\t\tif (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n\t\t\t\temptyAlign *= -1;\n\t\t\t}\n\n\t\t\treturn emptyAlign;\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"sort\", Sort);\n\n\tvar Validate = function Validate(table) {\n\t\tthis.table = table;\n\t\tthis.invalidCells = [];\n\t};\n\n\t//validate\n\tValidate.prototype.initializeColumn = function (column) {\n\t\tvar self = this,\n\t\t    config = [],\n\t\t    validator;\n\n\t\tif (column.definition.validator) {\n\n\t\t\tif (Array.isArray(column.definition.validator)) {\n\t\t\t\tcolumn.definition.validator.forEach(function (item) {\n\t\t\t\t\tvalidator = self._extractValidator(item);\n\n\t\t\t\t\tif (validator) {\n\t\t\t\t\t\tconfig.push(validator);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvalidator = this._extractValidator(column.definition.validator);\n\n\t\t\t\tif (validator) {\n\t\t\t\t\tconfig.push(validator);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcolumn.modules.validate = config.length ? config : false;\n\t\t}\n\t};\n\n\tValidate.prototype._extractValidator = function (value) {\n\t\tvar type, params, pos;\n\n\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\t\t\tcase \"string\":\n\t\t\t\tpos = value.indexOf(':');\n\n\t\t\t\tif (pos > -1) {\n\t\t\t\t\ttype = value.substring(0, pos);\n\t\t\t\t\tparams = value.substring(pos + 1);\n\t\t\t\t} else {\n\t\t\t\t\ttype = value;\n\t\t\t\t}\n\n\t\t\t\treturn this._buildValidator(type, params);\n\t\t\t\tbreak;\n\n\t\t\tcase \"function\":\n\t\t\t\treturn this._buildValidator(value);\n\t\t\t\tbreak;\n\n\t\t\tcase \"object\":\n\t\t\t\treturn this._buildValidator(value.type, value.parameters);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tValidate.prototype._buildValidator = function (type, params) {\n\n\t\tvar func = typeof type == \"function\" ? type : this.validators[type];\n\n\t\tif (!func) {\n\t\t\tconsole.warn(\"Validator Setup Error - No matching validator found:\", type);\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn {\n\t\t\t\ttype: typeof type == \"function\" ? \"function\" : type,\n\t\t\t\tfunc: func,\n\t\t\t\tparams: params\n\t\t\t};\n\t\t}\n\t};\n\n\tValidate.prototype.validate = function (validators, cell, value) {\n\t\tvar self = this,\n\t\t    valid = [],\n\t\t    invalidIndex = this.invalidCells.indexOf(cell);\n\n\t\tif (validators) {\n\t\t\tvalidators.forEach(function (item) {\n\t\t\t\tif (!item.func.call(self, cell.getComponent(), value, item.params)) {\n\t\t\t\t\tvalid.push({\n\t\t\t\t\t\ttype: item.type,\n\t\t\t\t\t\tparameters: item.params\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tvalid = valid.length ? valid : true;\n\n\t\tif (!cell.modules.validate) {\n\t\t\tcell.modules.validate = {};\n\t\t}\n\n\t\tif (valid === true) {\n\t\t\tcell.modules.validate.invalid = false;\n\t\t\tcell.getElement().classList.remove(\"tabulator-validation-fail\");\n\n\t\t\tif (invalidIndex > -1) {\n\t\t\t\tthis.invalidCells.splice(invalidIndex, 1);\n\t\t\t}\n\t\t} else {\n\t\t\tcell.modules.validate.invalid = true;\n\n\t\t\tif (this.table.options.validationMode !== \"manual\") {\n\t\t\t\tcell.getElement().classList.add(\"tabulator-validation-fail\");\n\t\t\t}\n\n\t\t\tif (invalidIndex == -1) {\n\t\t\t\tthis.invalidCells.push(cell);\n\t\t\t}\n\t\t}\n\n\t\treturn valid;\n\t};\n\n\tValidate.prototype.getInvalidCells = function () {\n\t\tvar output = [];\n\n\t\tthis.invalidCells.forEach(function (cell) {\n\t\t\toutput.push(cell.getComponent());\n\t\t});\n\n\t\treturn output;\n\t};\n\n\tValidate.prototype.clearValidation = function (cell) {\n\t\tvar invalidIndex;\n\n\t\tif (cell.modules.validate && cell.modules.validate.invalid) {\n\n\t\t\tcell.element.classList.remove(\"tabulator-validation-fail\");\n\t\t\tcell.modules.validate.invalid = false;\n\n\t\t\tinvalidIndex = this.invalidCells.indexOf(cell);\n\n\t\t\tif (invalidIndex > -1) {\n\t\t\t\tthis.invalidCells.splice(invalidIndex, 1);\n\t\t\t}\n\t\t}\n\t};\n\n\tValidate.prototype.validators = {\n\n\t\t//is integer\n\t\tinteger: function integer(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvalue = Number(value);\n\t\t\treturn typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n\t\t},\n\n\t\t//is float\n\t\tfloat: function float(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvalue = Number(value);\n\t\t\treturn typeof value === 'number' && isFinite(value) && value % 1 !== 0;\n\t\t},\n\n\t\t//must be a number\n\t\tnumeric: function numeric(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn !isNaN(value);\n\t\t},\n\n\t\t//must be a string\n\t\tstring: function string(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn isNaN(value);\n\t\t},\n\n\t\t//maximum value\n\t\tmax: function max(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn parseFloat(value) <= parameters;\n\t\t},\n\n\t\t//minimum value\n\t\tmin: function min(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn parseFloat(value) >= parameters;\n\t\t},\n\n\t\t//starts with  value\n\t\tstarts: function starts(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn String(value).toLowerCase().startsWith(String(parameters).toLowerCase());\n\t\t},\n\n\t\t//ends with  value\n\t\tends: function ends(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn String(value).toLowerCase().endsWith(String(parameters).toLowerCase());\n\t\t},\n\n\t\t//minimum string length\n\t\tminLength: function minLength(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn String(value).length >= parameters;\n\t\t},\n\n\t\t//maximum string length\n\t\tmaxLength: function maxLength(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn String(value).length <= parameters;\n\t\t},\n\n\t\t//in provided value list\n\t\tin: function _in(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (typeof parameters == \"string\") {\n\t\t\t\tparameters = parameters.split(\"|\");\n\t\t\t}\n\n\t\t\treturn value === \"\" || parameters.indexOf(value) > -1;\n\t\t},\n\n\t\t//must match provided regex\n\t\tregex: function regex(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvar reg = new RegExp(parameters);\n\n\t\t\treturn reg.test(value);\n\t\t},\n\n\t\t//value must be unique in this column\n\t\tunique: function unique(cell, value, parameters) {\n\t\t\tif (value === \"\" || value === null || typeof value === \"undefined\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvar unique = true;\n\n\t\t\tvar cellData = cell.getData();\n\t\t\tvar column = cell.getColumn()._getSelf();\n\n\t\t\tthis.table.rowManager.rows.forEach(function (row) {\n\t\t\t\tvar data = row.getData();\n\n\t\t\t\tif (data !== cellData) {\n\t\t\t\t\tif (value == column.getFieldValue(data)) {\n\t\t\t\t\t\tunique = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn unique;\n\t\t},\n\n\t\t//must have a value\n\t\trequired: function required(cell, value, parameters) {\n\t\t\treturn value !== \"\" && value !== null && typeof value !== \"undefined\";\n\t\t}\n\t};\n\n\tTabulator.prototype.registerModule(\"validate\", Validate);\n\n\treturn Tabulator;\n});","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import * as tslib_1 from \"tslib\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { Table } from \"../schema-builder/table/Table\";\n/**\n * Caches query result into current database, into separate table called \"query-result-cache\".\n */\nvar DbQueryResultCache = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function DbQueryResultCache(connection) {\n        this.connection = connection;\n        var options = this.connection.driver.options;\n        var cacheOptions = typeof this.connection.options.cache === \"object\" ? this.connection.options.cache : {};\n        var cacheTableName = cacheOptions.tableName || \"query-result-cache\";\n        this.queryResultCacheTable = this.connection.driver.buildTableName(cacheTableName, options.schema, options.database);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a connection with given cache provider.\n     */\n    DbQueryResultCache.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Disconnects with given cache provider.\n     */\n    DbQueryResultCache.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    DbQueryResultCache.prototype.synchronize = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var driver, tableExist;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.getQueryRunner(queryRunner);\n                        driver = this.connection.driver;\n                        return [4 /*yield*/, queryRunner.hasTable(this.queryResultCacheTable)];\n                    case 1:\n                        tableExist = _a.sent();\n                        if (tableExist)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, queryRunner.createTable(new Table({\n                                name: this.queryResultCacheTable,\n                                columns: [\n                                    {\n                                        name: \"id\",\n                                        isPrimary: true,\n                                        isNullable: false,\n                                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheId }),\n                                        generationStrategy: \"increment\",\n                                        isGenerated: true\n                                    },\n                                    {\n                                        name: \"identifier\",\n                                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheIdentifier }),\n                                        isNullable: true\n                                    },\n                                    {\n                                        name: \"time\",\n                                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheTime }),\n                                        isPrimary: false,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"duration\",\n                                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheDuration }),\n                                        isPrimary: false,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"query\",\n                                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheQuery }),\n                                        isPrimary: false,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"result\",\n                                        type: driver.normalizeType({ type: driver.mappedDataTypes.cacheResult }),\n                                        isNullable: false\n                                    },\n                                ]\n                            }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Caches given query result.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    DbQueryResultCache.prototype.getFromCache = function (options, queryRunner) {\n        queryRunner = this.getQueryRunner(queryRunner);\n        var qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select()\n            .from(this.queryResultCacheTable, \"cache\");\n        if (options.identifier) {\n            return qb\n                .where(qb.escape(\"cache\") + \".\" + qb.escape(\"identifier\") + \" = :identifier\")\n                .setParameters({ identifier: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.identifier, \"nvarchar\") : options.identifier })\n                .getRawOne();\n        }\n        else if (options.query) {\n            if (this.connection.driver instanceof OracleDriver) {\n                return qb\n                    .where(\"dbms_lob.compare(\" + qb.escape(\"cache\") + \".\" + qb.escape(\"query\") + \", :query) = 0\", { query: options.query })\n                    .getRawOne();\n            }\n            return qb\n                .where(qb.escape(\"cache\") + \".\" + qb.escape(\"query\") + \" = :query\")\n                .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, \"nvarchar\") : options.query })\n                .getRawOne();\n        }\n        return Promise.resolve(undefined);\n    };\n    /**\n     * Checks if cache is expired or not.\n     */\n    DbQueryResultCache.prototype.isExpired = function (savedCache) {\n        var duration = typeof savedCache.duration === \"string\" ? parseInt(savedCache.duration) : savedCache.duration;\n        return ((typeof savedCache.time === \"string\" ? parseInt(savedCache.time) : savedCache.time) + duration) < new Date().getTime();\n    };\n    /**\n     * Stores given query result in the cache.\n     */\n    DbQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var insertedValues, qb, qb;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.getQueryRunner(queryRunner);\n                        insertedValues = options;\n                        if (this.connection.driver instanceof SqlServerDriver) { // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\n                            insertedValues = {\n                                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\n                                time: new MssqlParameter(options.time, \"bigint\"),\n                                duration: new MssqlParameter(options.duration, \"int\"),\n                                query: new MssqlParameter(options.query, \"nvarchar\"),\n                                result: new MssqlParameter(options.result, \"nvarchar\"),\n                            };\n                        }\n                        if (!(savedCache && savedCache.identifier)) return [3 /*break*/, 2];\n                        qb = queryRunner.manager\n                            .createQueryBuilder()\n                            .update(this.queryResultCacheTable)\n                            .set(insertedValues);\n                        qb.where(qb.escape(\"identifier\") + \" = :condition\", { condition: insertedValues.identifier });\n                        return [4 /*yield*/, qb.execute()];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 2:\n                        if (!(savedCache && savedCache.query)) return [3 /*break*/, 4];\n                        qb = queryRunner.manager\n                            .createQueryBuilder()\n                            .update(this.queryResultCacheTable)\n                            .set(insertedValues);\n                        if (this.connection.driver instanceof OracleDriver) {\n                            qb.where(\"dbms_lob.compare(\\\"query\\\", :condition) = 0\", { condition: insertedValues.query });\n                        }\n                        else {\n                            qb.where(qb.escape(\"query\") + \" = :condition\", { condition: insertedValues.query });\n                        }\n                        return [4 /*yield*/, qb.execute()];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 4: // otherwise insert\n                    return [4 /*yield*/, queryRunner.manager\n                            .createQueryBuilder()\n                            .insert()\n                            .into(this.queryResultCacheTable)\n                            .values(insertedValues)\n                            .execute()];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears everything stored in the cache.\n     */\n    DbQueryResultCache.prototype.clear = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable)];\n            });\n        });\n    };\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    DbQueryResultCache.prototype.remove = function (identifiers, queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(identifiers.map(function (identifier) {\n                            var qb = _this.getQueryRunner(queryRunner).manager.createQueryBuilder();\n                            return qb.delete()\n                                .from(_this.queryResultCacheTable)\n                                .where(qb.escape(\"identifier\") + \" = :identifier\", { identifier: identifier })\n                                .execute();\n                        }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets a query runner to work with.\n     */\n    DbQueryResultCache.prototype.getQueryRunner = function (queryRunner) {\n        if (queryRunner)\n            return queryRunner;\n        return this.connection.createQueryRunner(\"master\");\n    };\n    return DbQueryResultCache;\n}());\nexport { DbQueryResultCache };\n\n//# sourceMappingURL=DbQueryResultCache.js.map\n","import { RedisQueryResultCache } from \"./RedisQueryResultCache\";\nimport { DbQueryResultCache } from \"./DbQueryResultCache\";\n/**\n * Caches query result into Redis database.\n */\nvar QueryResultCacheFactory = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function QueryResultCacheFactory(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    QueryResultCacheFactory.prototype.create = function () {\n        if (!this.connection.options.cache)\n            throw new Error(\"To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }\");\n        var cache = this.connection.options.cache;\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection);\n        }\n        if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n            return new RedisQueryResultCache(this.connection, cache.type);\n        }\n        else {\n            return new DbQueryResultCache(this.connection);\n        }\n    };\n    return QueryResultCacheFactory;\n}());\nexport { QueryResultCacheFactory };\n\n//# sourceMappingURL=QueryResultCacheFactory.js.map\n","import * as tslib_1 from \"tslib\";\nimport { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Caches query result into Redis database.\n */\nvar RedisQueryResultCache = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RedisQueryResultCache(connection, clientType) {\n        this.connection = connection;\n        this.clientType = clientType;\n        this.redis = this.loadRedis();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a connection with given cache provider.\n     */\n    RedisQueryResultCache.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var cacheOptions;\n            return tslib_1.__generator(this, function (_a) {\n                cacheOptions = this.connection.options.cache;\n                if (this.clientType === \"redis\") {\n                    if (cacheOptions && cacheOptions.options) {\n                        this.client = this.redis.createClient(cacheOptions.options);\n                    }\n                    else {\n                        this.client = this.redis.createClient();\n                    }\n                }\n                else if (this.clientType === \"ioredis\") {\n                    if (cacheOptions && cacheOptions.options) {\n                        this.client = new this.redis(cacheOptions.options);\n                    }\n                    else {\n                        this.client = new this.redis();\n                    }\n                }\n                else if (this.clientType === \"ioredis/cluster\") {\n                    if (cacheOptions && cacheOptions.options && Array.isArray(cacheOptions.options)) {\n                        this.client = new this.redis.Cluster(cacheOptions.options);\n                    }\n                    else if (cacheOptions && cacheOptions.options && cacheOptions.options.startupNodes) {\n                        this.client = new this.redis.Cluster(cacheOptions.options.startupNodes, cacheOptions.options.options);\n                    }\n                    else {\n                        throw new Error(\"options.startupNodes required for \" + this.clientType + \".\");\n                    }\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Disconnects the connection\n     */\n    RedisQueryResultCache.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.client.quit(function (err, result) {\n                            if (err)\n                                return fail(err);\n                            ok();\n                            _this.client = undefined;\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates table for storing cache if it does not exist yet.\n     */\n    RedisQueryResultCache.prototype.synchronize = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Caches given query result.\n     * Returns cache result if found.\n     * Returns undefined if result is not cached.\n     */\n    RedisQueryResultCache.prototype.getFromCache = function (options, queryRunner) {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            if (options.identifier) {\n                _this.client.get(options.identifier, function (err, result) {\n                    if (err)\n                        return fail(err);\n                    ok(JSON.parse(result));\n                });\n            }\n            else if (options.query) {\n                _this.client.get(options.query, function (err, result) {\n                    if (err)\n                        return fail(err);\n                    ok(JSON.parse(result));\n                });\n            }\n            else {\n                ok(undefined);\n            }\n        });\n    };\n    /**\n     * Checks if cache is expired or not.\n     */\n    RedisQueryResultCache.prototype.isExpired = function (savedCache) {\n        return (savedCache.time + savedCache.duration) < new Date().getTime();\n    };\n    /**\n     * Stores given query result in the cache.\n     */\n    RedisQueryResultCache.prototype.storeInCache = function (options, savedCache, queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        if (options.identifier) {\n                            _this.client.set(options.identifier, JSON.stringify(options), \"PX\", options.duration, function (err, result) {\n                                if (err)\n                                    return fail(err);\n                                ok();\n                            });\n                        }\n                        else if (options.query) {\n                            _this.client.set(options.query, JSON.stringify(options), \"PX\", options.duration, function (err, result) {\n                                if (err)\n                                    return fail(err);\n                                ok();\n                            });\n                        }\n                    })];\n            });\n        });\n    };\n    /**\n     * Clears everything stored in the cache.\n     */\n    RedisQueryResultCache.prototype.clear = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.client.flushdb(function (err, result) {\n                            if (err)\n                                return fail(err);\n                            ok();\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Removes all cached results by given identifiers from cache.\n     */\n    RedisQueryResultCache.prototype.remove = function (identifiers, queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(identifiers.map(function (identifier) {\n                            return _this.deleteKey(identifier);\n                        }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes a single key from redis database.\n     */\n    RedisQueryResultCache.prototype.deleteKey = function (key) {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            _this.client.del(key, function (err, result) {\n                if (err)\n                    return fail(err);\n                ok();\n            });\n        });\n    };\n    /**\n     * Loads redis dependency.\n     */\n    RedisQueryResultCache.prototype.loadRedis = function () {\n        try {\n            return PlatformTools.load(this.clientType);\n        }\n        catch (e) {\n            throw new Error(\"Cannot use cache because \" + this.clientType + \" is not installed. Please run \\\"npm i \" + this.clientType + \" --save\\\".\");\n        }\n    };\n    return RedisQueryResultCache;\n}());\nexport { RedisQueryResultCache };\n\n//# sourceMappingURL=RedisQueryResultCache.js.map\n","import * as tslib_1 from \"tslib\";\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\";\nimport { CannotExecuteNotConnectedError } from \"../error/CannotExecuteNotConnectedError\";\nimport { CannotConnectAlreadyConnectedError } from \"../error/CannotConnectAlreadyConnectedError\";\nimport { EntityMetadataNotFoundError } from \"../error/EntityMetadataNotFoundError\";\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\";\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\";\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\";\nimport { DriverFactory } from \"../driver/DriverFactory\";\nimport { ConnectionMetadataBuilder } from \"./ConnectionMetadataBuilder\";\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\";\nimport { LoggerFactory } from \"../logger/LoggerFactory\";\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\";\nimport { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\";\nimport { RelationLoader } from \"../query-builder/RelationLoader\";\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\";\nimport { EntitySchema } from \"../\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { PromiseUtils } from \"../\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Connection is a single database ORM connection to a specific database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\nvar Connection = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function Connection(options) {\n        /**\n         * Migration instances that are registered for this connection.\n         */\n        this.migrations = [];\n        /**\n         * Entity subscriber instances that are registered for this connection.\n         */\n        this.subscribers = [];\n        /**\n         * All entity metadatas that are registered for this connection.\n         */\n        this.entityMetadatas = [];\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\n        this.driver = new DriverFactory().create(this);\n        this.manager = this.createEntityManager();\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n        this.queryResultCache = options.cache ? new QueryResultCacheFactory(this).create() : undefined;\n        this.relationLoader = new RelationLoader(this);\n        this.relationIdLoader = new RelationIdLoader(this);\n        this.isConnected = false;\n    }\n    Object.defineProperty(Connection.prototype, \"mongoManager\", {\n        // -------------------------------------------------------------------------\n        // Public Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n         * with any entity in this connection.\n         *\n         * Available only in mongodb connections.\n         */\n        get: function () {\n            if (!(this.manager instanceof MongoEntityManager))\n                throw new Error(\"MongoEntityManager is only available for MongoDB databases.\");\n            return this.manager;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Connection.prototype, \"sqljsManager\", {\n        /**\n         * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n         *\n         * Available only in connection with the sqljs driver.\n         */\n        get: function () {\n            if (!(this.manager instanceof SqljsEntityManager))\n                throw new Error(\"SqljsEntityManager is only available for Sqljs databases.\");\n            return this.manager;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    Connection.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var error_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isConnected)\n                            throw new CannotConnectAlreadyConnectedError(this.name);\n                        // connect to the database via its driver\n                        return [4 /*yield*/, this.driver.connect()];\n                    case 1:\n                        // connect to the database via its driver\n                        _a.sent();\n                        if (!this.queryResultCache) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.queryResultCache.connect()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        // set connected status for the current connection\n                        ObjectUtils.assign(this, { isConnected: true });\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 12, , 14]);\n                        // build all metadatas registered in the current connection\n                        this.buildMetadatas();\n                        return [4 /*yield*/, this.driver.afterConnect()];\n                    case 5:\n                        _a.sent();\n                        if (!this.options.dropSchema) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.dropDatabase()];\n                    case 6:\n                        _a.sent();\n                        _a.label = 7;\n                    case 7:\n                        if (!this.options.synchronize) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.synchronize()];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        if (!this.options.migrationsRun) return [3 /*break*/, 11];\n                        return [4 /*yield*/, this.runMigrations({ transaction: this.options.migrationsTransactionMode })];\n                    case 10:\n                        _a.sent();\n                        _a.label = 11;\n                    case 11: return [3 /*break*/, 14];\n                    case 12:\n                        error_1 = _a.sent();\n                        // if for some reason build metadata fail (for example validation error during entity metadata check)\n                        // connection needs to be closed\n                        return [4 /*yield*/, this.close()];\n                    case 13:\n                        // if for some reason build metadata fail (for example validation error during entity metadata check)\n                        // connection needs to be closed\n                        _a.sent();\n                        throw error_1;\n                    case 14: return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    Connection.prototype.close = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isConnected)\n                            throw new CannotExecuteNotConnectedError(this.name);\n                        return [4 /*yield*/, this.driver.disconnect()];\n                    case 1:\n                        _a.sent();\n                        if (!this.queryResultCache) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.queryResultCache.disconnect()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        ObjectUtils.assign(this, { isConnected: false });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    Connection.prototype.synchronize = function (dropBeforeSync) {\n        if (dropBeforeSync === void 0) { dropBeforeSync = false; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var schemaBuilder;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isConnected)\n                            throw new CannotExecuteNotConnectedError(this.name);\n                        if (!dropBeforeSync) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.dropDatabase()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        schemaBuilder = this.driver.createSchemaBuilder();\n                        return [4 /*yield*/, schemaBuilder.build()];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    Connection.prototype.dropDatabase = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, databases_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 6, 8]);\n                        if (!(this.driver instanceof SqlServerDriver || this.driver instanceof MysqlDriver || this.driver instanceof AuroraDataApiDriver)) return [3 /*break*/, 3];\n                        databases_1 = this.driver.database ? [this.driver.database] : [];\n                        this.entityMetadatas.forEach(function (metadata) {\n                            if (metadata.database && databases_1.indexOf(metadata.database) === -1)\n                                databases_1.push(metadata.database);\n                        });\n                        return [4 /*yield*/, PromiseUtils.runInSequence(databases_1, function (database) { return queryRunner.clearDatabase(database); })];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, queryRunner.clearDatabase()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [3 /*break*/, 8];\n                    case 6: return [4 /*yield*/, queryRunner.release()];\n                    case 7:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    Connection.prototype.runMigrations = function (options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var migrationExecutor, successMigrations;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isConnected)\n                            throw new CannotExecuteNotConnectedError(this.name);\n                        migrationExecutor = new MigrationExecutor(this);\n                        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n                        return [4 /*yield*/, migrationExecutor.executePendingMigrations()];\n                    case 1:\n                        successMigrations = _a.sent();\n                        return [2 /*return*/, successMigrations];\n                }\n            });\n        });\n    };\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    Connection.prototype.undoLastMigration = function (options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var migrationExecutor;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isConnected)\n                            throw new CannotExecuteNotConnectedError(this.name);\n                        migrationExecutor = new MigrationExecutor(this);\n                        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n                        return [4 /*yield*/, migrationExecutor.undoLastMigration()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    Connection.prototype.showMigrations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var migrationExecutor;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isConnected) {\n                            throw new CannotExecuteNotConnectedError(this.name);\n                        }\n                        migrationExecutor = new MigrationExecutor(this);\n                        return [4 /*yield*/, migrationExecutor.showMigrations()];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    Connection.prototype.hasMetadata = function (target) {\n        return !!this.findMetadata(target);\n    };\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    Connection.prototype.getMetadata = function (target) {\n        var metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFoundError(target);\n        return metadata;\n    };\n    /**\n     * Gets repository for the given entity.\n     */\n    Connection.prototype.getRepository = function (target) {\n        return this.manager.getRepository(target);\n    };\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    Connection.prototype.getTreeRepository = function (target) {\n        return this.manager.getTreeRepository(target);\n    };\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    Connection.prototype.getMongoRepository = function (target) {\n        if (!(this.driver instanceof MongoDriver))\n            throw new Error(\"You can use getMongoRepository only for MongoDB connections.\");\n        return this.manager.getRepository(target);\n    };\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    Connection.prototype.getCustomRepository = function (customRepository) {\n        return this.manager.getCustomRepository(customRepository);\n    };\n    Connection.prototype.transaction = function (isolationOrRunInTransaction, runInTransactionParam) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.manager.transaction(isolationOrRunInTransaction, runInTransactionParam)];\n            });\n        });\n    };\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    Connection.prototype.query = function (query, parameters, queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var usedQueryRunner;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this instanceof MongoEntityManager)\n                            throw new Error(\"Queries aren't supported by MongoDB.\");\n                        if (queryRunner && queryRunner.isReleased)\n                            throw new QueryRunnerProviderAlreadyReleasedError();\n                        usedQueryRunner = queryRunner || this.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 6]);\n                        return [4 /*yield*/, usedQueryRunner.query(query, parameters)];\n                    case 2: return [2 /*return*/, _a.sent()]; // await is needed here because we are using finally\n                    case 3:\n                        if (!!queryRunner) return [3 /*break*/, 5];\n                        return [4 /*yield*/, usedQueryRunner.release()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [7 /*endfinally*/];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {\n        if (this instanceof MongoEntityManager)\n            throw new Error(\"Query Builder is not supported by MongoDB.\");\n        if (alias) {\n            var metadata = this.getMetadata(entityOrRunner);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n        }\n        else {\n            return new SelectQueryBuilder(this, entityOrRunner);\n        }\n    };\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    Connection.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        var queryRunner = this.driver.createQueryRunner(mode);\n        var manager = this.createEntityManager(queryRunner);\n        Object.assign(queryRunner, { manager: manager });\n        return queryRunner;\n    };\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    Connection.prototype.getManyToManyMetadata = function (entityTarget, relationPropertyPath) {\n        var relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\n        if (!relationMetadata)\n            throw new Error(\"Relation \\\"\" + relationPropertyPath + \"\\\" was not found in \" + entityTarget + \" entity.\");\n        if (!relationMetadata.isManyToMany)\n            throw new Error(\"Relation \\\"\" + entityTarget + \"#\" + relationPropertyPath + \"\\\" does not have a many-to-many relationship.\" +\n                \"You can use this method only on many-to-many relations.\");\n        return relationMetadata.junctionEntityMetadata;\n    };\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    Connection.prototype.createEntityManager = function (queryRunner) {\n        return new EntityManagerFactory().create(this, queryRunner);\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    Connection.prototype.findMetadata = function (target) {\n        return this.entityMetadatas.find(function (metadata) {\n            if (metadata.target === target)\n                return true;\n            if (target instanceof EntitySchema) {\n                return metadata.name === target.options.name;\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    return metadata.tablePath === target;\n                }\n                else {\n                    return metadata.name === target || metadata.tableName === target;\n                }\n            }\n            return false;\n        });\n    };\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    Connection.prototype.buildMetadatas = function () {\n        var connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        var entityMetadataValidator = new EntityMetadataValidator();\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        var subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n        ObjectUtils.assign(this, { subscribers: subscribers });\n        // build entity metadatas\n        var entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);\n        ObjectUtils.assign(this, { entityMetadatas: entityMetadatas });\n        // create migration instances\n        var migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n        ObjectUtils.assign(this, { migrations: migrations });\n        this.driver.database = this.getDatabaseName();\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas.filter(function (metadata) { return metadata.tableType !== \"view\"; }), this.driver);\n    };\n    // This database name property is nested for replication configs.\n    Connection.prototype.getDatabaseName = function () {\n        var options = this.options;\n        switch (options.type) {\n            case \"mysql\":\n            case \"mariadb\":\n            case \"postgres\":\n            case \"cockroachdb\":\n            case \"mssql\":\n            case \"oracle\":\n                return DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options).database;\n            default:\n                return DriverUtils.buildDriverOptions(options).database;\n        }\n    };\n    return Connection;\n}());\nexport { Connection };\n\n//# sourceMappingURL=Connection.js.map\n","import { Connection } from \"./Connection\";\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\";\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\";\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nvar ConnectionManager = /** @class */ (function () {\n    function ConnectionManager() {\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * List of connections registered in this connection manager.\n         */\n        this.connections = [];\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    ConnectionManager.prototype.has = function (name) {\n        return !!this.connections.find(function (connection) { return connection.name === name; });\n    };\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    ConnectionManager.prototype.get = function (name) {\n        if (name === void 0) { name = \"default\"; }\n        var connection = this.connections.find(function (connection) { return connection.name === name; });\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n        return connection;\n    };\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    ConnectionManager.prototype.create = function (options) {\n        // check if such connection is already registered\n        var existConnection = this.connections.find(function (connection) { return connection.name === (options.name || \"default\"); });\n        if (existConnection) {\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n            // if its registered but closed then simply remove it from the manager\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n        // create a new connection\n        var connection = new Connection(options);\n        this.connections.push(connection);\n        return connection;\n    };\n    return ConnectionManager;\n}());\nexport { ConnectionManager };\n\n//# sourceMappingURL=ConnectionManager.js.map\n","import * as tslib_1 from \"tslib\";\nimport { importClassesFromDirectories } from \"../util/DirectoryExportedClassesLoader\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { getFromContainer } from \"../container\";\nimport { getMetadataArgsStorage } from \"../index\";\nimport { EntityMetadataBuilder } from \"../metadata-builder/EntityMetadataBuilder\";\nimport { EntitySchemaTransformer } from \"../entity-schema/EntitySchemaTransformer\";\nimport { EntitySchema } from \"../entity-schema/EntitySchema\";\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nvar ConnectionMetadataBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ConnectionMetadataBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    ConnectionMetadataBuilder.prototype.buildMigrations = function (migrations) {\n        var _a = tslib_1.__read(OrmUtils.splitClassesAndStrings(migrations), 2), migrationClasses = _a[0], migrationDirectories = _a[1];\n        var allMigrationClasses = tslib_1.__spread(migrationClasses, importClassesFromDirectories(this.connection.logger, migrationDirectories));\n        return allMigrationClasses.map(function (migrationClass) { return getFromContainer(migrationClass); });\n    };\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    ConnectionMetadataBuilder.prototype.buildSubscribers = function (subscribers) {\n        var _a = tslib_1.__read(OrmUtils.splitClassesAndStrings(subscribers || []), 2), subscriberClasses = _a[0], subscriberDirectories = _a[1];\n        var allSubscriberClasses = tslib_1.__spread(subscriberClasses, importClassesFromDirectories(this.connection.logger, subscriberDirectories));\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map(function (metadata) { return getFromContainer(metadata.target); });\n    };\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    ConnectionMetadataBuilder.prototype.buildEntityMetadatas = function (entities) {\n        // todo: instead we need to merge multiple metadata args storages\n        var _a = tslib_1.__read(OrmUtils.splitClassesAndStrings(entities || []), 2), entityClassesOrSchemas = _a[0], entityDirectories = _a[1];\n        var entityClasses = entityClassesOrSchemas.filter(function (entityClass) { return (entityClass instanceof EntitySchema) === false; });\n        var entitySchemas = entityClassesOrSchemas.filter(function (entityClass) { return entityClass instanceof EntitySchema; });\n        var allEntityClasses = tslib_1.__spread(entityClasses, importClassesFromDirectories(this.connection.logger, entityDirectories));\n        allEntityClasses.forEach(function (entityClass) {\n            if (entityClass instanceof EntitySchema) {\n                entitySchemas.push(entityClass);\n                allEntityClasses.slice(allEntityClasses.indexOf(entityClass), 1);\n            }\n        });\n        var decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n        var metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n        var schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n        return tslib_1.__spread(decoratorEntityMetadatas, schemaEntityMetadatas);\n    };\n    return ConnectionMetadataBuilder;\n}());\nexport { ConnectionMetadataBuilder };\n\n//# sourceMappingURL=ConnectionMetadataBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { PlatformTools } from \"../platform/PlatformTools\";\nimport { ConnectionOptionsEnvReader } from \"./options-reader/ConnectionOptionsEnvReader\";\nimport { ConnectionOptionsYmlReader } from \"./options-reader/ConnectionOptionsYmlReader\";\nimport { ConnectionOptionsXmlReader } from \"./options-reader/ConnectionOptionsXmlReader\";\n/**\n * Reads connection options from the ormconfig.\n * Can read from multiple file extensions including env, json, js, xml and yml.\n */\nvar ConnectionOptionsReader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ConnectionOptionsReader(options) {\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Returns all connection options read from the ormconfig.\n     */\n    ConnectionOptionsReader.prototype.all = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var options;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.load()];\n                    case 1:\n                        options = _a.sent();\n                        if (!options)\n                            throw new Error(\"No connection options were found in any orm configuration files.\");\n                        return [2 /*return*/, options];\n                }\n            });\n        });\n    };\n    /**\n     * Gets a connection with a given name read from ormconfig.\n     * If connection with such name would not be found then it throw error.\n     */\n    ConnectionOptionsReader.prototype.get = function (name) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var allOptions, targetOptions;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.all()];\n                    case 1:\n                        allOptions = _a.sent();\n                        targetOptions = allOptions.find(function (options) { return options.name === name || (name === \"default\" && !options.name); });\n                        if (!targetOptions)\n                            throw new Error(\"Cannot find connection \" + name + \" because its not defined in any orm configuration files.\");\n                        return [2 /*return*/, targetOptions];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if there is a TypeORM configuration file.\n     */\n    ConnectionOptionsReader.prototype.has = function (name) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var allOptions, targetOptions;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.load()];\n                    case 1:\n                        allOptions = _a.sent();\n                        if (!allOptions)\n                            return [2 /*return*/, false];\n                        targetOptions = allOptions.find(function (options) { return options.name === name || (name === \"default\" && !options.name); });\n                        return [2 /*return*/, !!targetOptions];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads all connection options from a configuration file.\n     *\n     * todo: get in count NODE_ENV somehow\n     */\n    ConnectionOptionsReader.prototype.load = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var connectionOptions, fileFormats, possibleExtension, fileExtension, foundFileFormat, dotenv, dotenv, configFile;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        connectionOptions = undefined;\n                        fileFormats = [\"env\", \"js\", \"ts\", \"json\", \"yml\", \"yaml\", \"xml\"];\n                        possibleExtension = this.baseFilePath.substr(this.baseFilePath.lastIndexOf(\".\"));\n                        fileExtension = fileFormats.find(function (extension) { return \".\" + extension === possibleExtension; });\n                        foundFileFormat = fileExtension || fileFormats.find(function (format) {\n                            return PlatformTools.fileExist(_this.baseFilePath + \".\" + format);\n                        });\n                        // if .env file found then load all its variables into process.env using dotenv package\n                        if (foundFileFormat === \"env\") {\n                            dotenv = PlatformTools.load(\"dotenv\");\n                            dotenv.config({ path: this.baseFilePath });\n                        }\n                        else if (PlatformTools.fileExist(\".env\")) {\n                            dotenv = PlatformTools.load(\"dotenv\");\n                            dotenv.config({ path: \".env\" });\n                        }\n                        configFile = fileExtension ? this.baseFilePath : this.baseFilePath + \".\" + foundFileFormat;\n                        if (!(PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") || PlatformTools.getEnvVariable(\"TYPEORM_URL\"))) return [3 /*break*/, 1];\n                        connectionOptions = new ConnectionOptionsEnvReader().read();\n                        return [3 /*break*/, 10];\n                    case 1:\n                        if (!(foundFileFormat === \"js\")) return [3 /*break*/, 3];\n                        return [4 /*yield*/, PlatformTools.load(configFile)];\n                    case 2:\n                        connectionOptions = _a.sent();\n                        return [3 /*break*/, 10];\n                    case 3:\n                        if (!(foundFileFormat === \"ts\")) return [3 /*break*/, 5];\n                        return [4 /*yield*/, PlatformTools.load(configFile)];\n                    case 4:\n                        connectionOptions = _a.sent();\n                        return [3 /*break*/, 10];\n                    case 5:\n                        if (!(foundFileFormat === \"json\")) return [3 /*break*/, 6];\n                        connectionOptions = PlatformTools.load(configFile);\n                        return [3 /*break*/, 10];\n                    case 6:\n                        if (!(foundFileFormat === \"yml\")) return [3 /*break*/, 7];\n                        connectionOptions = new ConnectionOptionsYmlReader().read(configFile);\n                        return [3 /*break*/, 10];\n                    case 7:\n                        if (!(foundFileFormat === \"yaml\")) return [3 /*break*/, 8];\n                        connectionOptions = new ConnectionOptionsYmlReader().read(configFile);\n                        return [3 /*break*/, 10];\n                    case 8:\n                        if (!(foundFileFormat === \"xml\")) return [3 /*break*/, 10];\n                        return [4 /*yield*/, new ConnectionOptionsXmlReader().read(configFile)];\n                    case 9:\n                        connectionOptions = _a.sent();\n                        _a.label = 10;\n                    case 10:\n                        // normalize and return connection options\n                        if (connectionOptions) {\n                            return [2 /*return*/, this.normalizeConnectionOptions(connectionOptions)];\n                        }\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    /**\n     * Normalize connection options.\n     */\n    ConnectionOptionsReader.prototype.normalizeConnectionOptions = function (connectionOptions) {\n        var _this = this;\n        if (!(Array.isArray(connectionOptions)))\n            connectionOptions = [connectionOptions];\n        connectionOptions.forEach(function (options) {\n            if (options.entities) {\n                var entities = options.entities.map(function (entity) {\n                    if (typeof entity === \"string\" && entity.substr(0, 1) !== \"/\")\n                        return _this.baseDirectory + \"/\" + entity;\n                    return entity;\n                });\n                Object.assign(connectionOptions, { entities: entities });\n            }\n            if (options.subscribers) {\n                var subscribers = options.subscribers.map(function (subscriber) {\n                    if (typeof subscriber === \"string\" && subscriber.substr(0, 1) !== \"/\")\n                        return _this.baseDirectory + \"/\" + subscriber;\n                    return subscriber;\n                });\n                Object.assign(connectionOptions, { subscribers: subscribers });\n            }\n            if (options.migrations) {\n                var migrations = options.migrations.map(function (migration) {\n                    if (typeof migration === \"string\" && migration.substr(0, 1) !== \"/\")\n                        return _this.baseDirectory + \"/\" + migration;\n                    return migration;\n                });\n                Object.assign(connectionOptions, { migrations: migrations });\n            }\n            // make database path file in sqlite relative to package.json\n            if (options.type === \"sqlite\") {\n                if (typeof options.database === \"string\" &&\n                    options.database.substr(0, 1) !== \"/\" && // unix absolute\n                    options.database.substr(1, 2) !== \":\\\\\" && // windows absolute\n                    options.database !== \":memory:\") {\n                    Object.assign(options, {\n                        database: _this.baseDirectory + \"/\" + options.database\n                    });\n                }\n            }\n        });\n        return connectionOptions;\n    };\n    Object.defineProperty(ConnectionOptionsReader.prototype, \"baseFilePath\", {\n        /**\n         * Gets directory where configuration file should be located and configuration file name.\n         */\n        get: function () {\n            return this.baseDirectory + \"/\" + this.baseConfigName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectionOptionsReader.prototype, \"baseDirectory\", {\n        /**\n         * Gets directory where configuration file should be located.\n         */\n        get: function () {\n            if (this.options && this.options.root)\n                return this.options.root;\n            return PlatformTools.load(\"app-root-path\").path;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectionOptionsReader.prototype, \"baseConfigName\", {\n        /**\n         * Gets configuration file name.\n         */\n        get: function () {\n            if (this.options && this.options.configName)\n                return this.options.configName;\n            return \"ormconfig\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ConnectionOptionsReader;\n}());\nexport { ConnectionOptionsReader };\n\n//# sourceMappingURL=ConnectionOptionsReader.js.map\n","import { PlatformTools } from \"../../platform/PlatformTools\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Reads connection options from environment variables.\n * Environment variables can have only a single connection.\n * Its strongly required to define TYPEORM_CONNECTION env variable.\n */\nvar ConnectionOptionsEnvReader = /** @class */ (function () {\n    function ConnectionOptionsEnvReader() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Reads connection options from environment variables.\n     */\n    ConnectionOptionsEnvReader.prototype.read = function () {\n        return {\n            type: PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") || (PlatformTools.getEnvVariable(\"TYPEORM_URL\") ? PlatformTools.getEnvVariable(\"TYPEORM_URL\").split(\"://\")[0] : undefined),\n            url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\n            host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\n            port: PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\n            username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\n            password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\n            database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\n            sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\n            schema: PlatformTools.getEnvVariable(\"TYPEORM_SCHEMA\"),\n            extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")) : undefined,\n            synchronize: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_SYNCHRONIZE\")),\n            dropSchema: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_DROP_SCHEMA\")),\n            migrationsRun: OrmUtils.toBoolean(PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_RUN\")),\n            entities: this.stringToArray(PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\")),\n            migrations: this.stringToArray(PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\")),\n            migrationsTableName: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_TABLE_NAME\"),\n            subscribers: this.stringToArray(PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\")),\n            logging: this.transformLogging(PlatformTools.getEnvVariable(\"TYPEORM_LOGGING\")),\n            logger: PlatformTools.getEnvVariable(\"TYPEORM_LOGGER\"),\n            entityPrefix: PlatformTools.getEnvVariable(\"TYPEORM_ENTITY_PREFIX\"),\n            maxQueryExecutionTime: PlatformTools.getEnvVariable(\"TYPEORM_MAX_QUERY_EXECUTION_TIME\"),\n            debug: PlatformTools.getEnvVariable(\"TYPEORM_DEBUG\"),\n            cli: {\n                entitiesDir: PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES_DIR\"),\n                migrationsDir: PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_DIR\"),\n                subscribersDir: PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS_DIR\"),\n            },\n            cache: this.transformCaching(),\n            uuidExtension: PlatformTools.getEnvVariable(\"TYPEORM_UUID_EXTENSION\")\n        };\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Transforms logging string into real logging value connection requires.\n     */\n    ConnectionOptionsEnvReader.prototype.transformLogging = function (logging) {\n        if (logging === \"true\" || logging === \"TRUE\" || logging === \"1\")\n            return true;\n        if (logging === \"all\")\n            return \"all\";\n        return this.stringToArray(logging);\n    };\n    /**\n     * Transforms caching option into real caching value option requires.\n     */\n    ConnectionOptionsEnvReader.prototype.transformCaching = function () {\n        var caching = PlatformTools.getEnvVariable(\"TYPEORM_CACHE\");\n        if (caching === \"true\" || caching === \"TRUE\" || caching === \"1\")\n            return true;\n        if (caching === \"false\" || caching === \"FALSE\" || caching === \"0\")\n            return false;\n        if (caching === \"redis\" || caching === \"database\")\n            return {\n                type: caching,\n                options: PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\") ? JSON.parse(PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\")) : undefined,\n                alwaysEnabled: PlatformTools.getEnvVariable(\"TYPEORM_CACHE_ALWAYS_ENABLED\"),\n                duration: parseInt(PlatformTools.getEnvVariable(\"TYPEORM_CACHE_DURATION\"))\n            };\n        return undefined;\n    };\n    /**\n     * Converts a string which contains multiple elements split by comma into a string array of strings.\n     */\n    ConnectionOptionsEnvReader.prototype.stringToArray = function (variable) {\n        if (!variable)\n            return [];\n        return variable.split(\",\").map(function (str) { return str.trim(); });\n    };\n    return ConnectionOptionsEnvReader;\n}());\nexport { ConnectionOptionsEnvReader };\n\n//# sourceMappingURL=ConnectionOptionsEnvReader.js.map\n","import * as tslib_1 from \"tslib\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\n/**\n * Reads connection options defined in the xml file.\n */\nvar ConnectionOptionsXmlReader = /** @class */ (function () {\n    function ConnectionOptionsXmlReader() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Reads connection options from given xml file.\n     */\n    ConnectionOptionsXmlReader.prototype.read = function (path) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var xml;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.readXml(path)];\n                    case 1:\n                        xml = _a.sent();\n                        return [2 /*return*/, xml.connection.map(function (connection) {\n                                return {\n                                    name: connection.$.name,\n                                    type: connection.$.type,\n                                    url: connection.url ? connection.url[0] : undefined,\n                                    host: connection.host ? connection.host[0] : undefined,\n                                    port: connection.port && connection.port[0] ? parseInt(connection.port[0]) : undefined,\n                                    username: connection.username ? connection.username[0] : undefined,\n                                    password: connection.password ? connection.password[0] : undefined,\n                                    database: connection.database ? connection.database[0] : undefined,\n                                    sid: connection.sid ? connection.sid[0] : undefined,\n                                    extra: connection.extra ? connection.extra[0] : undefined,\n                                    synchronize: connection.synchronize ? connection.synchronize[0] : undefined,\n                                    entities: connection.entities ? connection.entities[0].entity : [],\n                                    subscribers: connection.subscribers ? connection.subscribers[0].entity : [],\n                                    logging: connection.logging[0] ? connection.logging[0].split(\",\") : undefined,\n                                };\n                            })];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Reads xml file contents and returns them in a promise.\n     */\n    ConnectionOptionsXmlReader.prototype.readXml = function (path) {\n        var xmlParser = PlatformTools.load(\"xml2js\").parseString;\n        var xmlOptions = { trim: true, explicitRoot: false };\n        return new Promise(function (ok, fail) {\n            xmlParser(PlatformTools.readFileSync(path), xmlOptions, function (err, result) { return err ? fail(err) : ok(result); });\n        });\n    };\n    return ConnectionOptionsXmlReader;\n}());\nexport { ConnectionOptionsXmlReader };\n\n//# sourceMappingURL=ConnectionOptionsXmlReader.js.map\n","import { PlatformTools } from \"../../platform/PlatformTools\";\n/**\n * Reads connection options defined in the yml file.\n */\nvar ConnectionOptionsYmlReader = /** @class */ (function () {\n    function ConnectionOptionsYmlReader() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Reads connection options from given yml file.\n     */\n    ConnectionOptionsYmlReader.prototype.read = function (path) {\n        var ymlParser = PlatformTools.load(\"js-yaml\");\n        var config = ymlParser.safeLoad(PlatformTools.readFileSync(path));\n        return Object.keys(config).map(function (connectionName) {\n            return Object.assign({ name: connectionName }, config[connectionName]);\n        });\n    };\n    return ConnectionOptionsYmlReader;\n}());\nexport { ConnectionOptionsYmlReader };\n\n//# sourceMappingURL=ConnectionOptionsYmlReader.js.map\n","/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nvar defaultContainer = new (/** @class */ (function () {\n    function class_1() {\n        this.instances = [];\n    }\n    class_1.prototype.get = function (someClass) {\n        var instance = this.instances.find(function (i) { return i.type === someClass; });\n        if (!instance) {\n            instance = { type: someClass, object: new someClass() };\n            this.instances.push(instance);\n        }\n        return instance.object;\n    };\n    return class_1;\n}()))();\nvar userContainer;\nvar userContainerOptions;\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer, options) {\n    userContainer = iocContainer;\n    userContainerOptions = options;\n}\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer(someClass) {\n    if (userContainer) {\n        try {\n            var instance = userContainer.get(someClass);\n            if (instance)\n                return instance;\n            if (!userContainerOptions || !userContainerOptions.fallback)\n                return instance;\n        }\n        catch (error) {\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\n                throw error;\n        }\n    }\n    return defaultContainer.get(someClass);\n}\n\n//# sourceMappingURL=container.js.map\n","import { getMetadataArgsStorage } from \"../\";\n/**\n * Creates a database check.\n * Can be used on entity property or on entity.\n * Can create checks with composite columns when used on entity.\n */\nexport function Check(nameOrExpression, maybeExpression) {\n    var name = maybeExpression ? nameOrExpression : undefined;\n    var expression = maybeExpression ? maybeExpression : nameOrExpression;\n    if (!expression)\n        throw new Error(\"Check expression is required\");\n    return function (clsOrObject, propertyName) {\n        getMetadataArgsStorage().checks.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject,\n            name: name,\n            expression: expression\n        });\n    };\n}\n\n//# sourceMappingURL=Check.js.map\n","import { getMetadataArgsStorage } from \"../\";\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can manage some specific entity or just be generic.\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\n */\nexport function EntityRepository(entity) {\n    return function (target) {\n        getMetadataArgsStorage().entityRepositories.push({\n            target: target,\n            entity: entity,\n        });\n    };\n}\n\n//# sourceMappingURL=EntityRepository.js.map\n","import { getMetadataArgsStorage } from \"../\";\n/**\n * Creates a database exclusion.\n * Can be used on entity.\n * Can create exclusions with composite columns when used on entity.\n */\nexport function Exclusion(nameOrExpression, maybeExpression) {\n    var name = maybeExpression ? nameOrExpression : undefined;\n    var expression = maybeExpression ? maybeExpression : nameOrExpression;\n    if (!expression)\n        throw new Error(\"Exclusion expression is required\");\n    return function (clsOrObject, propertyName) {\n        getMetadataArgsStorage().exclusions.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject,\n            name: name,\n            expression: expression\n        });\n    };\n}\n\n//# sourceMappingURL=Exclusion.js.map\n","import { getMetadataArgsStorage } from \"../\";\n/**\n * Marks a column to generate a value on entity insertion.\n * There are three types of generation strategy - increment, uuid and rowid (cockroachdb only).\n * Increment uses a number which increases by one on each insertion.\n * Uuid generates a special UUID token.\n * Rowid supports only in CockroachDB and uses `unique_rowid()` function\n *\n * Note, some databases do not support non-primary generation columns.\n */\nexport function Generated(strategy) {\n    if (strategy === void 0) { strategy = \"increment\"; }\n    return function (object, propertyName) {\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy\n        });\n    };\n}\n\n//# sourceMappingURL=Generated.js.map\n","import { getMetadataArgsStorage } from \"../\";\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(nameOrFieldsOrOptions, maybeFieldsOrOptions, maybeOptions) {\n    // normalize parameters\n    var name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n    var fields = typeof nameOrFieldsOrOptions === \"string\" ? maybeFieldsOrOptions : nameOrFieldsOrOptions;\n    var options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions : maybeOptions;\n    if (!options)\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions : maybeOptions;\n    return function (clsOrObject, propertyName) {\n        getMetadataArgsStorage().indices.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject,\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            synchronize: options && options.synchronize === false ? false : true,\n            where: options ? options.where : undefined,\n            unique: options && options.unique ? true : false,\n            spatial: options && options.spatial ? true : false,\n            fulltext: options && options.fulltext ? true : false,\n            parser: options ? options.parser : undefined,\n            sparse: options && options.sparse ? true : false,\n            background: options && options.background ? true : false,\n            expireAfterSeconds: options ? options.expireAfterSeconds : undefined\n        });\n    };\n}\n\n//# sourceMappingURL=Index.js.map\n","import { getMetadataArgsStorage } from \"../index\";\n/**\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\n */\nexport function Unique(nameOrFields, maybeFields) {\n    var name = typeof nameOrFields === \"string\" ? nameOrFields : undefined;\n    var fields = typeof nameOrFields === \"string\" ? maybeFields : nameOrFields;\n    return function (clsOrObject, propertyName) {\n        var args = {\n            target: propertyName ? clsOrObject.constructor : clsOrObject,\n            name: name,\n            columns: propertyName ? [propertyName] : fields\n        };\n        getMetadataArgsStorage().uniques.push(args);\n    };\n}\n\n//# sourceMappingURL=Unique.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { ColumnTypeUndefinedError } from \"../../error/ColumnTypeUndefinedError\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions, options) {\n    return function (object, propertyName) {\n        // normalize parameters\n        var type;\n        if (typeof typeOrOptions === \"string\" || typeOrOptions instanceof Function) {\n            type = typeOrOptions;\n        }\n        else if (typeOrOptions) {\n            options = typeOrOptions;\n            type = typeOrOptions.type;\n        }\n        if (!options)\n            options = {};\n        // if type is not given explicitly then try to guess it\n        var reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n        if (!type && reflectMetadataType) // if type is not given explicitly then try to guess it\n            type = reflectMetadataType;\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options.type = type;\n        // specify HSTORE type if column is HSTORE\n        if (options.type === \"hstore\" && !options.hstoreType)\n            options.hstoreType = reflectMetadataType === Object ? \"object\" : \"string\";\n        if (typeOrOptions instanceof Function) { // register an embedded\n            getMetadataArgsStorage().embeddeds.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                isArray: reflectMetadataType === Array || options.array === true,\n                prefix: options.prefix !== undefined ? options.prefix : undefined,\n                type: typeOrOptions\n            });\n        }\n        else { // register a regular column\n            // if we still don't have a type then we need to give error to user that type is required\n            if (!options.type)\n                throw new ColumnTypeUndefinedError(object, propertyName);\n            // create unique\n            if (options.unique === true)\n                getMetadataArgsStorage().uniques.push({ target: object.constructor, columns: [propertyName] });\n            getMetadataArgsStorage().columns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                mode: \"regular\",\n                options: options\n            });\n            if (options.generated) {\n                getMetadataArgsStorage().generations.push({\n                    target: object.constructor,\n                    propertyName: propertyName,\n                    strategy: typeof options.generated === \"string\" ? options.generated : \"increment\"\n                });\n            }\n        }\n    };\n}\n\n//# sourceMappingURL=Column.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * This column will store a creation date of the inserted object.\n * Creation date is generated and inserted only once,\n * at the first time when you create an object, the value is inserted into the table, and is never touched again.\n */\nexport function CreateDateColumn(options) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"createDate\",\n            options: options || {}\n        });\n    };\n}\n\n//# sourceMappingURL=CreateDateColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * This column will store a delete date of the soft-deleted object.\n * This date is being updated each time you soft-delete the object.\n */\nexport function DeleteDateColumn(options) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"deleteDate\",\n            options: options || {}\n        });\n    };\n}\n\n//# sourceMappingURL=DeleteDateColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Special type of column that is available only for MongoDB database.\n * Marks your entity's column to be an object id.\n */\nexport function ObjectIdColumn(options) {\n    return function (object, propertyName) {\n        // if column options are not given then create a new empty options\n        if (!options)\n            options = {};\n        options.primary = true;\n        if (!options.name)\n            options.name = \"_id\";\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"objectId\",\n            options: options\n        });\n    };\n}\n\n//# sourceMappingURL=ObjectIdColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { ColumnTypeUndefinedError } from \"../../error/ColumnTypeUndefinedError\";\nimport { PrimaryColumnCannotBeNullableError } from \"../../error/PrimaryColumnCannotBeNullableError\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(typeOrOptions, options) {\n    return function (object, propertyName) {\n        // normalize parameters\n        var type;\n        if (typeof typeOrOptions === \"string\") {\n            type = typeOrOptions;\n        }\n        else {\n            options = Object.assign({}, typeOrOptions);\n        }\n        if (!options)\n            options = {};\n        // if type is not given explicitly then try to guess it\n        var reflectMetadataType = Reflect && Reflect.getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n        if (!type && reflectMetadataType)\n            type = reflectMetadataType;\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options.type = type;\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName);\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n        // explicitly set a primary to column options\n        options.primary = true;\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options\n        });\n        if (options.generated) {\n            getMetadataArgsStorage().generations.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                strategy: typeof options.generated === \"string\" ? options.generated : \"increment\"\n            });\n        }\n    };\n}\n\n//# sourceMappingURL=PrimaryColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {\n    // normalize parameters\n    var options = {};\n    var strategy;\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions;\n        if (strategyOrOptions instanceof Object) {\n            strategy = \"increment\";\n            Object.assign(options, strategyOrOptions);\n        }\n    }\n    else {\n        strategy = \"increment\";\n    }\n    if (maybeOptions instanceof Object)\n        Object.assign(options, maybeOptions);\n    return function (object, propertyName) {\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\") {\n                options.type = Number;\n            }\n            else if (strategy === \"uuid\") {\n                options.type = \"uuid\";\n            }\n            else if (strategy === \"rowid\") {\n                options.type = \"int\";\n            }\n        }\n        // explicitly set a primary and generated to column options\n        options.primary = true;\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options\n        });\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy\n        });\n    };\n}\n\n//# sourceMappingURL=PrimaryGeneratedColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * This column will store an update date of the updated object.\n * This date is being updated each time you persist the object.\n */\nexport function UpdateDateColumn(options) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"updateDate\",\n            options: options ? options : {}\n        });\n    };\n}\n\n//# sourceMappingURL=UpdateDateColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * This column will store a number - version of the entity.\n * Every time your entity will be persisted, this number will be increased by one -\n * so you can organize visioning and update strategies of your entity.\n */\nexport function VersionColumn(options) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"version\",\n            options: options || {}\n        });\n    };\n}\n\n//# sourceMappingURL=VersionColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * ViewColumn decorator is used to mark a specific class property as a view column.\n */\nexport function ViewColumn(options) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options || {}\n        });\n    };\n}\n\n//# sourceMappingURL=ViewColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(nameOrOptions, maybeOptions) {\n    var options = (typeof nameOrOptions === \"object\" ? nameOrOptions : maybeOptions) || {};\n    var name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            expression: options.expression,\n            type: \"view\",\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize === false ? false : true,\n            materialized: !!options.materialized\n        });\n    };\n}\n\n//# sourceMappingURL=ViewEntity.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Special type of the table used in the single-table inherited tables.\n */\nexport function ChildEntity(discriminatorValue) {\n    return function (target) {\n        // register a table metadata\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            type: \"entity-child\",\n        });\n        // register discriminator value if it was provided\n        if (discriminatorValue) {\n            getMetadataArgsStorage().discriminatorValues.push({\n                target: target,\n                value: discriminatorValue\n            });\n        }\n    };\n}\n\n//# sourceMappingURL=ChildEntity.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(nameOrOptions, maybeOptions) {\n    var options = (typeof nameOrOptions === \"object\" ? nameOrOptions : maybeOptions) || {};\n    var name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize,\n            withoutRowid: options.withoutRowid\n        });\n    };\n}\n\n//# sourceMappingURL=Entity.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Sets for entity to use table inheritance pattern.\n */\nexport function TableInheritance(options) {\n    return function (target) {\n        getMetadataArgsStorage().inheritances.push({\n            target: target,\n            pattern: options && options.pattern ? options.pattern : \"STI\",\n            column: options && options.column ? typeof options.column === \"string\" ? { name: options.column } : options.column : undefined\n        });\n    };\n}\n\n//# sourceMappingURL=TableInheritance.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\";\n/**\n * Calls a method on which this decorator is applied after this entity insertion.\n */\nexport function AfterInsert() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_INSERT\n        });\n    };\n}\n\n//# sourceMappingURL=AfterInsert.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\";\n/**\n * Calls a method on which this decorator is applied after entity is loaded.\n */\nexport function AfterLoad() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_LOAD\n        });\n    };\n}\n\n//# sourceMappingURL=AfterLoad.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\";\n/**\n * Calls a method on which this decorator is applied after this entity removal.\n */\nexport function AfterRemove() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_REMOVE\n        });\n    };\n}\n\n//# sourceMappingURL=AfterRemove.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\";\n/**\n * Calls a method on which this decorator is applied after this entity update.\n */\nexport function AfterUpdate() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.AFTER_UPDATE\n        });\n    };\n}\n\n//# sourceMappingURL=AfterUpdate.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\";\n/**\n * Calls a method on which this decorator is applied before this entity insertion.\n */\nexport function BeforeInsert() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_INSERT\n        });\n    };\n}\n\n//# sourceMappingURL=BeforeInsert.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\";\n/**\n * Calls a method on which this decorator is applied before this entity removal.\n */\nexport function BeforeRemove() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_REMOVE\n        });\n    };\n}\n\n//# sourceMappingURL=BeforeRemove.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { EventListenerTypes } from \"../../metadata/types/EventListenerTypes\";\n/**\n * Calls a method on which this decorator is applied before this entity update.\n */\nexport function BeforeUpdate() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().entityListeners.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            type: EventListenerTypes.BEFORE_UPDATE\n        });\n    };\n}\n\n//# sourceMappingURL=BeforeUpdate.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\nexport function EventSubscriber() {\n    return function (target) {\n        getMetadataArgsStorage().entitySubscribers.push({\n            target: target\n        });\n    };\n}\n\n//# sourceMappingURL=EventSubscriber.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(optionsOrOptionsArray) {\n    return function (object, propertyName) {\n        var options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n        options.forEach(function (options) {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName\n            });\n        });\n    };\n}\n\n//# sourceMappingURL=JoinColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options) {\n    return function (object, propertyName) {\n        options = options || {};\n        getMetadataArgsStorage().joinTables.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumns: (options && options.joinColumn ? [options.joinColumn] : options.joinColumns),\n            inverseJoinColumns: (options && options.inverseJoinColumn ? [options.inverseJoinColumn] : options.inverseJoinColumns),\n            schema: options && options.schema ? options.schema : undefined,\n            database: options && options.database ? options.database : undefined,\n        });\n    };\n}\n\n//# sourceMappingURL=JoinTable.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\n * entity1 and entity2 ids. This is owner side of the relationship.\n */\nexport function ManyToMany(typeFunctionOrTarget, inverseSideOrOptions, options) {\n    // normalize parameters\n    var inverseSideProperty;\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = inverseSideOrOptions;\n    }\n    else {\n        inverseSideProperty = inverseSideOrOptions;\n    }\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        var isLazy = options.lazy === true;\n        if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination\n            var reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-many\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        });\n    };\n}\n\n//# sourceMappingURL=ManyToMany.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Many-to-one relation allows to create type of relation when Entity1 can have single instance of Entity2, but\n * Entity2 can have a multiple instances of Entity1. Entity1 is an owner of the relationship, and storages Entity2 id\n * on its own side.\n */\nexport function ManyToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {\n    // normalize parameters\n    var inverseSideProperty;\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = inverseSideOrOptions;\n    }\n    else {\n        inverseSideProperty = inverseSideOrOptions;\n    }\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        var isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination\n            var reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-one\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        });\n    };\n}\n\n//# sourceMappingURL=ManyToOne.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * One-to-many relation allows to create type of relation when Entity2 can have multiple instances of Entity1.\n * Entity1 have only one Entity2. Entity1 is an owner of the relationship, and storages Entity2 id on its own side.\n */\nexport function OneToMany(typeFunctionOrTarget, inverseSide, options) {\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        var isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination\n            var reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSide,\n            options: options\n        });\n    };\n}\n\n//# sourceMappingURL=OneToMany.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {\n    // normalize parameters\n    var inverseSideProperty;\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = inverseSideOrOptions;\n    }\n    else {\n        inverseSideProperty = inverseSideOrOptions;\n    }\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        var isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && Reflect.getMetadata) { // automatic determination\n            var reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-one\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        });\n    };\n}\n\n//# sourceMappingURL=OneToOne.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Holds a number of children in the closure table of the column.\n *\n * @deprecated Do not use this decorator, it may be removed in the future versions\n */\nexport function RelationCount(relation, alias, queryBuilderFactory) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().relationCounts.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        });\n    };\n}\n\n//# sourceMappingURL=RelationCount.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Special decorator used to extract relation id into separate entity property.\n *\n * @experimental\n */\nexport function RelationId(relation, alias, queryBuilderFactory) {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().relationIds.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        });\n    };\n}\n\n//# sourceMappingURL=RelationId.js.map\n","import * as tslib_1 from \"tslib\";\nimport { getConnection, getMetadataArgsStorage, MongoRepository, Repository, TreeRepository } from \"../../\";\nexport function Transaction(connectionOrOptions) {\n    return function (target, methodName, descriptor) {\n        // save original method - we gonna need it\n        var originalMethod = descriptor.value;\n        // override method descriptor with proxy method\n        descriptor.value = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var connectionName = \"default\";\n            var isolationLevel = undefined;\n            if (connectionOrOptions) {\n                if (typeof connectionOrOptions === \"string\") {\n                    connectionName = connectionOrOptions;\n                }\n                else {\n                    if (connectionOrOptions.connectionName) {\n                        connectionName = connectionOrOptions.connectionName;\n                    }\n                    if (connectionOrOptions.isolation) {\n                        isolationLevel = connectionOrOptions.isolation;\n                    }\n                }\n            }\n            var transactionCallback = function (entityManager) {\n                var argsWithInjectedTransactionManagerAndRepositories;\n                // filter all @TransactionEntityManager() and @TransactionRepository() decorator usages for this method\n                var transactionEntityManagerMetadatas = getMetadataArgsStorage()\n                    .filterTransactionEntityManagers(target.constructor, methodName)\n                    .reverse();\n                var transactionRepositoryMetadatas = getMetadataArgsStorage()\n                    .filterTransactionRepository(target.constructor, methodName)\n                    .reverse();\n                // if there are @TransactionEntityManager() decorator usages the inject them\n                if (transactionEntityManagerMetadatas.length > 0) {\n                    argsWithInjectedTransactionManagerAndRepositories = tslib_1.__spread(args);\n                    // replace method params with injection of transactionEntityManager\n                    transactionEntityManagerMetadatas.forEach(function (metadata) {\n                        argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);\n                    });\n                }\n                else if (transactionRepositoryMetadatas.length === 0) { // otherwise if there's no transaction repositories in use, inject it as a first parameter\n                    argsWithInjectedTransactionManagerAndRepositories = tslib_1.__spread([entityManager], args);\n                }\n                else {\n                    argsWithInjectedTransactionManagerAndRepositories = tslib_1.__spread(args);\n                }\n                // for every usage of @TransactionRepository decorator\n                transactionRepositoryMetadatas.forEach(function (metadata) {\n                    var repositoryInstance;\n                    // detect type of the repository and get instance from transaction entity manager\n                    switch (metadata.repositoryType) {\n                        case Repository:\n                            repositoryInstance = entityManager.getRepository(metadata.entityType);\n                            break;\n                        case MongoRepository:\n                            repositoryInstance = entityManager.getMongoRepository(metadata.entityType);\n                            break;\n                        case TreeRepository:\n                            repositoryInstance = entityManager.getTreeRepository(metadata.entityType);\n                            break;\n                        // if not the TypeORM's ones, there must be custom repository classes\n                        default:\n                            repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);\n                    }\n                    // replace method param with injection of repository instance\n                    argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);\n                });\n                return originalMethod.apply(_this, argsWithInjectedTransactionManagerAndRepositories);\n            };\n            if (isolationLevel) {\n                return getConnection(connectionName).manager.transaction(isolationLevel, transactionCallback);\n            }\n            else {\n                return getConnection(connectionName).manager.transaction(transactionCallback);\n            }\n        };\n    };\n}\n\n//# sourceMappingURL=Transaction.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Injects transaction's entity manager into the method wrapped with @Transaction decorator.\n */\nexport function TransactionManager() {\n    return function (object, methodName, index) {\n        getMetadataArgsStorage().transactionEntityManagers.push({\n            target: object.constructor,\n            methodName: methodName,\n            index: index,\n        });\n    };\n}\n\n//# sourceMappingURL=TransactionManager.js.map\n","import { getMetadataArgsStorage } from \"../../\";\nimport { CannotReflectMethodParameterTypeError } from \"../../error/CannotReflectMethodParameterTypeError\";\n/**\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\n */\nexport function TransactionRepository(entityType) {\n    return function (object, methodName, index) {\n        // get repository type\n        var repositoryType;\n        try {\n            repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\n        }\n        catch (err) {\n            throw new CannotReflectMethodParameterTypeError(object.constructor, methodName);\n        }\n        getMetadataArgsStorage().transactionRepositories.push({\n            target: object.constructor,\n            methodName: methodName,\n            index: index,\n            repositoryType: repositoryType,\n            entityType: entityType,\n        });\n    };\n}\n\n//# sourceMappingURL=TransactionRepository.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(type) {\n    return function (target) {\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type\n        });\n    };\n}\n\n//# sourceMappingURL=Tree.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Marks a entity property as a children of the tree.\n * \"Tree children\" will contain all children (bind) of this entity.\n */\nexport function TreeChildren(options) {\n    return function (object, propertyName) {\n        if (!options)\n            options = {};\n        // now try to determine it its lazy relation\n        var reflectedType = Reflect && Reflect.getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n        var isLazy = (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") || false;\n        // add one-to-many relation for this\n        getMetadataArgsStorage().relations.push({\n            isTreeChildren: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: function () { return object.constructor; },\n            options: options\n        });\n    };\n}\n\n//# sourceMappingURL=TreeChildren.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Creates a \"level\"/\"length\" column to the table that holds a closure table.\n */\nexport function TreeLevelColumn() {\n    return function (object, propertyName) {\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"treeLevel\",\n            options: {}\n        });\n    };\n}\n\n//# sourceMappingURL=TreeLevelColumn.js.map\n","import { getMetadataArgsStorage } from \"../../\";\n/**\n * Marks a entity property as a parent of the tree.\n * \"Tree parent\" indicates who owns (is a parent) of this entity in tree structure.\n */\nexport function TreeParent() {\n    return function (object, propertyName) {\n        // now try to determine it its lazy relation\n        var reflectedType = Reflect && Reflect.getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\n        var isLazy = (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") || false;\n        getMetadataArgsStorage().relations.push({\n            isTreeParent: true,\n            target: object.constructor,\n            propertyName: propertyName,\n            isLazy: isLazy,\n            relationType: \"many-to-one\",\n            type: function () { return object.constructor; },\n            options: {}\n        });\n    };\n}\n\n//# sourceMappingURL=TreeParent.js.map\n","import { MissingDriverError } from \"../error/MissingDriverError\";\nimport { CockroachDriver } from \"./cockroachdb/CockroachDriver\";\nimport { MongoDriver } from \"./mongodb/MongoDriver\";\nimport { SqlServerDriver } from \"./sqlserver/SqlServerDriver\";\nimport { OracleDriver } from \"./oracle/OracleDriver\";\nimport { SqliteDriver } from \"./sqlite/SqliteDriver\";\nimport { CordovaDriver } from \"./cordova/CordovaDriver\";\nimport { ReactNativeDriver } from \"./react-native/ReactNativeDriver\";\nimport { NativescriptDriver } from \"./nativescript/NativescriptDriver\";\nimport { SqljsDriver } from \"./sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"./mysql/MysqlDriver\";\nimport { PostgresDriver } from \"./postgres/PostgresDriver\";\nimport { ExpoDriver } from \"./expo/ExpoDriver\";\nimport { AuroraDataApiDriver } from \"./aurora-data-api/AuroraDataApiDriver\";\nimport { SapDriver } from \"./sap/SapDriver\";\nimport { AuroraDataApiPostgresDriver } from \"./postgres/PostgresDriver\";\n/**\n * Helps to create drivers.\n */\nvar DriverFactory = /** @class */ (function () {\n    function DriverFactory() {\n    }\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    DriverFactory.prototype.create = function (connection) {\n        var type = connection.options.type;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"cockroachdb\":\n                return new CockroachDriver(connection);\n            case \"sap\":\n                return new SapDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"nativescript\":\n                return new NativescriptDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            case \"expo\":\n                return new ExpoDriver(connection);\n            case \"aurora-data-api\":\n                return new AuroraDataApiDriver(connection);\n            case \"aurora-data-api-pg\":\n                return new AuroraDataApiPostgresDriver(connection);\n            default:\n                throw new MissingDriverError(type);\n        }\n    };\n    return DriverFactory;\n}());\nexport { DriverFactory };\n\n//# sourceMappingURL=DriverFactory.js.map\n","import * as tslib_1 from \"tslib\";\nimport { hash } from \"../util/StringUtils\";\n/**\n* Common driver utility functions.\n*/\nvar DriverUtils = /** @class */ (function () {\n    function DriverUtils() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    DriverUtils.buildDriverOptions = function (options, buildOptions) {\n        if (options.url) {\n            var parsedUrl = this.parseConnectionUrl(options.url);\n            var urlDriverOptions = {\n                type: parsedUrl.type,\n                host: parsedUrl.host,\n                username: parsedUrl.username,\n                password: parsedUrl.password,\n                port: parsedUrl.port,\n                database: parsedUrl.database\n            };\n            if (buildOptions && buildOptions.useSid) {\n                urlDriverOptions.sid = parsedUrl.database;\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    };\n    /**\n     * Builds column alias from given alias name and column name.\n     *\n     * If alias length is greater than the limit (if any) allowed by the current\n     * driver, replaces it with a hashed string.\n     *\n     * @param driver Current `Driver`.\n     * @param alias Alias part.\n     * @param column Name of the column to be concatened to `alias`.\n     *\n     * @return An alias allowing to select/transform the target `column`.\n     */\n    DriverUtils.buildColumnAlias = function (_a, alias, column) {\n        var maxAliasLength = _a.maxAliasLength;\n        var columnAliasName = alias + \"_\" + column;\n        if (maxAliasLength && maxAliasLength > 0 && columnAliasName.length > maxAliasLength) {\n            return hash(columnAliasName, { length: maxAliasLength });\n        }\n        return columnAliasName;\n    };\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Extracts connection data from the connection url.\n     */\n    DriverUtils.parseConnectionUrl = function (url) {\n        var type = url.split(\":\")[0];\n        var firstSlashes = url.indexOf(\"//\");\n        var preBase = url.substr(firstSlashes + 2);\n        var secondSlash = preBase.indexOf(\"/\");\n        var base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        var afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        var lastAtSign = base.lastIndexOf(\"@\");\n        var usernameAndPassword = base.substr(0, lastAtSign);\n        var hostAndPort = base.substr(lastAtSign + 1);\n        var username = usernameAndPassword;\n        var password = \"\";\n        var firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        var _a = tslib_1.__read(hostAndPort.split(\":\"), 2), host = _a[0], port = _a[1];\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    };\n    return DriverUtils;\n}());\nexport { DriverUtils };\n\n//# sourceMappingURL=DriverUtils.js.map\n","/**\n * This class stores query and its parameters\n */\nvar Query = /** @class */ (function () {\n    function Query(query, parameters) {\n        this.query = query;\n        this.parameters = parameters;\n    }\n    return Query;\n}());\nexport { Query };\n\n//# sourceMappingURL=Query.js.map\n","/**\n * This class stores up and down queries needed for migrations functionality.\n */\nvar SqlInMemory = /** @class */ (function () {\n    function SqlInMemory() {\n        this.upQueries = [];\n        this.downQueries = [];\n    }\n    return SqlInMemory;\n}());\nexport { SqlInMemory };\n\n//# sourceMappingURL=SqlInMemory.js.map\n","import * as tslib_1 from \"tslib\";\nimport { DriverUtils } from \"../DriverUtils\";\nimport { AuroraDataApiQueryRunner } from \"./AuroraDataApiQueryRunner\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\n/**\n * Organizes communication with MySQL DBMS.\n */\nvar AuroraDataApiDriver = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function AuroraDataApiDriver(connection) {\n        var _this = this;\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\n         * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n         */\n        this.supportedDataTypes = [\n            // numeric types\n            \"bit\",\n            \"int\",\n            \"integer\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"bigint\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"bool\",\n            \"boolean\",\n            // date and time types\n            \"date\",\n            \"datetime\",\n            \"timestamp\",\n            \"time\",\n            \"year\",\n            // string types\n            \"char\",\n            \"nchar\",\n            \"national char\",\n            \"varchar\",\n            \"nvarchar\",\n            \"national varchar\",\n            \"blob\",\n            \"text\",\n            \"tinyblob\",\n            \"tinytext\",\n            \"mediumblob\",\n            \"mediumtext\",\n            \"longblob\",\n            \"longtext\",\n            \"enum\",\n            \"binary\",\n            \"varbinary\",\n            // json data type\n            \"json\",\n            // spatial data types\n            \"geometry\",\n            \"point\",\n            \"linestring\",\n            \"polygon\",\n            \"multipoint\",\n            \"multilinestring\",\n            \"multipolygon\",\n            \"geometrycollection\"\n        ];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [\n            \"geometry\",\n            \"point\",\n            \"linestring\",\n            \"polygon\",\n            \"multipoint\",\n            \"multilinestring\",\n            \"multipolygon\",\n            \"geometrycollection\"\n        ];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"char\",\n            \"varchar\",\n            \"nvarchar\",\n            \"binary\",\n            \"varbinary\"\n        ];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withWidthColumnTypes = [\n            \"bit\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"int\",\n            \"integer\",\n            \"bigint\"\n        ];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\",\n            \"time\",\n            \"datetime\",\n            \"timestamp\"\n        ];\n        /**\n         * Gets list of column data types that supports scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\"\n        ];\n        /**\n         * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\n         */\n        this.unsignedAndZerofillTypes = [\n            \"int\",\n            \"integer\",\n            \"smallint\",\n            \"tinyint\",\n            \"mediumint\",\n            \"bigint\",\n            \"decimal\",\n            \"dec\",\n            \"numeric\",\n            \"fixed\",\n            \"float\",\n            \"double\",\n            \"double precision\",\n            \"real\"\n        ];\n        /**\n         * ORM has special columns and we need to know what database column types should be for those columns.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"datetime\",\n            createDatePrecision: 6,\n            createDateDefault: \"CURRENT_TIMESTAMP(6)\",\n            updateDate: \"datetime\",\n            updateDatePrecision: 6,\n            updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\n            deleteDate: \"datetime\",\n            deleteDatePrecision: 6,\n            deleteDateNullable: true,\n            version: \"int\",\n            treeLevel: \"int\",\n            migrationId: \"int\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"bigint\",\n            cacheId: \"int\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"bigint\",\n            cacheDuration: \"int\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"text\",\n        };\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {\n            \"varchar\": { length: 255 },\n            \"nvarchar\": { length: 255 },\n            \"national varchar\": { length: 255 },\n            \"char\": { length: 1 },\n            \"binary\": { length: 1 },\n            \"varbinary\": { length: 255 },\n            \"decimal\": { precision: 10, scale: 0 },\n            \"dec\": { precision: 10, scale: 0 },\n            \"numeric\": { precision: 10, scale: 0 },\n            \"fixed\": { precision: 10, scale: 0 },\n            \"float\": { precision: 12 },\n            \"double\": { precision: 22 },\n            \"time\": { precision: 0 },\n            \"datetime\": { precision: 0 },\n            \"timestamp\": { precision: 0 },\n            \"bit\": { width: 1 },\n            \"int\": { width: 11 },\n            \"integer\": { width: 11 },\n            \"tinyint\": { width: 4 },\n            \"smallint\": { width: 6 },\n            \"mediumint\": { width: 9 },\n            \"bigint\": { width: 20 }\n        };\n        /**\n         * Max length allowed by MySQL for aliases.\n         * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\n         */\n        this.maxAliasLength = 63;\n        this.connection = connection;\n        this.options = connection.options;\n        // load mysql package\n        this.loadDependencies();\n        this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, function (query, parameters) { return _this.connection.logger.logQuery(query, parameters); }, this.options.serviceConfigOptions);\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\n        // todo: provide options to auto-create a database if it does not exist yet\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    AuroraDataApiDriver.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    AuroraDataApiDriver.prototype.afterConnect = function () {\n        return Promise.resolve();\n    };\n    /**\n     * Closes connection with the database.\n     */\n    AuroraDataApiDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    AuroraDataApiDriver.prototype.createSchemaBuilder = function () {\n        return new RdbmsSchemaBuilder(this.connection);\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    AuroraDataApiDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        return new AuroraDataApiQueryRunner(this);\n    };\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    AuroraDataApiDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {\n        var escapedParameters = Object.keys(nativeParameters).map(function (key) { return nativeParameters[key]; });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n        var keys = Object.keys(parameters).map(function (parameter) { return \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\"; }).join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), function (key) {\n            var value;\n            if (key.substr(0, 4) === \":...\") {\n                value = parameters[key.substr(4)];\n            }\n            else {\n                value = parameters[key.substr(1)];\n            }\n            if (value instanceof Function) {\n                return value();\n            }\n            else {\n                escapedParameters.push(value);\n                return \"?\";\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    };\n    /**\n     * Escapes a column name.\n     */\n    AuroraDataApiDriver.prototype.escape = function (columnName) {\n        return \"`\" + columnName + \"`\";\n    };\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    AuroraDataApiDriver.prototype.buildTableName = function (tableName, schema, database) {\n        return database ? database + \".\" + tableName : tableName;\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    AuroraDataApiDriver.prototype.preparePersistentValue = function (value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            return JSON.stringify(value);\n        }\n        else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDate(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        else if (columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") {\n            return \"\" + value;\n        }\n        return value;\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    AuroraDataApiDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\" || columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"json\") {\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        else if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\")\n            && columnMetadata.enum\n            && !isNaN(value)\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n            // convert to number if that exists in possible enum options\n            value = parseInt(value);\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    };\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    AuroraDataApiDriver.prototype.normalizeType = function (column) {\n        if (column.type === Number || column.type === \"integer\") {\n            return \"int\";\n        }\n        else if (column.type === String) {\n            return \"varchar\";\n        }\n        else if (column.type === Date) {\n            return \"datetime\";\n        }\n        else if (column.type === Buffer) {\n            return \"blob\";\n        }\n        else if (column.type === Boolean) {\n            return \"tinyint\";\n        }\n        else if (column.type === \"uuid\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-enum\") {\n            return \"enum\";\n        }\n        else if (column.type === \"double precision\" || column.type === \"real\") {\n            return \"double\";\n        }\n        else if (column.type === \"dec\" || column.type === \"numeric\" || column.type === \"fixed\") {\n            return \"decimal\";\n        }\n        else if (column.type === \"bool\" || column.type === \"boolean\") {\n            return \"tinyint\";\n        }\n        else if (column.type === \"nvarchar\" || column.type === \"national varchar\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"nchar\" || column.type === \"national char\") {\n            return \"char\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    };\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    AuroraDataApiDriver.prototype.normalizeDefault = function (columnMetadata) {\n        var defaultValue = columnMetadata.default;\n        if ((columnMetadata.type === \"enum\" || columnMetadata.type === \"simple-enum\") && defaultValue !== undefined) {\n            return \"'\" + defaultValue + \"'\";\n        }\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        }\n        else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n        }\n        else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        else if (typeof defaultValue === \"string\") {\n            return \"'\" + defaultValue + \"'\";\n        }\n        else if (defaultValue === null) {\n            return \"null\";\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    AuroraDataApiDriver.prototype.normalizeIsUnique = function (column) {\n        return column.entityMetadata.indices.some(function (idx) { return idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column; });\n    };\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    AuroraDataApiDriver.prototype.getColumnLength = function (column) {\n        if (column.length)\n            return column.length.toString();\n        /**\n         * fix https://github.com/typeorm/typeorm/issues/1139\n         */\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"national varchar\":\n                return \"255\";\n            case \"varbinary\":\n                return \"255\";\n            default:\n                return \"\";\n        }\n    };\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    AuroraDataApiDriver.prototype.createFullType = function (column) {\n        var type = column.type;\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\n        if (this.getColumnLength(column)) {\n            type += \"(\" + this.getColumnLength(column) + \")\";\n        }\n        else if (column.width) {\n            type += \"(\" + column.width + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    };\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    AuroraDataApiDriver.prototype.obtainMasterConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            if (_this.poolCluster) {\n                _this.poolCluster.getConnection(\"MASTER\", function (err, dbConnection) {\n                    err ? fail(err) : ok(_this.prepareDbConnection(dbConnection));\n                });\n            }\n            else if (_this.pool) {\n                _this.pool.getConnection(function (err, dbConnection) {\n                    err ? fail(err) : ok(_this.prepareDbConnection(dbConnection));\n                });\n            }\n            else {\n                fail(new Error(\"Connection is not established with mysql database\"));\n            }\n        });\n    };\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    AuroraDataApiDriver.prototype.obtainSlaveConnection = function () {\n        var _this = this;\n        if (!this.poolCluster)\n            return this.obtainMasterConnection();\n        return new Promise(function (ok, fail) {\n            _this.poolCluster.getConnection(\"SLAVE*\", function (err, dbConnection) {\n                err ? fail(err) : ok(dbConnection);\n            });\n        });\n    };\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    AuroraDataApiDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n        var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {\n            var value;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult.insertId) {\n                value = insertResult.insertId;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    };\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    AuroraDataApiDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {\n        var _this = this;\n        return columnMetadatas.filter(function (columnMetadata) {\n            var tableColumn = tableColumns.find(function (c) { return c.name === columnMetadata.databaseName; });\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n            var columnMetadataLength = columnMetadata.length;\n            if (!columnMetadataLength && columnMetadata.generationStrategy === \"uuid\") { // fixing #3374\n                columnMetadataLength = _this.getColumnLength(columnMetadata);\n            }\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== _this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadataLength\n                || tableColumn.width !== columnMetadata.width\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                || tableColumn.zerofill !== columnMetadata.zerofill\n                || tableColumn.unsigned !== columnMetadata.unsigned\n                || tableColumn.asExpression !== columnMetadata.asExpression\n                || tableColumn.generatedType !== columnMetadata.generatedType\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || !_this.compareDefaultValues(_this.normalizeDefault(columnMetadata), tableColumn.default)\n                || (tableColumn.enum && columnMetadata.enum && !OrmUtils.isArraysEqual(tableColumn.enum, columnMetadata.enum.map(function (val) { return val + \"\"; })))\n                || tableColumn.onUpdate !== columnMetadata.onUpdate\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    };\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    AuroraDataApiDriver.prototype.isReturningSqlSupported = function () {\n        return false;\n    };\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    AuroraDataApiDriver.prototype.isUUIDGenerationSupported = function () {\n        return false;\n    };\n    /**\n     * Creates an escaped parameter.\n     */\n    AuroraDataApiDriver.prototype.createParameter = function (parameterName, index) {\n        return \"?\";\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads all driver dependencies.\n     */\n    AuroraDataApiDriver.prototype.loadDependencies = function () {\n        this.DataApiDriver = PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n        // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack\n        // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787\n        this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver;\n    };\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    AuroraDataApiDriver.prototype.createConnectionOptions = function (options, credentials) {\n        credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n        // build connection options for the driver\n        return Object.assign({}, {\n            resourceArn: options.resourceArn,\n            secretArn: options.secretArn,\n            database: options.database,\n            region: options.region,\n            type: options.type,\n        }, {\n            host: credentials.host,\n            user: credentials.username,\n            password: credentials.password,\n            database: credentials.database,\n            port: credentials.port,\n            ssl: options.ssl\n        }, options.extra || {});\n    };\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    AuroraDataApiDriver.prototype.createPool = function (connectionOptions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, {}];\n            });\n        });\n    };\n    /**\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\n     */\n    AuroraDataApiDriver.prototype.prepareDbConnection = function (connection) {\n        var logger = this.connection.logger;\n        /*\n          Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\n          cause the hosting app to crash.\n         */\n        if (connection.listeners(\"error\").length === 0) {\n            connection.on(\"error\", function (error) { return logger.log(\"warn\", \"MySQL connection raised an error. \" + error); });\n        }\n        return connection;\n    };\n    /**\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\n     */\n    AuroraDataApiDriver.prototype.compareDefaultValues = function (columnMetadataValue, databaseValue) {\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\n            // as result compare cannot understand if default is really changed or not\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\n        }\n        return columnMetadataValue === databaseValue;\n    };\n    return AuroraDataApiDriver;\n}());\nexport { AuroraDataApiDriver };\n\n//# sourceMappingURL=AuroraDataApiDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { PromiseUtils } from \"../../index\";\n/**\n * Runs queries on a single mysql database connection.\n */\nvar AuroraDataApiQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(AuroraDataApiQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function AuroraDataApiQueryRunner(driver) {\n        var _this = _super.call(this) || this;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    AuroraDataApiQueryRunner.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, {}];\n            });\n        });\n    };\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    AuroraDataApiQueryRunner.prototype.release = function () {\n        this.isReleased = true;\n        if (this.databaseConnection)\n            this.databaseConnection.release();\n        return Promise.resolve();\n    };\n    /**\n     * Starts transaction on the current connection.\n     */\n    AuroraDataApiQueryRunner.prototype.startTransaction = function (isolationLevel) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isTransactionActive)\n                            throw new TransactionAlreadyStartedError();\n                        this.isTransactionActive = true;\n                        return [4 /*yield*/, this.driver.client.startTransaction()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    AuroraDataApiQueryRunner.prototype.commitTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isTransactionActive)\n                            throw new TransactionNotStartedError();\n                        return [4 /*yield*/, this.driver.client.commitTransaction()];\n                    case 1:\n                        _a.sent();\n                        this.isTransactionActive = false;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    AuroraDataApiQueryRunner.prototype.rollbackTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isTransactionActive)\n                            throw new TransactionNotStartedError();\n                        return [4 /*yield*/, this.driver.client.rollbackTransaction()];\n                    case 1:\n                        _a.sent();\n                        this.isTransactionActive = false;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes a raw SQL query.\n     */\n    AuroraDataApiQueryRunner.prototype.query = function (query, parameters) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isReleased)\n                            throw new QueryRunnerAlreadyReleasedError();\n                        return [4 /*yield*/, this.driver.client.query(query, parameters)];\n                    case 1:\n                        result = _a.sent();\n                        if (result.records) {\n                            return [2 /*return*/, result.records];\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * Returns raw data stream.\n     */\n    AuroraDataApiQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n        var _this = this;\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, stream, err_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        stream = databaseConnection.query(query, parameters);\n                        if (onEnd)\n                            stream.on(\"end\", onEnd);\n                        if (onError)\n                            stream.on(\"error\", onError);\n                        ok(stream);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_1 = _a.sent();\n                        fail(err_1);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Returns all available database names including system databases.\n     */\n    AuroraDataApiQueryRunner.prototype.getDatabases = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve([])];\n            });\n        });\n    };\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    AuroraDataApiQueryRunner.prototype.getSchemas = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql driver does not support table schemas\");\n            });\n        });\n    };\n    /**\n     * Checks if database with the given name exist.\n     */\n    AuroraDataApiQueryRunner.prototype.hasDatabase = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT * FROM `INFORMATION_SCHEMA`.`SCHEMATA` WHERE `SCHEMA_NAME` = '\" + database + \"'\")];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if schema with the given name exist.\n     */\n    AuroraDataApiQueryRunner.prototype.hasSchema = function (schema) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql driver does not support table schemas\");\n            });\n        });\n    };\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    AuroraDataApiQueryRunner.prototype.hasTable = function (tableOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var parsedTableName, sql, result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    AuroraDataApiQueryRunner.prototype.hasColumn = function (tableOrName, column) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var parsedTableName, columnName, sql, result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        columnName = column instanceof TableColumn ? column.name : column;\n                        sql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = '\" + parsedTableName.database + \"' AND `TABLE_NAME` = '\" + parsedTableName.tableName + \"' AND `COLUMN_NAME` = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new database.\n     */\n    AuroraDataApiQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = ifNotExist ? \"CREATE DATABASE IF NOT EXISTS `\" + database + \"`\" : \"CREATE DATABASE `\" + database + \"`\";\n                        down = \"DROP DATABASE `\" + database + \"`\";\n                        return [4 /*yield*/, this.executeQueries(new Query(up), new Query(down))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops database.\n     */\n    AuroraDataApiQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = ifExist ? \"DROP DATABASE IF EXISTS `\" + database + \"`\" : \"DROP DATABASE `\" + database + \"`\";\n                        down = \"CREATE DATABASE `\" + database + \"`\";\n                        return [4 /*yield*/, this.executeQueries(new Query(up), new Query(down))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new table schema.\n     */\n    AuroraDataApiQueryRunner.prototype.createSchema = function (schema, ifNotExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"Schema create queries are not supported by MySql driver.\");\n            });\n        });\n    };\n    /**\n     * Drops table schema.\n     */\n    AuroraDataApiQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"Schema drop queries are not supported by MySql driver.\");\n            });\n        });\n    };\n    /**\n     * Creates a new table.\n     */\n    AuroraDataApiQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys) {\n        if (ifNotExist === void 0) { ifNotExist = false; }\n        if (createForeignKeys === void 0) { createForeignKeys = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isTableExist, upQueries, downQueries;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!ifNotExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(table)];\n                    case 1:\n                        isTableExist = _a.sent();\n                        if (isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2:\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(this.createTableSql(table, createForeignKeys));\n                        downQueries.push(this.dropTableSql(table));\n                        // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order\n                        // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index\n                        // if it related to the foreign key.\n                        // createTable does not need separate method to create indices, because it create indices in the same query with table creation.\n                        table.indices.forEach(function (index) { return downQueries.push(_this.dropIndexSql(table, index)); });\n                        // if createForeignKeys is true, we must drop created foreign keys in down query.\n                        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n                        if (createForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return downQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        return [2 /*return*/, this.executeQueries(upQueries, downQueries)];\n                }\n            });\n        });\n    };\n    /**\n     * Drop the table.\n     */\n    AuroraDataApiQueryRunner.prototype.dropTable = function (target, ifExist, dropForeignKeys) {\n        if (dropForeignKeys === void 0) { dropForeignKeys = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isTableExist, createForeignKeys, tableName, table, upQueries, downQueries;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!ifExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(target)];\n                    case 1:\n                        isTableExist = _a.sent();\n                        if (!isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2:\n                        createForeignKeys = dropForeignKeys;\n                        tableName = target instanceof Table ? target.name : target;\n                        return [4 /*yield*/, this.getCachedTable(tableName)];\n                    case 3:\n                        table = _a.sent();\n                        upQueries = [];\n                        downQueries = [];\n                        if (dropForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return upQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        table.indices.forEach(function (index) { return upQueries.push(_this.dropIndexSql(table, index)); });\n                        upQueries.push(this.dropTableSql(table));\n                        downQueries.push(this.createTableSql(table, createForeignKeys));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new view.\n     */\n    AuroraDataApiQueryRunner.prototype.createView = function (view) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, _a, _b, _c, _d;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(this.createViewSql(view));\n                        _b = (_a = upQueries).push;\n                        return [4 /*yield*/, this.insertViewDefinitionSql(view)];\n                    case 1:\n                        _b.apply(_a, [_e.sent()]);\n                        downQueries.push(this.dropViewSql(view));\n                        _d = (_c = downQueries).push;\n                        return [4 /*yield*/, this.deleteViewDefinitionSql(view)];\n                    case 2:\n                        _d.apply(_c, [_e.sent()]);\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 3:\n                        _e.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the view.\n     */\n    AuroraDataApiQueryRunner.prototype.dropView = function (target) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var viewName, view, upQueries, downQueries, _a, _b, _c, _d;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        viewName = target instanceof View ? target.name : target;\n                        return [4 /*yield*/, this.getCachedView(viewName)];\n                    case 1:\n                        view = _e.sent();\n                        upQueries = [];\n                        downQueries = [];\n                        _b = (_a = upQueries).push;\n                        return [4 /*yield*/, this.deleteViewDefinitionSql(view)];\n                    case 2:\n                        _b.apply(_a, [_e.sent()]);\n                        upQueries.push(this.dropViewSql(view));\n                        _d = (_c = downQueries).push;\n                        return [4 /*yield*/, this.insertViewDefinitionSql(view)];\n                    case 3:\n                        _d.apply(_c, [_e.sent()]);\n                        downQueries.push(this.createViewSql(view));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _e.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames a table.\n     */\n    AuroraDataApiQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, oldTable, _a, newTable, dbName;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(oldTableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = oldTableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(oldTableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        oldTable = _a;\n                        newTable = oldTable.clone();\n                        dbName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n                        newTable.name = dbName ? dbName + \".\" + newTableName : newTableName;\n                        // rename table\n                        upQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(oldTable.name) + \" TO \" + this.escapePath(newTable.name)));\n                        downQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(newTable.name) + \" TO \" + this.escapePath(oldTable.name)));\n                        // rename index constraints\n                        newTable.indices.forEach(function (index) {\n                            // build new constraint name\n                            var columnNames = index.columnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\", \");\n                            var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n                            // build queries\n                            var indexType = \"\";\n                            if (index.isUnique)\n                                indexType += \"UNIQUE \";\n                            if (index.isSpatial)\n                                indexType += \"SPATIAL \";\n                            if (index.isFulltext)\n                                indexType += \"FULLTEXT \";\n                            upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" DROP INDEX `\" + index.name + \"`, ADD \" + indexType + \"INDEX `\" + newIndexName + \"` (\" + columnNames + \")\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" DROP INDEX `\" + newIndexName + \"`, ADD \" + indexType + \"INDEX `\" + index.name + \"` (\" + columnNames + \")\"));\n                            // replace constraint name\n                            index.name = newIndexName;\n                        });\n                        // rename foreign key constraint\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            // build new constraint name\n                            var columnNames = foreignKey.columnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\", \");\n                            var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\",\");\n                            var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\n                            // build queries\n                            var up = \"ALTER TABLE \" + _this.escapePath(newTable) + \" DROP FOREIGN KEY `\" + foreignKey.name + \"`, ADD CONSTRAINT `\" + newForeignKeyName + \"` FOREIGN KEY (\" + columnNames + \") \" +\n                                (\"REFERENCES \" + _this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n                            if (foreignKey.onDelete)\n                                up += \" ON DELETE \" + foreignKey.onDelete;\n                            if (foreignKey.onUpdate)\n                                up += \" ON UPDATE \" + foreignKey.onUpdate;\n                            var down = \"ALTER TABLE \" + _this.escapePath(newTable) + \" DROP FOREIGN KEY `\" + newForeignKeyName + \"`, ADD CONSTRAINT `\" + foreignKey.name + \"` FOREIGN KEY (\" + columnNames + \") \" +\n                                (\"REFERENCES \" + _this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n                            if (foreignKey.onDelete)\n                                down += \" ON DELETE \" + foreignKey.onDelete;\n                            if (foreignKey.onUpdate)\n                                down += \" ON UPDATE \" + foreignKey.onUpdate;\n                            upQueries.push(new Query(up));\n                            downQueries.push(new Query(down));\n                            // replace constraint name\n                            foreignKey.name = newForeignKeyName;\n                        });\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        // rename old table and replace it in cached tabled;\n                        oldTable.name = newTable.name;\n                        this.replaceCachedTable(oldTable, newTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new column from the column in the table.\n     */\n    AuroraDataApiQueryRunner.prototype.addColumn = function (tableOrName, column) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, upQueries, downQueries, skipColumnLevelPrimary, generatedColumn, nonGeneratedColumn, primaryColumns, columnNames, nonGeneratedColumn, columnIndex, uniqueIndex;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;\n                        upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(column, skipColumnLevelPrimary, false)));\n                        downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN `\" + column.name + \"`\"));\n                        // create or update primary key constraint\n                        if (column.isPrimary && skipColumnLevelPrimary) {\n                            generatedColumn = clonedTable.columns.find(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; });\n                            if (generatedColumn) {\n                                nonGeneratedColumn = generatedColumn.clone();\n                                nonGeneratedColumn.isGenerated = false;\n                                nonGeneratedColumn.generationStrategy = undefined;\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + column.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(column, true)));\n                            }\n                            primaryColumns = clonedTable.primaryColumns;\n                            columnNames = primaryColumns.map(function (column) { return \"`\" + column.name + \"`\"; }).join(\", \");\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNames + \")\"));\n                            primaryColumns.push(column);\n                            columnNames = primaryColumns.map(function (column) { return \"`\" + column.name + \"`\"; }).join(\", \");\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNames + \")\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\"));\n                            // if we previously dropped AUTO_INCREMENT property, we must bring it back\n                            if (generatedColumn) {\n                                nonGeneratedColumn = generatedColumn.clone();\n                                nonGeneratedColumn.isGenerated = false;\n                                nonGeneratedColumn.generationStrategy = undefined;\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(column, true)));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + column.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                            }\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            upQueries.push(this.createIndexSql(table, columnIndex));\n                            downQueries.push(this.dropIndexSql(table, columnIndex));\n                        }\n                        else if (column.isUnique) {\n                            uniqueIndex = new TableIndex({\n                                name: this.connection.namingStrategy.indexName(table.name, [column.name]),\n                                columnNames: [column.name],\n                                isUnique: true\n                            });\n                            clonedTable.indices.push(uniqueIndex);\n                            clonedTable.uniques.push(new TableUnique({\n                                name: uniqueIndex.name,\n                                columnNames: uniqueIndex.columnNames\n                            }));\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD UNIQUE INDEX `\" + uniqueIndex.name + \"` (`\" + column.name + \"`)\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP INDEX `\" + uniqueIndex.name + \"`\"));\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.addColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    AuroraDataApiQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(columns, function (column) { return _this.addColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames column in the given table.\n     */\n    AuroraDataApiQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, oldColumn, newColumn;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) { return c.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        newColumn = undefined;\n                        if (newTableColumnOrName instanceof TableColumn) {\n                            newColumn = newTableColumnOrName;\n                        }\n                        else {\n                            newColumn = oldColumn.clone();\n                            newColumn.name = newTableColumnOrName;\n                        }\n                        return [4 /*yield*/, this.changeColumn(table, oldColumn, newColumn)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    AuroraDataApiQueryRunner.prototype.changeColumn = function (tableOrName, oldColumnOrName, newColumn) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, upQueries, downQueries, oldColumn, oldTableColumn, generatedColumn, nonGeneratedColumn, primaryColumns, columnNames, column, columnNames, primaryColumn, column, columnNames, nonGeneratedColumn, uniqueIndex, uniqueIndex_1, tableUnique;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        oldColumn = oldColumnOrName instanceof TableColumn\n                            ? oldColumnOrName\n                            : table.columns.find(function (column) { return column.name === oldColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        if (!((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\")\n                            || oldColumn.type !== newColumn.type\n                            || oldColumn.length !== newColumn.length\n                            || oldColumn.generatedType !== newColumn.generatedType)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.dropColumn(table, oldColumn)];\n                    case 4:\n                        _b.sent();\n                        return [4 /*yield*/, this.addColumn(table, newColumn)];\n                    case 5:\n                        _b.sent();\n                        // update cloned table\n                        clonedTable = table.clone();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        if (newColumn.name !== oldColumn.name) {\n                            // We don't change any column properties, just rename it.\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + oldColumn.name + \"` `\" + newColumn.name + \"` \" + this.buildCreateColumnSql(oldColumn, true, true)));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + newColumn.name + \"` `\" + oldColumn.name + \"` \" + this.buildCreateColumnSql(oldColumn, true, true)));\n                            // rename index constraints\n                            clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n                                // build new constraint name\n                                index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                                index.columnNames.push(newColumn.name);\n                                var columnNames = index.columnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\", \");\n                                var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                                // build queries\n                                var indexType = \"\";\n                                if (index.isUnique)\n                                    indexType += \"UNIQUE \";\n                                if (index.isSpatial)\n                                    indexType += \"SPATIAL \";\n                                if (index.isFulltext)\n                                    indexType += \"FULLTEXT \";\n                                upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" DROP INDEX `\" + index.name + \"`, ADD \" + indexType + \"INDEX `\" + newIndexName + \"` (\" + columnNames + \")\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" DROP INDEX `\" + newIndexName + \"`, ADD \" + indexType + \"INDEX `\" + index.name + \"` (\" + columnNames + \")\"));\n                                // replace constraint name\n                                index.name = newIndexName;\n                            });\n                            // rename foreign key constraints\n                            clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n                                // build new constraint name\n                                foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                                foreignKey.columnNames.push(newColumn.name);\n                                var columnNames = foreignKey.columnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\", \");\n                                var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\",\");\n                                var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\n                                // build queries\n                                var up = \"ALTER TABLE \" + _this.escapePath(table) + \" DROP FOREIGN KEY `\" + foreignKey.name + \"`, ADD CONSTRAINT `\" + newForeignKeyName + \"` FOREIGN KEY (\" + columnNames + \") \" +\n                                    (\"REFERENCES \" + _this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n                                if (foreignKey.onDelete)\n                                    up += \" ON DELETE \" + foreignKey.onDelete;\n                                if (foreignKey.onUpdate)\n                                    up += \" ON UPDATE \" + foreignKey.onUpdate;\n                                var down = \"ALTER TABLE \" + _this.escapePath(table) + \" DROP FOREIGN KEY `\" + newForeignKeyName + \"`, ADD CONSTRAINT `\" + foreignKey.name + \"` FOREIGN KEY (\" + columnNames + \") \" +\n                                    (\"REFERENCES \" + _this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n                                if (foreignKey.onDelete)\n                                    down += \" ON DELETE \" + foreignKey.onDelete;\n                                if (foreignKey.onUpdate)\n                                    down += \" ON UPDATE \" + foreignKey.onUpdate;\n                                upQueries.push(new Query(up));\n                                downQueries.push(new Query(down));\n                                // replace constraint name\n                                foreignKey.name = newForeignKeyName;\n                            });\n                            oldTableColumn = clonedTable.columns.find(function (column) { return column.name === oldColumn.name; });\n                            clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n                            oldColumn.name = newColumn.name;\n                        }\n                        if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + oldColumn.name + \"` \" + this.buildCreateColumnSql(newColumn, true)));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + newColumn.name + \"` \" + this.buildCreateColumnSql(oldColumn, true)));\n                        }\n                        if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                            generatedColumn = clonedTable.columns.find(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; });\n                            if (generatedColumn) {\n                                nonGeneratedColumn = generatedColumn.clone();\n                                nonGeneratedColumn.isGenerated = false;\n                                nonGeneratedColumn.generationStrategy = undefined;\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + generatedColumn.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(generatedColumn, true)));\n                            }\n                            primaryColumns = clonedTable.primaryColumns;\n                            // if primary column state changed, we must always drop existed constraint.\n                            if (primaryColumns.length > 0) {\n                                columnNames = primaryColumns.map(function (column) { return \"`\" + column.name + \"`\"; }).join(\", \");\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNames + \")\"));\n                            }\n                            if (newColumn.isPrimary === true) {\n                                primaryColumns.push(newColumn);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = true;\n                                columnNames = primaryColumns.map(function (column) { return \"`\" + column.name + \"`\"; }).join(\", \");\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNames + \")\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\"));\n                            }\n                            else {\n                                primaryColumn = primaryColumns.find(function (c) { return c.name === newColumn.name; });\n                                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = false;\n                                // if we have another primary keys, we must recreate constraint.\n                                if (primaryColumns.length > 0) {\n                                    columnNames = primaryColumns.map(function (column) { return \"`\" + column.name + \"`\"; }).join(\", \");\n                                    upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNames + \")\"));\n                                    downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\"));\n                                }\n                            }\n                            // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back\n                            if (generatedColumn) {\n                                nonGeneratedColumn = generatedColumn.clone();\n                                nonGeneratedColumn.isGenerated = false;\n                                nonGeneratedColumn.generationStrategy = undefined;\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(generatedColumn, true)));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + generatedColumn.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                            }\n                        }\n                        if (newColumn.isUnique !== oldColumn.isUnique) {\n                            if (newColumn.isUnique === true) {\n                                uniqueIndex = new TableIndex({\n                                    name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),\n                                    columnNames: [newColumn.name],\n                                    isUnique: true\n                                });\n                                clonedTable.indices.push(uniqueIndex);\n                                clonedTable.uniques.push(new TableUnique({\n                                    name: uniqueIndex.name,\n                                    columnNames: uniqueIndex.columnNames\n                                }));\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD UNIQUE INDEX `\" + uniqueIndex.name + \"` (`\" + newColumn.name + \"`)\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP INDEX `\" + uniqueIndex.name + \"`\"));\n                            }\n                            else {\n                                uniqueIndex_1 = clonedTable.indices.find(function (index) {\n                                    return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(function (columnName) { return columnName === newColumn.name; });\n                                });\n                                clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex_1), 1);\n                                tableUnique = clonedTable.uniques.find(function (unique) { return unique.name === uniqueIndex_1.name; });\n                                clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP INDEX `\" + uniqueIndex_1.name + \"`\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD UNIQUE INDEX `\" + uniqueIndex_1.name + \"` (`\" + newColumn.name + \"`)\"));\n                            }\n                        }\n                        _b.label = 7;\n                    case 7: return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 8:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    AuroraDataApiQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops column in the table.\n     */\n    AuroraDataApiQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, column, clonedTable, upQueries, downQueries, generatedColumn, nonGeneratedColumn, columnNames, tableColumn, columnNames_1, nonGeneratedColumn, columnIndex, uniqueName_1, foundUnique, indexName_1, foundIndex;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n                        if (!column)\n                            throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        // drop primary key constraint\n                        if (column.isPrimary) {\n                            generatedColumn = clonedTable.columns.find(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; });\n                            if (generatedColumn) {\n                                nonGeneratedColumn = generatedColumn.clone();\n                                nonGeneratedColumn.isGenerated = false;\n                                nonGeneratedColumn.generationStrategy = undefined;\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + generatedColumn.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(generatedColumn, true)));\n                            }\n                            columnNames = clonedTable.primaryColumns.map(function (primaryColumn) { return \"`\" + primaryColumn.name + \"`\"; }).join(\", \");\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP PRIMARY KEY\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD PRIMARY KEY (\" + columnNames + \")\"));\n                            tableColumn = clonedTable.findColumnByName(column.name);\n                            tableColumn.isPrimary = false;\n                            // if primary key have multiple columns, we must recreate it without dropped column\n                            if (clonedTable.primaryColumns.length > 0) {\n                                columnNames_1 = clonedTable.primaryColumns.map(function (primaryColumn) { return \"`\" + primaryColumn.name + \"`\"; }).join(\", \");\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD PRIMARY KEY (\" + columnNames_1 + \")\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP PRIMARY KEY\"));\n                            }\n                            // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back\n                            if (generatedColumn && generatedColumn.name !== column.name) {\n                                nonGeneratedColumn = generatedColumn.clone();\n                                nonGeneratedColumn.isGenerated = false;\n                                nonGeneratedColumn.generationStrategy = undefined;\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(generatedColumn, true)));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + generatedColumn.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                            }\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n                            upQueries.push(this.dropIndexSql(table, columnIndex));\n                            downQueries.push(this.createIndexSql(table, columnIndex));\n                        }\n                        else if (column.isUnique) {\n                            uniqueName_1 = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);\n                            foundUnique = clonedTable.uniques.find(function (unique) { return unique.name === uniqueName_1; });\n                            if (foundUnique)\n                                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n                            indexName_1 = this.connection.namingStrategy.indexName(table.name, [column.name]);\n                            foundIndex = clonedTable.indices.find(function (index) { return index.name === indexName_1; });\n                            if (foundIndex)\n                                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP INDEX `\" + indexName_1 + \"`\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD UNIQUE INDEX `\" + indexName_1 + \"` (`\" + column.name + \"`)\"));\n                        }\n                        upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN `\" + column.name + \"`\"));\n                        downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(column, true)));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.removeColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the columns in the table.\n     */\n    AuroraDataApiQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(columns, function (column) { return _this.dropColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new primary key.\n     */\n    AuroraDataApiQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        up = this.createPrimaryKeySql(table, columnNames);\n                        down = this.dropPrimaryKeySql(table);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.columns.forEach(function (column) {\n                            if (columnNames.find(function (columnName) { return columnName === column.name; }))\n                                column.isPrimary = true;\n                        });\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    AuroraDataApiQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, columnNames, upQueries, downQueries, generatedColumn, nonGeneratedColumn, primaryColumns, columnNames_2, columnNamesString, newOrExistGeneratedColumn, nonGeneratedColumn, changedGeneratedColumn;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        columnNames = columns.map(function (column) { return column.name; });\n                        upQueries = [];\n                        downQueries = [];\n                        generatedColumn = clonedTable.columns.find(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; });\n                        if (generatedColumn) {\n                            nonGeneratedColumn = generatedColumn.clone();\n                            nonGeneratedColumn.isGenerated = false;\n                            nonGeneratedColumn.generationStrategy = undefined;\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + generatedColumn.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(generatedColumn, true)));\n                        }\n                        primaryColumns = clonedTable.primaryColumns;\n                        if (primaryColumns.length > 0) {\n                            columnNames_2 = primaryColumns.map(function (column) { return \"`\" + column.name + \"`\"; }).join(\", \");\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNames_2 + \")\"));\n                        }\n                        // update columns in table.\n                        clonedTable.columns\n                            .filter(function (column) { return columnNames.indexOf(column.name) !== -1; })\n                            .forEach(function (column) { return column.isPrimary = true; });\n                        columnNamesString = columnNames.map(function (columnName) { return \"`\" + columnName + \"`\"; }).join(\", \");\n                        upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNamesString + \")\"));\n                        downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\"));\n                        newOrExistGeneratedColumn = generatedColumn ? generatedColumn : columns.find(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; });\n                        if (newOrExistGeneratedColumn) {\n                            nonGeneratedColumn = newOrExistGeneratedColumn.clone();\n                            nonGeneratedColumn.isGenerated = false;\n                            nonGeneratedColumn.generationStrategy = undefined;\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + nonGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(newOrExistGeneratedColumn, true)));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" CHANGE `\" + newOrExistGeneratedColumn.name + \"` \" + this.buildCreateColumnSql(nonGeneratedColumn, true)));\n                            changedGeneratedColumn = clonedTable.columns.find(function (column) { return column.name === newOrExistGeneratedColumn.name; });\n                            changedGeneratedColumn.isGenerated = true;\n                            changedGeneratedColumn.generationStrategy = \"increment\";\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a primary key.\n     */\n    AuroraDataApiQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        up = this.dropPrimaryKeySql(table);\n                        down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) { return column.name; }));\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.primaryColumns.forEach(function (column) {\n                            column.isPrimary = false;\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraint.\n     */\n    AuroraDataApiQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support unique constraints. Use unique index instead.\");\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraints.\n     */\n    AuroraDataApiQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support unique constraints. Use unique index instead.\");\n            });\n        });\n    };\n    /**\n     * Drops an unique constraint.\n     */\n    AuroraDataApiQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support unique constraints. Use unique index instead.\");\n            });\n        });\n    };\n    /**\n     * Drops an unique constraints.\n     */\n    AuroraDataApiQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support unique constraints. Use unique index instead.\");\n            });\n        });\n    };\n    /**\n     * Creates a new check constraint.\n     */\n    AuroraDataApiQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support check constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates a new check constraints.\n     */\n    AuroraDataApiQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support check constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops check constraint.\n     */\n    AuroraDataApiQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support check constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops check constraints.\n     */\n    AuroraDataApiQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support check constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates a new exclusion constraint.\n     */\n    AuroraDataApiQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates a new exclusion constraints.\n     */\n    AuroraDataApiQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops exclusion constraint.\n     */\n    AuroraDataApiQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops exclusion constraints.\n     */\n    AuroraDataApiQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"MySql does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates a new foreign key.\n     */\n    AuroraDataApiQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new FK may be passed without name. In this case we generate FK name manually.\n                        if (!foreignKey.name)\n                            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\n                        up = this.createForeignKeySql(table, foreignKey);\n                        down = this.dropForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new foreign keys.\n     */\n    AuroraDataApiQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = foreignKeys.map(function (foreignKey) { return _this.createForeignKey(tableOrName, foreignKey); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign key.\n     */\n    AuroraDataApiQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, foreignKey, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) { return fk.name === foreignKeyOrName; });\n                        if (!foreignKey)\n                            throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n                        up = this.dropForeignKeySql(table, foreignKey);\n                        down = this.createForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign keys from the table.\n     */\n    AuroraDataApiQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = foreignKeys.map(function (foreignKey) { return _this.dropForeignKey(tableOrName, foreignKey); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new index.\n     */\n    AuroraDataApiQueryRunner.prototype.createIndex = function (tableOrName, index) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new index may be passed without name. In this case we generate index name manually.\n                        if (!index.name)\n                            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                        up = this.createIndexSql(table, index);\n                        down = this.dropIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addIndex(index, true);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new indices\n     */\n    AuroraDataApiQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.createIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an index.\n     */\n    AuroraDataApiQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, index, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(function (i) { return i.name === indexOrName; });\n                        if (!index)\n                            throw new Error(\"Supplied index was not found in table \" + table.name);\n                        up = this.dropIndexSql(table, index);\n                        down = this.createIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeIndex(index, true);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an indices from the table.\n     */\n    AuroraDataApiQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.dropIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    AuroraDataApiQueryRunner.prototype.clearTable = function (tableOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableOrName))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all tables from the currently connected database.\n     * Be careful using this method and avoid using it in production or migrations\n     * (because it can clear all your database).\n     */\n    AuroraDataApiQueryRunner.prototype.clearDatabase = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var dbName, isDatabaseExist, selectViewDropsQuery, dropViewQueries, disableForeignKeysCheckQuery, dropTablesQuery, enableForeignKeysCheckQuery, dropQueries, error_1, rollbackError_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        dbName = database ? database : this.driver.database;\n                        if (!dbName) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasDatabase(dbName)];\n                    case 1:\n                        isDatabaseExist = _a.sent();\n                        if (!isDatabaseExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        return [3 /*break*/, 3];\n                    case 2: throw new Error(\"Can not clear database. No database is specified\");\n                    case 3: return [4 /*yield*/, this.startTransaction()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5:\n                        _a.trys.push([5, 13, , 18]);\n                        selectViewDropsQuery = \"SELECT concat('DROP VIEW IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = '\" + dbName + \"'\";\n                        return [4 /*yield*/, this.query(selectViewDropsQuery)];\n                    case 6:\n                        dropViewQueries = _a.sent();\n                        return [4 /*yield*/, Promise.all(dropViewQueries.map(function (q) { return _this.query(q[\"query\"]); }))];\n                    case 7:\n                        _a.sent();\n                        disableForeignKeysCheckQuery = \"SET FOREIGN_KEY_CHECKS = 0;\";\n                        dropTablesQuery = \"SELECT concat('DROP TABLE IF EXISTS `', table_schema, '`.`', table_name, '`') AS `query` FROM `INFORMATION_SCHEMA`.`TABLES` WHERE `TABLE_SCHEMA` = '\" + dbName + \"'\";\n                        enableForeignKeysCheckQuery = \"SET FOREIGN_KEY_CHECKS = 1;\";\n                        return [4 /*yield*/, this.query(disableForeignKeysCheckQuery)];\n                    case 8:\n                        _a.sent();\n                        return [4 /*yield*/, this.query(dropTablesQuery)];\n                    case 9:\n                        dropQueries = _a.sent();\n                        return [4 /*yield*/, Promise.all(dropQueries.map(function (query) { return _this.query(query[\"query\"]); }))];\n                    case 10:\n                        _a.sent();\n                        return [4 /*yield*/, this.query(enableForeignKeysCheckQuery)];\n                    case 11:\n                        _a.sent();\n                        return [4 /*yield*/, this.commitTransaction()];\n                    case 12:\n                        _a.sent();\n                        return [3 /*break*/, 18];\n                    case 13:\n                        error_1 = _a.sent();\n                        _a.label = 14;\n                    case 14:\n                        _a.trys.push([14, 16, , 17]);\n                        return [4 /*yield*/, this.rollbackTransaction()];\n                    case 15:\n                        _a.sent();\n                        return [3 /*break*/, 17];\n                    case 16:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 17];\n                    case 17: throw error_1;\n                    case 18: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Returns current database.\n     */\n    AuroraDataApiQueryRunner.prototype.getCurrentDatabase = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentDBQuery;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT DATABASE() AS `db_name`\")];\n                    case 1:\n                        currentDBQuery = _a.sent();\n                        return [2 /*return*/, currentDBQuery[0][\"db_name\"]];\n                }\n            });\n        });\n    };\n    AuroraDataApiQueryRunner.prototype.loadViews = function (viewNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var hasTable, currentDatabase, viewsCondition, query, dbViews;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.hasTable(this.getTypeormMetadataTableName())];\n                    case 1:\n                        hasTable = _a.sent();\n                        if (!hasTable)\n                            return [2 /*return*/, Promise.resolve([])];\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 2:\n                        currentDatabase = _a.sent();\n                        viewsCondition = viewNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`t`.`schema` = '\" + database + \"' AND `t`.`name` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT `t`.*, `v`.`check_option` FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" `t` \" +\n                            (\"INNER JOIN `information_schema`.`views` `v` ON `v`.`table_schema` = `t`.`schema` AND `v`.`table_name` = `t`.`name` WHERE `t`.`type` = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];\n                    case 3:\n                        dbViews = _a.sent();\n                        return [2 /*return*/, dbViews.map(function (dbView) {\n                                var view = new View();\n                                var db = dbView[\"schema\"] === currentDatabase ? undefined : dbView[\"schema\"];\n                                view.name = _this.driver.buildTableName(dbView[\"name\"], undefined, db);\n                                view.expression = dbView[\"value\"];\n                                return view;\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    AuroraDataApiQueryRunner.prototype.loadTables = function (tableNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentDatabase, tablesCondition, tablesSql, columnsSql, primaryKeySql, collationsSql, indicesCondition, indicesSql, foreignKeysCondition, foreignKeysSql, _a, dbTables, dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        // if no tables given then no need to proceed\n                        if (!tableNames || !tableNames.length)\n                            return [2 /*return*/, []];\n                        return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 1:\n                        currentDatabase = _b.sent();\n                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`TABLE_SCHEMA` = '\" + database + \"' AND `TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`TABLES` WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE \" + tablesCondition;\n                        primaryKeySql = \"SELECT * FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `CONSTRAINT_NAME` = 'PRIMARY' AND (\" + tablesCondition + \")\";\n                        collationsSql = \"SELECT `SCHEMA_NAME`, `DEFAULT_CHARACTER_SET_NAME` as `CHARSET`, `DEFAULT_COLLATION_NAME` AS `COLLATION` FROM `INFORMATION_SCHEMA`.`SCHEMATA`\";\n                        indicesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`s`.`TABLE_SCHEMA` = '\" + database + \"' AND `s`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        indicesSql = \"SELECT `s`.* FROM `INFORMATION_SCHEMA`.`STATISTICS` `s` \" +\n                            \"LEFT JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `s`.`INDEX_NAME` = `rc`.`CONSTRAINT_NAME` \" +\n                            (\"WHERE (\" + indicesCondition + \") AND `s`.`INDEX_NAME` != 'PRIMARY' AND `rc`.`CONSTRAINT_NAME` IS NULL\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), database = _a[0], name = _a[1];\n                            if (!name) {\n                                name = database;\n                                database = _this.driver.database || currentDatabase;\n                            }\n                            return \"(`kcu`.`TABLE_SCHEMA` = '\" + database + \"' AND `kcu`.`TABLE_NAME` = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT `kcu`.`TABLE_SCHEMA`, `kcu`.`TABLE_NAME`, `kcu`.`CONSTRAINT_NAME`, `kcu`.`COLUMN_NAME`, `kcu`.`REFERENCED_TABLE_SCHEMA`, \" +\n                            \"`kcu`.`REFERENCED_TABLE_NAME`, `kcu`.`REFERENCED_COLUMN_NAME`, `rc`.`DELETE_RULE` `ON_DELETE`, `rc`.`UPDATE_RULE` `ON_UPDATE` \" +\n                            \"FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` `kcu` \" +\n                            \"INNER JOIN `INFORMATION_SCHEMA`.`REFERENTIAL_CONSTRAINTS` `rc` ON `rc`.`constraint_name` = `kcu`.`constraint_name` \" +\n                            \"WHERE \" + foreignKeysCondition;\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(primaryKeySql),\n                                this.query(collationsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql)\n                            ])];\n                    case 2:\n                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 6]), dbTables = _a[0], dbColumns = _a[1], dbPrimaryKeys = _a[2], dbCollations = _a[3], dbIndices = _a[4], dbForeignKeys = _a[5];\n                        // if tables were not found in the db, no need to proceed\n                        if (!dbTables.length)\n                            return [2 /*return*/, []];\n                        // create tables for loaded tables\n                        return [2 /*return*/, Promise.all(dbTables.map(function (dbTable) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var table, dbCollation, defaultCollation, defaultCharset, db, tableFullName, tableForeignKeyConstraints, tableIndexConstraints;\n                                var _this = this;\n                                return tslib_1.__generator(this, function (_a) {\n                                    table = new Table();\n                                    dbCollation = dbCollations.find(function (coll) { return coll[\"SCHEMA_NAME\"] === dbTable[\"TABLE_SCHEMA\"]; });\n                                    defaultCollation = dbCollation[\"COLLATION\"];\n                                    defaultCharset = dbCollation[\"CHARSET\"];\n                                    db = dbTable[\"TABLE_SCHEMA\"] === currentDatabase ? undefined : dbTable[\"TABLE_SCHEMA\"];\n                                    table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], undefined, db);\n                                    tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], undefined, dbTable[\"TABLE_SCHEMA\"]);\n                                    // create columns from the loaded columns\n                                    table.columns = dbColumns\n                                        .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], undefined, dbColumn[\"TABLE_SCHEMA\"]) === tableFullName; })\n                                        .map(function (dbColumn) {\n                                        var columnUniqueIndex = dbIndices.find(function (dbIndex) {\n                                            var indexTableFullName = _this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], undefined, dbIndex[\"TABLE_SCHEMA\"]);\n                                            if (indexTableFullName !== tableFullName) {\n                                                return false;\n                                            }\n                                            // Index is not for this column\n                                            if (dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]) {\n                                                return false;\n                                            }\n                                            var nonUnique = parseInt(dbIndex[\"NON_UNIQUE\"], 10);\n                                            return nonUnique === 0;\n                                        });\n                                        var tableMetadata = _this.connection.entityMetadatas.find(function (metadata) { return metadata.tablePath === table.name; });\n                                        var hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices\n                                            .some(function (index) { return index.name === columnUniqueIndex[\"INDEX_NAME\"] && index.synchronize === false; });\n                                        var isConstraintComposite = columnUniqueIndex\n                                            ? !!dbIndices.find(function (dbIndex) { return dbIndex[\"INDEX_NAME\"] === columnUniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]; })\n                                            : false;\n                                        var tableColumn = new TableColumn();\n                                        tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                                        tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                                        if (_this.driver.withWidthColumnTypes.indexOf(tableColumn.type) !== -1) {\n                                            var width = dbColumn[\"COLUMN_TYPE\"].substring(dbColumn[\"COLUMN_TYPE\"].indexOf(\"(\") + 1, dbColumn[\"COLUMN_TYPE\"].indexOf(\")\"));\n                                            tableColumn.width = width && !_this.isDefaultColumnWidth(table, tableColumn, parseInt(width)) ? parseInt(width) : undefined;\n                                        }\n                                        if (dbColumn[\"COLUMN_DEFAULT\"] === null\n                                            || dbColumn[\"COLUMN_DEFAULT\"] === undefined) {\n                                            tableColumn.default = undefined;\n                                        }\n                                        else {\n                                            tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] === \"CURRENT_TIMESTAMP\" ? dbColumn[\"COLUMN_DEFAULT\"] : \"'\" + dbColumn[\"COLUMN_DEFAULT\"] + \"'\";\n                                        }\n                                        if (dbColumn[\"EXTRA\"].indexOf(\"on update\") !== -1) {\n                                            tableColumn.onUpdate = dbColumn[\"EXTRA\"].substring(dbColumn[\"EXTRA\"].indexOf(\"on update\") + 10);\n                                        }\n                                        if (dbColumn[\"GENERATION_EXPRESSION\"]) {\n                                            tableColumn.asExpression = dbColumn[\"GENERATION_EXPRESSION\"];\n                                            tableColumn.generatedType = dbColumn[\"EXTRA\"].indexOf(\"VIRTUAL\") !== -1 ? \"VIRTUAL\" : \"STORED\";\n                                        }\n                                        tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;\n                                        tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                                        tableColumn.isPrimary = dbPrimaryKeys.some(function (dbPrimaryKey) {\n                                            return _this.driver.buildTableName(dbPrimaryKey[\"TABLE_NAME\"], undefined, dbPrimaryKey[\"TABLE_SCHEMA\"]) === tableFullName && dbPrimaryKey[\"COLUMN_NAME\"] === tableColumn.name;\n                                        });\n                                        tableColumn.zerofill = dbColumn[\"COLUMN_TYPE\"].indexOf(\"zerofill\") !== -1;\n                                        tableColumn.unsigned = tableColumn.zerofill ? true : dbColumn[\"COLUMN_TYPE\"].indexOf(\"unsigned\") !== -1;\n                                        tableColumn.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\n                                        if (tableColumn.isGenerated)\n                                            tableColumn.generationStrategy = \"increment\";\n                                        tableColumn.comment = dbColumn[\"COLUMN_COMMENT\"];\n                                        if (dbColumn[\"CHARACTER_SET_NAME\"])\n                                            tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"] === defaultCharset ? undefined : dbColumn[\"CHARACTER_SET_NAME\"];\n                                        if (dbColumn[\"COLLATION_NAME\"])\n                                            tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation ? undefined : dbColumn[\"COLLATION_NAME\"];\n                                        // check only columns that have length property\n                                        if (_this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                                            var length_1 = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                                            tableColumn.length = !_this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : \"\";\n                                        }\n                                        if (tableColumn.type === \"decimal\" || tableColumn.type === \"double\" || tableColumn.type === \"float\") {\n                                            if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                                                tableColumn.precision = parseInt(dbColumn[\"NUMERIC_PRECISION\"]);\n                                            if (dbColumn[\"NUMERIC_SCALE\"] !== null && !_this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                                                tableColumn.scale = parseInt(dbColumn[\"NUMERIC_SCALE\"]);\n                                        }\n                                        if (tableColumn.type === \"enum\" || tableColumn.type === \"simple-enum\") {\n                                            var colType = dbColumn[\"COLUMN_TYPE\"];\n                                            var items = colType.substring(colType.indexOf(\"(\") + 1, colType.indexOf(\")\")).split(\",\");\n                                            tableColumn.enum = items.map(function (item) {\n                                                return item.substring(1, item.length - 1);\n                                            });\n                                            tableColumn.length = \"\";\n                                        }\n                                        if ((tableColumn.type === \"datetime\" || tableColumn.type === \"time\" || tableColumn.type === \"timestamp\")\n                                            && dbColumn[\"DATETIME_PRECISION\"] !== null && dbColumn[\"DATETIME_PRECISION\"] !== undefined\n                                            && !_this.isDefaultColumnPrecision(table, tableColumn, parseInt(dbColumn[\"DATETIME_PRECISION\"]))) {\n                                            tableColumn.precision = parseInt(dbColumn[\"DATETIME_PRECISION\"]);\n                                        }\n                                        return tableColumn;\n                                    });\n                                    tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                                        return _this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], undefined, dbForeignKey[\"TABLE_SCHEMA\"]) === tableFullName;\n                                    }), function (dbForeignKey) { return dbForeignKey[\"CONSTRAINT_NAME\"]; });\n                                    table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                                        var foreignKeys = dbForeignKeys.filter(function (dbFk) { return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]; });\n                                        // if referenced table located in currently used db, we don't need to concat db name to table name.\n                                        var database = dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"] === currentDatabase ? undefined : dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"];\n                                        var referencedTableName = _this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], undefined, database);\n                                        return new TableForeignKey({\n                                            name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                                            columnNames: foreignKeys.map(function (dbFk) { return dbFk[\"COLUMN_NAME\"]; }),\n                                            referencedTableName: referencedTableName,\n                                            referencedColumnNames: foreignKeys.map(function (dbFk) { return dbFk[\"REFERENCED_COLUMN_NAME\"]; }),\n                                            onDelete: dbForeignKey[\"ON_DELETE\"],\n                                            onUpdate: dbForeignKey[\"ON_UPDATE\"]\n                                        });\n                                    });\n                                    tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(function (dbIndex) {\n                                        return _this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], undefined, dbIndex[\"TABLE_SCHEMA\"]) === tableFullName;\n                                    }), function (dbIndex) { return dbIndex[\"INDEX_NAME\"]; });\n                                    table.indices = tableIndexConstraints.map(function (constraint) {\n                                        var indices = dbIndices.filter(function (index) {\n                                            return index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"]\n                                                && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                                                && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                                        });\n                                        var nonUnique = parseInt(constraint[\"NON_UNIQUE\"], 10);\n                                        return new TableIndex({\n                                            table: table,\n                                            name: constraint[\"INDEX_NAME\"],\n                                            columnNames: indices.map(function (i) { return i[\"COLUMN_NAME\"]; }),\n                                            isUnique: nonUnique === 0,\n                                            isSpatial: constraint[\"INDEX_TYPE\"] === \"SPATIAL\",\n                                            isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\n                                        });\n                                    });\n                                    return [2 /*return*/, table];\n                                });\n                            }); }))];\n                }\n            });\n        });\n    };\n    /**\n     * Builds create table sql\n     */\n    AuroraDataApiQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n        var _this = this;\n        var columnDefinitions = table.columns.map(function (column) { return _this.buildCreateColumnSql(column, true); }).join(\", \");\n        var sql = \"CREATE TABLE \" + this.escapePath(table) + \" (\" + columnDefinitions;\n        // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter(function (column) { return column.isUnique; })\n            .forEach(function (column) {\n            var isUniqueIndexExist = table.indices.some(function (index) {\n                return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\n            });\n            var isUniqueConstraintExist = table.uniques.some(function (unique) {\n                return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\n            });\n            if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                table.indices.push(new TableIndex({\n                    name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                    columnNames: [column.name],\n                    isUnique: true\n                }));\n        });\n        // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach(function (unique) {\n                var uniqueExist = table.indices.some(function (index) { return index.name === unique.name; });\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true\n                    }));\n                }\n            });\n        }\n        if (table.indices.length > 0) {\n            var indicesSql = table.indices.map(function (index) {\n                var columnNames = index.columnNames.map(function (columnName) { return \"`\" + columnName + \"`\"; }).join(\", \");\n                if (!index.name)\n                    index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                var indexType = \"\";\n                if (index.isUnique)\n                    indexType += \"UNIQUE \";\n                if (index.isSpatial)\n                    indexType += \"SPATIAL \";\n                if (index.isFulltext)\n                    indexType += \"FULLTEXT \";\n                return indexType + \"INDEX `\" + index.name + \"` (\" + columnNames + \")\";\n            }).join(\", \");\n            sql += \", \" + indicesSql;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            var foreignKeysSql = table.foreignKeys.map(function (fk) {\n                var columnNames = fk.columnNames.map(function (columnName) { return \"`\" + columnName + \"`\"; }).join(\", \");\n                if (!fk.name)\n                    fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\n                var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) { return \"`\" + columnName + \"`\"; }).join(\", \");\n                var constraint = \"CONSTRAINT `\" + fk.name + \"` FOREIGN KEY (\" + columnNames + \") REFERENCES \" + _this.escapePath(fk.referencedTableName) + \" (\" + referencedColumnNames + \")\";\n                if (fk.onDelete)\n                    constraint += \" ON DELETE \" + fk.onDelete;\n                if (fk.onUpdate)\n                    constraint += \" ON UPDATE \" + fk.onUpdate;\n                return constraint;\n            }).join(\", \");\n            sql += \", \" + foreignKeysSql;\n        }\n        if (table.primaryColumns.length > 0) {\n            var columnNames = table.primaryColumns.map(function (column) { return \"`\" + column.name + \"`\"; }).join(\", \");\n            sql += \", PRIMARY KEY (\" + columnNames + \")\";\n        }\n        sql += \") ENGINE=\" + (table.engine || \"InnoDB\");\n        return new Query(sql);\n    };\n    /**\n     * Builds drop table sql\n     */\n    AuroraDataApiQueryRunner.prototype.dropTableSql = function (tableOrName) {\n        return new Query(\"DROP TABLE \" + this.escapePath(tableOrName));\n    };\n    AuroraDataApiQueryRunner.prototype.createViewSql = function (view) {\n        if (typeof view.expression === \"string\") {\n            return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression);\n        }\n        else {\n            return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression(this.connection).getQuery());\n        }\n    };\n    AuroraDataApiQueryRunner.prototype.insertViewDefinitionSql = function (view) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentDatabase, expression, _a, query, parameters;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 1:\n                        currentDatabase = _b.sent();\n                        expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                        _a = tslib_1.__read(this.connection.createQueryBuilder()\n                            .insert()\n                            .into(this.getTypeormMetadataTableName())\n                            .values({ type: \"VIEW\", schema: currentDatabase, name: view.name, value: expression })\n                            .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n                        return [2 /*return*/, new Query(query, parameters)];\n                }\n            });\n        });\n    };\n    /**\n     * Builds drop view sql.\n     */\n    AuroraDataApiQueryRunner.prototype.dropViewSql = function (viewOrPath) {\n        return new Query(\"DROP VIEW \" + this.escapePath(viewOrPath));\n    };\n    /**\n     * Builds remove view sql.\n     */\n    AuroraDataApiQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentDatabase, viewName, qb, _a, query, parameters;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.getCurrentDatabase()];\n                    case 1:\n                        currentDatabase = _b.sent();\n                        viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n                        qb = this.connection.createQueryBuilder();\n                        _a = tslib_1.__read(qb.delete()\n                            .from(this.getTypeormMetadataTableName())\n                            .where(qb.escape(\"type\") + \" = 'VIEW'\")\n                            .andWhere(qb.escape(\"schema\") + \" = :schema\", { schema: currentDatabase })\n                            .andWhere(qb.escape(\"name\") + \" = :name\", { name: viewName })\n                            .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n                        return [2 /*return*/, new Query(query, parameters)];\n                }\n            });\n        });\n    };\n    /**\n     * Builds create index sql.\n     */\n    AuroraDataApiQueryRunner.prototype.createIndexSql = function (table, index) {\n        var columns = index.columnNames.map(function (columnName) { return \"`\" + columnName + \"`\"; }).join(\", \");\n        var indexType = \"\";\n        if (index.isUnique)\n            indexType += \"UNIQUE \";\n        if (index.isSpatial)\n            indexType += \"SPATIAL \";\n        if (index.isFulltext)\n            indexType += \"FULLTEXT \";\n        return new Query(\"CREATE \" + indexType + \"INDEX `\" + index.name + \"` ON \" + this.escapePath(table) + \" (\" + columns + \")\");\n    };\n    /**\n     * Builds drop index sql.\n     */\n    AuroraDataApiQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {\n        var indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(\"DROP INDEX `\" + indexName + \"` ON \" + this.escapePath(table));\n    };\n    /**\n     * Builds create primary key sql.\n     */\n    AuroraDataApiQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n        var columnNamesString = columnNames.map(function (columnName) { return \"`\" + columnName + \"`\"; }).join(\", \");\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD PRIMARY KEY (\" + columnNamesString + \")\");\n    };\n    /**\n     * Builds drop primary key sql.\n     */\n    AuroraDataApiQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP PRIMARY KEY\");\n    };\n    /**\n     * Builds create foreign key sql.\n     */\n    AuroraDataApiQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {\n        var columnNames = foreignKey.columnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\", \");\n        var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) { return \"`\" + column + \"`\"; }).join(\",\");\n        var sql = \"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT `\" + foreignKey.name + \"` FOREIGN KEY (\" + columnNames + \") \" +\n            (\"REFERENCES \" + this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n        if (foreignKey.onDelete)\n            sql += \" ON DELETE \" + foreignKey.onDelete;\n        if (foreignKey.onUpdate)\n            sql += \" ON UPDATE \" + foreignKey.onUpdate;\n        return new Query(sql);\n    };\n    /**\n     * Builds drop foreign key sql.\n     */\n    AuroraDataApiQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {\n        var foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP FOREIGN KEY `\" + foreignKeyName + \"`\");\n    };\n    AuroraDataApiQueryRunner.prototype.parseTableName = function (target) {\n        var tableName = target instanceof Table ? target.name : target;\n        return {\n            database: tableName.indexOf(\".\") !== -1 ? tableName.split(\".\")[0] : this.driver.database,\n            tableName: tableName.indexOf(\".\") !== -1 ? tableName.split(\".\")[1] : tableName\n        };\n    };\n    /**\n     * Escapes given table or view path.\n     */\n    AuroraDataApiQueryRunner.prototype.escapePath = function (target, disableEscape) {\n        var tableName = target instanceof Table || target instanceof View ? target.name : target;\n        return tableName.split(\".\").map(function (i) { return disableEscape ? i : \"`\" + i + \"`\"; }).join(\".\");\n    };\n    /**\n     * Builds a part of query to create/change a column.\n     */\n    AuroraDataApiQueryRunner.prototype.buildCreateColumnSql = function (column, skipPrimary, skipName) {\n        if (skipName === void 0) { skipName = false; }\n        var c = \"\";\n        if (skipName) {\n            c = this.connection.driver.createFullType(column);\n        }\n        else {\n            c = \"`\" + column.name + \"` \" + this.connection.driver.createFullType(column);\n        }\n        if (column.asExpression)\n            c += \" AS (\" + column.asExpression + \") \" + (column.generatedType ? column.generatedType : \"VIRTUAL\");\n        // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.\n        if (column.zerofill) {\n            c += \" ZEROFILL\";\n        }\n        else if (column.unsigned) {\n            c += \" UNSIGNED\";\n        }\n        if (column.enum)\n            c += \" (\" + column.enum.map(function (value) { return \"'\" + value + \"'\"; }).join(\", \") + \")\";\n        if (column.charset)\n            c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\n        if (column.collation)\n            c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\n        if (!column.isNullable)\n            c += \" NOT NULL\";\n        if (column.isNullable)\n            c += \" NULL\";\n        if (column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTO_INCREMENT\";\n        if (column.comment)\n            c += \" COMMENT '\" + column.comment + \"'\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n        if (column.onUpdate)\n            c += \" ON UPDATE \" + column.onUpdate;\n        return c;\n    };\n    return AuroraDataApiQueryRunner;\n}(BaseQueryRunner));\nexport { AuroraDataApiQueryRunner };\n\n//# sourceMappingURL=AuroraDataApiQueryRunner.js.map\n","import * as tslib_1 from \"tslib\";\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverUtils } from \"../DriverUtils\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { CockroachQueryRunner } from \"./CockroachQueryRunner\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\n/**\n * Organizes communication with Cockroach DBMS.\n */\nvar CockroachDriver = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function CockroachDriver(connection) {\n        /**\n         * Pool for slave databases.\n         * Used in replication.\n         */\n        this.slaves = [];\n        /**\n         * We store all created query runners because we need to release them.\n         */\n        this.connectedQueryRunners = [];\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.cockroachlabs.com/docs/stable/data-types.html\n         */\n        this.supportedDataTypes = [\n            \"array\",\n            \"bool\",\n            \"boolean\",\n            \"bytes\",\n            \"bytea\",\n            \"blob\",\n            \"date\",\n            \"numeric\",\n            \"decimal\",\n            \"dec\",\n            \"float\",\n            \"float4\",\n            \"float8\",\n            \"double precision\",\n            \"real\",\n            \"inet\",\n            \"int\",\n            \"int4\",\n            \"integer\",\n            \"int2\",\n            \"int8\",\n            \"int64\",\n            \"smallint\",\n            \"bigint\",\n            \"interval\",\n            \"string\",\n            \"character varying\",\n            \"character\",\n            \"char\",\n            \"char varying\",\n            \"varchar\",\n            \"text\",\n            \"time\",\n            \"time without time zone\",\n            \"timestamp\",\n            \"timestamptz\",\n            \"timestamp without time zone\",\n            \"timestamp with time zone\",\n            \"json\",\n            \"jsonb\",\n            \"uuid\",\n        ];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"character varying\",\n            \"char varying\",\n            \"varchar\",\n            \"character\",\n            \"char\",\n            \"string\",\n        ];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [\n            \"numeric\",\n            \"decimal\",\n            \"dec\",\n        ];\n        /**\n         * Gets list of column data types that support scale by a driver.\n         */\n        this.withScaleColumnTypes = [\n            \"numeric\",\n            \"decimal\",\n            \"dec\"\n        ];\n        /**\n         * Orm has special columns and we need to know what database column types should be for those types.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"timestamptz\",\n            createDateDefault: \"now()\",\n            updateDate: \"timestamptz\",\n            updateDateDefault: \"now()\",\n            deleteDate: \"timestamptz\",\n            deleteDateNullable: true,\n            version: Number,\n            treeLevel: Number,\n            migrationId: Number,\n            migrationName: \"varchar\",\n            migrationTimestamp: \"int8\",\n            cacheId: Number,\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"int8\",\n            cacheDuration: Number,\n            cacheQuery: \"string\",\n            cacheResult: \"string\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"string\",\n        };\n        /**\n         * Default values of length, precision and scale depends on column data type.\n         * Used in the cases when length/precision/scale is not specified by user.\n         */\n        this.dataTypeDefaults = {\n            \"char\": { length: 1 },\n        };\n        this.connection = connection;\n        this.options = connection.options;\n        this.isReplicated = this.options.replication ? true : false;\n        // load postgres package\n        this.loadDependencies();\n        // ObjectUtils.assign(this.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // todo: revisit validation with replication in mind\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.database)\n        //     throw new DriverOptionNotSetError(\"database\");\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    CockroachDriver.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c;\n            var _this = this;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!this.options.replication) return [3 /*break*/, 3];\n                        _a = this;\n                        return [4 /*yield*/, Promise.all(this.options.replication.slaves.map(function (slave) {\n                                return _this.createPool(_this.options, slave);\n                            }))];\n                    case 1:\n                        _a.slaves = _d.sent();\n                        _b = this;\n                        return [4 /*yield*/, this.createPool(this.options, this.options.replication.master)];\n                    case 2:\n                        _b.master = _d.sent();\n                        this.database = this.options.replication.master.database;\n                        return [3 /*break*/, 5];\n                    case 3:\n                        _c = this;\n                        return [4 /*yield*/, this.createPool(this.options, this.options)];\n                    case 4:\n                        _c.master = _d.sent();\n                        this.database = this.options.database;\n                        _d.label = 5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    CockroachDriver.prototype.afterConnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve()];\n            });\n        });\n    };\n    /**\n     * Closes connection with database.\n     */\n    CockroachDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.master)\n                            return [2 /*return*/, Promise.reject(new ConnectionIsNotSetError(\"cockroachdb\"))];\n                        return [4 /*yield*/, this.closePool(this.master)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, Promise.all(this.slaves.map(function (slave) { return _this.closePool(slave); }))];\n                    case 2:\n                        _a.sent();\n                        this.master = undefined;\n                        this.slaves = [];\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    CockroachDriver.prototype.createSchemaBuilder = function () {\n        return new RdbmsSchemaBuilder(this.connection);\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    CockroachDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        return new CockroachQueryRunner(this, mode);\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    CockroachDriver.prototype.preparePersistentValue = function (value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamptz\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            return DateUtils.mixedDateToDate(value);\n        }\n        else if (tslib_1.__spread([\"json\", \"jsonb\"], this.spatialTypes).indexOf(columnMetadata.type) >= 0) {\n            return JSON.stringify(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        return value;\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    CockroachDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n        // unique_rowid() generates bigint value and should not be converted to number\n        if (([Number, \"int4\", \"smallint\", \"int2\"].some(function (v) { return v === columnMetadata.type; })\n            && !columnMetadata.isArray) || columnMetadata.generationStrategy === \"increment\") {\n            value = parseInt(value);\n        }\n        else if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === Date\n            || columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"timestamptz\"\n            || columnMetadata.type === \"timestamp with time zone\"\n            || columnMetadata.type === \"timestamp without time zone\") {\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    };\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    CockroachDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {\n        var builtParameters = Object.keys(nativeParameters).map(function (key) { return nativeParameters[key]; });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n        var keys = Object.keys(parameters).map(function (parameter) { return \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\"; }).join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), function (key) {\n            var value;\n            var isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            }\n            else {\n                value = parameters[key.substr(1)];\n            }\n            if (isArray) {\n                return value.map(function (v) {\n                    builtParameters.push(v);\n                    return \"$\" + builtParameters.length;\n                }).join(\", \");\n            }\n            else if (value instanceof Function) {\n                return value();\n            }\n            else {\n                builtParameters.push(value);\n                return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    };\n    /**\n     * Escapes a column name.\n     */\n    CockroachDriver.prototype.escape = function (columnName) {\n        return \"\\\"\" + columnName + \"\\\"\";\n    };\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. \"mySchema\".\"myTable\"\n     */\n    CockroachDriver.prototype.buildTableName = function (tableName, schema) {\n        return schema ? schema + \".\" + tableName : tableName;\n    };\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    CockroachDriver.prototype.normalizeType = function (column) {\n        if (column.type === Number || column.type === \"integer\" || column.type === \"int\" || column.type === \"bigint\" || column.type === \"int64\") {\n            return \"int8\";\n        }\n        else if (column.type === String || column.type === \"character varying\" || column.type === \"char varying\") {\n            return \"varchar\";\n        }\n        else if (column.type === Date || column.type === \"timestamp without time zone\") {\n            return \"timestamp\";\n        }\n        else if (column.type === \"timestamp with time zone\") {\n            return \"timestamptz\";\n        }\n        else if (column.type === \"time without time zone\") {\n            return \"time\";\n        }\n        else if (column.type === Boolean || column.type === \"boolean\") {\n            return \"bool\";\n        }\n        else if (column.type === \"simple-array\" || column.type === \"simple-json\" || column.type === \"text\") {\n            return \"string\";\n        }\n        else if (column.type === \"bytea\" || column.type === \"blob\") {\n            return \"bytes\";\n        }\n        else if (column.type === \"smallint\") {\n            return \"int2\";\n        }\n        else if (column.type === \"numeric\" || column.type === \"dec\") {\n            return \"decimal\";\n        }\n        else if (column.type === \"double precision\" || column.type === \"float\") {\n            return \"float8\";\n        }\n        else if (column.type === \"real\") {\n            return \"float4\";\n        }\n        else if (column.type === \"character\") {\n            return \"char\";\n        }\n        else if (column.type === \"json\") {\n            return \"jsonb\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    };\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    CockroachDriver.prototype.normalizeDefault = function (columnMetadata) {\n        var defaultValue = columnMetadata.default;\n        var arrayCast = columnMetadata.isArray ? \"::\" + columnMetadata.type + \"[]\" : \"\";\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        }\n        else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"true\" : \"false\";\n        }\n        else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        else if (typeof defaultValue === \"string\") {\n            return \"'\" + defaultValue + \"'\" + arrayCast;\n        }\n        else if (defaultValue === null) {\n            return \"null\";\n        }\n        else if (typeof defaultValue === \"object\") {\n            return \"'\" + JSON.stringify(defaultValue) + \"'\";\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    CockroachDriver.prototype.normalizeIsUnique = function (column) {\n        return column.entityMetadata.uniques.some(function (uq) { return uq.columns.length === 1 && uq.columns[0] === column; });\n    };\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    CockroachDriver.prototype.getColumnLength = function (column) {\n        return column.length ? column.length.toString() : \"\";\n    };\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    CockroachDriver.prototype.createFullType = function (column) {\n        var type = column.type;\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    };\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    CockroachDriver.prototype.obtainMasterConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            _this.master.connect(function (err, connection, release) {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    };\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    CockroachDriver.prototype.obtainSlaveConnection = function () {\n        var _this = this;\n        if (!this.slaves.length)\n            return this.obtainMasterConnection();\n        return new Promise(function (ok, fail) {\n            var random = Math.floor(Math.random() * _this.slaves.length);\n            _this.slaves[random].connect(function (err, connection, release) {\n                err ? fail(err) : ok([connection, release]);\n            });\n        });\n    };\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     *\n     * todo: slow. optimize Object.keys(), OrmUtils.mergeDeep and column.createValueMap parts\n     */\n    CockroachDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n        var _this = this;\n        if (!insertResult)\n            return undefined;\n        return Object.keys(insertResult).reduce(function (map, key) {\n            var column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(map, column.createValueMap(_this.prepareHydratedValue(insertResult[key], column)));\n            }\n            return map;\n        }, {});\n    };\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    CockroachDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {\n        var _this = this;\n        return columnMetadatas.filter(function (columnMetadata) {\n            var tableColumn = tableColumns.find(function (c) { return c.name === columnMetadata.databaseName; });\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log(\"==========================================\");\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== _this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment // todo\n                || (!tableColumn.isGenerated && _this.lowerDefaultValueIfNecessary(_this.normalizeDefault(columnMetadata)) !== tableColumn.default) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata)\n                || tableColumn.isGenerated !== columnMetadata.isGenerated;\n        });\n    };\n    CockroachDriver.prototype.lowerDefaultValueIfNecessary = function (value) {\n        if (!value) {\n            return value;\n        }\n        return value.split(\"'\").map(function (v, i) {\n            return i % 2 === 1 ? v : v.toLowerCase();\n        }).join(\"'\");\n    };\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    CockroachDriver.prototype.isReturningSqlSupported = function () {\n        return true;\n    };\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    CockroachDriver.prototype.isUUIDGenerationSupported = function () {\n        return true;\n    };\n    /**\n     * Creates an escaped parameter.\n     */\n    CockroachDriver.prototype.createParameter = function (parameterName, index) {\n        return \"$\" + (index + 1);\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads postgres query stream package.\n     */\n    CockroachDriver.prototype.loadStreamDependency = function () {\n        try {\n            return PlatformTools.load(\"pg-query-stream\");\n        }\n        catch (e) { // todo: better error for browser env\n            throw new Error(\"To use streams you should install pg-query-stream package. Please run npm i pg-query-stream --save command.\");\n        }\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    CockroachDriver.prototype.loadDependencies = function () {\n        try {\n            this.postgres = PlatformTools.load(\"pg\");\n            try {\n                var pgNative = PlatformTools.load(\"pg-native\");\n                if (pgNative && this.postgres.native)\n                    this.postgres = this.postgres.native;\n            }\n            catch (e) { }\n        }\n        catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"Postgres\", \"pg\");\n        }\n    };\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    CockroachDriver.prototype.createPool = function (options, credentials) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var connectionOptions, pool, logger, poolErrorHandler;\n            return tslib_1.__generator(this, function (_a) {\n                credentials = Object.assign({}, credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\n                connectionOptions = Object.assign({}, {\n                    host: credentials.host,\n                    user: credentials.username,\n                    password: credentials.password,\n                    database: credentials.database,\n                    port: credentials.port,\n                    ssl: credentials.ssl\n                }, options.extra || {});\n                pool = new this.postgres.Pool(connectionOptions);\n                logger = this.connection.logger;\n                poolErrorHandler = options.poolErrorHandler || (function (error) { return logger.log(\"warn\", \"Postgres pool raised an error. \" + error); });\n                /*\n                  Attaching an error handler to pool errors is essential, as, otherwise, errors raised will go unhandled and\n                  cause the hosting app to crash.\n                 */\n                pool.on(\"error\", poolErrorHandler);\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        pool.connect(function (err, connection, release) {\n                            if (err)\n                                return fail(err);\n                            release();\n                            ok(pool);\n                        });\n                    })];\n            });\n        });\n    };\n    /**\n     * Closes connection pool.\n     */\n    CockroachDriver.prototype.closePool = function (pool) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.connectedQueryRunners.map(function (queryRunner) { return queryRunner.release(); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, new Promise(function (ok, fail) {\n                                pool.end(function (err) { return err ? fail(err) : ok(); });\n                            })];\n                }\n            });\n        });\n    };\n    return CockroachDriver;\n}());\nexport { CockroachDriver };\n\n//# sourceMappingURL=CockroachDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { PromiseUtils } from \"../../\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\";\n/**\n * Runs queries on a single postgres database connection.\n */\nvar CockroachQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(CockroachQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function CockroachQueryRunner(driver, mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        var _this = _super.call(this) || this;\n        /**\n         * Stores all executed queries to be able to run them again if transaction fails.\n         */\n        _this.queries = [];\n        /**\n         * Indicates if running queries must be stored\n         */\n        _this.storeQueries = false;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.mode = mode;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    CockroachQueryRunner.prototype.connect = function () {\n        var _this = this;\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(function (_a) {\n                var _b = tslib_1.__read(_a, 2), connection = _b[0], release = _b[1];\n                _this.driver.connectedQueryRunners.push(_this);\n                _this.databaseConnection = connection;\n                _this.releaseCallback = release;\n                return _this.databaseConnection;\n            });\n        }\n        else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(function (_a) {\n                var _b = tslib_1.__read(_a, 2), connection = _b[0], release = _b[1];\n                _this.driver.connectedQueryRunners.push(_this);\n                _this.databaseConnection = connection;\n                _this.releaseCallback = release;\n                return _this.databaseConnection;\n            });\n        }\n        return this.databaseConnectionPromise;\n    };\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    CockroachQueryRunner.prototype.release = function () {\n        this.isReleased = true;\n        if (this.releaseCallback)\n            this.releaseCallback();\n        var index = this.driver.connectedQueryRunners.indexOf(this);\n        if (index !== -1)\n            this.driver.connectedQueryRunners.splice(index);\n        return Promise.resolve();\n    };\n    /**\n     * Starts transaction.\n     */\n    CockroachQueryRunner.prototype.startTransaction = function (isolationLevel) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isTransactionActive)\n                            throw new TransactionAlreadyStartedError();\n                        this.isTransactionActive = true;\n                        return [4 /*yield*/, this.query(\"START TRANSACTION\")];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.query(\"SAVEPOINT cockroach_restart\")];\n                    case 2:\n                        _a.sent();\n                        if (!isolationLevel) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4:\n                        this.storeQueries = true;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    CockroachQueryRunner.prototype.commitTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var e_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isTransactionActive)\n                            throw new TransactionNotStartedError();\n                        this.storeQueries = false;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 4, , 9]);\n                        return [4 /*yield*/, this.query(\"RELEASE SAVEPOINT cockroach_restart\")];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.query(\"COMMIT\")];\n                    case 3:\n                        _a.sent();\n                        this.queries = [];\n                        this.isTransactionActive = false;\n                        return [3 /*break*/, 9];\n                    case 4:\n                        e_1 = _a.sent();\n                        if (!(e_1.code === \"40001\")) return [3 /*break*/, 8];\n                        return [4 /*yield*/, this.query(\"ROLLBACK TO SAVEPOINT cockroach_restart\")];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, PromiseUtils.runInSequence(this.queries, function (q) { return _this.query(q.query, q.parameters); })];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [3 /*break*/, 9];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    CockroachQueryRunner.prototype.rollbackTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isTransactionActive)\n                            throw new TransactionNotStartedError();\n                        this.storeQueries = false;\n                        return [4 /*yield*/, this.query(\"ROLLBACK\")];\n                    case 1:\n                        _a.sent();\n                        this.queries = [];\n                        this.isTransactionActive = false;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes a given SQL query.\n     */\n    CockroachQueryRunner.prototype.query = function (query, parameters, options) {\n        var _this = this;\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, queryStartTime_1, err_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        queryStartTime_1 = +new Date();\n                        databaseConnection.query(query, parameters, function (err, result) {\n                            if (_this.isTransactionActive && _this.storeQueries)\n                                _this.queries.push({ query: query, parameters: parameters });\n                            // log slow queries if maxQueryExecution time is set\n                            var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                            var queryEndTime = +new Date();\n                            var queryExecutionTime = queryEndTime - queryStartTime_1;\n                            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                                _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n                            if (err) {\n                                if (err.code !== \"40001\")\n                                    _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                                fail(new QueryFailedError(query, parameters, err));\n                            }\n                            else {\n                                switch (result.command) {\n                                    case \"DELETE\":\n                                        // for DELETE query additionally return number of affected rows\n                                        ok([result.rows, result.rowCount]);\n                                        break;\n                                    default:\n                                        ok(result.rows);\n                                }\n                            }\n                        });\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_1 = _a.sent();\n                        fail(err_1);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Returns raw data stream.\n     */\n    CockroachQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n        var _this = this;\n        var QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, stream, err_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        stream = databaseConnection.query(new QueryStream(query, parameters));\n                        if (onEnd)\n                            stream.on(\"end\", onEnd);\n                        if (onError)\n                            stream.on(\"error\", onError);\n                        ok(stream);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_2 = _a.sent();\n                        fail(err_2);\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Returns all available database names including system databases.\n     */\n    CockroachQueryRunner.prototype.getDatabases = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve([])];\n            });\n        });\n    };\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    CockroachQueryRunner.prototype.getSchemas = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve([])];\n            });\n        });\n    };\n    /**\n     * Checks if database with the given name exist.\n     */\n    CockroachQueryRunner.prototype.hasDatabase = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT * FROM \\\"pg_database\\\" WHERE \\\"datname\\\" = '\" + database + \"'\")];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if schema with the given name exist.\n     */\n    CockroachQueryRunner.prototype.hasSchema = function (schema) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT * FROM \\\"information_schema\\\".\\\"schemata\\\" WHERE \\\"schema_name\\\" = '\" + schema + \"'\")];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    CockroachQueryRunner.prototype.hasTable = function (tableOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var parsedTableName, sql, result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    CockroachQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var parsedTableName, sql, result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        parsedTableName = this.parseTableName(tableOrName);\n                        sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new database.\n     */\n    CockroachQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = \"CREATE DATABASE \" + (ifNotExist ? \"IF NOT EXISTS \" : \"\") + \" \\\"\" + database + \"\\\"\";\n                        down = \"DROP DATABASE \\\"\" + database + \"\\\"\";\n                        return [4 /*yield*/, this.executeQueries(new Query(up), new Query(down))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops database.\n     */\n    CockroachQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = \"DROP DATABASE \" + (ifExist ? \"IF EXISTS \" : \"\") + \" \\\"\" + database + \"\\\"\";\n                        down = \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n                        return [4 /*yield*/, this.executeQueries(new Query(up), new Query(down))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new table schema.\n     */\n    CockroachQueryRunner.prototype.createSchema = function (schema, ifNotExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var up, down;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        up = ifNotExist ? \"CREATE SCHEMA IF NOT EXISTS \\\"\" + schema + \"\\\"\" : \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n                        down = \"DROP SCHEMA \\\"\" + schema + \"\\\" CASCADE\";\n                        return [4 /*yield*/, this.executeQueries(new Query(up), new Query(down))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops table schema.\n     */\n    CockroachQueryRunner.prototype.dropSchema = function (schemaPath, ifExist, isCascade) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var schema, up, down;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n                        up = ifExist ? \"DROP SCHEMA IF EXISTS \\\"\" + schema + \"\\\" \" + (isCascade ? \"CASCADE\" : \"\") : \"DROP SCHEMA \\\"\" + schema + \"\\\" \" + (isCascade ? \"CASCADE\" : \"\");\n                        down = \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n                        return [4 /*yield*/, this.executeQueries(new Query(up), new Query(down))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new table.\n     */\n    CockroachQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n        if (ifNotExist === void 0) { ifNotExist = false; }\n        if (createForeignKeys === void 0) { createForeignKeys = true; }\n        if (createIndices === void 0) { createIndices = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isTableExist, upQueries, downQueries;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!ifNotExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(table)];\n                    case 1:\n                        isTableExist = _a.sent();\n                        if (isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2:\n                        upQueries = [];\n                        downQueries = [];\n                        table.columns\n                            .filter(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; })\n                            .forEach(function (column) {\n                            upQueries.push(new Query(\"CREATE SEQUENCE \" + _this.buildSequenceName(table, column)));\n                            downQueries.push(new Query(\"DROP SEQUENCE \" + _this.buildSequenceName(table, column)));\n                        });\n                        upQueries.push(this.createTableSql(table, createForeignKeys));\n                        downQueries.push(this.dropTableSql(table));\n                        // if createForeignKeys is true, we must drop created foreign keys in down query.\n                        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n                        if (createForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return downQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        if (createIndices) {\n                            table.indices\n                                .filter(function (index) { return !index.isUnique; })\n                                .forEach(function (index) {\n                                // new index may be passed without name. In this case we generate index name manually.\n                                if (!index.name)\n                                    index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                                upQueries.push(_this.createIndexSql(table, index));\n                                downQueries.push(_this.dropIndexSql(table, index));\n                            });\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the table.\n     */\n    CockroachQueryRunner.prototype.dropTable = function (target, ifExist, dropForeignKeys, dropIndices) {\n        if (dropForeignKeys === void 0) { dropForeignKeys = true; }\n        if (dropIndices === void 0) { dropIndices = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isTableExist, createForeignKeys, tableName, table, upQueries, downQueries;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!ifExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(target)];\n                    case 1:\n                        isTableExist = _a.sent();\n                        if (!isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2:\n                        createForeignKeys = dropForeignKeys;\n                        tableName = target instanceof Table ? target.name : target;\n                        return [4 /*yield*/, this.getCachedTable(tableName)];\n                    case 3:\n                        table = _a.sent();\n                        upQueries = [];\n                        downQueries = [];\n                        // foreign keys must be dropped before indices, because fk's rely on indices\n                        if (dropForeignKeys)\n                            table.foreignKeys.forEach(function (foreignKey) { return upQueries.push(_this.dropForeignKeySql(table, foreignKey)); });\n                        if (dropIndices) {\n                            table.indices.forEach(function (index) {\n                                upQueries.push(_this.dropIndexSql(table, index));\n                                downQueries.push(_this.createIndexSql(table, index));\n                            });\n                        }\n                        upQueries.push(this.dropTableSql(table));\n                        downQueries.push(this.createTableSql(table, createForeignKeys));\n                        table.columns\n                            .filter(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; })\n                            .forEach(function (column) {\n                            upQueries.push(new Query(\"DROP SEQUENCE \" + _this.buildSequenceName(table, column)));\n                            downQueries.push(new Query(\"CREATE SEQUENCE \" + _this.buildSequenceName(table, column)));\n                        });\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new view.\n     */\n    CockroachQueryRunner.prototype.createView = function (view) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, _a, _b, _c, _d;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(this.createViewSql(view));\n                        _b = (_a = upQueries).push;\n                        return [4 /*yield*/, this.insertViewDefinitionSql(view)];\n                    case 1:\n                        _b.apply(_a, [_e.sent()]);\n                        downQueries.push(this.dropViewSql(view));\n                        _d = (_c = downQueries).push;\n                        return [4 /*yield*/, this.deleteViewDefinitionSql(view)];\n                    case 2:\n                        _d.apply(_c, [_e.sent()]);\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 3:\n                        _e.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the view.\n     */\n    CockroachQueryRunner.prototype.dropView = function (target) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var viewName, view, upQueries, downQueries, _a, _b, _c, _d;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        viewName = target instanceof View ? target.name : target;\n                        return [4 /*yield*/, this.getCachedView(viewName)];\n                    case 1:\n                        view = _e.sent();\n                        upQueries = [];\n                        downQueries = [];\n                        _b = (_a = upQueries).push;\n                        return [4 /*yield*/, this.deleteViewDefinitionSql(view)];\n                    case 2:\n                        _b.apply(_a, [_e.sent()]);\n                        upQueries.push(this.dropViewSql(view));\n                        _d = (_c = downQueries).push;\n                        return [4 /*yield*/, this.insertViewDefinitionSql(view)];\n                    case 3:\n                        _d.apply(_c, [_e.sent()]);\n                        downQueries.push(this.createViewSql(view));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _e.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames the given table.\n     */\n    CockroachQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, oldTable, _a, newTable, oldTableName, schemaName, columnNames, oldPkName, newPkName;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!(oldTableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = oldTableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(oldTableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        oldTable = _a;\n                        newTable = oldTable.clone();\n                        oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n                        schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n                        newTable.name = schemaName ? schemaName + \".\" + newTableName : newTableName;\n                        upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(oldTable) + \" RENAME TO \\\"\" + newTableName + \"\\\"\"));\n                        downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" RENAME TO \\\"\" + oldTableName + \"\\\"\"));\n                        // rename column primary key constraint\n                        if (newTable.primaryColumns.length > 0) {\n                            columnNames = newTable.primaryColumns.map(function (column) { return column.name; });\n                            oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n                            newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + oldPkName + \"\\\" TO \\\"\" + newPkName + \"\\\"\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + newPkName + \"\\\" TO \\\"\" + oldPkName + \"\\\"\"));\n                        }\n                        // rename unique constraints\n                        newTable.uniques.forEach(function (unique) {\n                            // build new constraint name\n                            var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n                            // build queries\n                            upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + unique.name + \"\\\" TO \\\"\" + newUniqueName + \"\\\"\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + newUniqueName + \"\\\" TO \\\"\" + unique.name + \"\\\"\"));\n                            // replace constraint name\n                            unique.name = newUniqueName;\n                        });\n                        // rename index constraints\n                        newTable.indices.forEach(function (index) {\n                            // build new constraint name\n                            var schema = _this.extractSchema(newTable);\n                            var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n                            // build queries\n                            var up = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\" : \"ALTER INDEX \\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\";\n                            var down = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\" : \"ALTER INDEX \\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\";\n                            upQueries.push(new Query(up));\n                            downQueries.push(new Query(down));\n                            // replace constraint name\n                            index.name = newIndexName;\n                        });\n                        // rename foreign key constraints\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            // build new constraint name\n                            var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n                            // build queries\n                            upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + foreignKey.name + \"\\\" TO \\\"\" + newForeignKeyName + \"\\\"\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + newForeignKeyName + \"\\\" TO \\\"\" + foreignKey.name + \"\\\"\"));\n                            // replace constraint name\n                            foreignKey.name = newForeignKeyName;\n                        });\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new column from the column in the table.\n     */\n    CockroachQueryRunner.prototype.addColumn = function (tableOrName, column) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, upQueries, downQueries, primaryColumns, pkName_1, columnNames_1, pkName, columnNames, columnIndex, unique, uniqueConstraint;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        if (column.generationStrategy === \"increment\") {\n                            throw new Error(\"Adding sequential generated columns into existing table is not supported\");\n                        }\n                        upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(table, column)));\n                        downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\"));\n                        // create or update primary key constraint\n                        if (column.isPrimary) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            // if table already have primary key, me must drop it and recreate again\n                            // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141\n                            if (primaryColumns.length > 0) {\n                                pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames_1 = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_1 + \"\\\"\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_1 + \"\\\" PRIMARY KEY (\" + columnNames_1 + \")\"));\n                            }\n                            primaryColumns.push(column);\n                            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                            columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            // CockroachDB stores unique indices as UNIQUE constraints\n                            if (columnIndex.isUnique) {\n                                unique = new TableUnique({\n                                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, columnIndex.columnNames),\n                                    columnNames: columnIndex.columnNames\n                                });\n                                upQueries.push(this.createUniqueConstraintSql(table, unique));\n                                downQueries.push(this.dropIndexSql(table, unique));\n                                clonedTable.uniques.push(unique);\n                            }\n                            else {\n                                upQueries.push(this.createIndexSql(table, columnIndex));\n                                downQueries.push(this.dropIndexSql(table, columnIndex));\n                            }\n                        }\n                        // create unique constraint\n                        if (column.isUnique) {\n                            uniqueConstraint = new TableUnique({\n                                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                                columnNames: [column.name]\n                            });\n                            clonedTable.uniques.push(uniqueConstraint);\n                            upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));\n                            downQueries.push(this.dropIndexSql(table, uniqueConstraint.name)); // CockroachDB creates indices for unique constraints\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.addColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    CockroachQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(columns, function (column) { return _this.addColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames column in the given table.\n     */\n    CockroachQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, oldColumn, newColumn;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) { return c.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        if (newTableColumnOrName instanceof TableColumn) {\n                            newColumn = newTableColumnOrName;\n                        }\n                        else {\n                            newColumn = oldColumn.clone();\n                            newColumn.name = newTableColumnOrName;\n                        }\n                        return [2 /*return*/, this.changeColumn(table, oldColumn, newColumn)];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    CockroachQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, upQueries, downQueries, oldColumn, primaryColumns, columnNames, oldPkName, newPkName, oldTableColumn, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueConstraint, uniqueConstraint;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        oldColumn = oldTableColumnOrName instanceof TableColumn\n                            ? oldTableColumnOrName\n                            : table.columns.find(function (column) { return column.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        if (!(oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length)) return [3 /*break*/, 6];\n                        // To avoid data conversion, we just recreate column\n                        return [4 /*yield*/, this.dropColumn(table, oldColumn)];\n                    case 4:\n                        // To avoid data conversion, we just recreate column\n                        _b.sent();\n                        return [4 /*yield*/, this.addColumn(table, newColumn)];\n                    case 5:\n                        _b.sent();\n                        // update cloned table\n                        clonedTable = table.clone();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        if (oldColumn.name !== newColumn.name) {\n                            // rename column\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME COLUMN \\\"\" + oldColumn.name + \"\\\" TO \\\"\" + newColumn.name + \"\\\"\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME COLUMN \\\"\" + newColumn.name + \"\\\" TO \\\"\" + oldColumn.name + \"\\\"\"));\n                            // rename column primary key constraint\n                            if (oldColumn.isPrimary === true) {\n                                primaryColumns = clonedTable.primaryColumns;\n                                columnNames = primaryColumns.map(function (column) { return column.name; });\n                                oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                                // replace old column name with new column name\n                                columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                                columnNames.push(newColumn.name);\n                                newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + oldPkName + \"\\\" TO \\\"\" + newPkName + \"\\\"\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + newPkName + \"\\\" TO \\\"\" + oldPkName + \"\\\"\"));\n                            }\n                            // rename unique constraints\n                            clonedTable.findColumnUniques(oldColumn).forEach(function (unique) {\n                                // build new constraint name\n                                unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                                unique.columnNames.push(newColumn.name);\n                                var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n                                // build queries\n                                upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + unique.name + \"\\\" TO \\\"\" + newUniqueName + \"\\\"\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + newUniqueName + \"\\\" TO \\\"\" + unique.name + \"\\\"\"));\n                                // replace constraint name\n                                unique.name = newUniqueName;\n                            });\n                            // rename index constraints\n                            clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n                                // build new constraint name\n                                index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                                index.columnNames.push(newColumn.name);\n                                var schema = _this.extractSchema(table);\n                                var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n                                // build queries\n                                var up = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\" : \"ALTER INDEX \\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\";\n                                var down = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\" : \"ALTER INDEX \\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\";\n                                upQueries.push(new Query(up));\n                                downQueries.push(new Query(down));\n                                // replace constraint name\n                                index.name = newIndexName;\n                            });\n                            // rename foreign key constraints\n                            clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n                                // build new constraint name\n                                foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                                foreignKey.columnNames.push(newColumn.name);\n                                var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n                                // build queries\n                                upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + foreignKey.name + \"\\\" TO \\\"\" + newForeignKeyName + \"\\\"\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + newForeignKeyName + \"\\\" TO \\\"\" + foreignKey.name + \"\\\"\"));\n                                // replace constraint name\n                                foreignKey.name = newForeignKeyName;\n                            });\n                            oldTableColumn = clonedTable.columns.find(function (column) { return column.name === oldColumn.name; });\n                            clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n                            oldColumn.name = newColumn.name;\n                        }\n                        if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + this.driver.createFullType(newColumn)));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + this.driver.createFullType(oldColumn)));\n                        }\n                        if (oldColumn.isNullable !== newColumn.isNullable) {\n                            if (newColumn.isNullable) {\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" DROP NOT NULL\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" SET NOT NULL\"));\n                            }\n                            else {\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" SET NOT NULL\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" DROP NOT NULL\"));\n                            }\n                        }\n                        if (oldColumn.comment !== newColumn.comment) {\n                            upQueries.push(new Query(\"COMMENT ON COLUMN \" + this.escapePath(table) + \".\\\"\" + oldColumn.name + \"\\\" IS '\" + newColumn.comment + \"'\"));\n                            downQueries.push(new Query(\"COMMENT ON COLUMN \" + this.escapePath(table) + \".\\\"\" + newColumn.name + \"\\\" IS '\" + oldColumn.comment + \"'\"));\n                        }\n                        if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                            primaryColumns = clonedTable.primaryColumns;\n                            // if primary column state changed, we must always drop existed constraint.\n                            if (primaryColumns.length > 0) {\n                                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                            }\n                            if (newColumn.isPrimary === true) {\n                                primaryColumns.push(newColumn);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = true;\n                                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                            }\n                            else {\n                                primaryColumn = primaryColumns.find(function (c) { return c.name === newColumn.name; });\n                                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                                column = clonedTable.columns.find(function (column) { return column.name === newColumn.name; });\n                                column.isPrimary = false;\n                                // if we have another primary keys, we must recreate constraint.\n                                if (primaryColumns.length > 0) {\n                                    pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                                    columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                                    upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                                    downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                                }\n                            }\n                        }\n                        if (newColumn.isUnique !== oldColumn.isUnique) {\n                            if (newColumn.isUnique) {\n                                uniqueConstraint = new TableUnique({\n                                    name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                                    columnNames: [newColumn.name]\n                                });\n                                clonedTable.uniques.push(uniqueConstraint);\n                                upQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));\n                                // CockroachDB creates index for UNIQUE constraint.\n                                // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\n                                downQueries.push(this.dropIndexSql(table, uniqueConstraint));\n                            }\n                            else {\n                                uniqueConstraint = clonedTable.uniques.find(function (unique) {\n                                    return unique.columnNames.length === 1 && !!unique.columnNames.find(function (columnName) { return columnName === newColumn.name; });\n                                });\n                                clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);\n                                // CockroachDB creates index for UNIQUE constraint.\n                                // We must use DROP INDEX ... CASCADE instead of DROP CONSTRAINT.\n                                upQueries.push(this.dropIndexSql(table, uniqueConstraint));\n                                downQueries.push(this.createUniqueConstraintSql(table, uniqueConstraint));\n                            }\n                        }\n                        if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") {\n                            if (newColumn.isGenerated) {\n                                if (newColumn.generationStrategy === \"increment\") {\n                                    throw new Error(\"Adding sequential generated columns into existing table is not supported\");\n                                }\n                                else if (newColumn.generationStrategy === \"rowid\") {\n                                    upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT unique_rowid()\"));\n                                    downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n                                }\n                            }\n                            else {\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT unique_rowid()\"));\n                            }\n                        }\n                        if (newColumn.default !== oldColumn.default) {\n                            if (newColumn.default !== null && newColumn.default !== undefined) {\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT \" + newColumn.default));\n                                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                                    downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT \" + oldColumn.default));\n                                }\n                                else {\n                                    downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n                                }\n                            }\n                            else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT \" + oldColumn.default));\n                            }\n                        }\n                        _b.label = 7;\n                    case 7: return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 8:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    CockroachQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops column in the table.\n     */\n    CockroachQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, column, clonedTable, upQueries, downQueries, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, columnCheck, columnUnique;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n                        if (!column)\n                            throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n                        clonedTable = table.clone();\n                        upQueries = [];\n                        downQueries = [];\n                        // drop primary key constraint\n                        // todo: altering pk is not supported yet https://github.com/cockroachdb/cockroach/issues/19141\n                        if (column.isPrimary) {\n                            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) { return column.name; }));\n                            columnNames = clonedTable.primaryColumns.map(function (primaryColumn) { return \"\\\"\" + primaryColumn.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                            tableColumn = clonedTable.findColumnByName(column.name);\n                            tableColumn.isPrimary = false;\n                            // if primary key have multiple columns, we must recreate it without dropped column\n                            if (clonedTable.primaryColumns.length > 0) {\n                                pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) { return column.name; }));\n                                columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) { return \"\\\"\" + primaryColumn.name + \"\\\"\"; }).join(\", \");\n                                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName_2 + \"\\\" PRIMARY KEY (\" + columnNames_2 + \")\"));\n                                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName_2 + \"\\\"\"));\n                            }\n                        }\n                        columnIndex = clonedTable.indices.find(function (index) { return index.columnNames.length === 1 && index.columnNames[0] === column.name; });\n                        if (columnIndex) {\n                            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n                            upQueries.push(this.dropIndexSql(table, columnIndex));\n                            downQueries.push(this.createIndexSql(table, columnIndex));\n                        }\n                        columnCheck = clonedTable.checks.find(function (check) { return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name; });\n                        if (columnCheck) {\n                            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n                            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n                            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n                        }\n                        columnUnique = clonedTable.uniques.find(function (unique) { return unique.columnNames.length === 1 && unique.columnNames[0] === column.name; });\n                        if (columnUnique) {\n                            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n                            upQueries.push(this.dropIndexSql(table, columnUnique.name)); // CockroachDB creates indices for unique constraints\n                            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n                        }\n                        upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\"));\n                        downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(table, column)));\n                        if (column.generationStrategy === \"increment\") {\n                            upQueries.push(new Query(\"DROP SEQUENCE \" + this.buildSequenceName(table, column)));\n                            downQueries.push(new Query(\"CREATE SEQUENCE \" + this.buildSequenceName(table, column)));\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        clonedTable.removeColumn(column);\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the columns in the table.\n     */\n    CockroachQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(columns, function (column) { return _this.dropColumn(tableOrName, column); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new primary key.\n     */\n    CockroachQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        up = this.createPrimaryKeySql(table, columnNames);\n                        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n                        clonedTable.columns.forEach(function (column) {\n                            if (columnNames.find(function (columnName) { return columnName === column.name; }))\n                                column.isPrimary = true;\n                        });\n                        down = this.dropPrimaryKeySql(clonedTable);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    CockroachQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, clonedTable, columnNames, upQueries, downQueries, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        clonedTable = table.clone();\n                        columnNames = columns.map(function (column) { return column.name; });\n                        upQueries = [];\n                        downQueries = [];\n                        primaryColumns = clonedTable.primaryColumns;\n                        if (primaryColumns.length > 0) {\n                            pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) { return column.name; }));\n                            columnNamesString_1 = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_3 + \"\\\"\"));\n                            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_3 + \"\\\" PRIMARY KEY (\" + columnNamesString_1 + \")\"));\n                        }\n                        // update columns in table.\n                        clonedTable.columns\n                            .filter(function (column) { return columnNames.indexOf(column.name) !== -1; })\n                            .forEach(function (column) { return column.isPrimary = true; });\n                        pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n                        columnNamesString = columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                        upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n                        downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 4:\n                        _b.sent();\n                        this.replaceCachedTable(table, clonedTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a primary key.\n     */\n    CockroachQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        up = this.dropPrimaryKeySql(table);\n                        down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) { return column.name; }));\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.primaryColumns.forEach(function (column) {\n                            column.isPrimary = false;\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new unique constraint.\n     */\n    CockroachQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new unique constraint may be passed without name. In this case we generate unique name manually.\n                        if (!uniqueConstraint.name)\n                            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n                        up = this.createUniqueConstraintSql(table, uniqueConstraint);\n                        down = this.dropIndexSql(table, uniqueConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addUniqueConstraint(uniqueConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new unique constraints.\n     */\n    CockroachQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(uniqueConstraints, function (uniqueConstraint) { return _this.createUniqueConstraint(tableOrName, uniqueConstraint); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops unique constraint.\n     */\n    CockroachQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, uniqueConstraint, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(function (u) { return u.name === uniqueOrName; });\n                        if (!uniqueConstraint)\n                            throw new Error(\"Supplied unique constraint was not found in table \" + table.name);\n                        up = this.dropIndexSql(table, uniqueConstraint);\n                        down = this.createUniqueConstraintSql(table, uniqueConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeUniqueConstraint(uniqueConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops unique constraints.\n     */\n    CockroachQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(uniqueConstraints, function (uniqueConstraint) { return _this.dropUniqueConstraint(tableOrName, uniqueConstraint); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new check constraint.\n     */\n    CockroachQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new unique constraint may be passed without name. In this case we generate unique name manually.\n                        if (!checkConstraint.name)\n                            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);\n                        up = this.createCheckConstraintSql(table, checkConstraint);\n                        down = this.dropCheckConstraintSql(table, checkConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addCheckConstraint(checkConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new check constraints.\n     */\n    CockroachQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = checkConstraints.map(function (checkConstraint) { return _this.createCheckConstraint(tableOrName, checkConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraint.\n     */\n    CockroachQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, checkConstraint, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(function (c) { return c.name === checkOrName; });\n                        if (!checkConstraint)\n                            throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n                        up = this.dropCheckConstraintSql(table, checkConstraint);\n                        down = this.createCheckConstraintSql(table, checkConstraint);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeCheckConstraint(checkConstraint);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraints.\n     */\n    CockroachQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = checkConstraints.map(function (checkConstraint) { return _this.dropCheckConstraint(tableOrName, checkConstraint); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new exclusion constraint.\n     */\n    CockroachQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"CockroachDB does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates new exclusion constraints.\n     */\n    CockroachQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"CockroachDB does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops exclusion constraint.\n     */\n    CockroachQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"CockroachDB does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops exclusion constraints.\n     */\n    CockroachQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"CockroachDB does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates a new foreign key.\n     */\n    CockroachQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new FK may be passed without name. In this case we generate FK name manually.\n                        if (!foreignKey.name)\n                            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n                        up = this.createForeignKeySql(table, foreignKey);\n                        down = this.dropForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new foreign keys.\n     */\n    CockroachQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(foreignKeys, function (foreignKey) { return _this.createForeignKey(tableOrName, foreignKey); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign key from the table.\n     */\n    CockroachQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, foreignKey, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) { return fk.name === foreignKeyOrName; });\n                        if (!foreignKey)\n                            throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n                        up = this.dropForeignKeySql(table, foreignKey);\n                        down = this.createForeignKeySql(table, foreignKey);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeForeignKey(foreignKey);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign keys from the table.\n     */\n    CockroachQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(foreignKeys, function (foreignKey) { return _this.dropForeignKey(tableOrName, foreignKey); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new index.\n     */\n    CockroachQueryRunner.prototype.createIndex = function (tableOrName, index) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, unique, up, down, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new index may be passed without name. In this case we generate index name manually.\n                        if (!index.name)\n                            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                        if (!index.isUnique) return [3 /*break*/, 5];\n                        unique = new TableUnique({\n                            name: index.name,\n                            columnNames: index.columnNames\n                        });\n                        up = this.createUniqueConstraintSql(table, unique);\n                        down = this.dropIndexSql(table, unique);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addUniqueConstraint(unique);\n                        return [3 /*break*/, 7];\n                    case 5:\n                        up = this.createIndexSql(table, index);\n                        down = this.dropIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 6:\n                        _b.sent();\n                        table.addIndex(index);\n                        _b.label = 7;\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new indices\n     */\n    CockroachQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(indices, function (index) { return _this.createIndex(tableOrName, index); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an index from the table.\n     */\n    CockroachQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, index, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(function (i) { return i.name === indexOrName; });\n                        if (!index)\n                            throw new Error(\"Supplied index was not found in table \" + table.name);\n                        up = this.dropIndexSql(table, index);\n                        down = this.createIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeIndex(index);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an indices from the table.\n     */\n    CockroachQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(indices, function (index) { return _this.dropIndex(tableOrName, index); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    CockroachQueryRunner.prototype.clearTable = function (tableName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"TRUNCATE TABLE \" + this.escapePath(tableName))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    CockroachQueryRunner.prototype.clearDatabase = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var schemas, schemaNamesString, selectViewDropsQuery, dropViewQueries, selectDropsQuery, dropQueries, selectSequenceDropsQuery, sequenceDropQueries, error_1, rollbackError_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        schemas = [];\n                        this.connection.entityMetadatas\n                            .filter(function (metadata) { return metadata.schema; })\n                            .forEach(function (metadata) {\n                            var isSchemaExist = !!schemas.find(function (schema) { return schema === metadata.schema; });\n                            if (!isSchemaExist)\n                                schemas.push(metadata.schema);\n                        });\n                        schemas.push(this.driver.options.schema || \"current_schema()\");\n                        schemaNamesString = schemas.map(function (name) {\n                            return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\n                        }).join(\", \");\n                        return [4 /*yield*/, this.startTransaction()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 10, , 15]);\n                        selectViewDropsQuery = \"SELECT 'DROP VIEW IF EXISTS \\\"' || schemaname || '\\\".\\\"' || viewname || '\\\" CASCADE;' as \\\"query\\\" \" +\n                            (\"FROM \\\"pg_views\\\" WHERE \\\"schemaname\\\" IN (\" + schemaNamesString + \")\");\n                        return [4 /*yield*/, this.query(selectViewDropsQuery)];\n                    case 3:\n                        dropViewQueries = _a.sent();\n                        return [4 /*yield*/, Promise.all(dropViewQueries.map(function (q) { return _this.query(q[\"query\"]); }))];\n                    case 4:\n                        _a.sent();\n                        selectDropsQuery = \"SELECT 'DROP TABLE IF EXISTS \\\"' || table_schema || '\\\".\\\"' || table_name || '\\\" CASCADE;' as \\\"query\\\" FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" IN (\" + schemaNamesString + \")\";\n                        return [4 /*yield*/, this.query(selectDropsQuery)];\n                    case 5:\n                        dropQueries = _a.sent();\n                        return [4 /*yield*/, Promise.all(dropQueries.map(function (q) { return _this.query(q[\"query\"]); }))];\n                    case 6:\n                        _a.sent();\n                        selectSequenceDropsQuery = \"SELECT 'DROP SEQUENCE \\\"' || sequence_schema || '\\\".\\\"' || sequence_name || '\\\";' as \\\"query\\\" FROM \\\"information_schema\\\".\\\"sequences\\\" WHERE \\\"sequence_schema\\\" IN (\" + schemaNamesString + \")\";\n                        return [4 /*yield*/, this.query(selectSequenceDropsQuery)];\n                    case 7:\n                        sequenceDropQueries = _a.sent();\n                        return [4 /*yield*/, Promise.all(sequenceDropQueries.map(function (q) { return _this.query(q[\"query\"]); }))];\n                    case 8:\n                        _a.sent();\n                        return [4 /*yield*/, this.commitTransaction()];\n                    case 9:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 10:\n                        error_1 = _a.sent();\n                        _a.label = 11;\n                    case 11:\n                        _a.trys.push([11, 13, , 14]);\n                        return [4 /*yield*/, this.rollbackTransaction()];\n                    case 12:\n                        _a.sent();\n                        return [3 /*break*/, 14];\n                    case 13:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 14];\n                    case 14: throw error_1;\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    CockroachQueryRunner.prototype.loadViews = function (viewNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var hasTable, currentSchemaQuery, currentSchema, viewsCondition, query, dbViews;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.hasTable(this.getTypeormMetadataTableName())];\n                    case 1:\n                        hasTable = _a.sent();\n                        if (!hasTable)\n                            return [2 /*return*/, Promise.resolve([])];\n                        return [4 /*yield*/, this.query(\"SELECT * FROM current_schema()\")];\n                    case 2:\n                        currentSchemaQuery = _a.sent();\n                        currentSchema = currentSchemaQuery[0][\"current_schema\"];\n                        viewsCondition = viewNames.map(function (viewName) {\n                            var _a = tslib_1.__read(viewName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        query = \"SELECT \\\"t\\\".*, \\\"v\\\".\\\"check_option\\\" FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" +\n                            (\"INNER JOIN \\\"information_schema\\\".\\\"views\\\" \\\"v\\\" ON \\\"v\\\".\\\"table_schema\\\" = \\\"t\\\".\\\"schema\\\" AND \\\"v\\\".\\\"table_name\\\" = \\\"t\\\".\\\"name\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n                        return [4 /*yield*/, this.query(query)];\n                    case 3:\n                        dbViews = _a.sent();\n                        return [2 /*return*/, dbViews.map(function (dbView) {\n                                var view = new View();\n                                var schema = dbView[\"schema\"] === currentSchema && !_this.driver.options.schema ? undefined : dbView[\"schema\"];\n                                view.name = _this.driver.buildTableName(dbView[\"name\"], schema);\n                                view.expression = dbView[\"value\"];\n                                return view;\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    CockroachQueryRunner.prototype.loadTables = function (tableNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentSchemaQuery, currentSchema, tablesCondition, tablesSql, columnsSql, constraintsCondition, constraintsSql, indicesSql, foreignKeysCondition, foreignKeysSql, _a, dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        // if no tables given then no need to proceed\n                        if (!tableNames || !tableNames.length)\n                            return [2 /*return*/, []];\n                        return [4 /*yield*/, this.query(\"SELECT * FROM current_schema()\")];\n                    case 1:\n                        currentSchemaQuery = _b.sent();\n                        currentSchema = currentSchemaQuery[0][\"current_schema\"];\n                        tablesCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        tablesSql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \" + tablesCondition;\n                        columnsSql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"is_hidden\\\" = 'NO' AND \" + tablesCondition;\n                        constraintsCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" +\n                            \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" +\n                            \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" +\n                            \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" +\n                            \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND (\" + constraintsCondition + \")\");\n                        indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" +\n                            \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"t\\\" \" +\n                            \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" +\n                            \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" +\n                            (\"WHERE \\\"t\\\".\\\"relkind\\\" = 'r' AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n                        foreignKeysCondition = tableNames.map(function (tableName) {\n                            var _a = tslib_1.__read(tableName.split(\".\"), 2), schema = _a[0], name = _a[1];\n                            if (!name) {\n                                name = schema;\n                                schema = _this.driver.options.schema || currentSchema;\n                            }\n                            return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n                        }).join(\" OR \");\n                        foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" +\n                            \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\" \" +\n                            \"FROM ( \" +\n                            \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \\\"cl\\\".\\\"relname\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" +\n                            \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" +\n                            \"FROM \\\"pg_class\\\" \\\"cl\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" +\n                            (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") +\n                            \") \\\"con\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" +\n                            \"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" +\n                            \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" +\n                            \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n                        return [4 /*yield*/, Promise.all([\n                                this.query(tablesSql),\n                                this.query(columnsSql),\n                                this.query(constraintsSql),\n                                this.query(indicesSql),\n                                this.query(foreignKeysSql),\n                            ])];\n                    case 2:\n                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 5]), dbTables = _a[0], dbColumns = _a[1], dbConstraints = _a[2], dbIndices = _a[3], dbForeignKeys = _a[4];\n                        // if tables were not found in the db, no need to proceed\n                        if (!dbTables.length)\n                            return [2 /*return*/, []];\n                        // create tables for loaded tables\n                        return [2 /*return*/, Promise.all(dbTables.map(function (dbTable) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var table, schema, tableFullName, _a, tableUniqueConstraints, tableCheckConstraints, tableExclusionConstraints, tableForeignKeyConstraints, tableIndexConstraints;\n                                var _this = this;\n                                return tslib_1.__generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            table = new Table();\n                                            schema = dbTable[\"table_schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbTable[\"table_schema\"];\n                                            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n                                            tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n                                            // create columns from the loaded columns\n                                            _a = table;\n                                            return [4 /*yield*/, Promise.all(dbColumns\n                                                    .filter(function (dbColumn) { return _this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName; })\n                                                    .map(function (dbColumn) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                    var columnConstraints, tableColumn, type, length_1, uniqueConstraint, isConstraintComposite;\n                                                    var _this = this;\n                                                    return tslib_1.__generator(this, function (_a) {\n                                                        columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                                            return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                                                        });\n                                                        tableColumn = new TableColumn();\n                                                        tableColumn.name = dbColumn[\"column_name\"];\n                                                        tableColumn.type = dbColumn[\"crdb_sql_type\"].toLowerCase();\n                                                        if (dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") !== -1) {\n                                                            tableColumn.collation = dbColumn[\"crdb_sql_type\"].substr(dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") + \"COLLATE\".length + 1, dbColumn[\"crdb_sql_type\"].length);\n                                                            tableColumn.type = tableColumn.type.substr(0, dbColumn[\"crdb_sql_type\"].indexOf(\"COLLATE\") - 1);\n                                                        }\n                                                        if (tableColumn.type.indexOf(\"(\") !== -1)\n                                                            tableColumn.type = tableColumn.type.substr(0, tableColumn.type.indexOf(\"(\"));\n                                                        if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\") {\n                                                            if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                tableColumn.precision = parseInt(dbColumn[\"numeric_precision\"]);\n                                                            }\n                                                            else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                tableColumn.precision = undefined;\n                                                            }\n                                                            if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                                                tableColumn.scale = parseInt(dbColumn[\"numeric_scale\"]);\n                                                            }\n                                                            else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                                                tableColumn.scale = undefined;\n                                                            }\n                                                        }\n                                                        if (dbColumn[\"data_type\"].toLowerCase() === \"array\") {\n                                                            tableColumn.isArray = true;\n                                                            type = dbColumn[\"crdb_sql_type\"].replace(\"[]\", \"\").toLowerCase();\n                                                            tableColumn.type = this.connection.driver.normalizeType({ type: type });\n                                                        }\n                                                        // check only columns that have length property\n                                                        if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"character_maximum_length\"]) {\n                                                            length_1 = dbColumn[\"character_maximum_length\"].toString();\n                                                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : \"\";\n                                                        }\n                                                        tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                                                        tableColumn.isPrimary = !!columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"PRIMARY\"; });\n                                                        uniqueConstraint = columnConstraints.find(function (constraint) { return constraint[\"constraint_type\"] === \"UNIQUE\"; });\n                                                        isConstraintComposite = uniqueConstraint\n                                                            ? !!dbConstraints.find(function (dbConstraint) { return dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                                                                && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                                                                && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"]; })\n                                                            : false;\n                                                        tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                                                        if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                                                            if (dbColumn[\"column_default\"] === \"unique_rowid()\") {\n                                                                tableColumn.isGenerated = true;\n                                                                tableColumn.generationStrategy = \"rowid\";\n                                                            }\n                                                            else if (dbColumn[\"column_default\"].indexOf(\"nextval\") !== -1) {\n                                                                tableColumn.isGenerated = true;\n                                                                tableColumn.generationStrategy = \"increment\";\n                                                            }\n                                                            else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\") {\n                                                                tableColumn.isGenerated = true;\n                                                                tableColumn.generationStrategy = \"uuid\";\n                                                            }\n                                                            else {\n                                                                tableColumn.default = dbColumn[\"column_default\"].replace(/:::.*/, \"\");\n                                                            }\n                                                        }\n                                                        tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                                                        if (dbColumn[\"character_set_name\"])\n                                                            tableColumn.charset = dbColumn[\"character_set_name\"];\n                                                        return [2 /*return*/, tableColumn];\n                                                    });\n                                                }); }))];\n                                        case 1:\n                                            // create columns from the loaded columns\n                                            _a.columns = _b.sent();\n                                            tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                                                return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                                                    && dbConstraint[\"constraint_type\"] === \"UNIQUE\";\n                                            }), function (dbConstraint) { return dbConstraint[\"constraint_name\"]; });\n                                            table.uniques = tableUniqueConstraints.map(function (constraint) {\n                                                var uniques = dbConstraints.filter(function (dbC) { return dbC[\"constraint_name\"] === constraint[\"constraint_name\"]; });\n                                                return new TableUnique({\n                                                    name: constraint[\"constraint_name\"],\n                                                    columnNames: uniques.map(function (u) { return u[\"column_name\"]; })\n                                                });\n                                            });\n                                            tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                                                return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                                                    && dbConstraint[\"constraint_type\"] === \"CHECK\";\n                                            }), function (dbConstraint) { return dbConstraint[\"constraint_name\"]; });\n                                            table.checks = tableCheckConstraints.map(function (constraint) {\n                                                var checks = dbConstraints.filter(function (dbC) { return dbC[\"constraint_name\"] === constraint[\"constraint_name\"]; });\n                                                return new TableCheck({\n                                                    name: constraint[\"constraint_name\"],\n                                                    columnNames: checks.map(function (c) { return c[\"column_name\"]; }),\n                                                    expression: constraint[\"expression\"].replace(/^\\s*CHECK\\s*\\((.*)\\)\\s*$/i, \"$1\")\n                                                });\n                                            });\n                                            tableExclusionConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                                                return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                                                    && dbConstraint[\"constraint_type\"] === \"EXCLUDE\";\n                                            }), function (dbConstraint) { return dbConstraint[\"constraint_name\"]; });\n                                            table.exclusions = tableExclusionConstraints.map(function (constraint) {\n                                                return new TableExclusion({\n                                                    name: constraint[\"constraint_name\"],\n                                                    expression: constraint[\"expression\"].substring(8) // trim EXCLUDE from start of expression\n                                                });\n                                            });\n                                            tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                                                return _this.driver.buildTableName(dbForeignKey[\"table_name\"], dbForeignKey[\"table_schema\"]) === tableFullName;\n                                            }), function (dbForeignKey) { return dbForeignKey[\"constraint_name\"]; });\n                                            table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                                                var foreignKeys = dbForeignKeys.filter(function (dbFk) { return dbFk[\"constraint_name\"] === dbForeignKey[\"constraint_name\"]; });\n                                                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                                                var schema = dbForeignKey[\"referenced_table_schema\"] === currentSchema ? undefined : dbForeignKey[\"referenced_table_schema\"];\n                                                var referencedTableName = _this.driver.buildTableName(dbForeignKey[\"referenced_table_name\"], schema);\n                                                return new TableForeignKey({\n                                                    name: dbForeignKey[\"constraint_name\"],\n                                                    columnNames: foreignKeys.map(function (dbFk) { return dbFk[\"column_name\"]; }),\n                                                    referencedTableName: referencedTableName,\n                                                    referencedColumnNames: foreignKeys.map(function (dbFk) { return dbFk[\"referenced_column_name\"]; }),\n                                                    onDelete: dbForeignKey[\"on_delete\"],\n                                                    onUpdate: dbForeignKey[\"on_update\"]\n                                                });\n                                            });\n                                            tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(function (dbIndex) {\n                                                return _this.driver.buildTableName(dbIndex[\"table_name\"], dbIndex[\"table_schema\"]) === tableFullName;\n                                            }), function (dbIndex) { return dbIndex[\"constraint_name\"]; });\n                                            table.indices = tableIndexConstraints.map(function (constraint) {\n                                                var indices = dbIndices.filter(function (index) { return index[\"constraint_name\"] === constraint[\"constraint_name\"]; });\n                                                return new TableIndex({\n                                                    table: table,\n                                                    name: constraint[\"constraint_name\"],\n                                                    columnNames: indices.map(function (i) { return i[\"column_name\"]; }),\n                                                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\n                                                    where: constraint[\"condition\"],\n                                                    isSpatial: indices.every(function (i) { return _this.driver.spatialTypes.indexOf(i[\"type_name\"]) >= 0; }),\n                                                    isFulltext: false\n                                                });\n                                            });\n                                            return [2 /*return*/, table];\n                                    }\n                                });\n                            }); }))];\n                }\n            });\n        });\n    };\n    /**\n     * Builds create table sql.\n     */\n    CockroachQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n        var _this = this;\n        var columnDefinitions = table.columns.map(function (column) { return _this.buildCreateColumnSql(table, column); }).join(\", \");\n        var sql = \"CREATE TABLE \" + this.escapePath(table) + \" (\" + columnDefinitions;\n        table.columns\n            .filter(function (column) { return column.isUnique; })\n            .forEach(function (column) {\n            var isUniqueExist = table.uniques.some(function (unique) { return unique.columnNames.length === 1 && unique.columnNames[0] === column.name; });\n            if (!isUniqueExist)\n                table.uniques.push(new TableUnique({\n                    name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                    columnNames: [column.name]\n                }));\n        });\n        table.indices\n            .filter(function (index) { return index.isUnique; })\n            .forEach(function (index) {\n            table.uniques.push(new TableUnique({\n                name: _this.connection.namingStrategy.uniqueConstraintName(table.name, index.columnNames),\n                columnNames: index.columnNames\n            }));\n        });\n        if (table.uniques.length > 0) {\n            var uniquesSql = table.uniques.map(function (unique) {\n                var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                var columnNames = unique.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                return \"CONSTRAINT \\\"\" + uniqueName + \"\\\" UNIQUE (\" + columnNames + \")\";\n            }).join(\", \");\n            sql += \", \" + uniquesSql;\n        }\n        if (table.checks.length > 0) {\n            var checksSql = table.checks.map(function (check) {\n                var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n                return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n            }).join(\", \");\n            sql += \", \" + checksSql;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            var foreignKeysSql = table.foreignKeys.map(function (fk) {\n                var columnNames = fk.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                if (!fk.name)\n                    fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \" + _this.escapePath(fk.referencedTableName) + \" (\" + referencedColumnNames + \")\";\n                if (fk.onDelete)\n                    constraint += \" ON DELETE \" + fk.onDelete;\n                if (fk.onUpdate)\n                    constraint += \" ON UPDATE \" + fk.onUpdate;\n                return constraint;\n            }).join(\", \");\n            sql += \", \" + foreignKeysSql;\n        }\n        var primaryColumns = table.columns.filter(function (column) { return column.isPrimary; });\n        if (primaryColumns.length > 0) {\n            var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) { return column.name; }));\n            var columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n            sql += \", CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNames + \")\";\n        }\n        sql += \")\";\n        return new Query(sql);\n    };\n    /**\n     * Extracts schema name from given Table object or table name string.\n     */\n    CockroachQueryRunner.prototype.extractSchema = function (target) {\n        var tableName = target instanceof Table ? target.name : target;\n        return tableName.indexOf(\".\") === -1 ? this.driver.options.schema : tableName.split(\".\")[0];\n    };\n    /**\n     * Builds drop table sql.\n     */\n    CockroachQueryRunner.prototype.dropTableSql = function (tableOrPath) {\n        return new Query(\"DROP TABLE \" + this.escapePath(tableOrPath));\n    };\n    CockroachQueryRunner.prototype.createViewSql = function (view) {\n        if (typeof view.expression === \"string\") {\n            return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression);\n        }\n        else {\n            return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression(this.connection).getQuery());\n        }\n    };\n    CockroachQueryRunner.prototype.insertViewDefinitionSql = function (view) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentSchemaQuery, currentSchema, splittedName, schema, name, expression, _a, query, parameters;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT * FROM current_schema()\")];\n                    case 1:\n                        currentSchemaQuery = _b.sent();\n                        currentSchema = currentSchemaQuery[0][\"current_schema\"];\n                        splittedName = view.name.split(\".\");\n                        schema = this.driver.options.schema || currentSchema;\n                        name = view.name;\n                        if (splittedName.length === 2) {\n                            schema = splittedName[0];\n                            name = splittedName[1];\n                        }\n                        expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                        _a = tslib_1.__read(this.connection.createQueryBuilder()\n                            .insert()\n                            .into(this.getTypeormMetadataTableName())\n                            .values({ type: \"VIEW\", schema: schema, name: name, value: expression })\n                            .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n                        return [2 /*return*/, new Query(query, parameters)];\n                }\n            });\n        });\n    };\n    /**\n     * Builds drop view sql.\n     */\n    CockroachQueryRunner.prototype.dropViewSql = function (viewOrPath) {\n        return new Query(\"DROP VIEW \" + this.escapePath(viewOrPath));\n    };\n    /**\n     * Builds remove view sql.\n     */\n    CockroachQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var currentSchemaQuery, currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.query(\"SELECT * FROM current_schema()\")];\n                    case 1:\n                        currentSchemaQuery = _b.sent();\n                        currentSchema = currentSchemaQuery[0][\"current_schema\"];\n                        viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n                        splittedName = viewName.split(\".\");\n                        schema = this.driver.options.schema || currentSchema;\n                        name = viewName;\n                        if (splittedName.length === 2) {\n                            schema = splittedName[0];\n                            name = splittedName[1];\n                        }\n                        qb = this.connection.createQueryBuilder();\n                        _a = tslib_1.__read(qb.delete()\n                            .from(this.getTypeormMetadataTableName())\n                            .where(qb.escape(\"type\") + \" = 'VIEW'\")\n                            .andWhere(qb.escape(\"schema\") + \" = :schema\", { schema: schema })\n                            .andWhere(qb.escape(\"name\") + \" = :name\", { name: name })\n                            .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n                        return [2 /*return*/, new Query(query, parameters)];\n                }\n            });\n        });\n    };\n    /**\n     * Builds create index sql.\n     * UNIQUE indices creates as UNIQUE constraints.\n     */\n    CockroachQueryRunner.prototype.createIndexSql = function (table, index) {\n        var columns = index.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n        return new Query(\"CREATE INDEX \\\"\" + index.name + \"\\\" ON \" + this.escapePath(table) + \" (\" + columns + \") \" + (index.where ? \"WHERE \" + index.where : \"\"));\n    };\n    /**\n     * Builds drop index sql.\n     */\n    CockroachQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {\n        var indexName = (indexOrName instanceof TableIndex || indexOrName instanceof TableUnique) ? indexOrName.name : indexOrName;\n        return new Query(\"DROP INDEX \" + this.escapePath(table) + \"@\\\"\" + indexName + \"\\\" CASCADE\");\n    };\n    /**\n     * Builds create primary key sql.\n     */\n    CockroachQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n        var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        var columnNamesString = columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\");\n    };\n    /**\n     * Builds drop primary key sql.\n     */\n    CockroachQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n        var columnNames = table.primaryColumns.map(function (column) { return column.name; });\n        var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + primaryKeyName + \"\\\"\");\n    };\n    /**\n     * Builds create unique constraint sql.\n     */\n    CockroachQueryRunner.prototype.createUniqueConstraintSql = function (table, uniqueConstraint) {\n        var columnNames = uniqueConstraint.columnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\", \");\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\" + columnNames + \")\");\n    };\n    /**\n     * Builds drop unique constraint sql.\n     */\n    CockroachQueryRunner.prototype.dropUniqueConstraintSql = function (table, uniqueOrName) {\n        var uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueName + \"\\\"\");\n    };\n    /**\n     * Builds create check constraint sql.\n     */\n    CockroachQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + checkConstraint.name + \"\\\" CHECK (\" + checkConstraint.expression + \")\");\n    };\n    /**\n     * Builds drop check constraint sql.\n     */\n    CockroachQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {\n        var checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + checkName + \"\\\"\");\n    };\n    /**\n     * Builds create foreign key sql.\n     */\n    CockroachQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {\n        var columnNames = foreignKey.columnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\", \");\n        var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) { return \"\\\"\" + column + \"\\\"\"; }).join(\",\");\n        var sql = \"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + foreignKey.name + \"\\\" FOREIGN KEY (\" + columnNames + \") \" +\n            (\"REFERENCES \" + this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n        if (foreignKey.onDelete)\n            sql += \" ON DELETE \" + foreignKey.onDelete;\n        if (foreignKey.onUpdate)\n            sql += \" ON UPDATE \" + foreignKey.onUpdate;\n        return new Query(sql);\n    };\n    /**\n     * Builds drop foreign key sql.\n     */\n    CockroachQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {\n        var foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + foreignKeyName + \"\\\"\");\n    };\n    /**\n     * Builds sequence name from given table and column.\n     */\n    CockroachQueryRunner.prototype.buildSequenceName = function (table, columnOrName, disableEscape) {\n        var columnName = columnOrName instanceof TableColumn ? columnOrName.name : columnOrName;\n        return disableEscape ? table.name + \"_\" + columnName + \"_seq\" : \"\\\"\" + table.name + \"_\" + columnName + \"_seq\\\"\";\n    };\n    /**\n     * Escapes given table or view path.\n     */\n    CockroachQueryRunner.prototype.escapePath = function (target, disableEscape) {\n        var tableName = target instanceof Table || target instanceof View ? target.name : target;\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? this.driver.options.schema + \".\" + tableName : tableName;\n        return tableName.split(\".\").map(function (i) {\n            return disableEscape ? i : \"\\\"\" + i + \"\\\"\";\n        }).join(\".\");\n    };\n    /**\n     * Returns object with table schema and table name.\n     */\n    CockroachQueryRunner.prototype.parseTableName = function (target) {\n        var tableName = target instanceof Table ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            return {\n                schema: this.driver.options.schema ? \"'\" + this.driver.options.schema + \"'\" : \"current_schema()\",\n                tableName: \"'\" + tableName + \"'\"\n            };\n        }\n        else {\n            return {\n                schema: \"'\" + tableName.split(\".\")[0] + \"'\",\n                tableName: \"'\" + tableName.split(\".\")[1] + \"'\"\n            };\n        }\n    };\n    /**\n     * Builds a query for create column.\n     */\n    CockroachQueryRunner.prototype.buildCreateColumnSql = function (table, column) {\n        var c = \"\\\"\" + column.name + \"\\\"\";\n        if (column.isGenerated) {\n            if (column.generationStrategy === \"increment\") {\n                c += \" INT DEFAULT nextval('\" + this.buildSequenceName(table, column) + \"')\";\n            }\n            else if (column.generationStrategy === \"rowid\") {\n                c += \" INT DEFAULT unique_rowid()\";\n            }\n            else if (column.generationStrategy === \"uuid\") {\n                c += \" UUID DEFAULT gen_random_uuid()\";\n            }\n        }\n        if (!column.isGenerated)\n            c += \" \" + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\n        if (column.collation)\n            c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\n        if (!column.isNullable)\n            c += \" NOT NULL\";\n        if (!column.isGenerated && column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n        return c;\n    };\n    return CockroachQueryRunner;\n}(BaseQueryRunner));\nexport { CockroachQueryRunner };\n\n//# sourceMappingURL=CockroachQueryRunner.js.map\n","import * as tslib_1 from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nvar CordovaDriver = /** @class */ (function (_super) {\n    tslib_1.__extends(CordovaDriver, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function CordovaDriver(connection) {\n        var _this = _super.call(this, connection) || this;\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        _this.database = _this.options.database;\n        // validate options to make sure everything is set\n        if (!_this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        if (!_this.options.location)\n            throw new DriverOptionNotSetError(\"location\");\n        // load sqlite package\n        _this.loadDependencies();\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    CordovaDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.queryRunner = undefined;\n                        _this.databaseConnection.close(ok, fail);\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    CordovaDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        if (!this.queryRunner)\n            this.queryRunner = new CordovaQueryRunner(this);\n        return this.queryRunner;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    CordovaDriver.prototype.createDatabaseConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            var options = Object.assign({}, {\n                name: _this.options.database,\n                location: _this.options.location,\n            }, _this.options.extra || {});\n            _this.sqlite.openDatabase(options, function (db) {\n                var databaseConnection = db;\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete to work with sqlite.\n                databaseConnection.executeSql(\"PRAGMA foreign_keys = ON;\", [], function (result) {\n                    ok(databaseConnection);\n                }, function (error) {\n                    fail(error);\n                });\n            }, function (error) {\n                fail(error);\n            });\n        });\n    };\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    CordovaDriver.prototype.loadDependencies = function () {\n        try {\n            this.sqlite = window.sqlitePlugin;\n        }\n        catch (e) {\n            throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n        }\n    };\n    return CordovaDriver;\n}(AbstractSqliteDriver));\nexport { CordovaDriver };\n\n//# sourceMappingURL=CordovaDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nvar CordovaQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(CordovaQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function CordovaQueryRunner(driver) {\n        var _this = _super.call(this) || this;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    CordovaQueryRunner.prototype.query = function (query, parameters) {\n        var _this = this;\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, queryStartTime;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        queryStartTime = +new Date();\n                        databaseConnection.executeSql(query, parameters, function (result) {\n                            // log slow queries if maxQueryExecution time is set\n                            var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                            var queryEndTime = +new Date();\n                            var queryExecutionTime = queryEndTime - queryStartTime;\n                            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                                _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n                            if (query.substr(0, 11) === \"INSERT INTO\") {\n                                ok(result.insertId);\n                            }\n                            else {\n                                var resultSet = [];\n                                for (var i = 0; i < result.rows.length; i++) {\n                                    resultSet.push(result.rows.item(i));\n                                }\n                                ok(resultSet);\n                            }\n                        }, function (err) {\n                            _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                            fail(new QueryFailedError(query, parameters, err));\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Insert a new row with given values into the given table.\n     * Returns value of the generated column if given and generate column exist in the table.\n     // todo: implement new syntax\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\n        const keys = Object.keys(keyValues);\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\n        const values = keys.map(key => \"?\").join(\",\");\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\n        const parameters = keys.map(key => keyValues[key]);\n\n        return new Promise<InsertResult>(async (ok, fail) => {\n            this.driver.connection.logger.logQuery(sql, parameters, this);\n            const __this = this;\n            const databaseConnection = await this.connect();\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\n                    if (!value) return map;\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n                }, {} as ObjectLiteral);\n\n                ok({\n                    result: undefined,\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n                });\n            }, (err: any) => {\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\n                fail(err);\n            });\n        });\n    }*/\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    CordovaQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        return Object.keys(objectLiteral).map(function (key, index) { return \"\\\"\" + key + \"\\\"\" + \"=?\"; });\n    };\n    return CordovaQueryRunner;\n}(AbstractSqliteQueryRunner));\nexport { CordovaQueryRunner };\n\n//# sourceMappingURL=CordovaQueryRunner.js.map\n","import * as tslib_1 from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nvar ExpoDriver = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpoDriver, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ExpoDriver(connection) {\n        var _this = _super.call(this, connection) || this;\n        _this.database = _this.options.database;\n        // validate options to make sure everything is set\n        if (!_this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        if (!_this.options.driver)\n            throw new DriverOptionNotSetError(\"driver\");\n        // load sqlite package\n        _this.sqlite = _this.options.driver;\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    ExpoDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        try {\n                            _this.queryRunner = undefined;\n                            _this.databaseConnection._db.close();\n                            _this.databaseConnection = undefined;\n                            ok();\n                        }\n                        catch (error) {\n                            fail(error);\n                        }\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    ExpoDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        if (!this.queryRunner)\n            this.queryRunner = new ExpoQueryRunner(this);\n        return this.queryRunner;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    ExpoDriver.prototype.createDatabaseConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            try {\n                var databaseConnection_1 = _this.sqlite.openDatabase(_this.options.database);\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection_1.transaction(function (tsx) {\n                    tsx.executeSql(\"PRAGMA foreign_keys = ON;\", [], function (t, result) {\n                        ok(databaseConnection_1);\n                    }, function (t, err) {\n                        fail({ transaction: t, error: err });\n                    });\n                }, function (err) {\n                    fail(err);\n                });\n            }\n            catch (error) {\n                fail(error);\n            }\n        });\n    };\n    return ExpoDriver;\n}(AbstractSqliteDriver));\nexport { ExpoDriver };\n\n//# sourceMappingURL=ExpoDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nvar ExpoQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpoQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ExpoQueryRunner(driver) {\n        var _this = _super.call(this) || this;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    /**\n     * Starts transaction. Within Expo, all database operations happen in a\n     * transaction context, so issuing a `BEGIN TRANSACTION` command is\n     * redundant and will result in the following error:\n     *\n     * `Error: Error code 1: cannot start a transaction within a transaction`\n     *\n     * Instead, we keep track of a `Transaction` object in `this.transaction`\n     * and continue using the same object until we wish to commit the\n     * transaction.\n     */\n    ExpoQueryRunner.prototype.startTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.isTransactionActive && typeof this.transaction !== \"undefined\")\n                    throw new TransactionAlreadyStartedError();\n                this.isTransactionActive = true;\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     * Since Expo will automatically commit the transaction once all the\n     * callbacks of the transaction object have been completed, \"committing\" a\n     * transaction in this driver's context means that we delete the transaction\n     * object and set the stage for the next transaction.\n     */\n    ExpoQueryRunner.prototype.commitTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (!this.isTransactionActive && typeof this.transaction === \"undefined\")\n                    throw new TransactionNotStartedError();\n                this.isTransactionActive = false;\n                this.transaction = undefined;\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     * This method's functionality is identical to `commitTransaction()` because\n     * the transaction lifecycle is handled within the Expo transaction object.\n     * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.\n     */\n    ExpoQueryRunner.prototype.rollbackTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (!this.isTransactionActive && typeof this.transaction === \"undefined\")\n                    throw new TransactionNotStartedError();\n                this.isTransactionActive = false;\n                this.transaction = undefined;\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Executes a given SQL query.\n     */\n    ExpoQueryRunner.prototype.query = function (query, parameters) {\n        var _this = this;\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, queryStartTime;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        queryStartTime = +new Date();\n                        // All Expo SQL queries are executed in a transaction context\n                        databaseConnection.transaction(function (transaction) {\n                            if (typeof _this.transaction === \"undefined\") {\n                                _this.startTransaction();\n                                _this.transaction = transaction;\n                            }\n                            _this.transaction.executeSql(query, parameters, function (t, result) {\n                                // log slow queries if maxQueryExecution time is set\n                                var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                                var queryEndTime = +new Date();\n                                var queryExecutionTime = queryEndTime - queryStartTime;\n                                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) {\n                                    _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n                                }\n                                // return id of inserted row, if query was insert statement.\n                                if (query.substr(0, 11) === \"INSERT INTO\") {\n                                    ok(result.insertId);\n                                }\n                                else {\n                                    var resultSet = [];\n                                    for (var i = 0; i < result.rows.length; i++) {\n                                        resultSet.push(result.rows.item(i));\n                                    }\n                                    ok(resultSet);\n                                }\n                            }, function (t, err) {\n                                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                                fail(new QueryFailedError(query, parameters, err));\n                            });\n                        }, function (err) {\n                            _this.rollbackTransaction();\n                        }, function () {\n                            _this.isTransactionActive = false;\n                            _this.transaction = undefined;\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    return ExpoQueryRunner;\n}(AbstractSqliteQueryRunner));\nexport { ExpoQueryRunner };\n\n//# sourceMappingURL=ExpoQueryRunner.js.map\n","import { EventEmitter, Readable, Writable } from \"../../platform/PlatformTools\";\n\n//# sourceMappingURL=typings.js.map\n","import * as tslib_1 from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nvar NativescriptDriver = /** @class */ (function (_super) {\n    tslib_1.__extends(NativescriptDriver, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function NativescriptDriver(connection) {\n        var _this = _super.call(this, connection) || this;\n        _this.connection = connection;\n        _this.options = connection.options;\n        _this.database = _this.options.database;\n        _this.driver = _this.options.driver;\n        // validate options to make sure everything is set\n        if (!_this.options.database) {\n            throw new DriverOptionNotSetError(\"database\");\n        }\n        // load sqlite package\n        _this.loadDependencies();\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    NativescriptDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.queryRunner = undefined;\n                        _this.databaseConnection.close().then(ok).catch(fail);\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    NativescriptDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this);\n        }\n        return this.queryRunner;\n    };\n    NativescriptDriver.prototype.normalizeType = function (column) {\n        if (column.type === Buffer) {\n            return \"blob\";\n        }\n        return _super.prototype.normalizeType.call(this, column);\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    NativescriptDriver.prototype.createDatabaseConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            var options = Object.assign({}, {\n                readOnly: _this.options.readOnly,\n                key: _this.options.key,\n                multithreading: _this.options.multithreading,\n                migrate: _this.options.migrate,\n                iosFlags: _this.options.iosFlags,\n                androidFlags: _this.options.androidFlags,\n            }, _this.options.extra || {});\n            new _this.sqlite(_this.options.database, options, function (err, db) {\n                if (err)\n                    return fail(err);\n                // use object mode to work with TypeORM\n                db.resultType(_this.sqlite.RESULTSASOBJECT);\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                db.execSQL(\"PRAGMA foreign_keys = ON;\", [], function (err, result) {\n                    if (err)\n                        return fail(err);\n                    // We are all set\n                    ok(db);\n                });\n            });\n        });\n    };\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    NativescriptDriver.prototype.loadDependencies = function () {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n        }\n    };\n    return NativescriptDriver;\n}(AbstractSqliteDriver));\nexport { NativescriptDriver };\n\n//# sourceMappingURL=NativescriptDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nvar NativescriptQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(NativescriptQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function NativescriptQueryRunner(driver) {\n        var _this = _super.call(this) || this;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    NativescriptQueryRunner.prototype.query = function (query, parameters) {\n        var _this = this;\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        var connection = this.driver.connection;\n        return new Promise(function (ok, fail) {\n            var isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n            var handler = function (err, result) {\n                // log slow queries if maxQueryExecution time is set\n                var maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n                var queryEndTime = +new Date();\n                var queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                }\n                else {\n                    // when isInsertQuery == true, result is the id\n                    ok(result);\n                }\n            };\n            _this.driver.connection.logger.logQuery(query, parameters, _this);\n            var queryStartTime = +new Date();\n            _this.connect().then(function (databaseConnection) {\n                if (isInsertQuery) {\n                    databaseConnection.execSQL(query, parameters, handler);\n                }\n                else {\n                    databaseConnection.all(query, parameters, handler);\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    NativescriptQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        return Object.keys(objectLiteral).map(function (key, index) { return \"\\\"\" + key + \"\\\"\" + \"=?\"; });\n    };\n    return NativescriptQueryRunner;\n}(AbstractSqliteQueryRunner));\nexport { NativescriptQueryRunner };\n\n//# sourceMappingURL=NativescriptQueryRunner.js.map\n","import * as tslib_1 from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ReactNativeQueryRunner } from \"./ReactNativeQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nvar ReactNativeDriver = /** @class */ (function (_super) {\n    tslib_1.__extends(ReactNativeDriver, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ReactNativeDriver(connection) {\n        var _this = _super.call(this, connection) || this;\n        _this.database = _this.options.database;\n        // validate options to make sure everything is set\n        if (!_this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        if (!_this.options.location)\n            throw new DriverOptionNotSetError(\"location\");\n        // load sqlite package\n        _this.loadDependencies();\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    ReactNativeDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.queryRunner = undefined;\n                        _this.databaseConnection.close(ok, fail);\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    ReactNativeDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        if (!this.queryRunner)\n            this.queryRunner = new ReactNativeQueryRunner(this);\n        return this.queryRunner;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    ReactNativeDriver.prototype.createDatabaseConnection = function () {\n        var _this = this;\n        return new Promise(function (ok, fail) {\n            var options = Object.assign({}, {\n                name: _this.options.database,\n                location: _this.options.location,\n            }, _this.options.extra || {});\n            _this.sqlite.openDatabase(options, function (db) {\n                var databaseConnection = db;\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                databaseConnection.executeSql(\"PRAGMA foreign_keys = ON;\", [], function (result) {\n                    ok(databaseConnection);\n                }, function (error) {\n                    fail(error);\n                });\n            }, function (error) {\n                fail(error);\n            });\n        });\n    };\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    ReactNativeDriver.prototype.loadDependencies = function () {\n        try {\n            this.sqlite = require(\"react-native-sqlite-storage\");\n        }\n        catch (e) {\n            throw new DriverPackageNotInstalledError(\"React-Native\", \"react-native-sqlite-storage\");\n        }\n    };\n    return ReactNativeDriver;\n}(AbstractSqliteDriver));\nexport { ReactNativeDriver };\n\n//# sourceMappingURL=ReactNativeDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nvar ReactNativeQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(ReactNativeQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ReactNativeQueryRunner(driver) {\n        var _this = _super.call(this) || this;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    ReactNativeQueryRunner.prototype.query = function (query, parameters) {\n        var _this = this;\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, queryStartTime;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        queryStartTime = +new Date();\n                        databaseConnection.executeSql(query, parameters, function (result) {\n                            // log slow queries if maxQueryExecution time is set\n                            var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                            var queryEndTime = +new Date();\n                            var queryExecutionTime = queryEndTime - queryStartTime;\n                            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                                _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n                            // return id of inserted row, if query was insert statement.\n                            if (query.substr(0, 11) === \"INSERT INTO\") {\n                                ok(result.insertId);\n                            }\n                            else {\n                                var resultSet = [];\n                                for (var i = 0; i < result.rows.length; i++) {\n                                    resultSet.push(result.rows.item(i));\n                                }\n                                ok(resultSet);\n                            }\n                        }, function (err) {\n                            _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n                            fail(new QueryFailedError(query, parameters, err));\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    ReactNativeQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        return Object.keys(objectLiteral).map(function (key, index) { return \"\\\"\" + key + \"\\\"\" + \"=?\"; });\n    };\n    return ReactNativeQueryRunner;\n}(AbstractSqliteQueryRunner));\nexport { ReactNativeQueryRunner };\n\n//# sourceMappingURL=ReactNativeQueryRunner.js.map\n","import * as tslib_1 from \"tslib\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\n/**\n * Organizes communication with sqlite DBMS.\n */\nvar AbstractSqliteDriver = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function AbstractSqliteDriver(connection) {\n        /**\n         * Indicates if replication is enabled.\n         */\n        this.isReplicated = false;\n        /**\n         * Indicates if tree tables are supported by this driver.\n         */\n        this.treeSupport = true;\n        /**\n         * Gets list of supported column data types by a driver.\n         *\n         * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\n         * @see https://sqlite.org/datatype3.html\n         */\n        this.supportedDataTypes = [\n            \"int\",\n            \"integer\",\n            \"tinyint\",\n            \"smallint\",\n            \"mediumint\",\n            \"bigint\",\n            \"unsigned big int\",\n            \"int2\",\n            \"int8\",\n            \"integer\",\n            \"character\",\n            \"varchar\",\n            \"varying character\",\n            \"nchar\",\n            \"native character\",\n            \"nvarchar\",\n            \"text\",\n            \"clob\",\n            \"text\",\n            \"blob\",\n            \"real\",\n            \"double\",\n            \"double precision\",\n            \"float\",\n            \"real\",\n            \"numeric\",\n            \"decimal\",\n            \"boolean\",\n            \"date\",\n            \"time\",\n            \"datetime\"\n        ];\n        /**\n         * Gets list of column data types that support length by a driver.\n         */\n        this.withLengthColumnTypes = [\n            \"character\",\n            \"varchar\",\n            \"varying character\",\n            \"nchar\",\n            \"native character\",\n            \"nvarchar\",\n            \"text\",\n            \"blob\",\n            \"clob\"\n        ];\n        /**\n         * Gets list of spatial column data types.\n         */\n        this.spatialTypes = [];\n        /**\n         * Gets list of column data types that support precision by a driver.\n         */\n        this.withPrecisionColumnTypes = [];\n        /**\n         * Gets list of column data types that support scale by a driver.\n         */\n        this.withScaleColumnTypes = [];\n        /**\n         * Orm has special columns and we need to know what database column types should be for those types.\n         * Column types are driver dependant.\n         */\n        this.mappedDataTypes = {\n            createDate: \"datetime\",\n            createDateDefault: \"datetime('now')\",\n            updateDate: \"datetime\",\n            updateDateDefault: \"datetime('now')\",\n            deleteDate: \"datetime\",\n            deleteDateNullable: true,\n            version: \"integer\",\n            treeLevel: \"integer\",\n            migrationId: \"integer\",\n            migrationName: \"varchar\",\n            migrationTimestamp: \"bigint\",\n            cacheId: \"int\",\n            cacheIdentifier: \"varchar\",\n            cacheTime: \"bigint\",\n            cacheDuration: \"int\",\n            cacheQuery: \"text\",\n            cacheResult: \"text\",\n            metadataType: \"varchar\",\n            metadataDatabase: \"varchar\",\n            metadataSchema: \"varchar\",\n            metadataTable: \"varchar\",\n            metadataName: \"varchar\",\n            metadataValue: \"text\",\n        };\n        this.connection = connection;\n        this.options = connection.options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    AbstractSqliteDriver.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.createDatabaseConnection()];\n                    case 1:\n                        _a.databaseConnection = _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    AbstractSqliteDriver.prototype.afterConnect = function () {\n        return Promise.resolve();\n    };\n    /**\n     * Closes connection with database.\n     */\n    AbstractSqliteDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.queryRunner = undefined;\n                        _this.databaseConnection.close(function (err) { return err ? fail(err) : ok(); });\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    AbstractSqliteDriver.prototype.createSchemaBuilder = function () {\n        return new RdbmsSchemaBuilder(this.connection);\n    };\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    AbstractSqliteDriver.prototype.preparePersistentValue = function (value, columnMetadata) {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n        if (value === null || value === undefined)\n            return value;\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"boolean\") {\n            return value === true ? 1 : 0;\n        }\n        else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n        }\n        else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\n            // TODO: think about `toUTC` conversion\n            return DateUtils.mixedDateToUtcDatetimeString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n        else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n        }\n        return value;\n    };\n    /**\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\n     */\n    AbstractSqliteDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"boolean\") {\n            value = value ? true : false;\n        }\n        else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\n            /**\n             * Fix date conversion issue\n             *\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\n             *\n             * ISO 8601\n             * https://www.w3.org/TR/NOTE-datetime\n             */\n            if (value && typeof value === \"string\") {\n                // There are various valid time string formats a sqlite time string might have:\n                // https://www.sqlite.org/lang_datefunc.html\n                // There are two separate fixes we may need to do:\n                //   1) Add 'T' separator if space is used instead\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\n                    value = value.replace(\" \", \"T\");\n                }\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(value)) {\n                    value += \"Z\";\n                }\n            }\n            value = DateUtils.normalizeHydratedDate(value);\n        }\n        else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        }\n        else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        }\n        else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n        }\n        else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n        else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n        }\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n        return value;\n    };\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    AbstractSqliteDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {\n        var builtParameters = Object.keys(nativeParameters).map(function (key) {\n            // Mapping boolean values to their numeric representation\n            if (typeof nativeParameters[key] === \"boolean\") {\n                return nativeParameters[key] === true ? 1 : 0;\n            }\n            return nativeParameters[key];\n        });\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n        var keys = Object.keys(parameters).map(function (parameter) { return \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\"; }).join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), function (key) {\n            var value;\n            var isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            }\n            else {\n                value = parameters[key.substr(1)];\n            }\n            if (isArray) {\n                return value.map(function (v) {\n                    builtParameters.push(v);\n                    return \"?\";\n                    // return \"$\" + builtParameters.length;\n                }).join(\", \");\n            }\n            else if (value instanceof Function) {\n                return value();\n            }\n            else {\n                builtParameters.push(value);\n                return \"?\";\n                // return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    };\n    /**\n     * Escapes a column name.\n     */\n    AbstractSqliteDriver.prototype.escape = function (columnName) {\n        return \"\\\"\" + columnName + \"\\\"\";\n    };\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     *\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\n     */\n    AbstractSqliteDriver.prototype.buildTableName = function (tableName, schema, database) {\n        return tableName;\n    };\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    AbstractSqliteDriver.prototype.normalizeType = function (column) {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\";\n        }\n        else if (column.type === String) {\n            return \"varchar\";\n        }\n        else if (column.type === Date) {\n            return \"datetime\";\n        }\n        else if (column.type === Boolean) {\n            return \"boolean\";\n        }\n        else if (column.type === \"uuid\") {\n            return \"varchar\";\n        }\n        else if (column.type === \"simple-array\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-json\") {\n            return \"text\";\n        }\n        else if (column.type === \"simple-enum\") {\n            return \"varchar\";\n        }\n        else {\n            return column.type || \"\";\n        }\n    };\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    AbstractSqliteDriver.prototype.normalizeDefault = function (columnMetadata) {\n        var defaultValue = columnMetadata.default;\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        }\n        else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n        }\n        else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        }\n        else if (typeof defaultValue === \"string\") {\n            return \"'\" + defaultValue + \"'\";\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    AbstractSqliteDriver.prototype.normalizeIsUnique = function (column) {\n        return column.entityMetadata.uniques.some(function (uq) { return uq.columns.length === 1 && uq.columns[0] === column; });\n    };\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    AbstractSqliteDriver.prototype.getColumnLength = function (column) {\n        return column.length ? column.length.toString() : \"\";\n    };\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    AbstractSqliteDriver.prototype.createFullType = function (column) {\n        var type = column.type;\n        if (column.enum) {\n            return \"varchar\";\n        }\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        }\n        else if (column.precision !== null && column.precision !== undefined) {\n            type += \"(\" + column.precision + \")\";\n        }\n        if (column.isArray)\n            type += \" array\";\n        return type;\n    };\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    AbstractSqliteDriver.prototype.obtainMasterConnection = function () {\n        return Promise.resolve();\n    };\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    AbstractSqliteDriver.prototype.obtainSlaveConnection = function () {\n        return Promise.resolve();\n    };\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    AbstractSqliteDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n        var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {\n            var value;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult) {\n                value = insertResult;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     value = insertValue[generatedColumn.databaseName];\n            }\n            if (!value)\n                return map;\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    };\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    AbstractSqliteDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {\n        var _this = this;\n        return columnMetadatas.filter(function (columnMetadata) {\n            var tableColumn = tableColumns.find(function (c) { return c.name === columnMetadata.databaseName; });\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log(\"==========================================\");\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== _this.normalizeType(columnMetadata)\n                || tableColumn.length !== columnMetadata.length\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                //  || tableColumn.comment !== columnMetadata.comment || // todo\n                || _this.normalizeDefault(columnMetadata) !== tableColumn.default\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    };\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    AbstractSqliteDriver.prototype.isReturningSqlSupported = function () {\n        return false;\n    };\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    AbstractSqliteDriver.prototype.isUUIDGenerationSupported = function () {\n        return false;\n    };\n    /**\n     * Creates an escaped parameter.\n     */\n    AbstractSqliteDriver.prototype.createParameter = function (parameterName, index) {\n        // return \"$\" + (index + 1);\n        return \"?\";\n        // return \"$\" + parameterName;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    AbstractSqliteDriver.prototype.createDatabaseConnection = function () {\n        throw new Error(\"Do not use AbstractSqlite directly, it has to be used with one of the sqlite drivers\");\n    };\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    AbstractSqliteDriver.prototype.loadDependencies = function () {\n        // dependencies have to be loaded in the specific driver\n    };\n    return AbstractSqliteDriver;\n}());\nexport { AbstractSqliteDriver };\n\n//# sourceMappingURL=AbstractSqliteDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nvar AbstractSqliteQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractSqliteQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function AbstractSqliteQueryRunner() {\n        return _super.call(this) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    AbstractSqliteQueryRunner.prototype.connect = function () {\n        return Promise.resolve(this.driver.databaseConnection);\n    };\n    /**\n     * Releases used database connection.\n     * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.\n     */\n    AbstractSqliteQueryRunner.prototype.release = function () {\n        this.loadedTables = [];\n        this.clearSqlMemory();\n        return Promise.resolve();\n    };\n    /**\n     * Starts transaction.\n     */\n    AbstractSqliteQueryRunner.prototype.startTransaction = function (isolationLevel) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.isTransactionActive)\n                            throw new TransactionAlreadyStartedError();\n                        this.isTransactionActive = true;\n                        if (!isolationLevel) return [3 /*break*/, 4];\n                        if (isolationLevel !== \"READ UNCOMMITTED\" && isolationLevel !== \"SERIALIZABLE\") {\n                            throw new Error(\"SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation\");\n                        }\n                        if (!(isolationLevel === \"READ UNCOMMITTED\")) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.query(\"PRAGMA read_uncommitted = true\")];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, this.query(\"PRAGMA read_uncommitted = false\")];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [4 /*yield*/, this.query(\"BEGIN TRANSACTION\")];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    AbstractSqliteQueryRunner.prototype.commitTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isTransactionActive)\n                            throw new TransactionNotStartedError();\n                        return [4 /*yield*/, this.query(\"COMMIT\")];\n                    case 1:\n                        _a.sent();\n                        this.isTransactionActive = false;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    AbstractSqliteQueryRunner.prototype.rollbackTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isTransactionActive)\n                            throw new TransactionNotStartedError();\n                        return [4 /*yield*/, this.query(\"ROLLBACK\")];\n                    case 1:\n                        _a.sent();\n                        this.isTransactionActive = false;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns raw data stream.\n     */\n    AbstractSqliteQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n        throw new Error(\"Stream is not supported by sqlite driver.\");\n    };\n    /**\n     * Returns all available database names including system databases.\n     */\n    AbstractSqliteQueryRunner.prototype.getDatabases = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve([])];\n            });\n        });\n    };\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    AbstractSqliteQueryRunner.prototype.getSchemas = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve([])];\n            });\n        });\n    };\n    /**\n     * Checks if database with the given name exist.\n     */\n    AbstractSqliteQueryRunner.prototype.hasDatabase = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve(false)];\n            });\n        });\n    };\n    /**\n     * Checks if schema with the given name exist.\n     */\n    AbstractSqliteQueryRunner.prototype.hasSchema = function (schema) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"This driver does not support table schemas\");\n            });\n        });\n    };\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    AbstractSqliteQueryRunner.prototype.hasTable = function (tableOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tableName, sql, result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n                        sql = \"SELECT * FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'table' AND \\\"name\\\" = '\" + tableName + \"'\";\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result.length ? true : false];\n                }\n            });\n        });\n    };\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    AbstractSqliteQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tableName, sql, columns;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n                        sql = \"PRAGMA table_info(\\\"\" + tableName + \"\\\")\";\n                        return [4 /*yield*/, this.query(sql)];\n                    case 1:\n                        columns = _a.sent();\n                        return [2 /*return*/, !!columns.find(function (column) { return column[\"name\"] === columnName; })];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new database.\n     */\n    AbstractSqliteQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve()];\n            });\n        });\n    };\n    /**\n     * Drops database.\n     */\n    AbstractSqliteQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve()];\n            });\n        });\n    };\n    /**\n     * Creates a new table schema.\n     */\n    AbstractSqliteQueryRunner.prototype.createSchema = function (schema, ifNotExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve()];\n            });\n        });\n    };\n    /**\n     * Drops table schema.\n     */\n    AbstractSqliteQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve()];\n            });\n        });\n    };\n    /**\n     * Creates a new table.\n     */\n    AbstractSqliteQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n        if (ifNotExist === void 0) { ifNotExist = false; }\n        if (createForeignKeys === void 0) { createForeignKeys = true; }\n        if (createIndices === void 0) { createIndices = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, isTableExist;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        if (!ifNotExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(table)];\n                    case 1:\n                        isTableExist = _a.sent();\n                        if (isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _a.label = 2;\n                    case 2:\n                        upQueries.push(this.createTableSql(table, createForeignKeys));\n                        downQueries.push(this.dropTableSql(table));\n                        if (createIndices) {\n                            table.indices.forEach(function (index) {\n                                // new index may be passed without name. In this case we generate index name manually.\n                                if (!index.name)\n                                    index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                                upQueries.push(_this.createIndexSql(table, index));\n                                downQueries.push(_this.dropIndexSql(index));\n                            });\n                        }\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the table.\n     */\n    AbstractSqliteQueryRunner.prototype.dropTable = function (tableOrName, ifExist, dropForeignKeys, dropIndices) {\n        if (dropForeignKeys === void 0) { dropForeignKeys = true; }\n        if (dropIndices === void 0) { dropIndices = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isTableExist, createForeignKeys, table, _a, upQueries, downQueries;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!ifExist) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.hasTable(tableOrName)];\n                    case 1:\n                        isTableExist = _b.sent();\n                        if (!isTableExist)\n                            return [2 /*return*/, Promise.resolve()];\n                        _b.label = 2;\n                    case 2:\n                        createForeignKeys = dropForeignKeys;\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 3];\n                        _a = tableOrName;\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 4:\n                        _a = _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        table = _a;\n                        upQueries = [];\n                        downQueries = [];\n                        if (dropIndices) {\n                            table.indices.forEach(function (index) {\n                                upQueries.push(_this.dropIndexSql(index));\n                                downQueries.push(_this.createIndexSql(table, index));\n                            });\n                        }\n                        upQueries.push(this.dropTableSql(table, ifExist));\n                        downQueries.push(this.createTableSql(table, createForeignKeys));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 6:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new view.\n     */\n    AbstractSqliteQueryRunner.prototype.createView = function (view) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(this.createViewSql(view));\n                        upQueries.push(this.insertViewDefinitionSql(view));\n                        downQueries.push(this.dropViewSql(view));\n                        downQueries.push(this.deleteViewDefinitionSql(view));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the view.\n     */\n    AbstractSqliteQueryRunner.prototype.dropView = function (target) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var viewName, view, upQueries, downQueries;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        viewName = target instanceof View ? target.name : target;\n                        return [4 /*yield*/, this.getCachedView(viewName)];\n                    case 1:\n                        view = _a.sent();\n                        upQueries = [];\n                        downQueries = [];\n                        upQueries.push(this.deleteViewDefinitionSql(view));\n                        upQueries.push(this.dropViewSql(view));\n                        downQueries.push(this.insertViewDefinitionSql(view));\n                        downQueries.push(this.createViewSql(view));\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames the given table.\n     */\n    AbstractSqliteQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var oldTable, _a, newTable, up, down;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(oldTableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = oldTableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(oldTableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        oldTable = _a;\n                        newTable = oldTable.clone();\n                        newTable.name = newTableName;\n                        up = new Query(\"ALTER TABLE \\\"\" + oldTable.name + \"\\\" RENAME TO \\\"\" + newTableName + \"\\\"\");\n                        down = new Query(\"ALTER TABLE \\\"\" + newTableName + \"\\\" RENAME TO \\\"\" + oldTable.name + \"\\\"\");\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        // rename old table;\n                        oldTable.name = newTable.name;\n                        // rename unique constraints\n                        newTable.uniques.forEach(function (unique) {\n                            unique.name = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n                        });\n                        // rename foreign key constraints\n                        newTable.foreignKeys.forEach(function (foreignKey) {\n                            foreignKey.name = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n                        });\n                        // rename indices\n                        newTable.indices.forEach(function (index) {\n                            index.name = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n                        });\n                        // recreate table with new constraint names\n                        return [4 /*yield*/, this.recreateTable(newTable, oldTable)];\n                    case 5:\n                        // recreate table with new constraint names\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new column from the column in the table.\n     */\n    AbstractSqliteQueryRunner.prototype.addColumn = function (tableOrName, column) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        return [2 /*return*/, this.addColumns(table, [column])];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    AbstractSqliteQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        columns.forEach(function (column) { return changedTable.addColumn(column); });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames column in the given table.\n     */\n    AbstractSqliteQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, oldColumn, newColumn;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) { return c.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        newColumn = undefined;\n                        if (newTableColumnOrName instanceof TableColumn) {\n                            newColumn = newTableColumnOrName;\n                        }\n                        else {\n                            newColumn = oldColumn.clone();\n                            newColumn.name = newTableColumnOrName;\n                        }\n                        return [2 /*return*/, this.changeColumn(table, oldColumn, newColumn)];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     */\n    AbstractSqliteQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, oldColumn;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) { return c.name === oldTableColumnOrName; });\n                        if (!oldColumn)\n                            throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n                        return [4 /*yield*/, this.changeColumns(table, [{ oldColumn: oldColumn, newColumn: newColumn }])];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Changes a column in the table.\n     * Changed column looses all its keys in the db.\n     */\n    AbstractSqliteQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        changedColumns.forEach(function (changedColumnSet) {\n                            if (changedColumnSet.newColumn.name !== changedColumnSet.oldColumn.name) {\n                                changedTable.findColumnUniques(changedColumnSet.oldColumn).forEach(function (unique) {\n                                    unique.columnNames.splice(unique.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                                    unique.columnNames.push(changedColumnSet.newColumn.name);\n                                    unique.name = _this.connection.namingStrategy.uniqueConstraintName(changedTable, unique.columnNames);\n                                });\n                                changedTable.findColumnForeignKeys(changedColumnSet.oldColumn).forEach(function (fk) {\n                                    fk.columnNames.splice(fk.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                                    fk.columnNames.push(changedColumnSet.newColumn.name);\n                                    fk.name = _this.connection.namingStrategy.foreignKeyName(changedTable, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                                });\n                                changedTable.findColumnIndices(changedColumnSet.oldColumn).forEach(function (index) {\n                                    index.columnNames.splice(index.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\n                                    index.columnNames.push(changedColumnSet.newColumn.name);\n                                    index.name = _this.connection.namingStrategy.indexName(changedTable, index.columnNames, index.where);\n                                });\n                            }\n                            var originalColumn = changedTable.columns.find(function (column) { return column.name === changedColumnSet.oldColumn.name; });\n                            if (originalColumn)\n                                changedTable.columns[changedTable.columns.indexOf(originalColumn)] = changedColumnSet.newColumn;\n                        });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops column in the table.\n     */\n    AbstractSqliteQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, column;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n                        if (!column)\n                            throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n                        return [4 /*yield*/, this.dropColumns(table, [column])];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops the columns in the table.\n     */\n    AbstractSqliteQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        columns.forEach(function (column) {\n                            changedTable.removeColumn(column);\n                            changedTable.findColumnUniques(column).forEach(function (unique) { return changedTable.removeUniqueConstraint(unique); });\n                            changedTable.findColumnIndices(column).forEach(function (index) { return changedTable.removeIndex(index); });\n                            changedTable.findColumnForeignKeys(column).forEach(function (fk) { return changedTable.removeForeignKey(fk); });\n                        });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        // remove column and its constraints from original table.\n                        columns.forEach(function (column) {\n                            table.removeColumn(column);\n                            table.findColumnUniques(column).forEach(function (unique) { return table.removeUniqueConstraint(unique); });\n                            table.findColumnIndices(column).forEach(function (index) { return table.removeIndex(index); });\n                            table.findColumnForeignKeys(column).forEach(function (fk) { return table.removeForeignKey(fk); });\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new primary key.\n     */\n    AbstractSqliteQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        changedTable.columns.forEach(function (column) {\n                            if (columnNames.find(function (columnName) { return columnName === column.name; }))\n                                column.isPrimary = true;\n                        });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        // mark columns as primary in original table\n                        table.columns.forEach(function (column) {\n                            if (columnNames.find(function (columnName) { return columnName === column.name; }))\n                                column.isPrimary = true;\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    AbstractSqliteQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.resolve()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a primary key.\n     */\n    AbstractSqliteQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        changedTable.primaryColumns.forEach(function (column) {\n                            column.isPrimary = false;\n                        });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        // mark primary columns as non-primary in original table\n                        table.primaryColumns.forEach(function (column) {\n                            column.isPrimary = false;\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraint.\n     */\n    AbstractSqliteQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.createUniqueConstraints(tableOrName, [uniqueConstraint])];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new unique constraints.\n     */\n    AbstractSqliteQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        uniqueConstraints.forEach(function (uniqueConstraint) { return changedTable.addUniqueConstraint(uniqueConstraint); });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an unique constraint.\n     */\n    AbstractSqliteQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, uniqueConstraint;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(function (u) { return u.name === uniqueOrName; });\n                        if (!uniqueConstraint)\n                            throw new Error(\"Supplied unique constraint was not found in table \" + table.name);\n                        return [4 /*yield*/, this.dropUniqueConstraints(table, [uniqueConstraint])];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates an unique constraints.\n     */\n    AbstractSqliteQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        uniqueConstraints.forEach(function (uniqueConstraint) { return changedTable.removeUniqueConstraint(uniqueConstraint); });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new check constraint.\n     */\n    AbstractSqliteQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.createCheckConstraints(tableOrName, [checkConstraint])];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new check constraints.\n     */\n    AbstractSqliteQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        checkConstraints.forEach(function (checkConstraint) { return changedTable.addCheckConstraint(checkConstraint); });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraint.\n     */\n    AbstractSqliteQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, checkConstraint;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(function (c) { return c.name === checkOrName; });\n                        if (!checkConstraint)\n                            throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n                        return [4 /*yield*/, this.dropCheckConstraints(table, [checkConstraint])];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops check constraints.\n     */\n    AbstractSqliteQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        checkConstraints.forEach(function (checkConstraint) { return changedTable.removeCheckConstraint(checkConstraint); });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new exclusion constraint.\n     */\n    AbstractSqliteQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"Sqlite does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates a new exclusion constraints.\n     */\n    AbstractSqliteQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"Sqlite does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops exclusion constraint.\n     */\n    AbstractSqliteQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"Sqlite does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Drops exclusion constraints.\n     */\n    AbstractSqliteQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                throw new Error(\"Sqlite does not support exclusion constraints.\");\n            });\n        });\n    };\n    /**\n     * Creates a new foreign key.\n     */\n    AbstractSqliteQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.createForeignKeys(tableOrName, [foreignKey])];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new foreign keys.\n     */\n    AbstractSqliteQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        foreignKeys.forEach(function (foreignKey) { return changedTable.addForeignKey(foreignKey); });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign key from the table.\n     */\n    AbstractSqliteQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, foreignKey;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) { return fk.name === foreignKeyOrName; });\n                        if (!foreignKey)\n                            throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n                        return [4 /*yield*/, this.dropForeignKeys(tableOrName, [foreignKey])];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops a foreign keys from the table.\n     */\n    AbstractSqliteQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, changedTable;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        changedTable = table.clone();\n                        foreignKeys.forEach(function (foreignKey) { return changedTable.removeForeignKey(foreignKey); });\n                        return [4 /*yield*/, this.recreateTable(changedTable, table)];\n                    case 4:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new index.\n     */\n    AbstractSqliteQueryRunner.prototype.createIndex = function (tableOrName, index) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        // new index may be passed without name. In this case we generate index name manually.\n                        if (!index.name)\n                            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                        up = this.createIndexSql(table, index);\n                        down = this.dropIndexSql(index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.addIndex(index);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a new indices\n     */\n    AbstractSqliteQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.createIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an index from the table.\n     */\n    AbstractSqliteQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, _a, index, up, down;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(tableOrName instanceof Table)) return [3 /*break*/, 1];\n                        _a = tableOrName;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.getCachedTable(tableOrName)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        table = _a;\n                        index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(function (i) { return i.name === indexOrName; });\n                        if (!index)\n                            throw new Error(\"Supplied index was not found in table \" + table.name);\n                        up = this.dropIndexSql(index);\n                        down = this.createIndexSql(table, index);\n                        return [4 /*yield*/, this.executeQueries(up, down)];\n                    case 4:\n                        _b.sent();\n                        table.removeIndex(index);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops an indices from the table.\n     */\n    AbstractSqliteQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = indices.map(function (index) { return _this.dropIndex(tableOrName, index); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    AbstractSqliteQueryRunner.prototype.clearTable = function (tableName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"DELETE FROM \\\"\" + tableName + \"\\\"\")];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    AbstractSqliteQueryRunner.prototype.clearDatabase = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var selectViewDropsQuery, dropViewQueries, selectTableDropsQuery, dropTableQueries, error_1, rollbackError_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.query(\"PRAGMA foreign_keys = OFF;\")];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.startTransaction()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 9, 14, 16]);\n                        selectViewDropsQuery = \"SELECT 'DROP VIEW \\\"' || name || '\\\";' as query FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'view'\";\n                        return [4 /*yield*/, this.query(selectViewDropsQuery)];\n                    case 4:\n                        dropViewQueries = _a.sent();\n                        return [4 /*yield*/, Promise.all(dropViewQueries.map(function (q) { return _this.query(q[\"query\"]); }))];\n                    case 5:\n                        _a.sent();\n                        selectTableDropsQuery = \"SELECT 'DROP TABLE \\\"' || name || '\\\";' as query FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'table' AND \\\"name\\\" != 'sqlite_sequence'\";\n                        return [4 /*yield*/, this.query(selectTableDropsQuery)];\n                    case 6:\n                        dropTableQueries = _a.sent();\n                        return [4 /*yield*/, Promise.all(dropTableQueries.map(function (q) { return _this.query(q[\"query\"]); }))];\n                    case 7:\n                        _a.sent();\n                        return [4 /*yield*/, this.commitTransaction()];\n                    case 8:\n                        _a.sent();\n                        return [3 /*break*/, 16];\n                    case 9:\n                        error_1 = _a.sent();\n                        _a.label = 10;\n                    case 10:\n                        _a.trys.push([10, 12, , 13]);\n                        return [4 /*yield*/, this.rollbackTransaction()];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 12:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 13];\n                    case 13: throw error_1;\n                    case 14: return [4 /*yield*/, this.query(\"PRAGMA foreign_keys = ON;\")];\n                    case 15:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 16: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    AbstractSqliteQueryRunner.prototype.loadViews = function (viewNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var hasTable, viewNamesString, query, dbViews;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.hasTable(this.getTypeormMetadataTableName())];\n                    case 1:\n                        hasTable = _a.sent();\n                        if (!hasTable)\n                            return [2 /*return*/, Promise.resolve([])];\n                        viewNamesString = viewNames.map(function (name) { return \"'\" + name + \"'\"; }).join(\", \");\n                        query = \"SELECT \\\"t\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"t\\\" INNER JOIN \\\"sqlite_master\\\" s ON \\\"s\\\".\\\"name\\\" = \\\"t\\\".\\\"name\\\" AND \\\"s\\\".\\\"type\\\" = 'view' WHERE \\\"t\\\".\\\"type\\\" = 'VIEW'\";\n                        if (viewNamesString.length > 0)\n                            query += \" AND \\\"t\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n                        return [4 /*yield*/, this.query(query)];\n                    case 2:\n                        dbViews = _a.sent();\n                        return [2 /*return*/, dbViews.map(function (dbView) {\n                                var view = new View();\n                                view.name = dbView[\"name\"];\n                                view.expression = dbView[\"value\"];\n                                return view;\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    AbstractSqliteQueryRunner.prototype.loadTables = function (tableNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tableNamesString, dbTables, dbIndicesDef;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // if no tables given then no need to proceed\n                        if (!tableNames || !tableNames.length)\n                            return [2 /*return*/, []];\n                        tableNamesString = tableNames.map(function (tableName) { return \"'\" + tableName + \"'\"; }).join(\", \");\n                        return [4 /*yield*/, this.query(\"SELECT * FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'table' AND \\\"name\\\" IN (\" + tableNamesString + \")\")];\n                    case 1:\n                        dbTables = _a.sent();\n                        return [4 /*yield*/, this.query(\"SELECT * FROM \\\"sqlite_master\\\" WHERE \\\"type\\\" = 'index' AND \\\"tbl_name\\\" IN (\" + tableNamesString + \")\")];\n                    case 2:\n                        dbIndicesDef = _a.sent();\n                        // if tables were not found in the db, no need to proceed\n                        if (!dbTables || !dbTables.length)\n                            return [2 /*return*/, []];\n                        // create table schemas for loaded tables\n                        return [2 /*return*/, Promise.all(dbTables.map(function (dbTable) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var table, sql, _a, dbColumns, dbIndices, dbForeignKeys, autoIncrementColumnName, tableSql, autoIncrementIndex, comma, bracket, tableForeignKeyConstraints, tableUniquePromises, _b, result, regexp, indicesPromises, indices;\n                                var _this = this;\n                                return tslib_1.__generator(this, function (_c) {\n                                    switch (_c.label) {\n                                        case 0:\n                                            table = new Table({ name: dbTable[\"name\"] });\n                                            sql = dbTable[\"sql\"];\n                                            return [4 /*yield*/, Promise.all([\n                                                    this.query(\"PRAGMA table_info(\\\"\" + dbTable[\"name\"] + \"\\\")\"),\n                                                    this.query(\"PRAGMA index_list(\\\"\" + dbTable[\"name\"] + \"\\\")\"),\n                                                    this.query(\"PRAGMA foreign_key_list(\\\"\" + dbTable[\"name\"] + \"\\\")\"),\n                                                ])];\n                                        case 1:\n                                            _a = tslib_1.__read.apply(void 0, [_c.sent(), 3]), dbColumns = _a[0], dbIndices = _a[1], dbForeignKeys = _a[2];\n                                            autoIncrementColumnName = undefined;\n                                            tableSql = dbTable[\"sql\"];\n                                            autoIncrementIndex = tableSql.toUpperCase().indexOf(\"AUTOINCREMENT\");\n                                            if (autoIncrementIndex !== -1) {\n                                                autoIncrementColumnName = tableSql.substr(0, autoIncrementIndex);\n                                                comma = autoIncrementColumnName.lastIndexOf(\",\");\n                                                bracket = autoIncrementColumnName.lastIndexOf(\"(\");\n                                                if (comma !== -1) {\n                                                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\n                                                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                                                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                                                }\n                                                else if (bracket !== -1) {\n                                                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\n                                                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\n                                                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\n                                                }\n                                            }\n                                            // create columns from the loaded columns\n                                            table.columns = dbColumns.map(function (dbColumn) {\n                                                var tableColumn = new TableColumn();\n                                                tableColumn.name = dbColumn[\"name\"];\n                                                tableColumn.type = dbColumn[\"type\"].toLowerCase();\n                                                tableColumn.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\n                                                tableColumn.isNullable = dbColumn[\"notnull\"] === 0;\n                                                // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0\n                                                tableColumn.isPrimary = dbColumn[\"pk\"] > 0;\n                                                tableColumn.comment = \"\"; // SQLite does not support column comments\n                                                tableColumn.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\n                                                if (tableColumn.isGenerated) {\n                                                    tableColumn.generationStrategy = \"increment\";\n                                                }\n                                                if (tableColumn.type === \"varchar\") {\n                                                    // Check if this is an enum\n                                                    var enumMatch = sql.match(new RegExp(\"\\\"(\" + tableColumn.name + \")\\\" varchar CHECK\\\\s*\\\\(\\\\s*\\\\1\\\\s+IN\\\\s*\\\\(('[^']+'(?:\\\\s*,\\\\s*'[^']+')+)\\\\s*\\\\)\\\\s*\\\\)\"));\n                                                    if (enumMatch) {\n                                                        // This is an enum\n                                                        tableColumn.type = \"simple-enum\";\n                                                        tableColumn.enum = enumMatch[2].substr(1, enumMatch[2].length - 2).split(\"','\");\n                                                    }\n                                                }\n                                                // parse datatype and attempt to retrieve length\n                                                var pos = tableColumn.type.indexOf(\"(\");\n                                                if (pos !== -1) {\n                                                    var dataType_1 = tableColumn.type.substr(0, pos);\n                                                    if (!!_this.driver.withLengthColumnTypes.find(function (col) { return col === dataType_1; })) {\n                                                        var len = parseInt(tableColumn.type.substring(pos + 1, tableColumn.type.length - 1));\n                                                        if (len) {\n                                                            tableColumn.length = len.toString();\n                                                            tableColumn.type = dataType_1; // remove the length part from the datatype\n                                                        }\n                                                    }\n                                                }\n                                                return tableColumn;\n                                            });\n                                            tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys, function (dbForeignKey) { return dbForeignKey[\"id\"]; });\n                                            table.foreignKeys = tableForeignKeyConstraints.map(function (foreignKey) {\n                                                var ownForeignKeys = dbForeignKeys.filter(function (dbForeignKey) { return dbForeignKey[\"id\"] === foreignKey[\"id\"] && dbForeignKey[\"table\"] === foreignKey[\"table\"]; });\n                                                var columnNames = ownForeignKeys.map(function (dbForeignKey) { return dbForeignKey[\"from\"]; });\n                                                var referencedColumnNames = ownForeignKeys.map(function (dbForeignKey) { return dbForeignKey[\"to\"]; });\n                                                // build foreign key name, because we can not get it directly.\n                                                var fkName = _this.connection.namingStrategy.foreignKeyName(table, columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n                                                return new TableForeignKey({\n                                                    name: fkName,\n                                                    columnNames: columnNames,\n                                                    referencedTableName: foreignKey[\"table\"],\n                                                    referencedColumnNames: referencedColumnNames,\n                                                    onDelete: foreignKey[\"on_delete\"],\n                                                    onUpdate: foreignKey[\"on_update\"]\n                                                });\n                                            });\n                                            tableUniquePromises = dbIndices\n                                                .filter(function (dbIndex) { return dbIndex[\"origin\"] === \"u\"; })\n                                                .map(function (dbIndex) { return dbIndex[\"name\"]; })\n                                                .filter(function (value, index, self) { return self.indexOf(value) === index; })\n                                                .map(function (dbIndexName) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                var dbIndex, indexInfos, indexColumns, column;\n                                                return tslib_1.__generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0:\n                                                            dbIndex = dbIndices.find(function (dbIndex) { return dbIndex[\"name\"] === dbIndexName; });\n                                                            return [4 /*yield*/, this.query(\"PRAGMA index_info(\\\"\" + dbIndex[\"name\"] + \"\\\")\")];\n                                                        case 1:\n                                                            indexInfos = _a.sent();\n                                                            indexColumns = indexInfos\n                                                                .sort(function (indexInfo1, indexInfo2) { return parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]); })\n                                                                .map(function (indexInfo) { return indexInfo[\"name\"]; });\n                                                            if (indexColumns.length === 1) {\n                                                                column = table.columns.find(function (column) {\n                                                                    return !!indexColumns.find(function (indexColumn) { return indexColumn === column.name; });\n                                                                });\n                                                                if (column)\n                                                                    column.isUnique = true;\n                                                            }\n                                                            // Sqlite does not store unique constraint name, so we generate its name manually.\n                                                            return [2 /*return*/, new TableUnique({\n                                                                    name: this.connection.namingStrategy.uniqueConstraintName(table, indexColumns),\n                                                                    columnNames: indexColumns\n                                                                })];\n                                                    }\n                                                });\n                                            }); });\n                                            _b = table;\n                                            return [4 /*yield*/, Promise.all(tableUniquePromises)];\n                                        case 2:\n                                            _b.uniques = (_c.sent());\n                                            regexp = /CONSTRAINT \"([^\"]*)\" CHECK (\\(.*?\\))([,]|[)]$)/g;\n                                            while (((result = regexp.exec(sql)) !== null)) {\n                                                table.checks.push(new TableCheck({ name: result[1], expression: result[2] }));\n                                            }\n                                            indicesPromises = dbIndices\n                                                .filter(function (dbIndex) { return dbIndex[\"origin\"] === \"c\"; })\n                                                .map(function (dbIndex) { return dbIndex[\"name\"]; })\n                                                .filter(function (value, index, self) { return self.indexOf(value) === index; }) // unqiue\n                                                .map(function (dbIndexName) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                var indexDef, condition, dbIndex, indexInfos, indexColumns, isUnique;\n                                                return tslib_1.__generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0:\n                                                            indexDef = dbIndicesDef.find(function (dbIndexDef) { return dbIndexDef[\"name\"] === dbIndexName; });\n                                                            condition = /WHERE (.*)/.exec(indexDef[\"sql\"]);\n                                                            dbIndex = dbIndices.find(function (dbIndex) { return dbIndex[\"name\"] === dbIndexName; });\n                                                            return [4 /*yield*/, this.query(\"PRAGMA index_info(\\\"\" + dbIndex[\"name\"] + \"\\\")\")];\n                                                        case 1:\n                                                            indexInfos = _a.sent();\n                                                            indexColumns = indexInfos\n                                                                .sort(function (indexInfo1, indexInfo2) { return parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]); })\n                                                                .map(function (indexInfo) { return indexInfo[\"name\"]; });\n                                                            isUnique = dbIndex[\"unique\"] === \"1\" || dbIndex[\"unique\"] === 1;\n                                                            return [2 /*return*/, new TableIndex({\n                                                                    table: table,\n                                                                    name: dbIndex[\"name\"],\n                                                                    columnNames: indexColumns,\n                                                                    isUnique: isUnique,\n                                                                    where: condition ? condition[1] : undefined\n                                                                })];\n                                                    }\n                                                });\n                                            }); });\n                                            return [4 /*yield*/, Promise.all(indicesPromises)];\n                                        case 3:\n                                            indices = _c.sent();\n                                            table.indices = indices.filter(function (index) { return !!index; });\n                                            return [2 /*return*/, table];\n                                    }\n                                });\n                            }); }))];\n                }\n            });\n        });\n    };\n    /**\n     * Builds create table sql.\n     */\n    AbstractSqliteQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n        var _this = this;\n        var primaryColumns = table.columns.filter(function (column) { return column.isPrimary; });\n        var hasAutoIncrement = primaryColumns.find(function (column) { return column.isGenerated && column.generationStrategy === \"increment\"; });\n        var skipPrimary = primaryColumns.length > 1;\n        if (skipPrimary && hasAutoIncrement)\n            throw new Error(\"Sqlite does not support AUTOINCREMENT on composite primary key\");\n        var columnDefinitions = table.columns.map(function (column) { return _this.buildCreateColumnSql(column, skipPrimary); }).join(\", \");\n        var sql = \"CREATE TABLE \\\"\" + table.name + \"\\\" (\" + columnDefinitions;\n        // need for `addColumn()` method, because it recreates table.\n        table.columns\n            .filter(function (column) { return column.isUnique; })\n            .forEach(function (column) {\n            var isUniqueExist = table.uniques.some(function (unique) { return unique.columnNames.length === 1 && unique.columnNames[0] === column.name; });\n            if (!isUniqueExist)\n                table.uniques.push(new TableUnique({\n                    name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                    columnNames: [column.name]\n                }));\n        });\n        if (table.uniques.length > 0) {\n            var uniquesSql = table.uniques.map(function (unique) {\n                var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                var columnNames = unique.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                return \"CONSTRAINT \\\"\" + uniqueName + \"\\\" UNIQUE (\" + columnNames + \")\";\n            }).join(\", \");\n            sql += \", \" + uniquesSql;\n        }\n        if (table.checks.length > 0) {\n            var checksSql = table.checks.map(function (check) {\n                var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n                return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n            }).join(\", \");\n            sql += \", \" + checksSql;\n        }\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            var foreignKeysSql = table.foreignKeys.map(function (fk) {\n                var columnNames = fk.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                if (!fk.name)\n                    fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n                var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \\\"\" + fk.referencedTableName + \"\\\" (\" + referencedColumnNames + \")\";\n                if (fk.onDelete)\n                    constraint += \" ON DELETE \" + fk.onDelete;\n                if (fk.onUpdate)\n                    constraint += \" ON UPDATE \" + fk.onUpdate;\n                return constraint;\n            }).join(\", \");\n            sql += \", \" + foreignKeysSql;\n        }\n        if (primaryColumns.length > 1) {\n            var columnNames = primaryColumns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n            sql += \", PRIMARY KEY (\" + columnNames + \")\";\n        }\n        sql += \")\";\n        var tableMetadata = this.connection.entityMetadatas.find(function (metadata) { return metadata.tableName === table.name; });\n        if (tableMetadata && tableMetadata.withoutRowid) {\n            sql += \" WITHOUT ROWID\";\n        }\n        return new Query(sql);\n    };\n    /**\n     * Builds drop table sql.\n     */\n    AbstractSqliteQueryRunner.prototype.dropTableSql = function (tableOrName, ifExist) {\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var query = ifExist ? \"DROP TABLE IF EXISTS \\\"\" + tableName + \"\\\"\" : \"DROP TABLE \\\"\" + tableName + \"\\\"\";\n        return new Query(query);\n    };\n    AbstractSqliteQueryRunner.prototype.createViewSql = function (view) {\n        if (typeof view.expression === \"string\") {\n            return new Query(\"CREATE VIEW \\\"\" + view.name + \"\\\" AS \" + view.expression);\n        }\n        else {\n            return new Query(\"CREATE VIEW \\\"\" + view.name + \"\\\" AS \" + view.expression(this.connection).getQuery());\n        }\n    };\n    AbstractSqliteQueryRunner.prototype.insertViewDefinitionSql = function (view) {\n        var expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        var _a = tslib_1.__read(this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", name: view.name, value: expression })\n            .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n        return new Query(query, parameters);\n    };\n    /**\n     * Builds drop view sql.\n     */\n    AbstractSqliteQueryRunner.prototype.dropViewSql = function (viewOrPath) {\n        var viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        return new Query(\"DROP VIEW \\\"\" + viewName + \"\\\"\");\n    };\n    /**\n     * Builds remove view sql.\n     */\n    AbstractSqliteQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {\n        var viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        var qb = this.connection.createQueryBuilder();\n        var _a = tslib_1.__read(qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(qb.escape(\"type\") + \" = 'VIEW'\")\n            .andWhere(qb.escape(\"name\") + \" = :name\", { name: viewName })\n            .getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n        return new Query(query, parameters);\n    };\n    /**\n     * Builds create index sql.\n     */\n    AbstractSqliteQueryRunner.prototype.createIndexSql = function (table, index) {\n        var columns = index.columnNames.map(function (columnName) { return \"\\\"\" + columnName + \"\\\"\"; }).join(\", \");\n        return new Query(\"CREATE \" + (index.isUnique ? \"UNIQUE \" : \"\") + \"INDEX \\\"\" + index.name + \"\\\" ON \\\"\" + table.name + \"\\\" (\" + columns + \") \" + (index.where ? \"WHERE \" + index.where : \"\"));\n    };\n    /**\n     * Builds drop index sql.\n     */\n    AbstractSqliteQueryRunner.prototype.dropIndexSql = function (indexOrName) {\n        var indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(\"DROP INDEX \\\"\" + indexName + \"\\\"\");\n    };\n    /**\n     * Builds a query for create column.\n     */\n    AbstractSqliteQueryRunner.prototype.buildCreateColumnSql = function (column, skipPrimary) {\n        var c = \"\\\"\" + column.name + \"\\\"\";\n        if (column instanceof ColumnMetadata) {\n            c += \" \" + this.driver.normalizeType(column);\n        }\n        else {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n        if (column.enum)\n            c += \" CHECK( \" + column.name + \" IN (\" + column.enum.map(function (val) { return \"'\" + val + \"'\"; }).join(\",\") + \") )\";\n        if (column.isPrimary && !skipPrimary)\n            c += \" PRIMARY KEY\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" AUTOINCREMENT\";\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT (\" + column.default + \")\";\n        return c;\n    };\n    AbstractSqliteQueryRunner.prototype.recreateTable = function (newTable, oldTable, migrateData) {\n        if (migrateData === void 0) { migrateData = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var upQueries, downQueries, newColumnNames, oldColumnNames;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        upQueries = [];\n                        downQueries = [];\n                        // drop old table indices\n                        oldTable.indices.forEach(function (index) {\n                            upQueries.push(_this.dropIndexSql(index));\n                            downQueries.push(_this.createIndexSql(oldTable, index));\n                        });\n                        // change table name into 'temporary_table'\n                        newTable.name = \"temporary_\" + newTable.name;\n                        // create new table\n                        upQueries.push(this.createTableSql(newTable, true));\n                        downQueries.push(this.dropTableSql(newTable));\n                        // migrate all data from the old table into new table\n                        if (migrateData) {\n                            newColumnNames = newTable.columns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            oldColumnNames = oldTable.columns.map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            if (oldTable.columns.length < newTable.columns.length) {\n                                newColumnNames = newTable.columns.filter(function (column) {\n                                    return oldTable.columns.find(function (c) { return c.name === column.name; });\n                                }).map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            }\n                            else if (oldTable.columns.length > newTable.columns.length) {\n                                oldColumnNames = oldTable.columns.filter(function (column) {\n                                    return newTable.columns.find(function (c) { return c.name === column.name; });\n                                }).map(function (column) { return \"\\\"\" + column.name + \"\\\"\"; }).join(\", \");\n                            }\n                            upQueries.push(new Query(\"INSERT INTO \\\"\" + newTable.name + \"\\\"(\" + newColumnNames + \") SELECT \" + oldColumnNames + \" FROM \\\"\" + oldTable.name + \"\\\"\"));\n                            downQueries.push(new Query(\"INSERT INTO \\\"\" + oldTable.name + \"\\\"(\" + oldColumnNames + \") SELECT \" + newColumnNames + \" FROM \\\"\" + newTable.name + \"\\\"\"));\n                        }\n                        // drop old table\n                        upQueries.push(this.dropTableSql(oldTable));\n                        downQueries.push(this.createTableSql(oldTable, true));\n                        // rename old table\n                        upQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME TO \\\"\" + oldTable.name + \"\\\"\"));\n                        downQueries.push(new Query(\"ALTER TABLE \\\"\" + oldTable.name + \"\\\" RENAME TO \\\"\" + newTable.name + \"\\\"\"));\n                        newTable.name = oldTable.name;\n                        // recreate table indices\n                        newTable.indices.forEach(function (index) {\n                            // new index may be passed without name. In this case we generate index name manually.\n                            if (!index.name)\n                                index.name = _this.connection.namingStrategy.indexName(newTable.name, index.columnNames, index.where);\n                            upQueries.push(_this.createIndexSql(newTable, index));\n                            downQueries.push(_this.dropIndexSql(index));\n                        });\n                        return [4 /*yield*/, this.executeQueries(upQueries, downQueries)];\n                    case 1:\n                        _a.sent();\n                        this.replaceCachedTable(oldTable, newTable);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AbstractSqliteQueryRunner;\n}(BaseQueryRunner));\nexport { AbstractSqliteQueryRunner };\n\n//# sourceMappingURL=AbstractSqliteQueryRunner.js.map\n","import * as tslib_1 from \"tslib\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { SqliteQueryRunner } from \"./SqliteQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\n/**\n * Organizes communication with sqlite DBMS.\n */\nvar SqliteDriver = /** @class */ (function (_super) {\n    tslib_1.__extends(SqliteDriver, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SqliteDriver(connection) {\n        var _this = _super.call(this, connection) || this;\n        _this.connection = connection;\n        _this.options = connection.options;\n        _this.database = _this.options.database;\n        // validate options to make sure everything is set\n        if (!_this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n        // load sqlite package\n        _this.loadDependencies();\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Closes connection with database.\n     */\n    SqliteDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        _this.queryRunner = undefined;\n                        _this.databaseConnection.close(function (err) { return err ? fail(err) : ok(); });\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    SqliteDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        if (!this.queryRunner)\n            this.queryRunner = new SqliteQueryRunner(this);\n        return this.queryRunner;\n    };\n    SqliteDriver.prototype.normalizeType = function (column) {\n        if (column.type === Buffer) {\n            return \"blob\";\n        }\n        return _super.prototype.normalizeType.call(this, column);\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     */\n    SqliteDriver.prototype.createDatabaseConnection = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            // Internal function to run a command on the connection and fail if an error occured.\n            function run(line) {\n                return new Promise(function (ok, fail) {\n                    databaseConnection.run(line, function (err) {\n                        if (err)\n                            return fail(err);\n                        ok();\n                    });\n                });\n            }\n            var databaseConnection;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.createDatabaseDirectory(this.options.database)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, new Promise(function (ok, fail) {\n                                var connection = new _this.sqlite.Database(_this.options.database, function (err) {\n                                    if (err)\n                                        return fail(err);\n                                    ok(connection);\n                                });\n                            })];\n                    case 2:\n                        databaseConnection = _a.sent();\n                        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                        // working properly. this also makes onDelete to work with sqlite.\n                        return [4 /*yield*/, run(\"PRAGMA foreign_keys = ON;\")];\n                    case 3:\n                        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                        // working properly. this also makes onDelete to work with sqlite.\n                        _a.sent();\n                        if (!this.options.key) return [3 /*break*/, 5];\n                        return [4 /*yield*/, run(\"PRAGMA key = \" + JSON.stringify(this.options.key) + \";\")];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [2 /*return*/, databaseConnection];\n                }\n            });\n        });\n    };\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    SqliteDriver.prototype.loadDependencies = function () {\n        try {\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\n        }\n        catch (e) {\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\n        }\n    };\n    /**\n     * Auto creates database directory if it does not exist.\n     */\n    SqliteDriver.prototype.createDatabaseDirectory = function (fullPath) {\n        var mkdirp = PlatformTools.load(\"mkdirp\");\n        var path = PlatformTools.load(\"path\");\n        return mkdirp(path.dirname(fullPath));\n    };\n    return SqliteDriver;\n}(AbstractSqliteDriver));\nexport { SqliteDriver };\n\n//# sourceMappingURL=SqliteDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\n/**\n * Runs queries on a single sqlite database connection.\n *\n * Does not support compose primary keys with autoincrement field.\n * todo: need to throw exception for this case.\n */\nvar SqliteQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(SqliteQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SqliteQueryRunner(driver) {\n        var _this = _super.call(this) || this;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    /**\n     * Executes a given SQL query.\n     */\n    SqliteQueryRunner.prototype.query = function (query, parameters) {\n        var _this = this;\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        var connection = this.driver.connection;\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var handler, databaseConnection, queryStartTime, isInsertQuery;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        handler = function (err, result) {\n                            // log slow queries if maxQueryExecution time is set\n                            var maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n                            var queryEndTime = +new Date();\n                            var queryExecutionTime = queryEndTime - queryStartTime;\n                            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                                connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                            if (err) {\n                                connection.logger.logQueryError(err, query, parameters, this);\n                                fail(new QueryFailedError(query, parameters, err));\n                            }\n                            else {\n                                ok(isInsertQuery ? this[\"lastID\"] : result);\n                            }\n                        };\n                        return [4 /*yield*/, this.connect()];\n                    case 1:\n                        databaseConnection = _a.sent();\n                        this.driver.connection.logger.logQuery(query, parameters, this);\n                        queryStartTime = +new Date();\n                        isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n                        if (isInsertQuery) {\n                            databaseConnection.run(query, parameters, handler);\n                        }\n                        else {\n                            databaseConnection.all(query, parameters, handler);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    return SqliteQueryRunner;\n}(AbstractSqliteQueryRunner));\nexport { SqliteQueryRunner };\n\n//# sourceMappingURL=SqliteQueryRunner.js.map\n","import * as tslib_1 from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nvar SqljsDriver = /** @class */ (function (_super) {\n    tslib_1.__extends(SqljsDriver, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SqljsDriver(connection) {\n        var _this = _super.call(this, connection) || this;\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (_this.options.autoSave && !_this.options.location && !_this.options.autoSaveCallback) {\n            throw new DriverOptionNotSetError(\"location or autoSaveCallback\");\n        }\n        // load sql.js package\n        _this.loadDependencies();\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs connection to the database.\n     */\n    SqljsDriver.prototype.connect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.createDatabaseConnection()];\n                    case 1:\n                        _a.databaseConnection = _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Closes connection with database.\n     */\n    SqljsDriver.prototype.disconnect = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (ok, fail) {\n                        try {\n                            _this.queryRunner = undefined;\n                            _this.databaseConnection.close();\n                            ok();\n                        }\n                        catch (e) {\n                            fail(e);\n                        }\n                    })];\n            });\n        });\n    };\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    SqljsDriver.prototype.createQueryRunner = function (mode) {\n        if (mode === void 0) { mode = \"master\"; }\n        if (!this.queryRunner)\n            this.queryRunner = new SqljsQueryRunner(this);\n        return this.queryRunner;\n    };\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    SqljsDriver.prototype.load = function (fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists) {\n        if (checkIfFileOrLocalStorageExists === void 0) { checkIfFileOrLocalStorageExists = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var database, localStorageContent;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(typeof fileNameOrLocalStorageOrData === \"string\")) return [3 /*break*/, 8];\n                        if (!(PlatformTools.type === \"node\")) return [3 /*break*/, 1];\n                        // Node.js\n                        // fileNameOrLocalStorageOrData should be a path to the file\n                        if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                            database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n                            return [2 /*return*/, this.createDatabaseConnectionWithImport(database)];\n                        }\n                        else if (checkIfFileOrLocalStorageExists) {\n                            throw new Error(\"File \" + fileNameOrLocalStorageOrData + \" does not exist\");\n                        }\n                        else {\n                            // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                            // Therefore open a database without importing an existing file.\n                            // File will be written on first write operation.\n                            return [2 /*return*/, this.createDatabaseConnectionWithImport()];\n                        }\n                        return [3 /*break*/, 7];\n                    case 1:\n                        localStorageContent = null;\n                        if (!this.options.useLocalForage) return [3 /*break*/, 5];\n                        if (!window.localforage) return [3 /*break*/, 3];\n                        return [4 /*yield*/, window.localforage.getItem(fileNameOrLocalStorageOrData)];\n                    case 2:\n                        localStorageContent = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3: throw new Error(\"localforage is not defined - please import localforage.js into your site\");\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n                        _a.label = 6;\n                    case 6:\n                        if (localStorageContent != null) {\n                            // localStorage value exists.\n                            return [2 /*return*/, this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent))];\n                        }\n                        else if (checkIfFileOrLocalStorageExists) {\n                            throw new Error(\"File \" + fileNameOrLocalStorageOrData + \" does not exist\");\n                        }\n                        else {\n                            // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                            // Therefore open a database without importing anything.\n                            // localStorage value will be written on first write operation.\n                            return [2 /*return*/, this.createDatabaseConnectionWithImport()];\n                        }\n                        _a.label = 7;\n                    case 7: return [3 /*break*/, 9];\n                    case 8: return [2 /*return*/, this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData)];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    SqljsDriver.prototype.save = function (location) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var path, content, e_1, database, databaseArray;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!location && !this.options.location) {\n                            throw new Error(\"No location is set, specify a location parameter or add the location option to your configuration\");\n                        }\n                        path = \"\";\n                        if (location) {\n                            path = location;\n                        }\n                        else if (this.options.location) {\n                            path = this.options.location;\n                        }\n                        if (!(PlatformTools.type === \"node\")) return [3 /*break*/, 5];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        content = Buffer.from(this.databaseConnection.export());\n                        return [4 /*yield*/, PlatformTools.writeFile(path, content)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _a.sent();\n                        throw new Error(\"Could not save database, error: \" + e_1);\n                    case 4: return [3 /*break*/, 10];\n                    case 5:\n                        database = this.databaseConnection.export();\n                        databaseArray = [].slice.call(database);\n                        if (!this.options.useLocalForage) return [3 /*break*/, 9];\n                        if (!window.localforage) return [3 /*break*/, 7];\n                        return [4 /*yield*/, window.localforage.setItem(path, JSON.stringify(databaseArray))];\n                    case 6:\n                        _a.sent();\n                        return [3 /*break*/, 8];\n                    case 7: throw new Error(\"localforage is not defined - please import localforage.js into your site\");\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n                        _a.label = 10;\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     */\n    SqljsDriver.prototype.autoSave = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.options.autoSave) return [3 /*break*/, 4];\n                        if (!this.options.autoSaveCallback) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.options.autoSaveCallback(this.export())];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 2: return [4 /*yield*/, this.save()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    SqljsDriver.prototype.export = function () {\n        return this.databaseConnection.export();\n    };\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    SqljsDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n        var _this = this;\n        var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {\n            // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n            if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n                var query = \"SELECT last_insert_rowid()\";\n                try {\n                    var result = _this.databaseConnection.exec(query);\n                    _this.connection.logger.logQuery(query);\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n                }\n                catch (e) {\n                    _this.connection.logger.logQueryError(e, query, []);\n                }\n            }\n            return map;\n        }, {});\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    SqljsDriver.prototype.createDatabaseConnection = function () {\n        if (this.options.location) {\n            return this.load(this.options.location, false);\n        }\n        return this.createDatabaseConnectionWithImport(this.options.database);\n    };\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    SqljsDriver.prototype.createDatabaseConnectionWithImport = function (database) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isLegacyVersion, sqlite, _a;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        isLegacyVersion = typeof this.sqlite.Database === \"function\";\n                        if (!isLegacyVersion) return [3 /*break*/, 1];\n                        _a = this.sqlite;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, this.sqlite(this.options.sqlJsConfig)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        sqlite = _a;\n                        if (database && database.length > 0) {\n                            this.databaseConnection = new sqlite.Database(database);\n                        }\n                        else {\n                            this.databaseConnection = new sqlite.Database();\n                        }\n                        // Enable foreign keys for database\n                        return [2 /*return*/, new Promise(function (ok, fail) {\n                                try {\n                                    _this.databaseConnection.exec(\"PRAGMA foreign_keys = ON;\");\n                                    ok(_this.databaseConnection);\n                                }\n                                catch (e) {\n                                    fail(e);\n                                }\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    SqljsDriver.prototype.loadDependencies = function () {\n        if (PlatformTools.type === \"browser\") {\n            this.sqlite = window.SQL;\n        }\n        else {\n            try {\n                this.sqlite = PlatformTools.load(\"sql.js\");\n            }\n            catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n            }\n        }\n    };\n    return SqljsDriver;\n}(AbstractSqliteDriver));\nexport { SqljsDriver };\n\n//# sourceMappingURL=SqljsDriver.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\n/**\n * Runs queries on a single sqlite database connection.\n */\nvar SqljsQueryRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(SqljsQueryRunner, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SqljsQueryRunner(driver) {\n        var _this = _super.call(this) || this;\n        _this.driver = driver;\n        _this.connection = driver.connection;\n        _this.broadcaster = new Broadcaster(_this);\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    SqljsQueryRunner.prototype.commitTransaction = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, _super.prototype.commitTransaction.call(this)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.driver.autoSave()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes a given SQL query.\n     */\n    SqljsQueryRunner.prototype.query = function (query, parameters) {\n        var _this = this;\n        if (parameters === void 0) { parameters = []; }\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n        return new Promise(function (ok, fail) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;\n            return tslib_1.__generator(this, function (_a) {\n                databaseConnection = this.driver.databaseConnection;\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                queryStartTime = +new Date();\n                try {\n                    statement = databaseConnection.prepare(query);\n                    if (parameters) {\n                        statement.bind(parameters);\n                    }\n                    maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    queryEndTime = +new Date();\n                    queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n                    result = [];\n                    while (statement.step()) {\n                        result.push(statement.getAsObject());\n                    }\n                    statement.free();\n                    ok(result);\n                }\n                catch (e) {\n                    if (statement) {\n                        statement.free();\n                    }\n                    this.driver.connection.logger.logQueryError(e, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, e));\n                }\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    return SqljsQueryRunner;\n}(AbstractSqliteQueryRunner));\nexport { SqljsQueryRunner };\n\n//# sourceMappingURL=SqljsQueryRunner.js.map\n","/**\n * Sql server driver requires parameter types to be specified fo input parameters used in the query.\n *\n * @see https://github.com/patriksimek/node-mssql#data-types\n */\nvar MssqlParameter = /** @class */ (function () {\n    function MssqlParameter(value, type) {\n        var params = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            params[_i - 2] = arguments[_i];\n        }\n        this.value = value;\n        this.type = type;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        this.params = [];\n        this.params = params || [];\n    }\n    return MssqlParameter;\n}());\nexport { MssqlParameter };\n\n//# sourceMappingURL=MssqlParameter.js.map\n","import * as tslib_1 from \"tslib\";\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\";\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\";\nimport { TreeRepository } from \"../repository/TreeRepository\";\nimport { Repository } from \"../repository/Repository\";\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport { CustomRepositoryNotFoundError } from \"../error/CustomRepositoryNotFoundError\";\nimport { EntitySchema, getMetadataArgsStorage } from \"../index\";\nimport { AbstractRepository } from \"../repository/AbstractRepository\";\nimport { CustomRepositoryCannotInheritRepositoryError } from \"../error/CustomRepositoryCannotInheritRepositoryError\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { RepositoryNotFoundError } from \"../error/RepositoryNotFoundError\";\nimport { RepositoryNotTreeError } from \"../error/RepositoryNotTreeError\";\nimport { RepositoryFactory } from \"../repository/RepositoryFactory\";\nimport { TreeRepositoryNotSupportedError } from \"../error/TreeRepositoryNotSupportedError\";\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\";\nimport { InsertResult } from \"../query-builder/result/InsertResult\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nvar EntityManager = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function EntityManager(connection, queryRunner) {\n        // -------------------------------------------------------------------------\n        // Protected Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Once created and then reused by en repositories.\n         */\n        this.repositories = [];\n        /**\n         * Plain to object transformer used in create and merge operations.\n         */\n        this.plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n        this.connection = connection;\n        if (queryRunner) {\n            this.queryRunner = queryRunner;\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this });\n        }\n    }\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    EntityManager.prototype.transaction = function (isolationOrRunInTransaction, runInTransactionParam) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isolation, runInTransaction, queryRunner, result, err_1, rollbackError_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        isolation = typeof isolationOrRunInTransaction === \"string\" ? isolationOrRunInTransaction : undefined;\n                        runInTransaction = typeof isolationOrRunInTransaction === \"function\" ? isolationOrRunInTransaction : runInTransactionParam;\n                        if (!runInTransaction) {\n                            throw new Error(\"Transaction method requires callback in second paramter if isolation level is supplied.\");\n                        }\n                        if (this.connection.driver instanceof MongoDriver)\n                            throw new Error(\"Transactions aren't supported by MongoDB.\");\n                        if (this.queryRunner && this.queryRunner.isReleased)\n                            throw new QueryRunnerProviderAlreadyReleasedError();\n                        if (this.queryRunner && this.queryRunner.isTransactionActive)\n                            throw new Error(\"Cannot start transaction because its already started\");\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 8, 13, 16]);\n                        if (!isolation) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction(isolation)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [4 /*yield*/, runInTransaction(queryRunner.manager)];\n                    case 6:\n                        result = _a.sent();\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        return [2 /*return*/, result];\n                    case 8:\n                        err_1 = _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        _a.trys.push([9, 11, , 12]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 10:\n                        _a.sent();\n                        return [3 /*break*/, 12];\n                    case 11:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 12];\n                    case 12: throw err_1;\n                    case 13:\n                        if (!!this.queryRunner) return [3 /*break*/, 15];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 14:\n                        _a.sent();\n                        _a.label = 15;\n                    case 15: return [7 /*endfinally*/];\n                    case 16: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    EntityManager.prototype.query = function (query, parameters) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.connection.query(query, parameters, this.queryRunner)];\n            });\n        });\n    };\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    EntityManager.prototype.createQueryBuilder = function (entityClass, alias, queryRunner) {\n        if (alias) {\n            return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);\n        }\n        else {\n            return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);\n        }\n    };\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    EntityManager.prototype.hasId = function (targetOrEntity, maybeEntity) {\n        var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        var metadata = this.connection.getMetadata(target);\n        return metadata.hasId(entity);\n    };\n    /**\n     * Gets entity mixed id.\n     */\n    EntityManager.prototype.getId = function (targetOrEntity, maybeEntity) {\n        var target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n        var entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n        var metadata = this.connection.getMetadata(target);\n        return metadata.getEntityIdMixedMap(entity);\n    };\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    EntityManager.prototype.create = function (entityClass, plainObjectOrObjects) {\n        var _this = this;\n        var metadata = this.connection.getMetadata(entityClass);\n        if (!plainObjectOrObjects)\n            return metadata.create(this.queryRunner);\n        if (Array.isArray(plainObjectOrObjects))\n            return plainObjectOrObjects.map(function (plainEntityLike) { return _this.create(entityClass, plainEntityLike); });\n        var mergeIntoEntity = metadata.create(this.queryRunner);\n        this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\n        return mergeIntoEntity;\n    };\n    /**\n     * Merges two entities into one new entity.\n     */\n    EntityManager.prototype.merge = function (entityClass, mergeIntoEntity) {\n        var _this = this;\n        var entityLikes = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            entityLikes[_i - 2] = arguments[_i];\n        }\n        var metadata = this.connection.getMetadata(entityClass);\n        entityLikes.forEach(function (object) { return _this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata); });\n        return mergeIntoEntity;\n    };\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    EntityManager.prototype.preload = function (entityClass, entityLike) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, plainObjectToDatabaseEntityTransformer, transformedEntity;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n                        return [4 /*yield*/, plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata)];\n                    case 1:\n                        transformedEntity = _a.sent();\n                        if (transformedEntity)\n                            return [2 /*return*/, this.merge(entityClass, transformedEntity, entityLike)];\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    /**\n     * Saves a given entity in the database.\n     */\n    EntityManager.prototype.save = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        if (target instanceof EntitySchema)\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Removes a given entity from the database.\n     */\n    EntityManager.prototype.remove = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute save operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    EntityManager.prototype.softRemove = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        if (target instanceof EntitySchema)\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute soft-remove operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"soft-remove\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Recovers one or many given entities.\n     */\n    EntityManager.prototype.recover = function (targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n        // normalize mixed parameters\n        var target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity : undefined;\n        var entity = target ? maybeEntityOrOptions : targetOrEntity;\n        var options = target ? maybeOptions : maybeEntityOrOptions;\n        if (target instanceof EntitySchema)\n            target = target.options.name;\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity);\n        // execute recover operation\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"recover\", target, entity, options)\n            .execute()\n            .then(function () { return entity; });\n    };\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    EntityManager.prototype.insert = function (target, entity) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var results;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // If user passed empty array of entities then we don't need to do\n                        // anything.\n                        //\n                        // Fixes GitHub issue #5734.  If we were to let this through we would\n                        // run into problems downstream, like subscribers getting invoked with\n                        // the empty array where they expect an entity, and SQL queries with an\n                        // empty VALUES clause.\n                        if (Array.isArray(entity) && entity.length === 0)\n                            return [2 /*return*/, Promise.resolve(new InsertResult())];\n                        if (!(this.connection.driver instanceof OracleDriver && Array.isArray(entity))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(entity.map(function (entity) { return _this.insert(target, entity); }))];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.reduce(function (mergedResult, result) { return Object.assign(mergedResult, result); }, {})];\n                    case 2: return [2 /*return*/, this.createQueryBuilder()\n                            .insert()\n                            .into(target)\n                            .values(entity)\n                            .execute()];\n                }\n            });\n        });\n    };\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.update = function (target, criteria, partialEntity) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the update method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.delete = function (targetOrEntity, criteria) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the delete method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.softDelete = function (targetOrEntity, criteria) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the delete method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    EntityManager.prototype.restore = function (targetOrEntity, criteria) {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)) {\n            return Promise.reject(new Error(\"Empty criteria(s) are not allowed for the delete method.\"));\n        }\n        if (typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute();\n        }\n        else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute();\n        }\n    };\n    /**\n     * Counts entities that match given find options or conditions.\n     * Useful for pagination.\n     */\n    EntityManager.prototype.count = function (entityClass, optionsOrConditions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return tslib_1.__generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                return [2 /*return*/, FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount()];\n            });\n        });\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    EntityManager.prototype.find = function (entityClass, optionsOrConditions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return tslib_1.__generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany()];\n            });\n        });\n    };\n    /**\n     * Finds entities that match given find options and conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    EntityManager.prototype.findAndCount = function (entityClass, optionsOrConditions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return tslib_1.__generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount()];\n            });\n        });\n    };\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     */\n    EntityManager.prototype.findByIds = function (entityClass, ids, optionsOrConditions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, qb;\n            return tslib_1.__generator(this, function (_a) {\n                // if no ids passed, no need to execute a query - just return an empty array of values\n                if (!ids.length)\n                    return [2 /*return*/, Promise.resolve([])];\n                metadata = this.connection.getMetadata(entityClass);\n                qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\n                FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\n                if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\n                    FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\n                return [2 /*return*/, qb.andWhereInIds(ids).getMany()];\n            });\n        });\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    EntityManager.prototype.findOne = function (entityClass, idOrOptionsOrConditions, maybeOptions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var findOptions, options, metadata, alias, qb, passedId;\n            return tslib_1.__generator(this, function (_a) {\n                findOptions = undefined;\n                if (FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions)) {\n                    findOptions = idOrOptionsOrConditions;\n                }\n                else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions)) {\n                    findOptions = maybeOptions;\n                }\n                options = undefined;\n                if (idOrOptionsOrConditions instanceof Object && !FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions))\n                    options = idOrOptionsOrConditions;\n                metadata = this.connection.getMetadata(entityClass);\n                alias = metadata.name;\n                if (findOptions && findOptions.join) {\n                    alias = findOptions.join.alias;\n                }\n                else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions) && maybeOptions.join) {\n                    alias = maybeOptions.join.alias;\n                }\n                qb = this.createQueryBuilder(entityClass, alias);\n                if (!findOptions || findOptions.loadEagerRelations !== false)\n                    FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias.metadata);\n                passedId = typeof idOrOptionsOrConditions === \"string\" || typeof idOrOptionsOrConditions === \"number\" || idOrOptionsOrConditions instanceof Date;\n                if (!passedId) {\n                    findOptions = tslib_1.__assign({}, (findOptions || {}), { take: 1 });\n                }\n                FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\n                if (options) {\n                    qb.where(options);\n                }\n                else if (passedId) {\n                    qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));\n                }\n                return [2 /*return*/, qb.getOne()];\n            });\n        });\n    };\n    /**\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\n     */\n    EntityManager.prototype.findOneOrFail = function (entityClass, idOrOptionsOrConditions, maybeOptions) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.findOne(entityClass, idOrOptionsOrConditions, maybeOptions).then(function (value) {\n                        if (value === undefined) {\n                            return Promise.reject(new EntityNotFoundError(entityClass, idOrOptionsOrConditions));\n                        }\n                        return Promise.resolve(value);\n                    })];\n            });\n        });\n    };\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    EntityManager.prototype.clear = function (entityClass) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, queryRunner;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.connection.getMetadata(entityClass);\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 6]);\n                        return [4 /*yield*/, queryRunner.clearTable(metadata.tablePath)];\n                    case 2: return [2 /*return*/, _a.sent()]; // await is needed here because we are using finally\n                    case 3:\n                        if (!!this.queryRunner) return [3 /*break*/, 5];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [7 /*endfinally*/];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    EntityManager.prototype.increment = function (entityClass, conditions, propertyPath, value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, column, values;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                column = metadata.findColumnWithPropertyPath(propertyPath);\n                if (!column)\n                    throw new Error(\"Column \" + propertyPath + \" was not found in \" + metadata.targetName + \" entity.\");\n                if (isNaN(Number(value)))\n                    throw new Error(\"Value \\\"\" + value + \"\\\" is not a number.\");\n                values = propertyPath\n                    .split(\".\")\n                    .reduceRight(function (value, key) {\n                    var _a;\n                    return (_a = {}, _a[key] = value, _a);\n                }, function () { return _this.connection.driver.escape(column.databaseName) + \" + \" + value; });\n                return [2 /*return*/, this\n                        .createQueryBuilder(entityClass, \"entity\")\n                        .update(entityClass)\n                        .set(values)\n                        .where(conditions)\n                        .execute()];\n            });\n        });\n    };\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    EntityManager.prototype.decrement = function (entityClass, conditions, propertyPath, value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, column, values;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                metadata = this.connection.getMetadata(entityClass);\n                column = metadata.findColumnWithPropertyPath(propertyPath);\n                if (!column)\n                    throw new Error(\"Column \" + propertyPath + \" was not found in \" + metadata.targetName + \" entity.\");\n                if (isNaN(Number(value)))\n                    throw new Error(\"Value \\\"\" + value + \"\\\" is not a number.\");\n                values = propertyPath\n                    .split(\".\")\n                    .reduceRight(function (value, key) {\n                    var _a;\n                    return (_a = {}, _a[key] = value, _a);\n                }, function () { return _this.connection.driver.escape(column.databaseName) + \" - \" + value; });\n                return [2 /*return*/, this\n                        .createQueryBuilder(entityClass, \"entity\")\n                        .update(entityClass)\n                        .set(values)\n                        .where(conditions)\n                        .execute()];\n            });\n        });\n    };\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    EntityManager.prototype.getRepository = function (target) {\n        // throw exception if there is no repository with this target registered\n        if (!this.connection.hasMetadata(target))\n            throw new RepositoryNotFoundError(this.connection.name, target);\n        // find already created repository instance and return it if found\n        var metadata = this.connection.getMetadata(target);\n        var repository = this.repositories.find(function (repository) { return repository.metadata === metadata; });\n        if (repository)\n            return repository;\n        // if repository was not found then create it, store its instance and return it\n        var newRepository = new RepositoryFactory().create(this, metadata, this.queryRunner);\n        this.repositories.push(newRepository);\n        return newRepository;\n    };\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    EntityManager.prototype.getTreeRepository = function (target) {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver);\n        // check if repository is real tree repository\n        var repository = this.getRepository(target);\n        if (!(repository instanceof TreeRepository))\n            throw new RepositoryNotTreeError(target);\n        return repository;\n    };\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    EntityManager.prototype.getMongoRepository = function (target) {\n        return this.connection.getMongoRepository(target);\n    };\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    EntityManager.prototype.getCustomRepository = function (customRepository) {\n        var entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(function (repository) {\n            return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n        var entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n        var entityRepositoryInstance = new entityRepositoryMetadataArgs.target(this, entityMetadata);\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!entityRepositoryInstance[\"manager\"])\n                entityRepositoryInstance[\"manager\"] = this;\n        }\n        if (entityRepositoryInstance instanceof Repository) {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n            entityRepositoryInstance[\"manager\"] = this;\n            entityRepositoryInstance[\"metadata\"] = entityMetadata;\n        }\n        return entityRepositoryInstance;\n    };\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    EntityManager.prototype.release = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (!this.queryRunner)\n                    throw new NoNeedToReleaseEntityManagerError();\n                return [2 /*return*/, this.queryRunner.release()];\n            });\n        });\n    };\n    return EntityManager;\n}());\nexport { EntityManager };\n\n//# sourceMappingURL=EntityManager.js.map\n","import { EntityManager } from \"./EntityManager\";\nimport { MongoEntityManager } from \"./MongoEntityManager\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { SqljsEntityManager } from \"./SqljsEntityManager\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\n/**\n * Helps to create entity managers.\n */\nvar EntityManagerFactory = /** @class */ (function () {\n    function EntityManagerFactory() {\n    }\n    /**\n     * Creates a new entity manager depend on a given connection's driver.\n     */\n    EntityManagerFactory.prototype.create = function (connection, queryRunner) {\n        if (connection.driver instanceof MongoDriver)\n            return new MongoEntityManager(connection);\n        if (connection.driver instanceof SqljsDriver)\n            return new SqljsEntityManager(connection, queryRunner);\n        return new EntityManager(connection, queryRunner);\n    };\n    return EntityManagerFactory;\n}());\nexport { EntityManagerFactory };\n\n//# sourceMappingURL=EntityManagerFactory.js.map\n","import * as tslib_1 from \"tslib\";\nimport { EntityManager } from \"./EntityManager\";\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\nvar SqljsEntityManager = /** @class */ (function (_super) {\n    tslib_1.__extends(SqljsEntityManager, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SqljsEntityManager(connection, queryRunner) {\n        var _this = _super.call(this, connection, queryRunner) || this;\n        _this.driver = connection.driver;\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\n     * or uses the given definition to open a new database.\n     */\n    SqljsEntityManager.prototype.loadDatabase = function (fileNameOrLocalStorageOrData) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.driver.load(fileNameOrLocalStorageOrData)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Saves the current database to a file (Node.js) or localstorage (browser)\n     * if fileNameOrLocalStorage is not set options.location is used.\n     */\n    SqljsEntityManager.prototype.saveDatabase = function (fileNameOrLocalStorage) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.driver.save(fileNameOrLocalStorage)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current database definition.\n     */\n    SqljsEntityManager.prototype.exportDatabase = function () {\n        return this.driver.export();\n    };\n    return SqljsEntityManager;\n}(EntityManager));\nexport { SqljsEntityManager };\n\n//# sourceMappingURL=SqljsEntityManager.js.map\n","/**\n * Interface for entity metadata mappings stored inside \"schemas\" instead of models decorated by decorators.\n */\nvar EntitySchema = /** @class */ (function () {\n    function EntitySchema(options) {\n        this.options = options;\n    }\n    return EntitySchema;\n}());\nexport { EntitySchema };\n\n//# sourceMappingURL=EntitySchema.js.map\n","import { MetadataArgsStorage } from \"../metadata-args/MetadataArgsStorage\";\n/**\n * Transforms entity schema into metadata args storage.\n * The result will be just like entities read from decorators.\n */\nvar EntitySchemaTransformer = /** @class */ (function () {\n    function EntitySchemaTransformer() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Transforms entity schema into new metadata args storage object.\n     */\n    EntitySchemaTransformer.prototype.transform = function (schemas) {\n        var metadataArgsStorage = new MetadataArgsStorage();\n        schemas.forEach(function (entitySchema) {\n            var options = entitySchema.options;\n            // add table metadata args from the schema\n            var tableMetadata = {\n                target: options.target || options.name,\n                name: options.tableName,\n                database: options.database,\n                schema: options.schema,\n                type: options.type || \"regular\",\n                orderBy: options.orderBy,\n                synchronize: options.synchronize,\n                expression: options.expression\n            };\n            metadataArgsStorage.tables.push(tableMetadata);\n            // add columns metadata args from the schema\n            Object.keys(options.columns).forEach(function (columnName) {\n                var column = options.columns[columnName];\n                var mode = \"regular\";\n                if (column.createDate)\n                    mode = \"createDate\";\n                if (column.updateDate)\n                    mode = \"updateDate\";\n                if (column.deleteDate)\n                    mode = \"deleteDate\";\n                if (column.version)\n                    mode = \"version\";\n                if (column.treeChildrenCount)\n                    mode = \"treeChildrenCount\";\n                if (column.treeLevel)\n                    mode = \"treeLevel\";\n                if (column.objectId)\n                    mode = \"objectId\";\n                var columnAgrs = {\n                    target: options.target || options.name,\n                    mode: mode,\n                    propertyName: columnName,\n                    options: {\n                        type: column.type,\n                        name: column.objectId ? \"_id\" : column.name,\n                        length: column.length,\n                        width: column.width,\n                        nullable: column.nullable,\n                        readonly: column.readonly,\n                        update: column.update,\n                        select: column.select,\n                        insert: column.insert,\n                        primary: column.primary,\n                        unique: column.unique,\n                        comment: column.comment,\n                        default: column.default,\n                        onUpdate: column.onUpdate,\n                        precision: column.precision,\n                        scale: column.scale,\n                        zerofill: column.zerofill,\n                        unsigned: column.unsigned,\n                        charset: column.charset,\n                        collation: column.collation,\n                        enum: column.enum,\n                        asExpression: column.asExpression,\n                        generatedType: column.generatedType,\n                        hstoreType: column.hstoreType,\n                        array: column.array,\n                        transformer: column.transformer,\n                        spatialFeatureType: column.spatialFeatureType,\n                        srid: column.srid\n                    }\n                };\n                metadataArgsStorage.columns.push(columnAgrs);\n                if (column.generated) {\n                    var generationArgs = {\n                        target: options.target || options.name,\n                        propertyName: columnName,\n                        strategy: typeof column.generated === \"string\" ? column.generated : \"increment\"\n                    };\n                    metadataArgsStorage.generations.push(generationArgs);\n                }\n                if (column.unique)\n                    metadataArgsStorage.uniques.push({ target: options.target || options.name, columns: [columnName] });\n            });\n            // add relation metadata args from the schema\n            if (options.relations) {\n                Object.keys(options.relations).forEach(function (relationName) {\n                    var relationSchema = options.relations[relationName];\n                    var relation = {\n                        target: options.target || options.name,\n                        propertyName: relationName,\n                        relationType: relationSchema.type,\n                        isLazy: relationSchema.lazy || false,\n                        type: relationSchema.target,\n                        inverseSideProperty: relationSchema.inverseSide,\n                        isTreeParent: relationSchema.treeParent,\n                        isTreeChildren: relationSchema.treeChildren,\n                        options: {\n                            eager: relationSchema.eager || false,\n                            cascade: relationSchema.cascade,\n                            nullable: relationSchema.nullable,\n                            onDelete: relationSchema.onDelete,\n                            onUpdate: relationSchema.onUpdate,\n                            deferrable: relationSchema.deferrable,\n                            primary: relationSchema.primary,\n                            persistence: relationSchema.persistence\n                        }\n                    };\n                    metadataArgsStorage.relations.push(relation);\n                    // add join column\n                    if (relationSchema.joinColumn) {\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\n                            var joinColumn = {\n                                target: options.target || options.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        }\n                        else {\n                            var joinColumn = {\n                                target: options.target || options.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinColumn.name,\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\n                            };\n                            metadataArgsStorage.joinColumns.push(joinColumn);\n                        }\n                    }\n                    // add join table\n                    if (relationSchema.joinTable) {\n                        if (typeof relationSchema.joinTable === \"boolean\") {\n                            var joinTable = {\n                                target: options.target || options.name,\n                                propertyName: relationName\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        }\n                        else {\n                            var joinTable = {\n                                target: options.target || options.name,\n                                propertyName: relationName,\n                                name: relationSchema.joinTable.name,\n                                database: relationSchema.joinTable.database,\n                                schema: relationSchema.joinTable.schema,\n                                joinColumns: (relationSchema.joinTable.joinColumn ? [relationSchema.joinTable.joinColumn] : relationSchema.joinTable.joinColumns),\n                                inverseJoinColumns: (relationSchema.joinTable.inverseJoinColumn ? [relationSchema.joinTable.inverseJoinColumn] : relationSchema.joinTable.inverseJoinColumns),\n                            };\n                            metadataArgsStorage.joinTables.push(joinTable);\n                        }\n                    }\n                });\n            }\n            // add index metadata args from the schema\n            if (options.indices) {\n                options.indices.forEach(function (index) {\n                    var indexAgrs = {\n                        target: options.target || options.name,\n                        name: index.name,\n                        unique: index.unique === true ? true : false,\n                        spatial: index.spatial === true ? true : false,\n                        fulltext: index.fulltext === true ? true : false,\n                        parser: index.parser,\n                        synchronize: index.synchronize === false ? false : true,\n                        where: index.where,\n                        sparse: index.sparse,\n                        columns: index.columns\n                    };\n                    metadataArgsStorage.indices.push(indexAgrs);\n                });\n            }\n            // add unique metadata args from the schema\n            if (options.uniques) {\n                options.uniques.forEach(function (unique) {\n                    var uniqueAgrs = {\n                        target: options.target || options.name,\n                        name: unique.name,\n                        columns: unique.columns\n                    };\n                    metadataArgsStorage.uniques.push(uniqueAgrs);\n                });\n            }\n            // add check metadata args from the schema\n            if (options.checks) {\n                options.checks.forEach(function (check) {\n                    var checkAgrs = {\n                        target: options.target || options.name,\n                        name: check.name,\n                        expression: check.expression\n                    };\n                    metadataArgsStorage.checks.push(checkAgrs);\n                });\n            }\n            // add exclusion metadata args from the schema\n            if (options.exclusions) {\n                options.exclusions.forEach(function (exclusion) {\n                    var exclusionArgs = {\n                        target: options.target || options.name,\n                        name: exclusion.name,\n                        expression: exclusion.expression\n                    };\n                    metadataArgsStorage.exclusions.push(exclusionArgs);\n                });\n            }\n        });\n        return metadataArgsStorage;\n    };\n    return EntitySchemaTransformer;\n}());\nexport { EntitySchemaTransformer };\n\n//# sourceMappingURL=EntitySchemaTransformer.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.\n */\nvar AlreadyHasActiveConnectionError = /** @class */ (function (_super) {\n    tslib_1.__extends(AlreadyHasActiveConnectionError, _super);\n    function AlreadyHasActiveConnectionError(connectionName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"AlreadyHasActiveConnectionError\";\n        Object.setPrototypeOf(_this, AlreadyHasActiveConnectionError.prototype);\n        _this.message = \"Cannot create a new connection named \\\"\" + connectionName + \"\\\", because connection with such name \" +\n            \"already exist and it now has an active connection session.\";\n        return _this;\n    }\n    return AlreadyHasActiveConnectionError;\n}(Error));\nexport { AlreadyHasActiveConnectionError };\n\n//# sourceMappingURL=AlreadyHasActiveConnectionError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user saves tree children entity but its parent is not saved yet.\n*/\nvar CannotAttachTreeChildrenEntityError = /** @class */ (function (_super) {\n    tslib_1.__extends(CannotAttachTreeChildrenEntityError, _super);\n    function CannotAttachTreeChildrenEntityError(entityName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CannotAttachTreeChildrenEntityError\";\n        Object.setPrototypeOf(_this, CannotAttachTreeChildrenEntityError.prototype);\n        _this.message = \"Cannot attach entity \\\"\" + entityName + \"\\\" to its parent. Please make sure parent is saved in the database before saving children nodes.\";\n        return _this;\n    }\n    return CannotAttachTreeChildrenEntityError;\n}(Error));\nexport { CannotAttachTreeChildrenEntityError };\n\n//# sourceMappingURL=CannotAttachTreeChildrenEntityError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when consumer tries to connect when he already connected.\n */\nvar CannotConnectAlreadyConnectedError = /** @class */ (function (_super) {\n    tslib_1.__extends(CannotConnectAlreadyConnectedError, _super);\n    function CannotConnectAlreadyConnectedError(connectionName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CannotConnectAlreadyConnectedError\";\n        Object.setPrototypeOf(_this, CannotConnectAlreadyConnectedError.prototype);\n        _this.message = \"Cannot create a \\\"\" + connectionName + \"\\\" connection because connection to the database already established.\";\n        return _this;\n    }\n    return CannotConnectAlreadyConnectedError;\n}(Error));\nexport { CannotConnectAlreadyConnectedError };\n\n//# sourceMappingURL=CannotConnectAlreadyConnectedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to create entity id map from the mixed id value,\n * but id value is a single value when entity requires multiple values.\n */\nvar CannotCreateEntityIdMapError = /** @class */ (function (_super) {\n    tslib_1.__extends(CannotCreateEntityIdMapError, _super);\n    function CannotCreateEntityIdMapError(metadata, id) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CannotCreateEntityIdMapError\";\n        Object.setPrototypeOf(_this, CannotCreateEntityIdMapError.prototype);\n        var objectExample = metadata.primaryColumns.reduce(function (object, column, index) {\n            column.setEntityValue(object, index + 1);\n            return object;\n        }, {});\n        _this.message = \"Cannot use given entity id \\\"\" + id + \"\\\" because \\\"\" + metadata.targetName + \"\\\" contains multiple primary columns, you must provide object in following form: \" + JSON.stringify(objectExample) + \" as an id.\";\n        return _this;\n    }\n    return CannotCreateEntityIdMapError;\n}(Error));\nexport { CannotCreateEntityIdMapError };\n\n//# sourceMappingURL=CannotCreateEntityIdMapError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.\n */\nvar CannotDetermineEntityError = /** @class */ (function (_super) {\n    tslib_1.__extends(CannotDetermineEntityError, _super);\n    function CannotDetermineEntityError(operation) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CannotDetermineEntityError\";\n        Object.setPrototypeOf(_this, CannotDetermineEntityError.prototype);\n        _this.message = \"Cannot \" + operation + \", given value must be instance of entity class, instead object literal is given. Or you must specify an entity target to method call.\";\n        return _this;\n    }\n    return CannotDetermineEntityError;\n}(Error));\nexport { CannotDetermineEntityError };\n\n//# sourceMappingURL=CannotDetermineEntityError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when consumer tries to execute operation allowed only if connection is opened.\n */\nvar CannotExecuteNotConnectedError = /** @class */ (function (_super) {\n    tslib_1.__extends(CannotExecuteNotConnectedError, _super);\n    function CannotExecuteNotConnectedError(connectionName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CannotExecuteNotConnectedError\";\n        Object.setPrototypeOf(_this, CannotExecuteNotConnectedError.prototype);\n        _this.message = \"Cannot execute operation on \\\"\" + connectionName + \"\\\" connection because connection is not yet established.\";\n        return _this;\n    }\n    return CannotExecuteNotConnectedError;\n}(Error));\nexport { CannotExecuteNotConnectedError };\n\n//# sourceMappingURL=CannotExecuteNotConnectedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nvar CannotReflectMethodParameterTypeError = /** @class */ (function (_super) {\n    tslib_1.__extends(CannotReflectMethodParameterTypeError, _super);\n    function CannotReflectMethodParameterTypeError(target, methodName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CannotReflectMethodParameterTypeError\";\n        Object.setPrototypeOf(_this, CannotReflectMethodParameterTypeError.prototype);\n        _this.message = \"Cannot get reflected type for a \\\"\" + methodName + \"\\\" method's parameter of \\\"\" + target.name + \"\\\" class. \" +\n            \"Make sure you have turned on an \\\"emitDecoratorMetadata\\\": true option in tsconfig.json. \" +\n            \"Also make sure you have imported \\\"reflect-metadata\\\" on top of the main entry file in your application.\";\n        return _this;\n    }\n    return CannotReflectMethodParameterTypeError;\n}(Error));\nexport { CannotReflectMethodParameterTypeError };\n\n//# sourceMappingURL=CannotReflectMethodParameterTypeError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when circular relations detected with nullable set to false.\n */\nvar CircularRelationsError = /** @class */ (function (_super) {\n    tslib_1.__extends(CircularRelationsError, _super);\n    function CircularRelationsError(path) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CircularRelationsError\";\n        Object.setPrototypeOf(_this, CircularRelationsError.prototype);\n        _this.message = \"Circular relations detected: \" + path + \". To resolve this issue you need to set nullable: true somewhere in this dependency structure.\";\n        return _this;\n    }\n    return CircularRelationsError;\n}(Error));\nexport { CircularRelationsError };\n\n//# sourceMappingURL=CircularRelationsError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when ORM cannot get column's type automatically.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nvar ColumnTypeUndefinedError = /** @class */ (function (_super) {\n    tslib_1.__extends(ColumnTypeUndefinedError, _super);\n    function ColumnTypeUndefinedError(object, propertyName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"ColumnTypeUndefinedError\";\n        Object.setPrototypeOf(_this, ColumnTypeUndefinedError.prototype);\n        _this.message = \"Column type for \" + object.constructor.name + \"#\" + propertyName + \" is not defined and cannot be guessed. \" +\n            \"Make sure you have turned on an \\\"emitDecoratorMetadata\\\": true option in tsconfig.json. \" +\n            \"Also make sure you have imported \\\"reflect-metadata\\\" on top of the main entry file in your application (before any entity imported).\" +\n            \"If you are using JavaScript instead of TypeScript you must explicitly provide a column type.\";\n        return _this;\n    }\n    return ColumnTypeUndefinedError;\n}(Error));\nexport { ColumnTypeUndefinedError };\n\n//# sourceMappingURL=ColumnTypeUndefinedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to execute operation that requires connection to be established.\n */\nvar ConnectionIsNotSetError = /** @class */ (function (_super) {\n    tslib_1.__extends(ConnectionIsNotSetError, _super);\n    function ConnectionIsNotSetError(dbType) {\n        var _this = _super.call(this) || this;\n        _this.name = \"ConnectionIsNotSetError\";\n        Object.setPrototypeOf(_this, ConnectionIsNotSetError.prototype);\n        _this.message = \"Connection with \" + dbType + \" database is not established. Check connection configuration.\";\n        return _this;\n    }\n    return ConnectionIsNotSetError;\n}(Error));\nexport { ConnectionIsNotSetError };\n\n//# sourceMappingURL=ConnectionIsNotSetError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when consumer tries to get connection that does not exist.\n */\nvar ConnectionNotFoundError = /** @class */ (function (_super) {\n    tslib_1.__extends(ConnectionNotFoundError, _super);\n    function ConnectionNotFoundError(name) {\n        var _this = _super.call(this) || this;\n        _this.name = \"ConnectionNotFoundError\";\n        Object.setPrototypeOf(_this, ConnectionNotFoundError.prototype);\n        _this.message = \"Connection \\\"\" + name + \"\\\" was not found.\";\n        return _this;\n    }\n    return ConnectionNotFoundError;\n}(Error));\nexport { ConnectionNotFoundError };\n\n//# sourceMappingURL=ConnectionNotFoundError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.\n */\nvar CustomRepositoryCannotInheritRepositoryError = /** @class */ (function (_super) {\n    tslib_1.__extends(CustomRepositoryCannotInheritRepositoryError, _super);\n    function CustomRepositoryCannotInheritRepositoryError(repository) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CustomRepositoryCannotInheritRepositoryError\";\n        Object.setPrototypeOf(_this, CustomRepositoryCannotInheritRepositoryError.prototype);\n        _this.message = \"Custom entity repository \" + (repository instanceof Function ? repository.name : repository.constructor.name) + \" \" +\n            \" cannot inherit Repository class without entity being set in the @EntityRepository decorator.\";\n        return _this;\n    }\n    return CustomRepositoryCannotInheritRepositoryError;\n}(Error));\nexport { CustomRepositoryCannotInheritRepositoryError };\n\n//# sourceMappingURL=CustomRepositoryCannotInheritRepositoryError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.\n */\nvar CustomRepositoryDoesNotHaveEntityError = /** @class */ (function (_super) {\n    tslib_1.__extends(CustomRepositoryDoesNotHaveEntityError, _super);\n    function CustomRepositoryDoesNotHaveEntityError(repository) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CustomRepositoryDoesNotHaveEntityError\";\n        Object.setPrototypeOf(_this, CustomRepositoryDoesNotHaveEntityError.prototype);\n        _this.message = \"Custom repository \" + (repository instanceof Function ? repository.name : repository.constructor.name) + \" does not have managed entity. \" +\n            \"Did you forget to specify entity for it @EntityRepository(MyEntity)? \";\n        return _this;\n    }\n    return CustomRepositoryDoesNotHaveEntityError;\n}(Error));\nexport { CustomRepositoryDoesNotHaveEntityError };\n\n//# sourceMappingURL=CustomRepositoryDoesNotHaveEntityError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown if custom repository was not found.\n */\nvar CustomRepositoryNotFoundError = /** @class */ (function (_super) {\n    tslib_1.__extends(CustomRepositoryNotFoundError, _super);\n    function CustomRepositoryNotFoundError(repository) {\n        var _this = _super.call(this) || this;\n        _this.name = \"CustomRepositoryNotFoundError\";\n        Object.setPrototypeOf(_this, CustomRepositoryNotFoundError.prototype);\n        _this.message = \"Custom repository \" + (repository instanceof Function ? repository.name : repository.constructor.name) + \" was not found. \" +\n            \"Did you forgot to put @EntityRepository decorator on it?\";\n        return _this;\n    }\n    return CustomRepositoryNotFoundError;\n}(Error));\nexport { CustomRepositoryNotFoundError };\n\n//# sourceMappingURL=CustomRepositoryNotFoundError.js.map\n","import * as tslib_1 from \"tslib\";\nvar DataTypeNotSupportedError = /** @class */ (function (_super) {\n    tslib_1.__extends(DataTypeNotSupportedError, _super);\n    function DataTypeNotSupportedError(column, dataType, database) {\n        var _this = _super.call(this) || this;\n        _this.name = \"DataTypeNotSupportedError\";\n        Object.setPrototypeOf(_this, DataTypeNotSupportedError.prototype);\n        var type = typeof dataType === \"string\" ? dataType : dataType.name;\n        _this.message = \"Data type \\\"\" + type + \"\\\" in \\\"\" + column.entityMetadata.targetName + \".\" + column.propertyName + \"\\\" is not supported by \\\"\" + database + \"\\\" database.\";\n        return _this;\n    }\n    return DataTypeNotSupportedError;\n}(Error));\nexport { DataTypeNotSupportedError };\n\n//# sourceMappingURL=DataTypeNotSupportedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown if some required driver's option is not set.\n */\nvar DriverOptionNotSetError = /** @class */ (function (_super) {\n    tslib_1.__extends(DriverOptionNotSetError, _super);\n    function DriverOptionNotSetError(optionName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"DriverOptionNotSetError\";\n        Object.setPrototypeOf(_this, DriverOptionNotSetError.prototype);\n        _this.message = \"Driver option (\" + optionName + \") is not set. Please set it to perform connection to the database.\";\n        return _this;\n    }\n    return DriverOptionNotSetError;\n}(Error));\nexport { DriverOptionNotSetError };\n\n//# sourceMappingURL=DriverOptionNotSetError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when required driver's package is not installed.\n */\nvar DriverPackageNotInstalledError = /** @class */ (function (_super) {\n    tslib_1.__extends(DriverPackageNotInstalledError, _super);\n    function DriverPackageNotInstalledError(driverName, packageName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"DriverPackageNotInstalledError\";\n        Object.setPrototypeOf(_this, DriverPackageNotInstalledError.prototype);\n        _this.message = driverName + \" package has not been found installed. Try to install it: npm install \" + packageName + \" --save\";\n        return _this;\n    }\n    return DriverPackageNotInstalledError;\n}(Error));\nexport { DriverPackageNotInstalledError };\n\n//# sourceMappingURL=DriverPackageNotInstalledError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n *\n */\nvar EntityColumnNotFound = /** @class */ (function (_super) {\n    tslib_1.__extends(EntityColumnNotFound, _super);\n    function EntityColumnNotFound(propertyPath) {\n        var _this = _super.call(this) || this;\n        _this.name = \"EntityColumnNotFound\";\n        Object.setPrototypeOf(_this, EntityColumnNotFound.prototype);\n        _this.message = \"No entity column \\\"\" + propertyPath + \"\\\" was found.\";\n        return _this;\n    }\n    return EntityColumnNotFound;\n}(Error));\nexport { EntityColumnNotFound };\n\n//# sourceMappingURL=EntityColumnNotFound.js.map\n","import * as tslib_1 from \"tslib\";\nimport { EntitySchema } from \"../index\";\n/**\n */\nvar EntityMetadataNotFoundError = /** @class */ (function (_super) {\n    tslib_1.__extends(EntityMetadataNotFoundError, _super);\n    function EntityMetadataNotFoundError(target) {\n        var _this = _super.call(this) || this;\n        _this.name = \"EntityMetadataNotFound\";\n        Object.setPrototypeOf(_this, EntityMetadataNotFoundError.prototype);\n        var targetName;\n        if (target instanceof EntitySchema) {\n            targetName = target.options.name;\n        }\n        else if (typeof target === \"function\") {\n            targetName = target.name;\n        }\n        else {\n            targetName = target;\n        }\n        _this.message = \"No metadata for \\\"\" + targetName + \"\\\" was found.\";\n        return _this;\n    }\n    return EntityMetadataNotFoundError;\n}(Error));\nexport { EntityMetadataNotFoundError };\n\n//# sourceMappingURL=EntityMetadataNotFoundError.js.map\n","import * as tslib_1 from \"tslib\";\nimport { EntitySchema } from \"../index\";\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nvar EntityNotFoundError = /** @class */ (function (_super) {\n    tslib_1.__extends(EntityNotFoundError, _super);\n    function EntityNotFoundError(entityClass, criteria) {\n        var _this = _super.call(this) || this;\n        _this.name = \"EntityNotFound\";\n        Object.setPrototypeOf(_this, EntityNotFoundError.prototype);\n        var targetName;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        }\n        else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        }\n        else {\n            targetName = entityClass;\n        }\n        var criteriaString = _this.stringifyCriteria(criteria);\n        _this.message = \"Could not find any entity of type \\\"\" + targetName + \"\\\" matching: \" + criteriaString;\n        return _this;\n    }\n    EntityNotFoundError.prototype.stringifyCriteria = function (criteria) {\n        try {\n            return JSON.stringify(criteria, null, 4);\n        }\n        catch (e) { }\n        return \"\" + criteria;\n    };\n    return EntityNotFoundError;\n}(Error));\nexport { EntityNotFoundError };\n\n//# sourceMappingURL=EntityNotFoundError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when relations specified in the find options were not found in the entities.\n*/\nvar FindRelationsNotFoundError = /** @class */ (function (_super) {\n    tslib_1.__extends(FindRelationsNotFoundError, _super);\n    function FindRelationsNotFoundError(notFoundRelations) {\n        var _this = _super.call(this) || this;\n        Object.setPrototypeOf(_this, FindRelationsNotFoundError.prototype);\n        if (notFoundRelations.length === 1) {\n            _this.message = \"Relation \\\"\" + notFoundRelations[0] + \"\\\" was not found, please check if it is correct and really exist in your entity.\";\n        }\n        else {\n            _this.message = \"Relations \" + notFoundRelations.map(function (relation) { return \"\\\"\" + relation + \"\\\"\"; }).join(\", \") + \" were not found, please check if relations are correct and they exist in your entities.\";\n        }\n        return _this;\n    }\n    return FindRelationsNotFoundError;\n}(Error));\nexport { FindRelationsNotFoundError };\n\n//# sourceMappingURL=FindRelationsNotFoundError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when relation has array initialized which is forbidden my ORM.\n *\n * @see https://github.com/typeorm/typeorm/issues/1319\n * @see http://typeorm.io/#/relations-faq/avoid-relation-property-initializers\n */\nvar InitializedRelationError = /** @class */ (function (_super) {\n    tslib_1.__extends(InitializedRelationError, _super);\n    function InitializedRelationError(relation) {\n        var _this = _super.call(this) || this;\n        Object.setPrototypeOf(_this, InitializedRelationError.prototype);\n        _this.message = \"Array initializations are not allowed in entity relations. \" +\n            (\"Please remove array initialization (= []) from \\\"\" + relation.entityMetadata.targetName + \"#\" + relation.propertyPath + \"\\\". \") +\n            \"This is ORM requirement to make relations to work properly. Refer docs for more information.\";\n        return _this;\n    }\n    return InitializedRelationError;\n}(Error));\nexport { InitializedRelationError };\n\n//# sourceMappingURL=InitializedRelationError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.\n */\nvar InsertValuesMissingError = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertValuesMissingError, _super);\n    function InsertValuesMissingError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"InsertValuesMissingError\";\n        Object.setPrototypeOf(_this, InsertValuesMissingError.prototype);\n        _this.message = \"Cannot perform insert query because values are not defined. Call \\\"qb.values(...)\\\" method to specify inserted values.\";\n        return _this;\n    }\n    return InsertValuesMissingError;\n}(Error));\nexport { InsertValuesMissingError };\n\n//# sourceMappingURL=InsertValuesMissingError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.\n*/\nvar LimitOnUpdateNotSupportedError = /** @class */ (function (_super) {\n    tslib_1.__extends(LimitOnUpdateNotSupportedError, _super);\n    function LimitOnUpdateNotSupportedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"LimitOnUpdateNotSupportedError\";\n        Object.setPrototypeOf(_this, LimitOnUpdateNotSupportedError.prototype);\n        _this.message = \"Your database does not support LIMIT on UPDATE statements.\";\n        return _this;\n    }\n    return LimitOnUpdateNotSupportedError;\n}(Error));\nexport { LimitOnUpdateNotSupportedError };\n\n//# sourceMappingURL=LimitOnUpdateNotSupportedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when selected sql driver does not supports locking.\n */\nvar LockNotSupportedOnGivenDriverError = /** @class */ (function (_super) {\n    tslib_1.__extends(LockNotSupportedOnGivenDriverError, _super);\n    function LockNotSupportedOnGivenDriverError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"LockNotSupportedOnGivenDriverError\";\n        Object.setPrototypeOf(_this, LockNotSupportedOnGivenDriverError.prototype);\n        _this.message = \"Locking not supported on given driver.\";\n        return _this;\n    }\n    return LockNotSupportedOnGivenDriverError;\n}(Error));\nexport { LockNotSupportedOnGivenDriverError };\n\n//# sourceMappingURL=LockNotSupportedOnGivenDriverError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n */\nvar MissingDeleteDateColumnError = /** @class */ (function (_super) {\n    tslib_1.__extends(MissingDeleteDateColumnError, _super);\n    function MissingDeleteDateColumnError(entityMetadata) {\n        var _this = _super.call(this) || this;\n        _this.name = \"MissingDeleteDateColumnError\";\n        Object.setPrototypeOf(_this, MissingDeleteDateColumnError.prototype);\n        _this.message = \"Entity \\\"\" + entityMetadata.name + \"\\\" does not have delete date columns.\";\n        return _this;\n    }\n    return MissingDeleteDateColumnError;\n}(Error));\nexport { MissingDeleteDateColumnError };\n\n//# sourceMappingURL=MissingDeleteDateColumnError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nvar MissingDriverError = /** @class */ (function (_super) {\n    tslib_1.__extends(MissingDriverError, _super);\n    function MissingDriverError(driverType) {\n        var _this = _super.call(this) || this;\n        _this.name = \"MissingDriverError\";\n        Object.setPrototypeOf(_this, MissingDriverError.prototype);\n        _this.message = \"Wrong driver: \\\"\" + driverType + \"\\\" given. Supported drivers are: \\\"cordova\\\", \\\"expo\\\", \\\"mariadb\\\", \\\"mongodb\\\", \\\"mssql\\\", \\\"mysql\\\", \\\"oracle\\\", \\\"postgres\\\", \\\"sqlite\\\", \\\"sqljs\\\", \\\"react-native\\\", \\\"aurora-data-api\\\", \\\"aurora-data-api-pg\\\".\";\n        return _this;\n    }\n    return MissingDriverError;\n}(Error));\nexport { MissingDriverError };\n\n//# sourceMappingURL=MissingDriverError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n */\nvar MissingPrimaryColumnError = /** @class */ (function (_super) {\n    tslib_1.__extends(MissingPrimaryColumnError, _super);\n    function MissingPrimaryColumnError(entityMetadata) {\n        var _this = _super.call(this) || this;\n        _this.name = \"MissingPrimaryColumnError\";\n        Object.setPrototypeOf(_this, MissingPrimaryColumnError.prototype);\n        _this.message = \"Entity \\\"\" + entityMetadata.name + \"\\\" does not have a primary column. Primary column is required to \" +\n            \"have in all your entities. Use @PrimaryColumn decorator to add a primary column to your entity.\";\n        return _this;\n    }\n    return MissingPrimaryColumnError;\n}(Error));\nexport { MissingPrimaryColumnError };\n\n//# sourceMappingURL=MissingPrimaryColumnError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when method expects entity but instead something else is given.\n */\nvar MustBeEntityError = /** @class */ (function (_super) {\n    tslib_1.__extends(MustBeEntityError, _super);\n    function MustBeEntityError(operation, wrongValue) {\n        var _this = _super.call(this) || this;\n        _this.name = \"MustBeEntityError\";\n        Object.setPrototypeOf(_this, MustBeEntityError.prototype);\n        _this.message = \"Cannot \" + operation + \", given value must be an entity, instead \\\"\" + wrongValue + \"\\\" is given.\";\n        return _this;\n    }\n    return MustBeEntityError;\n}(Error));\nexport { MustBeEntityError };\n\n//# sourceMappingURL=MustBeEntityError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when some option is not set in the connection options.\n */\nvar NoConnectionOptionError = /** @class */ (function (_super) {\n    tslib_1.__extends(NoConnectionOptionError, _super);\n    function NoConnectionOptionError(optionName) {\n        var _this = _super.call(this) || this;\n        Object.setPrototypeOf(_this, NoConnectionOptionError.prototype);\n        _this.message = \"Option \\\"\" + optionName + \"\\\" is not set in your connection options, please define \\\"\" + optionName + \"\\\" option in your connection options or ormconfig.json\";\n        return _this;\n    }\n    return NoConnectionOptionError;\n}(Error));\nexport { NoConnectionOptionError };\n\n//# sourceMappingURL=NoConnectionOptionError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when consumer tries to release entity manager that does not use single database connection.\n */\nvar NoNeedToReleaseEntityManagerError = /** @class */ (function (_super) {\n    tslib_1.__extends(NoNeedToReleaseEntityManagerError, _super);\n    function NoNeedToReleaseEntityManagerError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"NoNeedToReleaseEntityManagerError\";\n        Object.setPrototypeOf(_this, NoNeedToReleaseEntityManagerError.prototype);\n        _this.message = \"Entity manager is not using single database connection and cannot be released. \" +\n            \"Only entity managers created by connection#createEntityManagerWithSingleDatabaseConnection \" +\n            \"methods have a single database connection and they should be released.\";\n        return _this;\n    }\n    return NoNeedToReleaseEntityManagerError;\n}(Error));\nexport { NoNeedToReleaseEntityManagerError };\n\n//# sourceMappingURL=NoNeedToReleaseEntityManagerError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when an entity does not have no version and no update date column.\n */\nvar NoVersionOrUpdateDateColumnError = /** @class */ (function (_super) {\n    tslib_1.__extends(NoVersionOrUpdateDateColumnError, _super);\n    function NoVersionOrUpdateDateColumnError(entity) {\n        var _this = _super.call(this) || this;\n        _this.name = \"NoVersionOrUpdateDateColumnError\";\n        Object.setPrototypeOf(_this, NoVersionOrUpdateDateColumnError.prototype);\n        _this.message = \"Entity \" + entity + \" does not have version or update date columns.\";\n        return _this;\n    }\n    return NoVersionOrUpdateDateColumnError;\n}(Error));\nexport { NoVersionOrUpdateDateColumnError };\n\n//# sourceMappingURL=NoVersionOrUpdateDateColumnError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.\n*/\nvar OffsetWithoutLimitNotSupportedError = /** @class */ (function (_super) {\n    tslib_1.__extends(OffsetWithoutLimitNotSupportedError, _super);\n    function OffsetWithoutLimitNotSupportedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"OffsetWithoutLimitNotSupportedError\";\n        Object.setPrototypeOf(_this, OffsetWithoutLimitNotSupportedError.prototype);\n        _this.message = \"RDBMS does not support OFFSET without LIMIT in SELECT statements. You must use limit in conjunction with offset function (or take in conjunction with skip function if you are using pagination).\";\n        return _this;\n    }\n    return OffsetWithoutLimitNotSupportedError;\n}(Error));\nexport { OffsetWithoutLimitNotSupportedError };\n\n//# sourceMappingURL=OffsetWithoutLimitNotSupportedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when an optimistic lock cannot be used in query builder.\n */\nvar OptimisticLockCanNotBeUsedError = /** @class */ (function (_super) {\n    tslib_1.__extends(OptimisticLockCanNotBeUsedError, _super);\n    function OptimisticLockCanNotBeUsedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"OptimisticLockCanNotBeUsedError\";\n        Object.setPrototypeOf(_this, OptimisticLockCanNotBeUsedError.prototype);\n        _this.message = \"The optimistic lock can be used only with getOne() method.\";\n        return _this;\n    }\n    return OptimisticLockCanNotBeUsedError;\n}(Error));\nexport { OptimisticLockCanNotBeUsedError };\n\n//# sourceMappingURL=OptimisticLockCanNotBeUsedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\nvar OptimisticLockVersionMismatchError = /** @class */ (function (_super) {\n    tslib_1.__extends(OptimisticLockVersionMismatchError, _super);\n    function OptimisticLockVersionMismatchError(entity, expectedVersion, actualVersion) {\n        var _this = _super.call(this) || this;\n        _this.name = \"OptimisticLockVersionMismatchError\";\n        Object.setPrototypeOf(_this, OptimisticLockVersionMismatchError.prototype);\n        _this.message = \"The optimistic lock on entity \" + entity + \" failed, version \" + expectedVersion + \" was expected, but is actually \" + actualVersion + \".\";\n        return _this;\n    }\n    return OptimisticLockVersionMismatchError;\n}(Error));\nexport { OptimisticLockVersionMismatchError };\n\n//# sourceMappingURL=OptimisticLockVersionMismatchError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when a transaction is required for the current operation, but there is none open.\n */\nvar PessimisticLockTransactionRequiredError = /** @class */ (function (_super) {\n    tslib_1.__extends(PessimisticLockTransactionRequiredError, _super);\n    function PessimisticLockTransactionRequiredError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"PessimisticLockTransactionRequiredError\";\n        Object.setPrototypeOf(_this, PessimisticLockTransactionRequiredError.prototype);\n        _this.message = \"An open transaction is required for pessimistic lock.\";\n        return _this;\n    }\n    return PessimisticLockTransactionRequiredError;\n}(Error));\nexport { PessimisticLockTransactionRequiredError };\n\n//# sourceMappingURL=PessimisticLockTransactionRequiredError.js.map\n","import * as tslib_1 from \"tslib\";\nvar PrimaryColumnCannotBeNullableError = /** @class */ (function (_super) {\n    tslib_1.__extends(PrimaryColumnCannotBeNullableError, _super);\n    function PrimaryColumnCannotBeNullableError(object, propertyName) {\n        var _this = _super.call(this) || this;\n        _this.name = \"PrimaryColumnCannotBeNullableError\";\n        Object.setPrototypeOf(_this, PrimaryColumnCannotBeNullableError.prototype);\n        _this.message = \"Primary column \" + object.constructor.name + \"#\" + propertyName + \" cannot be nullable. \" +\n            \"Its not allowed for primary keys. Try to remove nullable option.\";\n        return _this;\n    }\n    return PrimaryColumnCannotBeNullableError;\n}(Error));\nexport { PrimaryColumnCannotBeNullableError };\n\n//# sourceMappingURL=PrimaryColumnCannotBeNullableError.js.map\n","import * as tslib_1 from \"tslib\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Thrown when query execution has failed.\n*/\nvar QueryFailedError = /** @class */ (function (_super) {\n    tslib_1.__extends(QueryFailedError, _super);\n    function QueryFailedError(query, parameters, driverError) {\n        var _this = _super.call(this) || this;\n        Object.setPrototypeOf(_this, QueryFailedError.prototype);\n        _this.message = driverError.toString()\n            .replace(/^error: /, \"\")\n            .replace(/^Error: /, \"\")\n            .replace(/^Request/, \"\");\n        ObjectUtils.assign(_this, tslib_1.__assign({}, driverError, { name: \"QueryFailedError\", query: query, parameters: parameters || [] }));\n        return _this;\n    }\n    return QueryFailedError;\n}(Error));\nexport { QueryFailedError };\n\n//# sourceMappingURL=QueryFailedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n */\nvar QueryRunnerAlreadyReleasedError = /** @class */ (function (_super) {\n    tslib_1.__extends(QueryRunnerAlreadyReleasedError, _super);\n    function QueryRunnerAlreadyReleasedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"QueryRunnerAlreadyReleasedError\";\n        Object.setPrototypeOf(_this, QueryRunnerAlreadyReleasedError.prototype);\n        _this.message = \"Query runner already released. Cannot run queries anymore.\";\n        return _this;\n    }\n    return QueryRunnerAlreadyReleasedError;\n}(Error));\nexport { QueryRunnerAlreadyReleasedError };\n\n//# sourceMappingURL=QueryRunnerAlreadyReleasedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when consumer tries to use query runner from query runner provider after it was released.\n */\nvar QueryRunnerProviderAlreadyReleasedError = /** @class */ (function (_super) {\n    tslib_1.__extends(QueryRunnerProviderAlreadyReleasedError, _super);\n    function QueryRunnerProviderAlreadyReleasedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"QueryRunnerProviderAlreadyReleasedError\";\n        Object.setPrototypeOf(_this, QueryRunnerProviderAlreadyReleasedError.prototype);\n        _this.message = \"Database connection provided by a query runner was already released, cannot continue to use its querying methods anymore.\";\n        return _this;\n    }\n    return QueryRunnerProviderAlreadyReleasedError;\n}(Error));\nexport { QueryRunnerProviderAlreadyReleasedError };\n\n//# sourceMappingURL=QueryRunnerProviderAlreadyReleasedError.js.map\n","import * as tslib_1 from \"tslib\";\nimport { EntitySchema } from \"../index\";\n/**\n * Thrown when repository for the given class is not found.\n */\nvar RepositoryNotFoundError = /** @class */ (function (_super) {\n    tslib_1.__extends(RepositoryNotFoundError, _super);\n    function RepositoryNotFoundError(connectionName, entityClass) {\n        var _this = _super.call(this) || this;\n        _this.name = \"RepositoryNotFoundError\";\n        Object.setPrototypeOf(_this, RepositoryNotFoundError.prototype);\n        var targetName;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        }\n        else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        }\n        else {\n            targetName = entityClass;\n        }\n        _this.message = \"No repository for \\\"\" + targetName + \"\\\" was found. Looks like this entity is not registered in \" +\n            (\"current \\\"\" + connectionName + \"\\\" connection?\");\n        return _this;\n    }\n    return RepositoryNotFoundError;\n}(Error));\nexport { RepositoryNotFoundError };\n\n//# sourceMappingURL=RepositoryNotFoundError.js.map\n","import * as tslib_1 from \"tslib\";\nimport { EntitySchema } from \"../index\";\n/**\n * Thrown when repository for the given class is not found.\n */\nvar RepositoryNotTreeError = /** @class */ (function (_super) {\n    tslib_1.__extends(RepositoryNotTreeError, _super);\n    function RepositoryNotTreeError(target) {\n        var _this = _super.call(this) || this;\n        _this.name = \"RepositoryNotTreeError\";\n        Object.setPrototypeOf(_this, RepositoryNotTreeError.prototype);\n        var targetName;\n        if (target instanceof EntitySchema) {\n            targetName = target.options.name;\n        }\n        else if (typeof target === \"function\") {\n            targetName = target.name;\n        }\n        else {\n            targetName = target;\n        }\n        _this.message = \"Repository of the \\\"\" + targetName + \"\\\" class is not a TreeRepository. Try to apply @Tree decorator on your entity.\";\n        return _this;\n    }\n    return RepositoryNotTreeError;\n}(Error));\nexport { RepositoryNotTreeError };\n\n//# sourceMappingURL=RepositoryNotTreeError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to build a query with RETURNING / OUTPUT statement,\n * but used database does not support it.\n */\nvar ReturningStatementNotSupportedError = /** @class */ (function (_super) {\n    tslib_1.__extends(ReturningStatementNotSupportedError, _super);\n    function ReturningStatementNotSupportedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"ReturningStatementNotSupportedError\";\n        Object.setPrototypeOf(_this, ReturningStatementNotSupportedError.prototype);\n        _this.message = \"OUTPUT or RETURNING clause only supported by Microsoft SQL Server or PostgreSQL databases.\";\n        return _this;\n    }\n    return ReturningStatementNotSupportedError;\n}(Error));\nexport { ReturningStatementNotSupportedError };\n\n//# sourceMappingURL=ReturningStatementNotSupportedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when same object is scheduled for remove and updation at the same time.\n */\nvar SubjectRemovedAndUpdatedError = /** @class */ (function (_super) {\n    tslib_1.__extends(SubjectRemovedAndUpdatedError, _super);\n    function SubjectRemovedAndUpdatedError(subject) {\n        var _this = _super.call(this) || this;\n        _this.name = \"SubjectRemovedAndUpdatedError\";\n        Object.setPrototypeOf(_this, SubjectRemovedAndUpdatedError.prototype);\n        _this.message = \"Removed entity \\\"\" + subject.metadata.name + \"\\\" is also scheduled for update operation. \" +\n            \"Make sure you are not updating and removing same object (note that update or remove may be executed by cascade operations).\";\n        return _this;\n    }\n    return SubjectRemovedAndUpdatedError;\n}(Error));\nexport { SubjectRemovedAndUpdatedError };\n\n//# sourceMappingURL=SubjectRemovedAndUpdatedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when operation is going to be executed on a subject without identifier.\n * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.\n * If this error occurs still, it most probably is an ORM internal problem which must be reported and fixed.\n */\nvar SubjectWithoutIdentifierError = /** @class */ (function (_super) {\n    tslib_1.__extends(SubjectWithoutIdentifierError, _super);\n    function SubjectWithoutIdentifierError(subject) {\n        var _this = _super.call(this) || this;\n        _this.name = \"SubjectWithoutIdentifierError\";\n        Object.setPrototypeOf(_this, SubjectWithoutIdentifierError.prototype);\n        _this.message = \"Internal error. Subject \" + subject.metadata.targetName + \" must have an identifier to perform operation. \" +\n            \"Please report a github issue if you face this error.\";\n        return _this;\n    }\n    return SubjectWithoutIdentifierError;\n}(Error));\nexport { SubjectWithoutIdentifierError };\n\n//# sourceMappingURL=SubjectWithoutIdentifierError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when transaction is already started and user tries to run it again.\n */\nvar TransactionAlreadyStartedError = /** @class */ (function (_super) {\n    tslib_1.__extends(TransactionAlreadyStartedError, _super);\n    function TransactionAlreadyStartedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"TransactionAlreadyStartedError\";\n        Object.setPrototypeOf(_this, TransactionAlreadyStartedError.prototype);\n        _this.message = \"Transaction already started for the given connection, commit current transaction before starting a new one.\";\n        return _this;\n    }\n    return TransactionAlreadyStartedError;\n}(Error));\nexport { TransactionAlreadyStartedError };\n\n//# sourceMappingURL=TransactionAlreadyStartedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when transaction is not started yet and user tries to run commit or rollback.\n */\nvar TransactionNotStartedError = /** @class */ (function (_super) {\n    tslib_1.__extends(TransactionNotStartedError, _super);\n    function TransactionNotStartedError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"TransactionNotStartedError\";\n        Object.setPrototypeOf(_this, TransactionNotStartedError.prototype);\n        _this.message = \"Transaction is not started yet, start transaction before committing or rolling it back.\";\n        return _this;\n    }\n    return TransactionNotStartedError;\n}(Error));\nexport { TransactionNotStartedError };\n\n//# sourceMappingURL=TransactionNotStartedError.js.map\n","import * as tslib_1 from \"tslib\";\nvar TreeRepositoryNotSupportedError = /** @class */ (function (_super) {\n    tslib_1.__extends(TreeRepositoryNotSupportedError, _super);\n    function TreeRepositoryNotSupportedError(driver) {\n        var _this = _super.call(this) || this;\n        _this.name = \"TreeRepositoryNotSupportedError\";\n        Object.setPrototypeOf(_this, TreeRepositoryNotSupportedError.prototype);\n        _this.message = \"Tree repositories are not supported in \" + driver.options.type + \" driver.\";\n        return _this;\n    }\n    return TreeRepositoryNotSupportedError;\n}(Error));\nexport { TreeRepositoryNotSupportedError };\n\n//# sourceMappingURL=TreeRepositoryNotSupportedError.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Thrown when user tries to update using QueryBuilder but do not specify what to update.\n */\nvar UpdateValuesMissingError = /** @class */ (function (_super) {\n    tslib_1.__extends(UpdateValuesMissingError, _super);\n    function UpdateValuesMissingError() {\n        var _this = _super.call(this) || this;\n        _this.name = \"UpdateValuesMissingError\";\n        Object.setPrototypeOf(_this, UpdateValuesMissingError.prototype);\n        _this.message = \"Cannot perform update query because update values are not defined. Call \\\"qb.set(...)\\\" method to specify updated values.\";\n        return _this;\n    }\n    return UpdateValuesMissingError;\n}(Error));\nexport { UpdateValuesMissingError };\n\n//# sourceMappingURL=UpdateValuesMissingError.js.map\n","import { OracleDriver } from \"../driver/oracle/OracleDriver\";\n/**\n * Find Operator used in Find Conditions.\n */\nvar FindOperator = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function FindOperator(type, value, useParameter, multipleParameters) {\n        if (useParameter === void 0) { useParameter = true; }\n        if (multipleParameters === void 0) { multipleParameters = false; }\n        this._type = type;\n        this._value = value;\n        this._useParameter = useParameter;\n        this._multipleParameters = multipleParameters;\n    }\n    Object.defineProperty(FindOperator.prototype, \"useParameter\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if parameter is used or not for this operator.\n         * Extracts final value if value is another find operator.\n         */\n        get: function () {\n            if (this._value instanceof FindOperator)\n                return this._value.useParameter;\n            return this._useParameter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindOperator.prototype, \"multipleParameters\", {\n        /**\n         * Indicates if multiple parameters must be used for this operator.\n         * Extracts final value if value is another find operator.\n         */\n        get: function () {\n            if (this._value instanceof FindOperator)\n                return this._value.multipleParameters;\n            return this._multipleParameters;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FindOperator.prototype, \"value\", {\n        /**\n         * Gets the final value needs to be used as parameter value.\n         */\n        get: function () {\n            if (this._value instanceof FindOperator)\n                return this._value.value;\n            return this._value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets SQL needs to be inserted into final query.\n     */\n    FindOperator.prototype.toSql = function (connection, aliasPath, parameters) {\n        switch (this._type) {\n            case \"not\":\n                if (this._value instanceof FindOperator) {\n                    return \"NOT(\" + this._value.toSql(connection, aliasPath, parameters) + \")\";\n                }\n                else {\n                    return aliasPath + \" != \" + parameters[0];\n                }\n            case \"lessThan\":\n                return aliasPath + \" < \" + parameters[0];\n            case \"lessThanOrEqual\":\n                return aliasPath + \" <= \" + parameters[0];\n            case \"moreThan\":\n                return aliasPath + \" > \" + parameters[0];\n            case \"moreThanOrEqual\":\n                return aliasPath + \" >= \" + parameters[0];\n            case \"equal\":\n                return aliasPath + \" = \" + parameters[0];\n            case \"like\":\n                return aliasPath + \" LIKE \" + parameters[0];\n            case \"between\":\n                return aliasPath + \" BETWEEN \" + parameters[0] + \" AND \" + parameters[1];\n            case \"in\":\n                if (connection.driver instanceof OracleDriver && parameters.length === 0) {\n                    return aliasPath + \" IN (null)\";\n                }\n                return aliasPath + \" IN (\" + parameters.join(\", \") + \")\";\n            case \"any\":\n                return aliasPath + \" = ANY(\" + parameters[0] + \")\";\n            case \"isNull\":\n                return aliasPath + \" IS NULL\";\n            case \"raw\":\n                if (this.value instanceof Function) {\n                    return this.value(aliasPath);\n                }\n                else {\n                    return aliasPath + \" = \" + this.value;\n                }\n        }\n        return \"\";\n    };\n    return FindOperator;\n}());\nexport { FindOperator };\n\n//# sourceMappingURL=FindOperator.js.map\n","import { FindRelationsNotFoundError } from \"../error/FindRelationsNotFoundError\";\nimport { shorten } from \"../util/StringUtils\";\n/**\n * Utilities to work with FindOptions.\n */\nvar FindOptionsUtils = /** @class */ (function () {\n    function FindOptionsUtils() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    FindOptionsUtils.isFindOneOptions = function (obj) {\n        var possibleOptions = obj;\n        return possibleOptions &&\n            (Array.isArray(possibleOptions.select) ||\n                possibleOptions.where instanceof Object ||\n                typeof possibleOptions.where === \"string\" ||\n                Array.isArray(possibleOptions.relations) ||\n                possibleOptions.join instanceof Object ||\n                possibleOptions.order instanceof Object ||\n                possibleOptions.cache instanceof Object ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                possibleOptions.lock instanceof Object ||\n                possibleOptions.loadRelationIds instanceof Object ||\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                typeof possibleOptions.withDeleted === \"boolean\");\n    };\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    FindOptionsUtils.isFindManyOptions = function (obj) {\n        var possibleOptions = obj;\n        return possibleOptions && (this.isFindOneOptions(possibleOptions) ||\n            typeof possibleOptions.skip === \"number\" ||\n            typeof possibleOptions.take === \"number\" ||\n            typeof possibleOptions.skip === \"string\" ||\n            typeof possibleOptions.take === \"string\");\n    };\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    FindOptionsUtils.extractFindManyOptionsAlias = function (object) {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias;\n        return undefined;\n    };\n    /**\n     * Applies give find many options to the given query builder.\n     */\n    FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder = function (qb, options) {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n        if (options)\n            return qb.where(options);\n        return qb;\n    };\n    /**\n     * Applies give find options to the given query builder.\n     */\n    FindOptionsUtils.applyOptionsToQueryBuilder = function (qb, options) {\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n        var metadata = qb.expressionMap.mainAlias.metadata;\n        // apply all options from FindOptions\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(function (select) {\n                if (!metadata.findColumnWithPropertyPath(String(select)))\n                    throw new Error(select + \" column was not found in the \" + metadata.name + \" entity.\");\n                qb.addSelect(qb.alias + \".\" + select);\n            });\n        }\n        if (options.where)\n            qb.where(options.where);\n        if (options.skip)\n            qb.skip(options.skip);\n        if (options.take)\n            qb.take(options.take);\n        if (options.order)\n            Object.keys(options.order).forEach(function (key) {\n                var order = options.order[key];\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(key + \" column was not found in the \" + metadata.name + \" entity.\");\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n        if (options.relations) {\n            var allRelations = options.relations.map(function (relation) { return relation; });\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias.name, qb.expressionMap.mainAlias.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(function (key) {\n                    qb.leftJoin(options.join.leftJoin[key], key);\n                });\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(function (key) {\n                    qb.innerJoin(options.join.innerJoin[key], key);\n                });\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(function (key) {\n                    qb.leftJoinAndSelect(options.join.leftJoinAndSelect[key], key);\n                });\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(function (key) {\n                    qb.innerJoinAndSelect(options.join.innerJoinAndSelect[key], key);\n                });\n        }\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                var cache = options.cache;\n                qb.cache(cache.id, cache.milliseconds);\n            }\n            else {\n                qb.cache(options.cache);\n            }\n        }\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version);\n            }\n            else if (options.lock.mode === \"pessimistic_read\" || options.lock.mode === \"pessimistic_write\" || options.lock.mode === \"dirty_read\" || options.lock.mode === \"pessimistic_partial_write\" || options.lock.mode === \"pessimistic_write_or_fail\") {\n                qb.setLock(options.lock.mode);\n            }\n        }\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n        }\n        else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds);\n        }\n        return qb;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    FindOptionsUtils.applyRelationsRecursively = function (qb, allRelations, alias, metadata, prefix) {\n        var _this = this;\n        // find all relations that match given prefix\n        var matchedBaseRelations = [];\n        if (prefix) {\n            var regexp_1 = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\");\n            matchedBaseRelations = allRelations\n                .filter(function (relation) { return relation.match(regexp_1); })\n                .map(function (relation) { return relation.replace(regexp_1, \"\"); })\n                .filter(function (relation) { return metadata.findRelationWithPropertyPath(relation); });\n        }\n        else {\n            matchedBaseRelations = allRelations.filter(function (relation) { return metadata.findRelationWithPropertyPath(relation); });\n        }\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach(function (relation) {\n            // generate a relation alias\n            var relationAlias = alias + \"__\" + relation;\n            // shorten it if needed by the driver\n            if (qb.connection.driver.maxAliasLength && relationAlias.length > qb.connection.driver.maxAliasLength) {\n                relationAlias = shorten(relationAlias);\n            }\n            // add a join for the found relation\n            var selection = alias + \".\" + relation;\n            qb.leftJoinAndSelect(selection, relationAlias);\n            // join the eager relations of the found relation\n            var relMetadata = metadata.relations.find(function (metadata) { return metadata.propertyName === relation; });\n            if (relMetadata) {\n                _this.joinEagerRelations(qb, relationAlias, relMetadata.inverseEntityMetadata);\n            }\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(allRelations.indexOf(prefix ? prefix + \".\" + relation : relation), 1);\n            // try to find sub-relations\n            var join = qb.expressionMap.joinAttributes.find(function (join) { return join.entityOrProperty === selection; });\n            _this.applyRelationsRecursively(qb, allRelations, join.alias.name, join.metadata, prefix ? prefix + \".\" + relation : relation);\n        });\n    };\n    FindOptionsUtils.joinEagerRelations = function (qb, alias, metadata) {\n        var _this = this;\n        metadata.eagerRelations.forEach(function (relation) {\n            var relationAlias = qb.connection.namingStrategy.eagerJoinRelationAlias(alias, relation.propertyPath);\n            qb.leftJoinAndSelect(alias + \".\" + relation.propertyPath, relationAlias);\n            _this.joinEagerRelations(qb, relationAlias, relation.inverseEntityMetadata);\n        });\n    };\n    return FindOptionsUtils;\n}());\nexport { FindOptionsUtils };\n\n//# sourceMappingURL=FindOptionsUtils.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Any([...]) }\n */\nexport function Any(value) {\n    return new FindOperator(\"any\", value);\n}\n\n//# sourceMappingURL=Any.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Between(x, y) }\n */\nexport function Between(from, to) {\n    return new FindOperator(\"between\", [from, to], true, true);\n}\n\n//# sourceMappingURL=Between.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Equal(\"value\") }\n */\nexport function Equal(value) {\n    return new FindOperator(\"equal\", value);\n}\n\n//# sourceMappingURL=Equal.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: In([...]) }\n */\nexport function In(value) {\n    return new FindOperator(\"in\", value, true, true);\n}\n\n//# sourceMappingURL=In.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: IsNull() }\n */\nexport function IsNull() {\n    return new FindOperator(\"isNull\", undefined, false);\n}\n\n//# sourceMappingURL=IsNull.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: LessThan(10) }\n */\nexport function LessThan(value) {\n    return new FindOperator(\"lessThan\", value);\n}\n\n//# sourceMappingURL=LessThan.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: LessThanOrEqual(10) }\n */\nexport function LessThanOrEqual(value) {\n    return new FindOperator(\"lessThanOrEqual\", value);\n}\n\n//# sourceMappingURL=LessThanOrEqual.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Like(\"%some sting%\") }\n */\nexport function Like(value) {\n    return new FindOperator(\"like\", value);\n}\n\n//# sourceMappingURL=Like.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: MoreThan(10) }\n */\nexport function MoreThan(value) {\n    return new FindOperator(\"moreThan\", value);\n}\n\n//# sourceMappingURL=MoreThan.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: MoreThanOrEqual(10) }\n */\nexport function MoreThanOrEqual(value) {\n    return new FindOperator(\"moreThanOrEqual\", value);\n}\n\n//# sourceMappingURL=MoreThanOrEqual.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Used to negotiate expression.\n * Example: { title: not(\"hello\") } will return entities where title not equal to \"hello\".\n */\nexport function Not(value) {\n    return new FindOperator(\"not\", value);\n}\n\n//# sourceMappingURL=Not.js.map\n","import { FindOperator } from \"../FindOperator\";\n/**\n * Find Options Operator.\n * Example: { someField: Raw([...]) }\n */\nexport function Raw(value) {\n    return new FindOperator(\"raw\", value, false);\n}\n\n//# sourceMappingURL=Raw.js.map\n","import * as tslib_1 from \"tslib\";\n/*!\n */\nimport \"reflect-metadata\";\nimport { ConnectionManager } from \"./connection/ConnectionManager\";\nimport { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\";\nimport { getFromContainer } from \"./container\";\nimport { PlatformTools } from \"./platform/PlatformTools\";\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\";\nimport { PromiseUtils } from \"./util/PromiseUtils\";\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\nexport * from \"./container\";\nexport * from \"./error/QueryFailedError\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/DeleteDateColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/columns/ViewColumn\";\nexport * from \"./decorator/columns/ObjectIdColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/ChildEntity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/entity-view/ViewEntity\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionManager\";\nexport * from \"./decorator/transaction/TransactionRepository\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/tree/Tree\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/Unique\";\nexport * from \"./decorator/Check\";\nexport * from \"./decorator/Exclusion\";\nexport * from \"./decorator/Generated\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./find-options/operator/Any\";\nexport * from \"./find-options/operator/Between\";\nexport * from \"./find-options/operator/Equal\";\nexport * from \"./find-options/operator/In\";\nexport * from \"./find-options/operator/IsNull\";\nexport * from \"./find-options/operator/LessThan\";\nexport * from \"./find-options/operator/LessThanOrEqual\";\nexport * from \"./find-options/operator/Like\";\nexport * from \"./find-options/operator/MoreThan\";\nexport * from \"./find-options/operator/MoreThanOrEqual\";\nexport * from \"./find-options/operator/Not\";\nexport * from \"./find-options/operator/Raw\";\nexport * from \"./find-options/FindOperator\";\nexport * from \"./find-options/FindOptionsUtils\";\nexport * from \"./logger/AdvancedConsoleLogger\";\nexport * from \"./logger/SimpleConsoleLogger\";\nexport * from \"./logger/FileLogger\";\nexport * from \"./metadata/EntityMetadata\";\nexport * from \"./entity-manager/EntityManager\";\nexport * from \"./repository/AbstractRepository\";\nexport * from \"./repository/Repository\";\nexport * from \"./repository/BaseEntity\";\nexport * from \"./repository/TreeRepository\";\nexport * from \"./repository/MongoRepository\";\nexport * from \"./schema-builder/table/TableCheck\";\nexport * from \"./schema-builder/table/TableColumn\";\nexport * from \"./schema-builder/table/TableExclusion\";\nexport * from \"./schema-builder/table/TableForeignKey\";\nexport * from \"./schema-builder/table/TableIndex\";\nexport * from \"./schema-builder/table/TableUnique\";\nexport * from \"./schema-builder/table/Table\";\nexport * from \"./driver/mongodb/typings\";\nexport * from \"./driver/sqlserver/MssqlParameter\";\nexport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\";\nexport { Connection } from \"./connection/Connection\";\nexport { ConnectionManager } from \"./connection/ConnectionManager\";\nexport { QueryBuilder } from \"./query-builder/QueryBuilder\";\nexport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\";\nexport { DeleteQueryBuilder } from \"./query-builder/DeleteQueryBuilder\";\nexport { InsertQueryBuilder } from \"./query-builder/InsertQueryBuilder\";\nexport { UpdateQueryBuilder } from \"./query-builder/UpdateQueryBuilder\";\nexport { RelationQueryBuilder } from \"./query-builder/RelationQueryBuilder\";\nexport { Brackets } from \"./query-builder/Brackets\";\nexport { InsertResult } from \"./query-builder/result/InsertResult\";\nexport { UpdateResult } from \"./query-builder/result/UpdateResult\";\nexport { DeleteResult } from \"./query-builder/result/DeleteResult\";\nexport { EntityManager } from \"./entity-manager/EntityManager\";\nexport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\";\nexport { Migration } from \"./migration/Migration\";\nexport { MigrationExecutor } from \"./migration/MigrationExecutor\";\nexport { DefaultNamingStrategy } from \"./naming-strategy/DefaultNamingStrategy\";\nexport { Repository } from \"./repository/Repository\";\nexport { TreeRepository } from \"./repository/TreeRepository\";\nexport { MongoRepository } from \"./repository/MongoRepository\";\nexport { BaseEntity } from \"./repository/BaseEntity\";\nexport { EntitySchema } from \"./entity-schema/EntitySchema\";\nexport { PromiseUtils } from \"./util/PromiseUtils\";\n// -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage() {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    var globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n    return globalScope.typeormMetadataArgsStorage;\n}\n/**\n * Reads connection options stored in ormconfig configuration file.\n */\nexport function getConnectionOptions(connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        return tslib_1.__generator(this, function (_a) {\n            return [2 /*return*/, new ConnectionOptionsReader().get(connectionName)];\n        });\n    });\n}\n/**\n * Gets a ConnectionManager which creates connections.\n */\nexport function getConnectionManager() {\n    return getFromContainer(ConnectionManager);\n}\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport function createConnection(optionsOrName) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var connectionName, options, _a;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n                    if (!(optionsOrName instanceof Object)) return [3 /*break*/, 1];\n                    _a = optionsOrName;\n                    return [3 /*break*/, 3];\n                case 1: return [4 /*yield*/, getConnectionOptions(connectionName)];\n                case 2:\n                    _a = _b.sent();\n                    _b.label = 3;\n                case 3:\n                    options = _a;\n                    return [2 /*return*/, getConnectionManager().create(options).connect()];\n            }\n        });\n    });\n}\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * All connections from the ormconfig will be created.\n */\nexport function createConnections(options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var connections;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!!options) return [3 /*break*/, 2];\n                    return [4 /*yield*/, new ConnectionOptionsReader().all()];\n                case 1:\n                    options = _a.sent();\n                    _a.label = 2;\n                case 2:\n                    connections = options.map(function (options) { return getConnectionManager().create(options); });\n                    return [2 /*return*/, PromiseUtils.runInSequence(connections, function (connection) { return connection.connect(); })];\n            }\n        });\n    });\n}\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getConnection(connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName);\n}\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getManager(connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getMongoManager(connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n */\nexport function getSqljsManager(connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets repository for the given entity class.\n */\nexport function getRepository(entityClass, connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName).getRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getTreeRepository(entityClass, connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName).getTreeRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getCustomRepository(customRepository, connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\n}\n/**\n * Gets mongodb repository for the given entity class or name.\n */\nexport function getMongoRepository(entityClass, connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    return getConnectionManager().get(connectionName).getMongoRepository(entityClass);\n}\n/**\n * Creates a new query builder.\n */\nexport function createQueryBuilder(entityClass, alias, connectionName) {\n    if (connectionName === void 0) { connectionName = \"default\"; }\n    if (entityClass) {\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n    }\n    return getConnection(connectionName).createQueryBuilder();\n}\n\n//# sourceMappingURL=index.js.map\n","import { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nvar AdvancedConsoleLogger = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function AdvancedConsoleLogger(options) {\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Logs query and parameters used in it.\n     */\n    AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1)) {\n            var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logInfo(\"query:\", PlatformTools.highlightSql(sql));\n        }\n    };\n    /**\n     * Logs query that is failed.\n     */\n    AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1)) {\n            var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logError(\"query failed:\", PlatformTools.highlightSql(sql));\n            PlatformTools.logError(\"error:\", error);\n        }\n    };\n    /**\n     * Logs query that is slow.\n     */\n    AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {\n        var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        PlatformTools.logWarn(\"query is slow:\", PlatformTools.highlightSql(sql));\n        PlatformTools.logWarn(\"execution time:\", time);\n    };\n    /**\n     * Logs events from the schema build process.\n     */\n    AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {\n        if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1)) {\n            PlatformTools.log(message);\n        }\n    };\n    /**\n     * Logs events from the migration run process.\n     */\n    AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {\n        PlatformTools.log(message);\n    };\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1))\n                    PlatformTools.log(message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1))\n                    PlatformTools.logInfo(\"INFO:\", message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1))\n                    console.warn(PlatformTools.warn(message));\n                break;\n        }\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    AdvancedConsoleLogger.prototype.stringifyParams = function (parameters) {\n        try {\n            return JSON.stringify(parameters);\n        }\n        catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    };\n    return AdvancedConsoleLogger;\n}());\nexport { AdvancedConsoleLogger };\n\n//# sourceMappingURL=AdvancedConsoleLogger.js.map\n","import { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\nvar DebugLogger = /** @class */ (function () {\n    function DebugLogger() {\n        this.debug = PlatformTools.load(\"debug\");\n        this.debugQueryLog = this.debug(\"typeorm:query:log\");\n        this.debugQueryError = this.debug(\"typeorm:query:error\");\n        this.debugQuerySlow = this.debug(\"typeorm:query:slow\");\n        this.debugSchemaBuild = this.debug(\"typeorm:schema\");\n        this.debugMigration = this.debug(\"typeorm:migration\");\n        this.debugLog = this.debug(\"typeorm:log\");\n        this.debugInfo = this.debug(\"typeorm:info\");\n        this.debugWarn = this.debug(\"typeorm:warn\");\n    }\n    /**\n     * Logs query and parameters used in it.\n     */\n    DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {\n        if (this.debugQueryLog.enabled) {\n            this.debugQueryLog(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryLog(\"parameters:\", parameters);\n            }\n        }\n    };\n    /**\n     * Logs query that failed.\n     */\n    DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {\n        if (this.debugQueryError.enabled) {\n            this.debugQueryError(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryError(\"parameters:\", parameters);\n            }\n            this.debugQueryError(\"error: \", error);\n        }\n    };\n    /**\n     * Logs query that is slow.\n     */\n    DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {\n        if (this.debugQuerySlow.enabled) {\n            this.debugQuerySlow(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQuerySlow(\"parameters:\", parameters);\n            }\n            this.debugQuerySlow(\"execution time:\", time);\n        }\n    };\n    /**\n     * Logs events from the schema build process.\n     */\n    DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {\n        if (this.debugSchemaBuild.enabled) {\n            this.debugSchemaBuild(message);\n        }\n    };\n    /**\n     * Logs events from the migration run process.\n     */\n    DebugLogger.prototype.logMigration = function (message, queryRunner) {\n        if (this.debugMigration.enabled) {\n            this.debugMigration(message);\n        }\n    };\n    /**\n     * Perform logging using given logger.\n     * Log has its own level and message.\n     */\n    DebugLogger.prototype.log = function (level, message, queryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.debugLog.enabled) {\n                    this.debugLog(message);\n                }\n                break;\n            case \"info\":\n                if (this.debugInfo.enabled) {\n                    this.debugInfo(message);\n                }\n                break;\n            case \"warn\":\n                if (this.debugWarn.enabled) {\n                    this.debugWarn(message);\n                }\n                break;\n        }\n    };\n    return DebugLogger;\n}());\nexport { DebugLogger };\n\n//# sourceMappingURL=DebugLogger.js.map\n","import { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger logs everything into ormlogs.log file.\n */\nvar FileLogger = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function FileLogger(options) {\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Logs query and parameters used in it.\n     */\n    FileLogger.prototype.logQuery = function (query, parameters, queryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1)) {\n            var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            this.write(\"[QUERY]: \" + sql);\n        }\n    };\n    /**\n     * Logs query that is failed.\n     */\n    FileLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1)) {\n            var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            this.write([\n                \"[FAILED QUERY]: \" + sql,\n                \"[QUERY ERROR]: \" + error\n            ]);\n        }\n    };\n    /**\n     * Logs query that is slow.\n     */\n    FileLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {\n        var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        this.write(\"[SLOW QUERY: \" + time + \" ms]: \" + sql);\n    };\n    /**\n     * Logs events from the schema build process.\n     */\n    FileLogger.prototype.logSchemaBuild = function (message, queryRunner) {\n        if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1)) {\n            this.write(message);\n        }\n    };\n    /**\n     * Logs events from the migrations run process.\n     */\n    FileLogger.prototype.logMigration = function (message, queryRunner) {\n        this.write(message);\n    };\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    FileLogger.prototype.log = function (level, message, queryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1))\n                    this.write(\"[LOG]: \" + message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1))\n                    this.write(\"[INFO]: \" + message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1))\n                    this.write(\"[WARN]: \" + message);\n                break;\n        }\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Writes given strings into the log file.\n     */\n    FileLogger.prototype.write = function (strings) {\n        strings = Array.isArray(strings) ? strings : [strings];\n        var basePath = PlatformTools.load(\"app-root-path\").path;\n        strings = strings.map(function (str) { return \"[\" + new Date().toISOString() + \"]\" + str; });\n        PlatformTools.appendFileSync(basePath + \"/ormlogs.log\", strings.join(\"\\r\\n\") + \"\\r\\n\"); // todo: use async or implement promises?\n    };\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    FileLogger.prototype.stringifyParams = function (parameters) {\n        try {\n            return JSON.stringify(parameters);\n        }\n        catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    };\n    return FileLogger;\n}());\nexport { FileLogger };\n\n//# sourceMappingURL=FileLogger.js.map\n","import { SimpleConsoleLogger } from \"./SimpleConsoleLogger\";\nimport { AdvancedConsoleLogger } from \"./AdvancedConsoleLogger\";\nimport { FileLogger } from \"./FileLogger\";\nimport { DebugLogger } from \"./DebugLogger\";\n/**\n * Helps to create logger instances.\n */\nvar LoggerFactory = /** @class */ (function () {\n    function LoggerFactory() {\n    }\n    /**\n     * Creates a new logger depend on a given connection's driver.\n     */\n    LoggerFactory.prototype.create = function (logger, options) {\n        if (logger instanceof Object)\n            return logger;\n        if (logger) {\n            switch (logger) {\n                case \"simple-console\":\n                    return new SimpleConsoleLogger(options);\n                case \"file\":\n                    return new FileLogger(options);\n                case \"advanced-console\":\n                    return new AdvancedConsoleLogger(options);\n                case \"debug\":\n                    return new DebugLogger();\n            }\n        }\n        return new AdvancedConsoleLogger(options);\n    };\n    return LoggerFactory;\n}());\nexport { LoggerFactory };\n\n//# sourceMappingURL=LoggerFactory.js.map\n","/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nvar SimpleConsoleLogger = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SimpleConsoleLogger(options) {\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Logs query and parameters used in it.\n     */\n    SimpleConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1)) {\n            var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            console.log(\"query\" + \": \" + sql);\n        }\n    };\n    /**\n     * Logs query that is failed.\n     */\n    SimpleConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1)) {\n            var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            console.log(\"query failed: \" + sql);\n            console.log(\"error:\", error);\n        }\n    };\n    /**\n     * Logs query that is slow.\n     */\n    SimpleConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {\n        var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        console.log(\"query is slow: \" + sql);\n        console.log(\"execution time: \" + time);\n    };\n    /**\n     * Logs events from the schema build process.\n     */\n    SimpleConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {\n        if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1)) {\n            console.log(message);\n        }\n    };\n    /**\n     * Logs events from the migrations run process.\n     */\n    SimpleConsoleLogger.prototype.logMigration = function (message, queryRunner) {\n        console.log(message);\n    };\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    SimpleConsoleLogger.prototype.log = function (level, message, queryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1))\n                    console.log(message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1))\n                    console.info(message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1))\n                    console.warn(message);\n                break;\n        }\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    SimpleConsoleLogger.prototype.stringifyParams = function (parameters) {\n        try {\n            return JSON.stringify(parameters);\n        }\n        catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    };\n    return SimpleConsoleLogger;\n}());\nexport { SimpleConsoleLogger };\n\n//# sourceMappingURL=SimpleConsoleLogger.js.map\n","import { MetadataUtils } from \"../metadata-builder/MetadataUtils\";\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nvar MetadataArgsStorage = /** @class */ (function () {\n    function MetadataArgsStorage() {\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this.tables = [];\n        this.trees = [];\n        this.entityRepositories = [];\n        this.transactionEntityManagers = [];\n        this.transactionRepositories = [];\n        this.namingStrategies = [];\n        this.entitySubscribers = [];\n        this.indices = [];\n        this.uniques = [];\n        this.checks = [];\n        this.exclusions = [];\n        this.columns = [];\n        this.generations = [];\n        this.relations = [];\n        this.joinColumns = [];\n        this.joinTables = [];\n        this.entityListeners = [];\n        this.relationCounts = [];\n        this.relationIds = [];\n        this.embeddeds = [];\n        this.inheritances = [];\n        this.discriminatorValues = [];\n    }\n    MetadataArgsStorage.prototype.filterTables = function (target) {\n        return this.filterByTarget(this.tables, target);\n    };\n    MetadataArgsStorage.prototype.filterColumns = function (target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n    };\n    MetadataArgsStorage.prototype.findGenerated = function (target, propertyName) {\n        return this.generations.find(function (generated) {\n            return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;\n        });\n    };\n    MetadataArgsStorage.prototype.findTree = function (target) {\n        return this.trees.find(function (tree) {\n            return (Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target);\n        });\n    };\n    MetadataArgsStorage.prototype.filterRelations = function (target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relations, target);\n    };\n    MetadataArgsStorage.prototype.filterRelationIds = function (target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n    };\n    MetadataArgsStorage.prototype.filterRelationCounts = function (target) {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n    };\n    MetadataArgsStorage.prototype.filterIndices = function (target) {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter(function (index) {\n            return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;\n        });\n    };\n    MetadataArgsStorage.prototype.filterUniques = function (target) {\n        return this.uniques.filter(function (unique) {\n            return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;\n        });\n    };\n    MetadataArgsStorage.prototype.filterChecks = function (target) {\n        return this.checks.filter(function (check) {\n            return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;\n        });\n    };\n    MetadataArgsStorage.prototype.filterExclusions = function (target) {\n        return this.exclusions.filter(function (exclusion) {\n            return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;\n        });\n    };\n    MetadataArgsStorage.prototype.filterListeners = function (target) {\n        return this.filterByTarget(this.entityListeners, target);\n    };\n    MetadataArgsStorage.prototype.filterEmbeddeds = function (target) {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n    };\n    MetadataArgsStorage.prototype.findJoinTable = function (target, propertyName) {\n        return this.joinTables.find(function (joinTable) {\n            return joinTable.target === target && joinTable.propertyName === propertyName;\n        });\n    };\n    MetadataArgsStorage.prototype.filterJoinColumns = function (target, propertyName) {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter(function (joinColumn) {\n            return joinColumn.target === target && joinColumn.propertyName === propertyName;\n        });\n    };\n    MetadataArgsStorage.prototype.filterSubscribers = function (target) {\n        return this.filterByTarget(this.entitySubscribers, target);\n    };\n    MetadataArgsStorage.prototype.filterNamingStrategies = function (target) {\n        return this.filterByTarget(this.namingStrategies, target);\n    };\n    MetadataArgsStorage.prototype.filterTransactionEntityManagers = function (target, propertyName) {\n        return this.transactionEntityManagers.filter(function (transactionEm) {\n            return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    };\n    MetadataArgsStorage.prototype.filterTransactionRepository = function (target, propertyName) {\n        return this.transactionRepositories.filter(function (transactionEm) {\n            return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    };\n    MetadataArgsStorage.prototype.filterSingleTableChildren = function (target) {\n        return this.tables.filter(function (table) {\n            return table.target instanceof Function\n                && target instanceof Function\n                && MetadataUtils.isInherited(table.target, target)\n                && table.type === \"entity-child\";\n        });\n    };\n    MetadataArgsStorage.prototype.findInheritanceType = function (target) {\n        return this.inheritances.find(function (inheritance) { return inheritance.target === target; });\n    };\n    MetadataArgsStorage.prototype.findDiscriminatorValue = function (target) {\n        return this.discriminatorValues.find(function (discriminatorValue) { return discriminatorValue.target === target; });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Filters given array by a given target or targets.\n     */\n    MetadataArgsStorage.prototype.filterByTarget = function (array, target) {\n        return array.filter(function (table) {\n            return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;\n        });\n    };\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    MetadataArgsStorage.prototype.filterByTargetAndWithoutDuplicateProperties = function (array, target) {\n        var newArray = [];\n        array.forEach(function (item) {\n            var sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                if (!newArray.find(function (newItem) { return newItem.propertyName === item.propertyName; }))\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    };\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    MetadataArgsStorage.prototype.filterByTargetAndWithoutDuplicateEmbeddedProperties = function (array, target) {\n        var newArray = [];\n        array.forEach(function (item) {\n            var sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                var isDuplicateEmbeddedProperty = newArray.find(function (newItem) {\n                    return newItem.prefix === item.prefix && newItem.propertyName === item.propertyName;\n                });\n                if (!isDuplicateEmbeddedProperty)\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    };\n    return MetadataArgsStorage;\n}());\nexport { MetadataArgsStorage };\n\n//# sourceMappingURL=MetadataArgsStorage.js.map\n","import { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\nvar ClosureJunctionEntityMetadataBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ClosureJunctionEntityMetadataBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds EntityMetadata for the closure junction of the given closure entity.\n     */\n    ClosureJunctionEntityMetadataBuilder.prototype.build = function (parentClosureEntityMetadata) {\n        var _this = this;\n        // create entity metadata itself\n        var entityMetadata = new EntityMetadata({\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: parentClosureEntityMetadata.tableNameWithoutPrefix,\n                type: \"closure-junction\"\n            }\n        });\n        entityMetadata.build();\n        // create ancestor and descendant columns for new closure junction table\n        parentClosureEntityMetadata.primaryColumns.forEach(function (primaryColumn) {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: _this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"ancestor\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: primaryColumn.propertyName + \"_ancestor\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: _this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"descendant\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: primaryColumn.propertyName + \"_descendant\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    }\n                }\n            }));\n        });\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            })\n        ];\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\n        if (parentClosureEntityMetadata.treeLevelColumn) {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"level\",\n                    options: {\n                        type: this.connection.driver.mappedDataTypes.treeLevel,\n                    }\n                }\n            }));\n        }\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n            }),\n        ];\n        return entityMetadata;\n    };\n    return ClosureJunctionEntityMetadataBuilder;\n}());\nexport { ClosureJunctionEntityMetadataBuilder };\n\n//# sourceMappingURL=ClosureJunctionEntityMetadataBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { SapDriver } from \"../driver/sap/SapDriver\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\nimport { RelationMetadata } from \"../metadata/RelationMetadata\";\nimport { EmbeddedMetadata } from \"../metadata/EmbeddedMetadata\";\nimport { RelationIdMetadata } from \"../metadata/RelationIdMetadata\";\nimport { RelationCountMetadata } from \"../metadata/RelationCountMetadata\";\nimport { MetadataUtils } from \"./MetadataUtils\";\nimport { JunctionEntityMetadataBuilder } from \"./JunctionEntityMetadataBuilder\";\nimport { ClosureJunctionEntityMetadataBuilder } from \"./ClosureJunctionEntityMetadataBuilder\";\nimport { RelationJoinColumnBuilder } from \"./RelationJoinColumnBuilder\";\nimport { EntityListenerMetadata } from \"../metadata/EntityListenerMetadata\";\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { CheckMetadata } from \"../metadata/CheckMetadata\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { ExclusionMetadata } from \"../metadata/ExclusionMetadata\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Builds EntityMetadata objects and all its sub-metadatas.\n */\nvar EntityMetadataBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function EntityMetadataBuilder(connection, metadataArgsStorage) {\n        this.connection = connection;\n        this.metadataArgsStorage = metadataArgsStorage;\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(connection);\n        this.closureJunctionEntityMetadataBuilder = new ClosureJunctionEntityMetadataBuilder(connection);\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(connection);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a complete entity metadatas for the given entity classes.\n     */\n    EntityMetadataBuilder.prototype.build = function (entityClasses) {\n        var _this = this;\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\n        var allTables = entityClasses ? this.metadataArgsStorage.filterTables(entityClasses) : this.metadataArgsStorage.tables;\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\n        var realTables = allTables.filter(function (table) { return table.type === \"regular\" || table.type === \"closure\" || table.type === \"entity-child\" || table.type === \"view\"; });\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\n        var entityMetadatas = realTables.map(function (tableArgs) { return _this.createEntityMetadata(tableArgs); });\n        // compute parent entity metadatas for table inheritance\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeParentEntityMetadata(entityMetadatas, entityMetadata); });\n        // after all metadatas created we set child entity metadatas for table inheritance\n        entityMetadatas.forEach(function (metadata) {\n            metadata.childEntityMetadatas = entityMetadatas.filter(function (childMetadata) {\n                return metadata.target instanceof Function\n                    && childMetadata.target instanceof Function\n                    && MetadataUtils.isInherited(childMetadata.target, metadata.target);\n            });\n        });\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) { return entityMetadata.build(); });\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType === \"entity-child\"; })\n            .forEach(function (entityMetadata) { return entityMetadata.build(); });\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) { return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata); });\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType === \"entity-child\"; })\n            .forEach(function (entityMetadata) { return _this.computeEntityMetadataStep1(entityMetadatas, entityMetadata); });\n        // calculate entity metadata computed properties and all its sub-metadatas\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeEntityMetadataStep2(entityMetadata); });\n        // calculate entity metadata's inverse properties\n        entityMetadatas.forEach(function (entityMetadata) { return _this.computeInverseProperties(entityMetadata, entityMetadatas); });\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\n        entityMetadatas\n            .filter(function (entityMetadata) { return entityMetadata.tableType !== \"entity-child\"; })\n            .forEach(function (entityMetadata) {\n            // create entity's relations join columns (for many-to-one and one-to-one owner)\n            entityMetadata.relations.filter(function (relation) { return relation.isOneToOne || relation.isManyToOne; }).forEach(function (relation) {\n                var joinColumns = _this.metadataArgsStorage.filterJoinColumns(relation.target, relation.propertyName);\n                var _a = _this.relationJoinColumnBuilder.build(joinColumns, relation), foreignKey = _a.foreignKey, uniqueConstraint = _a.uniqueConstraint; // create a foreign key based on its metadata args\n                if (foreignKey) {\n                    relation.registerForeignKeys(foreignKey); // push it to the relation and thus register there a join column\n                    entityMetadata.foreignKeys.push(foreignKey);\n                }\n                if (uniqueConstraint) {\n                    if (_this.connection.driver instanceof MysqlDriver || _this.connection.driver instanceof AuroraDataApiDriver\n                        || _this.connection.driver instanceof SqlServerDriver || _this.connection.driver instanceof SapDriver) {\n                        var index = new IndexMetadata({\n                            entityMetadata: uniqueConstraint.entityMetadata,\n                            columns: uniqueConstraint.columns,\n                            args: {\n                                target: uniqueConstraint.target,\n                                name: uniqueConstraint.name,\n                                unique: true,\n                                synchronize: true\n                            }\n                        });\n                        if (_this.connection.driver instanceof SqlServerDriver) {\n                            index.where = index.columns.map(function (column) {\n                                return _this.connection.driver.escape(column.databaseName) + \" IS NOT NULL\";\n                            }).join(\" AND \");\n                        }\n                        if (relation.embeddedMetadata) {\n                            relation.embeddedMetadata.indices.push(index);\n                        }\n                        else {\n                            relation.entityMetadata.ownIndices.push(index);\n                        }\n                        _this.computeEntityMetadataStep2(entityMetadata);\n                    }\n                    else {\n                        if (relation.embeddedMetadata) {\n                            relation.embeddedMetadata.uniques.push(uniqueConstraint);\n                        }\n                        else {\n                            relation.entityMetadata.ownUniques.push(uniqueConstraint);\n                        }\n                        _this.computeEntityMetadataStep2(entityMetadata);\n                    }\n                }\n                if (foreignKey && _this.connection.driver instanceof CockroachDriver) {\n                    var index = new IndexMetadata({\n                        entityMetadata: relation.entityMetadata,\n                        columns: foreignKey.columns,\n                        args: {\n                            target: relation.entityMetadata.target,\n                            synchronize: true\n                        }\n                    });\n                    if (relation.embeddedMetadata) {\n                        relation.embeddedMetadata.indices.push(index);\n                    }\n                    else {\n                        relation.entityMetadata.ownIndices.push(index);\n                    }\n                    _this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n            // create junction entity metadatas for entity many-to-many relations\n            entityMetadata.relations.filter(function (relation) { return relation.isManyToMany; }).forEach(function (relation) {\n                var joinTable = _this.metadataArgsStorage.findJoinTable(relation.target, relation.propertyName);\n                if (!joinTable)\n                    return; // no join table set - no need to do anything (it means this is many-to-many inverse side)\n                // here we create a junction entity metadata for a new junction table of many-to-many relation\n                var junctionEntityMetadata = _this.junctionEntityMetadataBuilder.build(relation, joinTable);\n                relation.registerForeignKeys.apply(relation, tslib_1.__spread(junctionEntityMetadata.foreignKeys));\n                relation.registerJunctionEntityMetadata(junctionEntityMetadata);\n                // compute new entity metadata properties and push it to entity metadatas pool\n                _this.computeEntityMetadataStep2(junctionEntityMetadata);\n                _this.computeInverseProperties(junctionEntityMetadata, entityMetadatas);\n                entityMetadatas.push(junctionEntityMetadata);\n            });\n        });\n        // update entity metadata depend properties\n        entityMetadatas\n            .forEach(function (entityMetadata) {\n            entityMetadata.relationsWithJoinColumns = entityMetadata.relations.filter(function (relation) { return relation.isWithJoinColumn; });\n            entityMetadata.hasNonNullableRelations = entityMetadata.relationsWithJoinColumns.some(function (relation) { return !relation.isNullable || relation.isPrimary; });\n        });\n        // generate closure junction tables for all closure tables\n        entityMetadatas\n            .filter(function (metadata) { return metadata.treeType === \"closure-table\"; })\n            .forEach(function (entityMetadata) {\n            var closureJunctionEntityMetadata = _this.closureJunctionEntityMetadataBuilder.build(entityMetadata);\n            entityMetadata.closureJunctionTable = closureJunctionEntityMetadata;\n            _this.computeEntityMetadataStep2(closureJunctionEntityMetadata);\n            _this.computeInverseProperties(closureJunctionEntityMetadata, entityMetadatas);\n            entityMetadatas.push(closureJunctionEntityMetadata);\n        });\n        // generate keys for tables with single-table inheritance\n        entityMetadatas\n            .filter(function (metadata) { return metadata.inheritancePattern === \"STI\" && metadata.discriminatorColumn; })\n            .forEach(function (entityMetadata) { return _this.createKeysForTableInheritance(entityMetadata); });\n        // build all indices (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.indices.forEach(function (index) { return index.build(_this.connection.namingStrategy); });\n        });\n        // build all unique constraints (need to do it after relations and their join columns are built)\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.uniques.forEach(function (unique) { return unique.build(_this.connection.namingStrategy); });\n        });\n        // build all check constraints\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.checks.forEach(function (check) { return check.build(_this.connection.namingStrategy); });\n        });\n        // build all exclusion constraints\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.exclusions.forEach(function (exclusion) { return exclusion.build(_this.connection.namingStrategy); });\n        });\n        // add lazy initializer for entity relations\n        entityMetadatas\n            .filter(function (metadata) { return metadata.target instanceof Function; })\n            .forEach(function (entityMetadata) {\n            entityMetadata.relations\n                .filter(function (relation) { return relation.isLazy; })\n                .forEach(function (relation) {\n                _this.connection.relationLoader.enableLazyLoad(relation, entityMetadata.target.prototype);\n            });\n        });\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.columns.forEach(function (column) {\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\n                var generated = _this.metadataArgsStorage.findGenerated(column.target, column.propertyName);\n                if (generated) {\n                    column.isGenerated = true;\n                    column.generationStrategy = generated.strategy;\n                    if (generated.strategy === \"uuid\") {\n                        column.type = \"uuid\";\n                    }\n                    else if (generated.strategy === \"rowid\") {\n                        column.type = \"int\";\n                    }\n                    else {\n                        column.type = column.type || Number;\n                    }\n                    column.build(_this.connection);\n                    _this.computeEntityMetadataStep2(entityMetadata);\n                }\n            });\n        });\n        return entityMetadatas;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates entity metadata from the given table args.\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\n     */\n    EntityMetadataBuilder.prototype.createEntityMetadata = function (tableArgs) {\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\n        var inheritanceTree = tableArgs.target instanceof Function\n            ? MetadataUtils.getInheritanceTree(tableArgs.target)\n            : [tableArgs.target]; // todo: implement later here inheritance for string-targets\n        var tableInheritance = this.metadataArgsStorage.findInheritanceType(tableArgs.target);\n        var tableTree = this.metadataArgsStorage.findTree(tableArgs.target);\n        // if single table inheritance used, we need to copy all children columns in to parent table\n        var singleTableChildrenTargets;\n        if ((tableInheritance && tableInheritance.pattern === \"STI\") || tableArgs.type === \"entity-child\") {\n            singleTableChildrenTargets = this.metadataArgsStorage\n                .filterSingleTableChildren(tableArgs.target)\n                .map(function (args) { return args.target; })\n                .filter(function (target) { return target instanceof Function; });\n            inheritanceTree.push.apply(inheritanceTree, tslib_1.__spread(singleTableChildrenTargets));\n        }\n        return new EntityMetadata({\n            connection: this.connection,\n            args: tableArgs,\n            inheritanceTree: inheritanceTree,\n            tableTree: tableTree,\n            inheritancePattern: tableInheritance ? tableInheritance.pattern : undefined\n        });\n    };\n    EntityMetadataBuilder.prototype.computeParentEntityMetadata = function (allEntityMetadatas, entityMetadata) {\n        // after all metadatas created we set parent entity metadata for table inheritance\n        if (entityMetadata.tableType === \"entity-child\") {\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(function (allEntityMetadata) {\n                return allEntityMetadata.inheritanceTree.indexOf(entityMetadata.target) !== -1 && allEntityMetadata.inheritancePattern === \"STI\";\n            });\n        }\n    };\n    EntityMetadataBuilder.prototype.computeEntityMetadataStep1 = function (allEntityMetadatas, entityMetadata) {\n        var _this = this;\n        var _a, _b, _c;\n        var entityInheritance = this.metadataArgsStorage.findInheritanceType(entityMetadata.target);\n        var discriminatorValue = this.metadataArgsStorage.findDiscriminatorValue(entityMetadata.target);\n        entityMetadata.discriminatorValue = discriminatorValue ? discriminatorValue.value : entityMetadata.target.name; // todo: pass this to naming strategy to generate a name\n        // if single table inheritance is used, we need to mark all embedded columns as nullable\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(entityMetadata, this.metadataArgsStorage.filterEmbeddeds(entityMetadata.inheritanceTree))\n            .map(function (embedded) {\n            if (entityMetadata.inheritancePattern === \"STI\") {\n                embedded.columns = embedded.columns.map(function (column) {\n                    column.isNullable = true;\n                    return column;\n                });\n            }\n            return embedded;\n        });\n        entityMetadata.ownColumns = this.metadataArgsStorage\n            .filterColumns(entityMetadata.inheritanceTree)\n            .map(function (args) {\n            // for single table children we reuse columns created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownColumns.find(function (column) { return column.propertyName === args.propertyName; });\n            var column = new ColumnMetadata({ connection: _this.connection, entityMetadata: entityMetadata, args: args });\n            // if single table inheritance used, we need to mark all inherit table columns as nullable\n            var columnInSingleTableInheritedChild = allEntityMetadatas.find(function (otherEntityMetadata) { return otherEntityMetadata.tableType === \"entity-child\" && otherEntityMetadata.target === args.target; });\n            if (columnInSingleTableInheritedChild)\n                column.isNullable = true;\n            return column;\n        });\n        // for table inheritance we need to add a discriminator column\n        //\n        if (entityInheritance && entityInheritance.column) {\n            var discriminatorColumnName_1 = entityInheritance.column && entityInheritance.column.name ? entityInheritance.column.name : \"type\";\n            var discriminatorColumn = entityMetadata.ownColumns.find(function (column) { return column.propertyName === discriminatorColumnName_1; });\n            if (!discriminatorColumn) {\n                discriminatorColumn = new ColumnMetadata({\n                    connection: this.connection,\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: entityMetadata.target,\n                        mode: \"virtual\",\n                        propertyName: discriminatorColumnName_1,\n                        options: entityInheritance.column || {\n                            name: discriminatorColumnName_1,\n                            type: \"varchar\",\n                            nullable: false\n                        }\n                    }\n                });\n                discriminatorColumn.isVirtual = true;\n                discriminatorColumn.isDiscriminator = true;\n                entityMetadata.ownColumns.push(discriminatorColumn);\n            }\n            else {\n                discriminatorColumn.isDiscriminator = true;\n            }\n        }\n        // add discriminator column to the child entity metadatas\n        // discriminator column will not be there automatically since we are creating it in the code above\n        if (entityMetadata.tableType === \"entity-child\") {\n            var discriminatorColumn_1 = entityMetadata.parentEntityMetadata.ownColumns.find(function (column) { return column.isDiscriminator; });\n            if (discriminatorColumn_1 && !entityMetadata.ownColumns.find(function (column) { return column === discriminatorColumn_1; })) {\n                entityMetadata.ownColumns.push(discriminatorColumn_1);\n            }\n        }\n        var namingStrategy = this.connection.namingStrategy;\n        // check if tree is used then we need to add extra columns for specific tree types\n        if (entityMetadata.treeType === \"materialized-path\") {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                materializedPath: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: \"mpath\",\n                    options: /*tree.column || */ {\n                        name: namingStrategy.materializedPathColumnName,\n                        type: \"varchar\",\n                        nullable: true,\n                        default: \"\"\n                    }\n                }\n            }));\n        }\n        else if (entityMetadata.treeType === \"nested-set\") {\n            var _d = namingStrategy.nestedSetColumnNames, left = _d.left, right = _d.right;\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetLeft: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: left,\n                    options: /*tree.column || */ {\n                        name: left,\n                        type: \"integer\",\n                        nullable: false,\n                        default: 1\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                nestedSetRight: true,\n                args: {\n                    target: entityMetadata.target,\n                    mode: \"virtual\",\n                    propertyName: right,\n                    options: /*tree.column || */ {\n                        name: right,\n                        type: \"integer\",\n                        nullable: false,\n                        default: 2\n                    }\n                }\n            }));\n        }\n        entityMetadata.ownRelations = this.metadataArgsStorage.filterRelations(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relations created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.ownRelations.find(function (relation) { return relation.propertyName === args.propertyName; });\n            return new RelationMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.relationIds = this.metadataArgsStorage.filterRelationIds(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relation ids created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationIds.find(function (relationId) { return relationId.propertyName === args.propertyName; });\n            return new RelationIdMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.relationCounts = this.metadataArgsStorage.filterRelationCounts(entityMetadata.inheritanceTree).map(function (args) {\n            // for single table children we reuse relation counts created for their parents\n            if (entityMetadata.tableType === \"entity-child\")\n                return entityMetadata.parentEntityMetadata.relationCounts.find(function (relationCount) { return relationCount.propertyName === args.propertyName; });\n            return new RelationCountMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.ownListeners = this.metadataArgsStorage.filterListeners(entityMetadata.inheritanceTree).map(function (args) {\n            return new EntityListenerMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        entityMetadata.checks = this.metadataArgsStorage.filterChecks(entityMetadata.inheritanceTree).map(function (args) {\n            return new CheckMetadata({ entityMetadata: entityMetadata, args: args });\n        });\n        // Only PostgreSQL supports exclusion constraints.\n        if (this.connection.driver instanceof PostgresDriver) {\n            entityMetadata.exclusions = this.metadataArgsStorage.filterExclusions(entityMetadata.inheritanceTree).map(function (args) {\n                return new ExclusionMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n        }\n        if (this.connection.driver instanceof CockroachDriver) {\n            entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)\n                .filter(function (args) { return !args.unique; })\n                .map(function (args) {\n                return new IndexMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            var uniques = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree)\n                .filter(function (args) { return args.unique; })\n                .map(function (args) {\n                return new UniqueMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                    }\n                });\n            });\n            (_a = entityMetadata.ownUniques).push.apply(_a, tslib_1.__spread(uniques));\n        }\n        else {\n            entityMetadata.ownIndices = this.metadataArgsStorage.filterIndices(entityMetadata.inheritanceTree).map(function (args) {\n                return new IndexMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n        }\n        // Mysql and SAP HANA stores unique constraints as unique indices.\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver || this.connection.driver instanceof SapDriver) {\n            var indices = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {\n                return new IndexMetadata({\n                    entityMetadata: entityMetadata,\n                    args: {\n                        target: args.target,\n                        name: args.name,\n                        columns: args.columns,\n                        unique: true,\n                        synchronize: true\n                    }\n                });\n            });\n            (_b = entityMetadata.ownIndices).push.apply(_b, tslib_1.__spread(indices));\n        }\n        else {\n            var uniques = this.metadataArgsStorage.filterUniques(entityMetadata.inheritanceTree).map(function (args) {\n                return new UniqueMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            (_c = entityMetadata.ownUniques).push.apply(_c, tslib_1.__spread(uniques));\n        }\n    };\n    /**\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\n     * and does the same for all its sub-embeddeds (goes recursively).\n     */\n    EntityMetadataBuilder.prototype.createEmbeddedsRecursively = function (entityMetadata, embeddedArgs) {\n        var _this = this;\n        return embeddedArgs.map(function (embeddedArgs) {\n            var embeddedMetadata = new EmbeddedMetadata({ entityMetadata: entityMetadata, args: embeddedArgs });\n            var targets = MetadataUtils.getInheritanceTree(embeddedMetadata.type);\n            embeddedMetadata.columns = _this.metadataArgsStorage.filterColumns(targets).map(function (args) {\n                return new ColumnMetadata({ connection: _this.connection, entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.relations = _this.metadataArgsStorage.filterRelations(targets).map(function (args) {\n                return new RelationMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.listeners = _this.metadataArgsStorage.filterListeners(targets).map(function (args) {\n                return new EntityListenerMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.indices = _this.metadataArgsStorage.filterIndices(targets).map(function (args) {\n                return new IndexMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.uniques = _this.metadataArgsStorage.filterUniques(targets).map(function (args) {\n                return new UniqueMetadata({ entityMetadata: entityMetadata, embeddedMetadata: embeddedMetadata, args: args });\n            });\n            embeddedMetadata.relationIds = _this.metadataArgsStorage.filterRelationIds(targets).map(function (args) {\n                return new RelationIdMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            embeddedMetadata.relationCounts = _this.metadataArgsStorage.filterRelationCounts(targets).map(function (args) {\n                return new RelationCountMetadata({ entityMetadata: entityMetadata, args: args });\n            });\n            embeddedMetadata.embeddeds = _this.createEmbeddedsRecursively(entityMetadata, _this.metadataArgsStorage.filterEmbeddeds(targets));\n            embeddedMetadata.embeddeds.forEach(function (subEmbedded) { return subEmbedded.parentEmbeddedMetadata = embeddedMetadata; });\n            entityMetadata.allEmbeddeds.push(embeddedMetadata);\n            return embeddedMetadata;\n        });\n    };\n    /**\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\n     */\n    EntityMetadataBuilder.prototype.computeEntityMetadataStep2 = function (entityMetadata) {\n        var _this = this;\n        entityMetadata.embeddeds.forEach(function (embedded) { return embedded.build(_this.connection); });\n        entityMetadata.embeddeds.forEach(function (embedded) {\n            embedded.columnsFromTree.forEach(function (column) { return column.build(_this.connection); });\n            embedded.relationsFromTree.forEach(function (relation) { return relation.build(); });\n        });\n        entityMetadata.ownColumns.forEach(function (column) { return column.build(_this.connection); });\n        entityMetadata.ownRelations.forEach(function (relation) { return relation.build(); });\n        entityMetadata.relations = entityMetadata.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.relationsFromTree); }, entityMetadata.ownRelations);\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(function (relation) { return relation.isEager; });\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(function (relation) { return relation.isLazy; });\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToOne; });\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToMany; });\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToOne; });\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToMany; });\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(function (relation) { return relation.isOneToOneOwner; });\n        entityMetadata.ownerManyToManyRelations = entityMetadata.relations.filter(function (relation) { return relation.isManyToManyOwner; });\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(function (relation) { return relation.isTreeParent; });\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(function (relation) { return relation.isTreeChildren; });\n        entityMetadata.columns = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.columnsFromTree); }, entityMetadata.ownColumns);\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.listenersFromTree); }, entityMetadata.ownListeners);\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-load\"; });\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-insert\"; });\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-update\"; });\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"after-remove\"; });\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-insert\"; });\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-update\"; });\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(function (listener) { return listener.type === \"before-remove\"; });\n        entityMetadata.indices = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.indicesFromTree); }, entityMetadata.ownIndices);\n        entityMetadata.uniques = entityMetadata.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.uniquesFromTree); }, entityMetadata.ownUniques);\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(function (column) { return column.isPrimary; });\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(function (column) { return !column.isVirtual; });\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(function (column) { return column.closureType === \"ancestor\"; });\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(function (column) { return column.closureType === \"descendant\"; });\n        entityMetadata.hasMultiplePrimaryKeys = entityMetadata.primaryColumns.length > 1;\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated || column.isObjectId; });\n        entityMetadata.hasUUIDGeneratedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated || column.generationStrategy === \"uuid\"; }).length > 0;\n        entityMetadata.createDateColumn = entityMetadata.columns.find(function (column) { return column.isCreateDate; });\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(function (column) { return column.isUpdateDate; });\n        entityMetadata.deleteDateColumn = entityMetadata.columns.find(function (column) { return column.isDeleteDate; });\n        entityMetadata.versionColumn = entityMetadata.columns.find(function (column) { return column.isVersion; });\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(function (column) { return column.isDiscriminator; });\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(function (column) { return column.isTreeLevel; });\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(function (column) { return column.isNestedSetLeft; });\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(function (column) { return column.isNestedSetRight; });\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(function (column) { return column.isMaterializedPath; });\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(function (column) { return column.isObjectId; });\n        entityMetadata.foreignKeys.forEach(function (foreignKey) { return foreignKey.build(_this.connection.namingStrategy); });\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap();\n        entityMetadata.relationIds.forEach(function (relationId) { return relationId.build(); });\n        entityMetadata.relationCounts.forEach(function (relationCount) { return relationCount.build(); });\n        entityMetadata.embeddeds.forEach(function (embedded) {\n            embedded.relationIdsFromTree.forEach(function (relationId) { return relationId.build(); });\n            embedded.relationCountsFromTree.forEach(function (relationCount) { return relationCount.build(); });\n        });\n    };\n    /**\n     * Computes entity metadata's relations inverse side properties.\n     */\n    EntityMetadataBuilder.prototype.computeInverseProperties = function (entityMetadata, entityMetadatas) {\n        entityMetadata.relations.forEach(function (relation) {\n            // compute inverse side (related) entity metadatas for all relation metadatas\n            var inverseEntityMetadata = entityMetadatas.find(function (m) { return m.target === relation.type || (typeof relation.type === \"string\" && m.targetName === relation.type); });\n            if (!inverseEntityMetadata)\n                throw new Error(\"Entity metadata for \" + entityMetadata.name + \"#\" + relation.propertyPath + \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\");\n            relation.inverseEntityMetadata = inverseEntityMetadata;\n            relation.inverseSidePropertyPath = relation.buildInverseSidePropertyPath();\n            // and compute inverse relation and mark if it has such\n            relation.inverseRelation = inverseEntityMetadata.relations.find(function (foundRelation) { return foundRelation.propertyPath === relation.inverseSidePropertyPath; });\n        });\n    };\n    /**\n     * Creates indices for the table of single table inheritance.\n     */\n    EntityMetadataBuilder.prototype.createKeysForTableInheritance = function (entityMetadata) {\n        entityMetadata.indices.push(new IndexMetadata({\n            entityMetadata: entityMetadata,\n            columns: [entityMetadata.discriminatorColumn],\n            args: {\n                target: entityMetadata.target,\n                unique: false\n            }\n        }));\n    };\n    return EntityMetadataBuilder;\n}());\nexport { EntityMetadataBuilder };\n\n//# sourceMappingURL=EntityMetadataBuilder.js.map\n","import { MissingPrimaryColumnError } from \"../error/MissingPrimaryColumnError\";\nimport { CircularRelationsError } from \"../error/CircularRelationsError\";\nimport { DepGraph } from \"../util/DepGraph\";\nimport { DataTypeNotSupportedError } from \"../error/DataTypeNotSupportedError\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { NoConnectionOptionError } from \"../error/NoConnectionOptionError\";\nimport { InitializedRelationError } from \"../error/InitializedRelationError\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n/**\n * Validates built entity metadatas.\n */\nvar EntityMetadataValidator = /** @class */ (function () {\n    function EntityMetadataValidator() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given entity metadatas.\n     */\n    EntityMetadataValidator.prototype.validateMany = function (entityMetadatas, driver) {\n        var _this = this;\n        entityMetadatas.forEach(function (entityMetadata) { return _this.validate(entityMetadata, entityMetadatas, driver); });\n        this.validateDependencies(entityMetadatas);\n        this.validateEagerRelations(entityMetadatas);\n    };\n    /**\n     * Validates given entity metadata.\n     */\n    EntityMetadataValidator.prototype.validate = function (entityMetadata, allEntityMetadatas, driver) {\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata);\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (entityMetadata.inheritancePattern === \"STI\") {\n            if (!entityMetadata.discriminatorColumn)\n                throw new Error(\"Entity \" + entityMetadata.name + \" using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?\");\n            if ([\"\", undefined, null].indexOf(entityMetadata.discriminatorValue) !== -1)\n                throw new Error(\"Entity \" + entityMetadata.name + \" has empty discriminator value. Discriminator value should not be empty.\");\n            var sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(function (metadata) {\n                return metadata !== entityMetadata && metadata.discriminatorValue === entityMetadata.discriminatorValue;\n            });\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new Error(\"Entities \" + entityMetadata.name + \" and \" + sameDiscriminatorValueEntityMetadata.name + \" as equal discriminator values. Make sure their discriminator values are not equal using @DiscriminatorValue decorator.\");\n        }\n        entityMetadata.relationCounts.forEach(function (relationCount) {\n            if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne)\n                throw new Error(\"Relation count can not be implemented on ManyToOne or OneToOne relations.\");\n        });\n        if (!(driver instanceof MongoDriver)) {\n            entityMetadata.columns.forEach(function (column) {\n                var normalizedColumn = driver.normalizeType(column);\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1)\n                    throw new DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n                if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1)\n                    throw new Error(\"Column \" + column.propertyName + \" of Entity \" + entityMetadata.name + \" does not support length property.\");\n            });\n        }\n        if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver) {\n            var generatedColumns = entityMetadata.columns.filter(function (column) { return column.isGenerated && column.generationStrategy !== \"uuid\"; });\n            if (generatedColumns.length > 1)\n                throw new Error(\"Error in \" + entityMetadata.name + \" entity. There can be only one auto-increment column in MySql table.\");\n        }\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (driver instanceof MysqlDriver) {\n            var metadatasWithDatabase = allEntityMetadatas.filter(function (metadata) { return metadata.database; });\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError(\"database\");\n        }\n        if (driver instanceof SqlServerDriver) {\n            var charsetColumns = entityMetadata.columns.filter(function (column) { return column.charset; });\n            if (charsetColumns.length > 1)\n                throw new Error(\"Character set specifying is not supported in Sql Server\");\n        }\n        // check if relations are all without initialized properties\n        var entityInstance = entityMetadata.create();\n        entityMetadata.relations.forEach(function (relation) {\n            if (relation.isManyToMany || relation.isOneToMany) {\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false)\n                    return;\n                // get entity relation value and check if its an array\n                var relationInitializedValue = relation.getEntityValue(entityInstance);\n                if (Array.isArray(relationInitializedValue))\n                    throw new InitializedRelationError(relation);\n            }\n        });\n        // validate relations\n        entityMetadata.relations.forEach(function (relation) {\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new Error(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new Error(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n        });\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach(function (relation) {\n            var isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation.isCascadeRemove;\n            if (isCircularCascadeRemove)\n                throw new Error(\"Relation \" + entityMetadata.name + \"#\" + relation.propertyName + \" and \" + relation.inverseRelation.entityMetadata.name + \"#\" + relation.inverseRelation.propertyName + \" both has cascade remove set. \" +\n                    \"This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.\");\n        }); // todo: maybe better just deny removal from one to one relation without join column?\n        entityMetadata.eagerRelations.forEach(function (relation) {\n        });\n    };\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    EntityMetadataValidator.prototype.validateDependencies = function (entityMetadatas) {\n        var graph = new DepGraph();\n        entityMetadatas.forEach(function (entityMetadata) {\n            graph.addNode(entityMetadata.name);\n        });\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.relationsWithJoinColumns\n                .filter(function (relation) { return !relation.isNullable; })\n                .forEach(function (relation) {\n                graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n            });\n        });\n        try {\n            graph.overallOrder();\n        }\n        catch (err) {\n            throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n        }\n    };\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    EntityMetadataValidator.prototype.validateEagerRelations = function (entityMetadatas) {\n        entityMetadatas.forEach(function (entityMetadata) {\n            entityMetadata.eagerRelations.forEach(function (relation) {\n                if (relation.inverseRelation && relation.inverseRelation.isEager)\n                    throw new Error(\"Circular eager relations are disallowed. \" +\n                        (entityMetadata.targetName + \"#\" + relation.propertyPath + \" contains \\\"eager: true\\\", and its inverse side \") +\n                        (relation.inverseEntityMetadata.targetName + \"#\" + relation.inverseRelation.propertyPath + \" contains \\\"eager: true\\\" as well.\") +\n                        \" Remove \\\"eager: true\\\" from one side of the relation.\");\n            });\n        });\n    };\n    return EntityMetadataValidator;\n}());\nexport { EntityMetadataValidator };\n\n//# sourceMappingURL=EntityMetadataValidator.js.map\n","import * as tslib_1 from \"tslib\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Creates EntityMetadata for junction tables.\n * Junction tables are tables generated by many-to-many relations.\n */\nvar JunctionEntityMetadataBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function JunctionEntityMetadataBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\n     */\n    JunctionEntityMetadataBuilder.prototype.build = function (relation, joinTable) {\n        var _this = this;\n        var referencedColumns = this.collectReferencedColumns(relation, joinTable);\n        var inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);\n        var joinTableName = joinTable.name || this.connection.namingStrategy.joinTableName(relation.entityMetadata.tableNameWithoutPrefix, relation.inverseEntityMetadata.tableNameWithoutPrefix, relation.propertyPath, relation.inverseRelation ? relation.inverseRelation.propertyName : \"\");\n        var entityMetadata = new EntityMetadata({\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: joinTableName,\n                type: \"junction\",\n                database: joinTable.database || relation.entityMetadata.database,\n                schema: joinTable.schema || relation.entityMetadata.schema,\n            }\n        });\n        entityMetadata.build();\n        // create original side junction columns\n        var junctionColumns = referencedColumns.map(function (referencedColumn) {\n            var joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(function (joinColumnArgs) {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            var columnName = joinColumn && joinColumn.name ? joinColumn.name\n                : _this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);\n            return new ColumnMetadata({\n                connection: _this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: referencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        name: columnName,\n                        length: !referencedColumn.length\n                            && (_this.connection.driver instanceof MysqlDriver || _this.connection.driver instanceof AuroraDataApiDriver)\n                            && (referencedColumn.generationStrategy === \"uuid\" || referencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : referencedColumn.length,\n                        width: referencedColumn.width,\n                        type: referencedColumn.type,\n                        precision: referencedColumn.precision,\n                        scale: referencedColumn.scale,\n                        charset: referencedColumn.charset,\n                        collation: referencedColumn.collation,\n                        zerofill: referencedColumn.zerofill,\n                        unsigned: referencedColumn.zerofill ? true : referencedColumn.unsigned,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n        // create inverse side junction columns\n        var inverseJunctionColumns = inverseReferencedColumns.map(function (inverseReferencedColumn) {\n            var joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(function (joinColumnArgs) {\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) &&\n                    !!joinColumnArgs.name;\n            }) : undefined;\n            var columnName = joinColumn && joinColumn.name ? joinColumn.name\n                : _this.connection.namingStrategy.joinTableInverseColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);\n            return new ColumnMetadata({\n                connection: _this.connection,\n                entityMetadata: entityMetadata,\n                referencedColumn: inverseReferencedColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: columnName,\n                    options: {\n                        length: !inverseReferencedColumn.length\n                            && (_this.connection.driver instanceof MysqlDriver || _this.connection.driver instanceof AuroraDataApiDriver)\n                            && (inverseReferencedColumn.generationStrategy === \"uuid\" || inverseReferencedColumn.type === \"uuid\")\n                            ? \"36\"\n                            : inverseReferencedColumn.length,\n                        type: inverseReferencedColumn.type,\n                        precision: inverseReferencedColumn.precision,\n                        scale: inverseReferencedColumn.scale,\n                        charset: inverseReferencedColumn.charset,\n                        collation: inverseReferencedColumn.collation,\n                        zerofill: inverseReferencedColumn.zerofill,\n                        unsigned: inverseReferencedColumn.zerofill ? true : inverseReferencedColumn.unsigned,\n                        name: columnName,\n                        nullable: false,\n                        primary: true,\n                    }\n                }\n            });\n        });\n        this.changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns);\n        // set junction table columns\n        entityMetadata.ownerColumns = junctionColumns;\n        entityMetadata.inverseColumns = inverseJunctionColumns;\n        entityMetadata.ownColumns = tslib_1.__spread(junctionColumns, inverseJunctionColumns);\n        entityMetadata.ownColumns.forEach(function (column) { return column.relationMetadata = relation; });\n        // create junction table foreign keys\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.entityMetadata,\n                columns: junctionColumns,\n                referencedColumns: referencedColumns,\n                onDelete: relation.onDelete || \"CASCADE\"\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: relation.inverseEntityMetadata,\n                columns: inverseJunctionColumns,\n                referencedColumns: inverseReferencedColumns,\n                onDelete: relation.onDelete || \"CASCADE\"\n            }),\n        ];\n        // create junction table indices\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: junctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: inverseJunctionColumns,\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            })\n        ];\n        // finally return entity metadata\n        return entityMetadata;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    JunctionEntityMetadataBuilder.prototype.collectReferencedColumns = function (relation, joinTable) {\n        var hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(function (joinColumn) { return !!joinColumn.referencedColumnName; }) : false;\n        if (!joinTable.joinColumns || (joinTable.joinColumns && !hasAnyReferencedColumnName)) {\n            return relation.entityMetadata.columns.filter(function (column) { return column.isPrimary; });\n        }\n        else {\n            return joinTable.joinColumns.map(function (joinColumn) {\n                var referencedColumn = relation.entityMetadata.columns.find(function (column) { return column.propertyName === joinColumn.referencedColumnName; });\n                if (!referencedColumn)\n                    throw new Error(\"Referenced column \" + joinColumn.referencedColumnName + \" was not found in entity \" + relation.entityMetadata.name);\n                return referencedColumn;\n            });\n        }\n    };\n    /**\n     * Collects inverse referenced columns from the given join column args.\n     */\n    JunctionEntityMetadataBuilder.prototype.collectInverseReferencedColumns = function (relation, joinTable) {\n        var hasInverseJoinColumns = !!joinTable.inverseJoinColumns;\n        var hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns.find(function (joinColumn) { return !!joinColumn.referencedColumnName; }) : false;\n        if (!hasInverseJoinColumns || (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {\n            return relation.inverseEntityMetadata.primaryColumns;\n        }\n        else {\n            return joinTable.inverseJoinColumns.map(function (joinColumn) {\n                var referencedColumn = relation.inverseEntityMetadata.ownColumns.find(function (column) { return column.propertyName === joinColumn.referencedColumnName; });\n                if (!referencedColumn)\n                    throw new Error(\"Referenced column \" + joinColumn.referencedColumnName + \" was not found in entity \" + relation.inverseEntityMetadata.name);\n                return referencedColumn;\n            });\n        }\n    };\n    JunctionEntityMetadataBuilder.prototype.changeDuplicatedColumnNames = function (junctionColumns, inverseJunctionColumns) {\n        var _this = this;\n        junctionColumns.forEach(function (junctionColumn) {\n            inverseJunctionColumns.forEach(function (inverseJunctionColumn) {\n                if (junctionColumn.givenDatabaseName === inverseJunctionColumn.givenDatabaseName) {\n                    var junctionColumnName = _this.connection.namingStrategy.joinTableColumnDuplicationPrefix(junctionColumn.propertyName, 1);\n                    junctionColumn.propertyName = junctionColumnName;\n                    junctionColumn.givenDatabaseName = junctionColumnName;\n                    var inverseJunctionColumnName = _this.connection.namingStrategy.joinTableColumnDuplicationPrefix(inverseJunctionColumn.propertyName, 2);\n                    inverseJunctionColumn.propertyName = inverseJunctionColumnName;\n                    inverseJunctionColumn.givenDatabaseName = inverseJunctionColumnName;\n                }\n            });\n        });\n    };\n    return JunctionEntityMetadataBuilder;\n}());\nexport { JunctionEntityMetadataBuilder };\n\n//# sourceMappingURL=JunctionEntityMetadataBuilder.js.map\n","/**\n * Metadata args utility functions.\n */\nvar MetadataUtils = /** @class */ (function () {\n    function MetadataUtils() {\n    }\n    /**\n     * Gets given's entity all inherited classes.\n     * Gives in order from parents to children.\n     * For example Post extends ContentModel which extends Unit it will give\n     * [Unit, ContentModel, Post]\n     */\n    MetadataUtils.getInheritanceTree = function (entity) {\n        var tree = [entity];\n        var getPrototypeOf = function (object) {\n            var proto = Object.getPrototypeOf(object);\n            if (proto && proto.name) {\n                tree.push(proto);\n                getPrototypeOf(proto);\n            }\n        };\n        getPrototypeOf(entity);\n        return tree;\n    };\n    /**\n     * Checks if this table is inherited from another table.\n     */\n    MetadataUtils.isInherited = function (target1, target2) {\n        return target1.prototype instanceof target2;\n    };\n    /**\n     * Filters given array of targets by a given classes.\n     * If classes are not given, then it returns array itself.\n     */\n    MetadataUtils.filterByTarget = function (array, classes) {\n        if (!classes)\n            return array;\n        return array.filter(function (item) { return item.target && classes.indexOf(item.target) !== -1; });\n    };\n    return MetadataUtils;\n}());\nexport { MetadataUtils };\n\n//# sourceMappingURL=MetadataUtils.js.map\n","import { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Builds join column for the many-to-one and one-to-one owner relations.\n *\n * Cases it should cover:\n * 1. when join column is set with custom name and without referenced column name\n * we need automatically set referenced column name - primary ids by default\n * @JoinColumn({ name: \"custom_name\" })\n *\n * 2. when join column is set with only referenced column name\n * we need automatically set join column name - relation name + referenced column name\n * @JoinColumn({ referencedColumnName: \"title\" })\n *\n * 3. when join column is set without both referenced column name and join column name\n * we need to automatically set both of them\n * @JoinColumn()\n *\n * 4. when join column is not set at all (as in case of @ManyToOne relation)\n * we need to create join column for it with proper referenced column name and join column name\n *\n * 5. when multiple join columns set none of referencedColumnName and name can be optional\n * both options are required\n * @JoinColumn([\n *      { name: \"category_title\", referencedColumnName: \"type\" },\n *      { name: \"category_title\", referencedColumnName: \"name\" },\n * ])\n *\n * Since for many-to-one relations having JoinColumn decorator is not required,\n * we need to go thought each many-to-one relation without join column decorator set\n * and create join column metadata args for them.\n */\nvar RelationJoinColumnBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationJoinColumnBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Builds a foreign key of the many-to-one or one-to-one owner relations.\n     */\n    RelationJoinColumnBuilder.prototype.build = function (joinColumns, relation) {\n        var referencedColumns = this.collectReferencedColumns(joinColumns, relation);\n        if (!referencedColumns.length)\n            return { foreignKey: undefined, uniqueConstraint: undefined }; // this case is possible only for one-to-one non owning side\n        var columns = this.collectColumns(joinColumns, relation, referencedColumns);\n        var foreignKey = new ForeignKeyMetadata({\n            entityMetadata: relation.entityMetadata,\n            referencedEntityMetadata: relation.inverseEntityMetadata,\n            namingStrategy: this.connection.namingStrategy,\n            columns: columns,\n            referencedColumns: referencedColumns,\n            onDelete: relation.onDelete,\n            onUpdate: relation.onUpdate,\n            deferrable: relation.deferrable,\n        });\n        // Oracle does not allow both primary and unique constraints on the same column\n        if (this.connection.driver instanceof OracleDriver && columns.every(function (column) { return column.isPrimary; }))\n            return { foreignKey: foreignKey, uniqueConstraint: undefined };\n        // CockroachDB requires UNIQUE constraints on referenced columns\n        if (referencedColumns.length > 0 && relation.isOneToOne) {\n            var uniqueConstraint = new UniqueMetadata({\n                entityMetadata: relation.entityMetadata,\n                columns: foreignKey.columns,\n                args: {\n                    name: this.connection.namingStrategy.relationConstraintName(relation.entityMetadata.tablePath, foreignKey.columns.map(function (c) { return c.databaseName; })),\n                    target: relation.entityMetadata.target,\n                }\n            });\n            uniqueConstraint.build(this.connection.namingStrategy);\n            return { foreignKey: foreignKey, uniqueConstraint: uniqueConstraint };\n        }\n        return { foreignKey: foreignKey, uniqueConstraint: undefined };\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Collects referenced columns from the given join column args.\n     */\n    RelationJoinColumnBuilder.prototype.collectReferencedColumns = function (joinColumns, relation) {\n        var hasAnyReferencedColumnName = joinColumns.find(function (joinColumnArgs) { return !!joinColumnArgs.referencedColumnName; });\n        var manyToOneWithoutJoinColumn = joinColumns.length === 0 && relation.isManyToOne;\n        var hasJoinColumnWithoutAnyReferencedColumnName = joinColumns.length > 0 && !hasAnyReferencedColumnName;\n        if (manyToOneWithoutJoinColumn || hasJoinColumnWithoutAnyReferencedColumnName) { // covers case3 and case1\n            return relation.inverseEntityMetadata.primaryColumns;\n        }\n        else { // cases with referenced columns defined\n            return joinColumns.map(function (joinColumn) {\n                var referencedColumn = relation.inverseEntityMetadata.ownColumns.find(function (column) { return column.propertyName === joinColumn.referencedColumnName; }); // todo: can we also search in relations?\n                if (!referencedColumn)\n                    throw new Error(\"Referenced column \" + joinColumn.referencedColumnName + \" was not found in entity \" + relation.inverseEntityMetadata.name);\n                return referencedColumn;\n            });\n        }\n    };\n    /**\n     * Collects columns from the given join column args.\n     */\n    RelationJoinColumnBuilder.prototype.collectColumns = function (joinColumns, relation, referencedColumns) {\n        var _this = this;\n        return referencedColumns.map(function (referencedColumn) {\n            // in the case if relation has join column with only name set we need this check\n            var joinColumnMetadataArg = joinColumns.find(function (joinColumn) {\n                return (!joinColumn.referencedColumnName || joinColumn.referencedColumnName === referencedColumn.propertyName) &&\n                    !!joinColumn.name;\n            });\n            var joinColumnName = joinColumnMetadataArg ? joinColumnMetadataArg.name : _this.connection.namingStrategy.joinColumnName(relation.propertyName, referencedColumn.propertyName);\n            var relationalColumn = relation.entityMetadata.ownColumns.find(function (column) { return column.databaseName === joinColumnName; });\n            if (!relationalColumn) {\n                relationalColumn = new ColumnMetadata({\n                    connection: _this.connection,\n                    entityMetadata: relation.entityMetadata,\n                    args: {\n                        target: \"\",\n                        mode: \"virtual\",\n                        propertyName: relation.propertyName,\n                        options: {\n                            name: joinColumnName,\n                            type: referencedColumn.type,\n                            length: !referencedColumn.length\n                                && (_this.connection.driver instanceof MysqlDriver || _this.connection.driver instanceof AuroraDataApiDriver)\n                                && (referencedColumn.generationStrategy === \"uuid\" || referencedColumn.type === \"uuid\")\n                                ? \"36\"\n                                : referencedColumn.length,\n                            width: referencedColumn.width,\n                            charset: referencedColumn.charset,\n                            collation: referencedColumn.collation,\n                            precision: referencedColumn.precision,\n                            scale: referencedColumn.scale,\n                            zerofill: referencedColumn.zerofill,\n                            unsigned: referencedColumn.unsigned,\n                            comment: referencedColumn.comment,\n                            primary: relation.isPrimary,\n                            nullable: relation.isNullable\n                        }\n                    }\n                });\n                relation.entityMetadata.registerColumn(relationalColumn);\n            }\n            relationalColumn.referencedColumn = referencedColumn; // its important to set it here because we need to set referenced column for user defined join column\n            relationalColumn.type = referencedColumn.type; // also since types of relational column and join column must be equal we override user defined column type\n            relationalColumn.relationMetadata = relation;\n            relationalColumn.build(_this.connection);\n            return relationalColumn;\n        });\n    };\n    return RelationJoinColumnBuilder;\n}());\nexport { RelationJoinColumnBuilder };\n\n//# sourceMappingURL=RelationJoinColumnBuilder.js.map\n","/**\n * Check metadata contains all information about table's check constraints.\n */\nvar CheckMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function CheckMetadata(options) {\n        this.entityMetadata = options.entityMetadata;\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend check constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    CheckMetadata.prototype.build = function (namingStrategy) {\n        this.name = this.givenName ? this.givenName : namingStrategy.checkConstraintName(this.entityMetadata.tablePath, this.expression);\n        return this;\n    };\n    return CheckMetadata;\n}());\nexport { CheckMetadata };\n\n//# sourceMappingURL=CheckMetadata.js.map\n","import * as tslib_1 from \"tslib\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\nimport { FindOperator } from \"../find-options/FindOperator\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\n/**\n * This metadata contains all information about entity's column.\n */\nvar ColumnMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ColumnMetadata(options) {\n        /**\n         * Type's length in the database.\n         */\n        this.length = \"\";\n        /**\n         * Indicates if this column is a primary key.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this column is generated (auto increment or generated other way).\n         */\n        this.isGenerated = false;\n        /**\n         * Indicates if column can contain nulls or not.\n         */\n        this.isNullable = false;\n        /**\n         * Indicates if column is selected by query builder or not.\n         */\n        this.isSelect = true;\n        /**\n         * Indicates if column is inserted by default or not.\n         */\n        this.isInsert = true;\n        /**\n         * Indicates if column allows updates or not.\n         */\n        this.isUpdate = true;\n        /**\n         * Column comment.\n         * This feature is not supported by all databases.\n         */\n        this.comment = \"\";\n        /**\n         * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n         * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n         */\n        this.zerofill = false;\n        /**\n         * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n         */\n        this.unsigned = false;\n        /**\n         * Indicates if this column is an array.\n         */\n        this.isArray = false;\n        /**\n         * Indicates if column is virtual. Virtual columns are not mapped to the entity.\n         */\n        this.isVirtual = false;\n        /**\n         * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\n         */\n        this.isDiscriminator = false;\n        /**\n         * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\n         */\n        this.isTreeLevel = false;\n        /**\n         * Indicates if this column contains an entity creation date.\n         */\n        this.isCreateDate = false;\n        /**\n         * Indicates if this column contains an entity update date.\n         */\n        this.isUpdateDate = false;\n        /**\n         * Indicates if this column contains an entity delete date.\n         */\n        this.isDeleteDate = false;\n        /**\n         * Indicates if this column contains an entity version.\n         */\n        this.isVersion = false;\n        /**\n         * Indicates if this column contains an object id.\n         */\n        this.isObjectId = false;\n        /**\n         * Indicates if this column is nested set's left column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetLeft = false;\n        /**\n         * Indicates if this column is nested set's right column.\n         * Used only in tree entities with nested-set type.\n         */\n        this.isNestedSetRight = false;\n        /**\n         * Indicates if this column is materialized path's path column.\n         * Used only in tree entities with materialized path type.\n         */\n        this.isMaterializedPath = false;\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.referencedColumn = options.referencedColumn;\n        if (options.args.target)\n            this.target = options.args.target;\n        if (options.args.propertyName)\n            this.propertyName = options.args.propertyName;\n        if (options.args.options.name)\n            this.givenDatabaseName = options.args.options.name;\n        if (options.args.options.type)\n            this.type = options.args.options.type;\n        if (options.args.options.length)\n            this.length = options.args.options.length ? options.args.options.length.toString() : \"\";\n        if (options.args.options.width)\n            this.width = options.args.options.width;\n        if (options.args.options.charset)\n            this.charset = options.args.options.charset;\n        if (options.args.options.collation)\n            this.collation = options.args.options.collation;\n        if (options.args.options.primary)\n            this.isPrimary = options.args.options.primary;\n        if (options.args.options.default === null) // to make sure default: null is the same as nullable: true\n            this.isNullable = true;\n        if (options.args.options.nullable !== undefined)\n            this.isNullable = options.args.options.nullable;\n        if (options.args.options.select !== undefined)\n            this.isSelect = options.args.options.select;\n        if (options.args.options.insert !== undefined)\n            this.isInsert = options.args.options.insert;\n        if (options.args.options.update !== undefined)\n            this.isUpdate = options.args.options.update;\n        if (options.args.options.readonly !== undefined)\n            this.isUpdate = !options.args.options.readonly;\n        if (options.args.options.comment)\n            this.comment = options.args.options.comment;\n        if (options.args.options.default !== undefined)\n            this.default = options.args.options.default;\n        if (options.args.options.onUpdate)\n            this.onUpdate = options.args.options.onUpdate;\n        if (options.args.options.scale !== null && options.args.options.scale !== undefined)\n            this.scale = options.args.options.scale;\n        if (options.args.options.zerofill) {\n            this.zerofill = options.args.options.zerofill;\n            this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n        }\n        if (options.args.options.unsigned)\n            this.unsigned = options.args.options.unsigned;\n        if (options.args.options.precision !== undefined)\n            this.precision = options.args.options.precision;\n        if (options.args.options.enum) {\n            if (options.args.options.enum instanceof Object && !Array.isArray(options.args.options.enum)) {\n                this.enum = Object.keys(options.args.options.enum)\n                    .filter(function (key) { return isNaN(+key); }) // remove numeric keys - typescript numeric enum types generate them\n                    .map(function (key) { return options.args.options.enum[key]; });\n            }\n            else {\n                this.enum = options.args.options.enum;\n            }\n        }\n        if (options.args.options.enumName) {\n            this.enumName = options.args.options.enumName;\n        }\n        if (options.args.options.asExpression) {\n            this.asExpression = options.args.options.asExpression;\n            this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : \"VIRTUAL\";\n        }\n        if (options.args.options.hstoreType)\n            this.hstoreType = options.args.options.hstoreType;\n        if (options.args.options.array)\n            this.isArray = options.args.options.array;\n        if (options.args.mode) {\n            this.isVirtual = options.args.mode === \"virtual\";\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\n            this.isCreateDate = options.args.mode === \"createDate\";\n            this.isUpdateDate = options.args.mode === \"updateDate\";\n            this.isDeleteDate = options.args.mode === \"deleteDate\";\n            this.isVersion = options.args.mode === \"version\";\n            this.isObjectId = options.args.mode === \"objectId\";\n        }\n        if (options.args.options.transformer)\n            this.transformer = options.args.options.transformer;\n        if (options.args.options.spatialFeatureType)\n            this.spatialFeatureType = options.args.options.spatialFeatureType;\n        if (options.args.options.srid !== undefined)\n            this.srid = options.args.options.srid;\n        if (this.isTreeLevel)\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\n        if (this.isCreateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.createDate;\n            if (!this.default)\n                this.default = function () { return options.connection.driver.mappedDataTypes.createDateDefault; };\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;\n        }\n        if (this.isUpdateDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.updateDate;\n            if (!this.default)\n                this.default = function () { return options.connection.driver.mappedDataTypes.updateDateDefault; };\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;\n        }\n        if (this.isDeleteDate) {\n            if (!this.type)\n                this.type = options.connection.driver.mappedDataTypes.deleteDate;\n            if (!this.isNullable)\n                this.isNullable = options.connection.driver.mappedDataTypes.deleteDateNullable;\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.deleteDatePrecision)\n                this.precision = options.connection.driver.mappedDataTypes.deleteDatePrecision;\n        }\n        if (this.isVersion)\n            this.type = options.connection.driver.mappedDataTypes.version;\n        if (options.closureType)\n            this.closureType = options.closureType;\n        if (options.nestedSetLeft)\n            this.isNestedSetLeft = options.nestedSetLeft;\n        if (options.nestedSetRight)\n            this.isNestedSetRight = options.nestedSetRight;\n        if (options.materializedPath)\n            this.isMaterializedPath = options.materializedPath;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    ColumnMetadata.prototype.createValueMap = function (value, useDatabaseName) {\n        var _this = this;\n        if (useDatabaseName === void 0) { useDatabaseName = false; }\n        var _a;\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = tslib_1.__spread(this.embeddedMetadata.parentPropertyNames);\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_1 = function (propertyNames, map) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue_1(propertyNames, map[propertyName]);\n                    return map;\n                }\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n                if ((_this.generationStrategy === \"increment\" || _this.generationStrategy === \"rowid\") && _this.type === \"bigint\")\n                    value = String(value);\n                map[useDatabaseName ? _this.databaseName : _this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_1(propertyNames, {});\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\n            if ((this.generationStrategy === \"increment\" || this.generationStrategy === \"rowid\") && this.type === \"bigint\")\n                value = String(value);\n            return _a = {}, _a[useDatabaseName ? this.databaseName : this.propertyName] = value, _a;\n        }\n    };\n    /**\n     * Extracts column value and returns its column name with this value in a literal object.\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\n     *\n     * Examples what this method can return depend if this column is in embeds.\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\n     */\n    ColumnMetadata.prototype.getEntityValueMap = function (entity, options) {\n        var _this = this;\n        var _a, _b;\n        var returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = tslib_1.__spread(this.embeddedMetadata.parentPropertyNames);\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_2 = function (propertyNames, value, map) {\n                var propertyName = propertyNames.shift();\n                if (value === undefined)\n                    return map;\n                if (propertyName) {\n                    var submap = {};\n                    extractEmbeddedColumnValue_2(propertyNames, value[propertyName], submap);\n                    if (Object.keys(submap).length > 0) {\n                        map[propertyName] = submap;\n                    }\n                    return map;\n                }\n                if (value[_this.propertyName] !== undefined && (returnNulls === false || value[_this.propertyName] !== null))\n                    map[_this.propertyName] = value[_this.propertyName];\n                return map;\n            };\n            var map = {};\n            extractEmbeddedColumnValue_2(propertyNames, entity, map);\n            return Object.keys(map).length > 0 ? map : undefined;\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {\n                var map = this.relationMetadata.joinColumns.reduce(function (map, joinColumn) {\n                    var value = joinColumn.referencedColumn.getEntityValueMap(entity[_this.propertyName]);\n                    if (value === undefined)\n                        return map;\n                    return OrmUtils.mergeDeep(map, value);\n                }, {});\n                if (Object.keys(map).length > 0)\n                    return _a = {}, _a[this.propertyName] = map, _a;\n                return undefined;\n            }\n            else {\n                if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null))\n                    return _b = {}, _b[this.propertyName] = entity[this.propertyName], _b;\n                return undefined;\n            }\n        }\n    };\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    ColumnMetadata.prototype.getEntityValue = function (entity, transform) {\n        if (transform === void 0) { transform = false; }\n        if (entity === undefined || entity === null)\n            return undefined;\n        // extract column value from embeddeds of entity if column is in embedded\n        var value = undefined;\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = tslib_1.__spread(this.embeddedMetadata.parentPropertyNames);\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            var extractEmbeddedColumnValue_3 = function (propertyNames, value) {\n                var propertyName = propertyNames.shift();\n                return propertyName && value ? extractEmbeddedColumnValue_3(propertyNames, value[propertyName]) : value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            var embeddedObject = extractEmbeddedColumnValue_3(propertyNames, entity);\n            if (embeddedObject) {\n                if (this.relationMetadata && this.referencedColumn) {\n                    var relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\n                    if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(relatedEntity));\n                    }\n                    else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof FindOperator)) {\n                        value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n                    }\n                    else {\n                        value = PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n                    }\n                }\n                else if (this.referencedColumn) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(embeddedObject[this.propertyName]));\n                }\n                else {\n                    value = PromiseUtils.extractValue(embeddedObject[this.propertyName]);\n                }\n            }\n        }\n        else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.relationMetadata && this.referencedColumn) {\n                var relatedEntity = this.relationMetadata.getEntityValue(entity);\n                if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator) && !(relatedEntity instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(relatedEntity));\n                }\n                else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof FindOperator) && !(entity[this.propertyName] instanceof Function)) {\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(entity[this.propertyName]));\n                }\n                else {\n                    value = entity[this.propertyName];\n                }\n            }\n            else if (this.referencedColumn) {\n                value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(entity[this.propertyName]));\n            }\n            else {\n                value = entity[this.propertyName];\n            }\n        }\n        if (transform && this.transformer)\n            value = ApplyValueTransformers.transformTo(this.transformer, value);\n        return value;\n    };\n    /**\n     * Sets given entity's column value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     */\n    ColumnMetadata.prototype.setEntityValue = function (entity, value) {\n        var _this = this;\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var extractEmbeddedColumnValue_4 = function (embeddedMetadatas, map) {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                var embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                    extractEmbeddedColumnValue_4(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[_this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_4(tslib_1.__spread(this.embeddedMetadata.embeddedMetadataTree), entity);\n        }\n        else {\n            entity[this.propertyName] = value;\n        }\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    ColumnMetadata.prototype.build = function (connection) {\n        this.propertyPath = this.buildPropertyPath();\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\");\n        this.databaseName = this.buildDatabaseName(connection);\n        this.databasePath = this.buildDatabasePath();\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\n        return this;\n    };\n    ColumnMetadata.prototype.buildPropertyPath = function () {\n        var path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.propertyName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\n            path += \".\" + this.referencedColumn.propertyName;\n        return path;\n    };\n    ColumnMetadata.prototype.buildDatabasePath = function () {\n        var path = \"\";\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\n        path += this.databaseName;\n        // we add reference column to property path only if this column is virtual\n        // because if its not virtual it means user defined a real column for this relation\n        // also we don't do it if column is inside a junction table\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName)\n            path += \".\" + this.referencedColumn.databaseName;\n        return path;\n    };\n    ColumnMetadata.prototype.buildDatabaseName = function (connection) {\n        var propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];\n        if (connection.driver instanceof MongoDriver) // we don't need to include embedded name for the mongodb column names\n            propertyNames = [];\n        return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\n    };\n    return ColumnMetadata;\n}());\nexport { ColumnMetadata };\n\n//# sourceMappingURL=ColumnMetadata.js.map\n","import * as tslib_1 from \"tslib\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\n/**\n * Contains all information about entity's embedded property.\n */\nvar EmbeddedMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function EmbeddedMetadata(options) {\n        /**\n         * Columns inside this embed.\n         */\n        this.columns = [];\n        /**\n         * Relations inside this embed.\n         */\n        this.relations = [];\n        /**\n         * Entity listeners inside this embed.\n         */\n        this.listeners = [];\n        /**\n         * Indices applied to the embed columns.\n         */\n        this.indices = [];\n        /**\n         * Uniques applied to the embed columns.\n         */\n        this.uniques = [];\n        /**\n         * Relation ids inside this embed.\n         */\n        this.relationIds = [];\n        /**\n         * Relation counts inside this embed.\n         */\n        this.relationCounts = [];\n        /**\n         * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n         */\n        this.embeddeds = [];\n        /**\n         * Indicates if this embedded is in array mode.\n         *\n         * This option works only in mongodb.\n         */\n        this.isArray = false;\n        /**\n         * Returns array of property names of current embed and all its parent embeds.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * we need to get value of \"id\" column from the post real entity object.\n         * this method will return [\"data\", \"information\", \"counters\"]\n         */\n        this.parentPropertyNames = [];\n        /**\n         * Returns array of prefixes of current embed and all its parent embeds.\n         */\n        this.parentPrefixes = [];\n        /**\n         * Returns embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.embeddedMetadataTree = [];\n        /**\n         * Embed metadatas from all levels of the parent tree.\n         *\n         * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n         * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n         */\n        this.columnsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.relationsFromTree = [];\n        /**\n         * Relations of this embed and all relations from its child embeds.\n         */\n        this.listenersFromTree = [];\n        /**\n         * Indices of this embed and all indices from its child embeds.\n         */\n        this.indicesFromTree = [];\n        /**\n         * Uniques of this embed and all uniques from its child embeds.\n         */\n        this.uniquesFromTree = [];\n        /**\n         * Relation ids of this embed and all relation ids from its child embeds.\n         */\n        this.relationIdsFromTree = [];\n        /**\n         * Relation counts of this embed and all relation counts from its child embeds.\n         */\n        this.relationCountsFromTree = [];\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates a new embedded object.\n     */\n    EmbeddedMetadata.prototype.create = function () {\n        return new this.type;\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    EmbeddedMetadata.prototype.build = function (connection) {\n        this.embeddeds.forEach(function (embedded) { return embedded.build(connection); });\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.uniquesFromTree = this.buildUniquesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        return this;\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    EmbeddedMetadata.prototype.buildPartialPrefix = function () {\n        // if prefix option was not set or explicitly set to true - default prefix\n        if (this.customPrefix === undefined || this.customPrefix === true) {\n            return [this.propertyName];\n        }\n        // if prefix option was set to empty string or explicity set to false - disable prefix\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\n            return [];\n        }\n        // use custom prefix\n        if (typeof this.customPrefix === \"string\") {\n            return [this.customPrefix];\n        }\n        throw new Error(\"Invalid prefix option given for \" + this.entityMetadata.targetName + \"#\" + this.propertyName);\n    };\n    EmbeddedMetadata.prototype.buildPrefix = function (connection) {\n        if (connection.driver instanceof MongoDriver)\n            return this.propertyName;\n        var prefixes = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n        prefixes.push.apply(prefixes, tslib_1.__spread(this.buildPartialPrefix()));\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    };\n    EmbeddedMetadata.prototype.buildParentPropertyNames = function () {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n    };\n    EmbeddedMetadata.prototype.buildParentPrefixes = function () {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();\n    };\n    EmbeddedMetadata.prototype.buildEmbeddedMetadataTree = function () {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n    };\n    EmbeddedMetadata.prototype.buildColumnsFromTree = function () {\n        return this.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.buildColumnsFromTree()); }, this.columns);\n    };\n    EmbeddedMetadata.prototype.buildRelationsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationsFromTree()); }, this.relations);\n    };\n    EmbeddedMetadata.prototype.buildListenersFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildListenersFromTree()); }, this.listeners);\n    };\n    EmbeddedMetadata.prototype.buildIndicesFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildIndicesFromTree()); }, this.indices);\n    };\n    EmbeddedMetadata.prototype.buildUniquesFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildUniquesFromTree()); }, this.uniques);\n    };\n    EmbeddedMetadata.prototype.buildRelationIdsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationIdsFromTree()); }, this.relationIds);\n    };\n    EmbeddedMetadata.prototype.buildRelationCountsFromTree = function () {\n        return this.embeddeds.reduce(function (relations, embedded) { return relations.concat(embedded.buildRelationCountsFromTree()); }, this.relationCounts);\n    };\n    return EmbeddedMetadata;\n}());\nexport { EmbeddedMetadata };\n\n//# sourceMappingURL=EmbeddedMetadata.js.map\n","/**\n * This metadata contains all information about entity's listeners.\n */\nvar EntityListenerMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function EntityListenerMetadata(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.type = options.args.type;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    EntityListenerMetadata.prototype.isAllowed = function (entity) {\n        return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target); // todo: also need to implement entity schema inheritance\n    };\n    /**\n     * Executes listener method of the given entity.\n     */\n    EntityListenerMetadata.prototype.execute = function (entity) {\n        if (!this.embeddedMetadata)\n            return entity[this.propertyName]();\n        this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    EntityListenerMetadata.prototype.callEntityEmbeddedMethod = function (entity, propertyPaths) {\n        var propertyPath = propertyPaths.shift();\n        if (!propertyPath || !entity[propertyPath])\n            return;\n        if (propertyPaths.length === 0) {\n            entity[propertyPath][this.propertyName]();\n        }\n        else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n        }\n    };\n    return EntityListenerMetadata;\n}());\nexport { EntityListenerMetadata };\n\n//# sourceMappingURL=EntityListenerMetadata.js.map\n","import * as tslib_1 from \"tslib\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { SapDriver } from \"../driver/sap/SapDriver\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { CannotCreateEntityIdMapError } from \"../error/CannotCreateEntityIdMapError\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { shorten } from \"../util/StringUtils\";\n/**\n * Contains all entity metadata.\n */\nvar EntityMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function EntityMetadata(options) {\n        /**\n         * Children entity metadatas. Used in inheritance patterns.\n         */\n        this.childEntityMetadatas = [];\n        /**\n         * All \"inheritance tree\" from a target entity.\n         * For example for target Post < ContentModel < Unit it will be an array of [Post, ContentModel, Unit].\n         * It also contains child entities for single table inheritance.\n         */\n        this.inheritanceTree = [];\n        /**\n         * Table type. Tables can be abstract, closure, junction, embedded, etc.\n         */\n        this.tableType = \"regular\";\n        /**\n         * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n         */\n        this.withoutRowid = false;\n        /**\n         * Indicates if schema will be synchronized for this entity or not.\n         */\n        this.synchronize = true;\n        /**\n         * Checks if there any non-nullable column exist in this entity.\n         */\n        this.hasNonNullableRelations = false;\n        /**\n         * Indicates if this entity metadata of a junction table, or not.\n         * Junction table is a table created by many-to-many relationship.\n         *\n         * Its also possible to understand if entity is junction via tableType.\n         */\n        this.isJunction = false;\n        /**\n         * Checks if this table is a junction table of the closure table.\n         * This type is for tables that contain junction metadata of the closure tables.\n         */\n        this.isClosureJunction = false;\n        /**\n         * Checks if entity's table has multiple primary columns.\n         */\n        this.hasMultiplePrimaryKeys = false;\n        /**\n         * Indicates if this entity metadata has uuid generated columns.\n         */\n        this.hasUUIDGeneratedColumns = false;\n        /**\n         * Entity's column metadatas defined by user.\n         */\n        this.ownColumns = [];\n        /**\n         * Columns of the entity, including columns that are coming from the embeddeds of this entity.\n         */\n        this.columns = [];\n        /**\n         * Ancestor columns used only in closure junction tables.\n         */\n        this.ancestorColumns = [];\n        /**\n         * Descendant columns used only in closure junction tables.\n         */\n        this.descendantColumns = [];\n        /**\n         * All columns except for virtual columns.\n         */\n        this.nonVirtualColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of owner entity.\n         */\n        this.ownerColumns = [];\n        /**\n         * In the case if this entity metadata is junction table's entity metadata,\n         * this will contain all referenced columns of inverse entity.\n         */\n        this.inverseColumns = [];\n        /**\n         * Gets the column with generated flag.\n         */\n        this.generatedColumns = [];\n        /**\n         * Gets the primary columns.\n         */\n        this.primaryColumns = [];\n        /**\n         * Entity's relation metadatas.\n         */\n        this.ownRelations = [];\n        /**\n         * Relations of the entity, including relations that are coming from the embeddeds of this entity.\n         */\n        this.relations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.eagerRelations = [];\n        /**\n         * List of eager relations this metadata has.\n         */\n        this.lazyRelations = [];\n        /**\n         * Gets only one-to-one relations of the entity.\n         */\n        this.oneToOneRelations = [];\n        /**\n         * Gets only owner one-to-one relations of the entity.\n         */\n        this.ownerOneToOneRelations = [];\n        /**\n         * Gets only one-to-many relations of the entity.\n         */\n        this.oneToManyRelations = [];\n        /**\n         * Gets only many-to-one relations of the entity.\n         */\n        this.manyToOneRelations = [];\n        /**\n         * Gets only many-to-many relations of the entity.\n         */\n        this.manyToManyRelations = [];\n        /**\n         * Gets only owner many-to-many relations of the entity.\n         */\n        this.ownerManyToManyRelations = [];\n        /**\n         * Gets only owner one-to-one and many-to-one relations.\n         */\n        this.relationsWithJoinColumns = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationIds = [];\n        /**\n         * Entity's relation id metadatas.\n         */\n        this.relationCounts = [];\n        /**\n         * Entity's foreign key metadatas.\n         */\n        this.foreignKeys = [];\n        /**\n         * Entity's embedded metadatas.\n         */\n        this.embeddeds = [];\n        /**\n         * All embeddeds - embeddeds from this entity metadata and from all child embeddeds, etc.\n         */\n        this.allEmbeddeds = [];\n        /**\n         * Entity's own indices.\n         */\n        this.ownIndices = [];\n        /**\n         * Entity's index metadatas.\n         */\n        this.indices = [];\n        /**\n         * Entity's unique metadatas.\n         */\n        this.uniques = [];\n        /**\n         * Entity's own uniques.\n         */\n        this.ownUniques = [];\n        /**\n         * Entity's check metadatas.\n         */\n        this.checks = [];\n        /**\n         * Entity's exclusion metadatas.\n         */\n        this.exclusions = [];\n        /**\n         * Entity's own listener metadatas.\n         */\n        this.ownListeners = [];\n        /**\n         * Entity listener metadatas.\n         */\n        this.listeners = [];\n        /**\n         * Listener metadatas with \"AFTER LOAD\" type.\n         */\n        this.afterLoadListeners = [];\n        /**\n         * Listener metadatas with \"AFTER INSERT\" type.\n         */\n        this.beforeInsertListeners = [];\n        /**\n         * Listener metadatas with \"AFTER INSERT\" type.\n         */\n        this.afterInsertListeners = [];\n        /**\n         * Listener metadatas with \"AFTER UPDATE\" type.\n         */\n        this.beforeUpdateListeners = [];\n        /**\n         * Listener metadatas with \"AFTER UPDATE\" type.\n         */\n        this.afterUpdateListeners = [];\n        /**\n         * Listener metadatas with \"AFTER REMOVE\" type.\n         */\n        this.beforeRemoveListeners = [];\n        /**\n         * Listener metadatas with \"AFTER REMOVE\" type.\n         */\n        this.afterRemoveListeners = [];\n        this.connection = options.connection;\n        this.inheritanceTree = options.inheritanceTree || [];\n        this.inheritancePattern = options.inheritancePattern;\n        this.treeType = options.tableTree ? options.tableTree.type : undefined;\n        this.parentClosureEntityMetadata = options.parentClosureEntityMetadata;\n        this.tableMetadataArgs = options.args;\n        this.target = this.tableMetadataArgs.target;\n        this.tableType = this.tableMetadataArgs.type;\n        this.expression = this.tableMetadataArgs.expression;\n        this.withoutRowid = this.tableMetadataArgs.withoutRowid;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new entity.\n     */\n    EntityMetadata.prototype.create = function (queryRunner) {\n        var _this = this;\n        // if target is set to a function (e.g. class) that can be created then create it\n        var ret;\n        if (this.target instanceof Function) {\n            ret = new this.target();\n            this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, ret, queryRunner); });\n            return ret;\n        }\n        // otherwise simply return a new empty object\n        var newObject = {};\n        this.lazyRelations.forEach(function (relation) { return _this.connection.relationLoader.enableLazyLoad(relation, newObject, queryRunner); });\n        return newObject;\n    };\n    /**\n     * Checks if given entity has an id.\n     */\n    EntityMetadata.prototype.hasId = function (entity) {\n        if (!entity)\n            return false;\n        return this.primaryColumns.every(function (primaryColumn) {\n            var value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined && value !== \"\";\n        });\n    };\n    /**\n     * Checks if given entity / object contains ALL primary keys entity must have.\n     * Returns true if it contains all of them, false if at least one of them is not defined.\n     */\n    EntityMetadata.prototype.hasAllPrimaryKeys = function (entity) {\n        return this.primaryColumns.every(function (primaryColumn) {\n            var value = primaryColumn.getEntityValue(entity);\n            return value !== null && value !== undefined;\n        });\n    };\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    EntityMetadata.prototype.ensureEntityIdMap = function (id) {\n        if (id instanceof Object)\n            return id;\n        if (this.hasMultiplePrimaryKeys)\n            throw new CannotCreateEntityIdMapError(this, id);\n        return this.primaryColumns[0].createValueMap(id);\n    };\n    /**\n     * Gets primary keys of the entity and returns them in a literal object.\n     * For example, for Post{ id: 1, title: \"hello\" } where id is primary it will return { id: 1 }\n     * For multiple primary keys it returns multiple keys in object.\n     * For primary keys inside embeds it returns complex object literal with keys in them.\n     */\n    EntityMetadata.prototype.getEntityIdMap = function (entity) {\n        if (!entity)\n            return undefined;\n        return EntityMetadata.getValueMap(entity, this.primaryColumns, { skipNulls: true });\n    };\n    /**\n     * Creates a \"mixed id map\".\n     * If entity has multiple primary keys (ids) then it will return just regular id map, like what getEntityIdMap returns.\n     * But if entity has a single primary key then it will return just value of the id column of the entity, just value.\n     * This is called mixed id map.\n     */\n    EntityMetadata.prototype.getEntityIdMixedMap = function (entity) {\n        if (!entity)\n            return entity;\n        var idMap = this.getEntityIdMap(entity);\n        if (this.hasMultiplePrimaryKeys) {\n            return idMap;\n        }\n        else if (idMap) {\n            return this.primaryColumns[0].getEntityValue(idMap); // todo: what about parent primary column?\n        }\n        return idMap;\n    };\n    /**\n     * Compares two different entities by their ids.\n     * Returns true if they match, false otherwise.\n     */\n    EntityMetadata.prototype.compareEntities = function (firstEntity, secondEntity) {\n        var firstEntityIdMap = this.getEntityIdMap(firstEntity);\n        if (!firstEntityIdMap)\n            return false;\n        var secondEntityIdMap = this.getEntityIdMap(secondEntity);\n        if (!secondEntityIdMap)\n            return false;\n        return OrmUtils.compareIds(firstEntityIdMap, secondEntityIdMap);\n    };\n    /**\n     * Finds column with a given property name.\n     */\n    EntityMetadata.prototype.findColumnWithPropertyName = function (propertyName) {\n        return this.columns.find(function (column) { return column.propertyName === propertyName; });\n    };\n    /**\n     * Finds column with a given database name.\n     */\n    EntityMetadata.prototype.findColumnWithDatabaseName = function (databaseName) {\n        return this.columns.find(function (column) { return column.databaseName === databaseName; });\n    };\n    /**\n     * Finds column with a given property path.\n     */\n    EntityMetadata.prototype.findColumnWithPropertyPath = function (propertyPath) {\n        var column = this.columns.find(function (column) { return column.propertyPath === propertyPath; });\n        if (column)\n            return column;\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        var relation = this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n        if (relation && relation.joinColumns.length === 1)\n            return relation.joinColumns[0];\n        return undefined;\n    };\n    /**\n     * Finds columns with a given property path.\n     * Property path can match a relation, and relations can contain multiple columns.\n     */\n    EntityMetadata.prototype.findColumnsWithPropertyPath = function (propertyPath) {\n        var column = this.columns.find(function (column) { return column.propertyPath === propertyPath; });\n        if (column)\n            return [column];\n        // in the case if column with property path was not found, try to find a relation with such property path\n        // if we find relation and it has a single join column then its the column user was seeking\n        var relation = this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n        if (relation && relation.joinColumns)\n            return relation.joinColumns;\n        return [];\n    };\n    /**\n     * Finds relation with the given property path.\n     */\n    EntityMetadata.prototype.findRelationWithPropertyPath = function (propertyPath) {\n        return this.relations.find(function (relation) { return relation.propertyPath === propertyPath; });\n    };\n    /**\n     * Checks if there is an embedded with a given property path.\n     */\n    EntityMetadata.prototype.hasEmbeddedWithPropertyPath = function (propertyPath) {\n        return this.allEmbeddeds.some(function (embedded) { return embedded.propertyPath === propertyPath; });\n    };\n    /**\n     * Finds embedded with a given property path.\n     */\n    EntityMetadata.prototype.findEmbeddedWithPropertyPath = function (propertyPath) {\n        return this.allEmbeddeds.find(function (embedded) { return embedded.propertyPath === propertyPath; });\n    };\n    /**\n     * Iterates through entity and finds and extracts all values from relations in the entity.\n     * If relation value is an array its being flattened.\n     */\n    EntityMetadata.prototype.extractRelationValuesFromEntity = function (entity, relations) {\n        var relationsAndValues = [];\n        relations.forEach(function (relation) {\n            var value = relation.getEntityValue(entity);\n            if (Array.isArray(value)) {\n                value.forEach(function (subValue) { return relationsAndValues.push([relation, subValue, relation.inverseEntityMetadata]); });\n            }\n            else if (value) {\n                relationsAndValues.push([relation, value, relation.inverseEntityMetadata]);\n            }\n        });\n        return relationsAndValues;\n    };\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a property paths for a given entity.\n     */\n    EntityMetadata.createPropertyPath = function (metadata, entity, prefix) {\n        var _this = this;\n        if (prefix === void 0) { prefix = \"\"; }\n        var paths = [];\n        Object.keys(entity).forEach(function (key) {\n            // check for function is needed in the cases when createPropertyPath used on values containg a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            var parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                var subPaths = _this.createPropertyPath(metadata, entity[key], parentPath);\n                paths.push.apply(paths, tslib_1.__spread(subPaths));\n            }\n            else {\n                var path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    };\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    EntityMetadata.difference = function (firstIdMaps, secondIdMaps) {\n        return firstIdMaps.filter(function (firstIdMap) {\n            return !secondIdMaps.find(function (secondIdMap) { return OrmUtils.compareIds(firstIdMap, secondIdMap); });\n        });\n    };\n    /**\n     * Creates value map from the given values and columns.\n     * Examples of usages are primary columns map and join columns map.\n     */\n    EntityMetadata.getValueMap = function (entity, columns, options) {\n        return columns.reduce(function (map, column) {\n            var value = column.getEntityValueMap(entity, options);\n            // make sure that none of the values of the columns are not missing\n            if (map === undefined || value === null || value === undefined)\n                return undefined;\n            return column.isObjectId ? Object.assign(map, value) : OrmUtils.mergeDeep(map, value);\n        }, {});\n    };\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    EntityMetadata.prototype.build = function () {\n        var namingStrategy = this.connection.namingStrategy;\n        var entityPrefix = this.connection.options.entityPrefix;\n        this.engine = this.tableMetadataArgs.engine;\n        this.database = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.database : this.tableMetadataArgs.database;\n        if (this.tableMetadataArgs.schema) {\n            this.schema = this.tableMetadataArgs.schema;\n        }\n        else if ((this.tableMetadataArgs.type === \"entity-child\") && this.parentEntityMetadata) {\n            this.schema = this.parentEntityMetadata.schema;\n        }\n        else {\n            this.schema = this.connection.options.schema;\n        }\n        this.givenTableName = this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata ? this.parentEntityMetadata.givenTableName : this.tableMetadataArgs.name;\n        this.synchronize = this.tableMetadataArgs.synchronize === false ? false : true;\n        this.targetName = this.tableMetadataArgs.target instanceof Function ? this.tableMetadataArgs.target.name : this.tableMetadataArgs.target;\n        if (this.tableMetadataArgs.type === \"closure-junction\") {\n            this.tableNameWithoutPrefix = namingStrategy.closureJunctionTableName(this.givenTableName);\n        }\n        else if (this.tableMetadataArgs.type === \"entity-child\" && this.parentEntityMetadata) {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.parentEntityMetadata.targetName, this.parentEntityMetadata.givenTableName);\n        }\n        else {\n            this.tableNameWithoutPrefix = namingStrategy.tableName(this.targetName, this.givenTableName);\n            if (this.connection.driver.maxAliasLength && this.connection.driver.maxAliasLength > 0 && this.tableNameWithoutPrefix.length > this.connection.driver.maxAliasLength) {\n                this.tableNameWithoutPrefix = shorten(this.tableNameWithoutPrefix, { separator: \"_\", segmentLength: 3 });\n            }\n        }\n        this.tableName = entityPrefix ? namingStrategy.prefixTableName(entityPrefix, this.tableNameWithoutPrefix) : this.tableNameWithoutPrefix;\n        this.target = this.target ? this.target : this.tableName;\n        this.name = this.targetName ? this.targetName : this.tableName;\n        this.expression = this.tableMetadataArgs.expression;\n        this.withoutRowid = this.tableMetadataArgs.withoutRowid === true ? true : false;\n        this.tablePath = this.buildTablePath();\n        this.schemaPath = this.buildSchemaPath();\n        this.orderBy = (this.tableMetadataArgs.orderBy instanceof Function) ? this.tableMetadataArgs.orderBy(this.propertiesMap) : this.tableMetadataArgs.orderBy; // todo: is propertiesMap available here? Looks like its not\n        this.isJunction = this.tableMetadataArgs.type === \"closure-junction\" || this.tableMetadataArgs.type === \"junction\";\n        this.isClosureJunction = this.tableMetadataArgs.type === \"closure-junction\";\n    };\n    /**\n     * Registers a new column in the entity and recomputes all depend properties.\n     */\n    EntityMetadata.prototype.registerColumn = function (column) {\n        if (this.ownColumns.indexOf(column) !== -1)\n            return;\n        this.ownColumns.push(column);\n        this.columns = this.embeddeds.reduce(function (columns, embedded) { return columns.concat(embedded.columnsFromTree); }, this.ownColumns);\n        this.primaryColumns = this.columns.filter(function (column) { return column.isPrimary; });\n        this.hasMultiplePrimaryKeys = this.primaryColumns.length > 1;\n        this.hasUUIDGeneratedColumns = this.columns.filter(function (column) { return column.isGenerated || column.generationStrategy === \"uuid\"; }).length > 0;\n        this.propertiesMap = this.createPropertiesMap();\n        if (this.childEntityMetadatas)\n            this.childEntityMetadatas.forEach(function (entityMetadata) { return entityMetadata.registerColumn(column); });\n    };\n    /**\n     * Creates a special object - all columns and relations of the object (plus columns and relations from embeds)\n     * in a special format - { propertyName: propertyName }.\n     *\n     * example: Post{ id: number, name: string, counterEmbed: { count: number }, category: Category }.\n     * This method will create following object:\n     * { id: \"id\", counterEmbed: { count: \"counterEmbed.count\" }, category: \"category\" }\n     */\n    EntityMetadata.prototype.createPropertiesMap = function () {\n        var map = {};\n        this.columns.forEach(function (column) { return OrmUtils.mergeDeep(map, column.createValueMap(column.propertyPath)); });\n        this.relations.forEach(function (relation) { return OrmUtils.mergeDeep(map, relation.createValueMap(relation.propertyPath)); });\n        return map;\n    };\n    /**\n     * Builds table path using database name, schema name and table name.\n     */\n    EntityMetadata.prototype.buildTablePath = function () {\n        var tablePath = this.tableName;\n        if (this.schema && ((this.connection.driver instanceof PostgresDriver) || (this.connection.driver instanceof SqlServerDriver) || (this.connection.driver instanceof SapDriver))) {\n            tablePath = this.schema + \".\" + tablePath;\n        }\n        if (this.database && !(this.connection.driver instanceof PostgresDriver)) {\n            if (!this.schema && this.connection.driver instanceof SqlServerDriver) {\n                tablePath = this.database + \"..\" + tablePath;\n            }\n            else {\n                tablePath = this.database + \".\" + tablePath;\n            }\n        }\n        return tablePath;\n    };\n    /**\n     * Builds table path using schema name and database name.\n     */\n    EntityMetadata.prototype.buildSchemaPath = function () {\n        if (!this.schema)\n            return undefined;\n        return this.database && !(this.connection.driver instanceof PostgresDriver) ? this.database + \".\" + this.schema : this.schema;\n    };\n    return EntityMetadata;\n}());\nexport { EntityMetadata };\n\n//# sourceMappingURL=EntityMetadata.js.map\n","/**\n * Exclusion metadata contains all information about table's exclusion constraints.\n */\nvar ExclusionMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ExclusionMetadata(options) {\n        this.entityMetadata = options.entityMetadata;\n        if (options.args) {\n            this.target = options.args.target;\n            this.expression = options.args.expression;\n            this.givenName = options.args.name;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend exclusion constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    ExclusionMetadata.prototype.build = function (namingStrategy) {\n        this.name = this.givenName ? this.givenName : namingStrategy.exclusionConstraintName(this.entityMetadata.tablePath, this.expression);\n        return this;\n    };\n    return ExclusionMetadata;\n}());\nexport { ExclusionMetadata };\n\n//# sourceMappingURL=ExclusionMetadata.js.map\n","/**\n * Contains all information about entity's foreign key.\n */\nvar ForeignKeyMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ForeignKeyMetadata(options) {\n        /**\n         * Array of columns of this foreign key.\n         */\n        this.columns = [];\n        /**\n         * Array of referenced columns.\n         */\n        this.referencedColumns = [];\n        /**\n         * Gets array of column names.\n         */\n        this.columnNames = [];\n        /**\n         * Gets array of referenced column names.\n         */\n        this.referencedColumnNames = [];\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete || \"NO ACTION\";\n        this.onUpdate = options.onUpdate || \"NO ACTION\";\n        this.deferrable = options.deferrable;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    ForeignKeyMetadata.prototype.build = function (namingStrategy) {\n        this.columnNames = this.columns.map(function (column) { return column.databaseName; });\n        this.referencedColumnNames = this.referencedColumns.map(function (column) { return column.databaseName; });\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n        this.name = namingStrategy.foreignKeyName(this.entityMetadata.tablePath, this.columnNames, this.referencedTablePath, this.referencedColumnNames);\n    };\n    return ForeignKeyMetadata;\n}());\nexport { ForeignKeyMetadata };\n\n//# sourceMappingURL=ForeignKeyMetadata.js.map\n","/**\n * Index metadata contains all information about table's index.\n */\nvar IndexMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function IndexMetadata(options) {\n        /**\n         * Indicates if this index must be unique.\n         */\n        this.isUnique = false;\n        /**\n         * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n         * Works only in MySQL.\n         */\n        this.isSpatial = false;\n        /**\n         * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n         * Works only in MySQL.\n         */\n        this.isFulltext = false;\n        /**\n         * Indicates if this index must synchronize with database index.\n         */\n        this.synchronize = true;\n        /**\n         * Indexed columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null && options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.parser = options.args.parser;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.isBackground = options.args.background;\n            this.expireAfterSeconds = options.args.expireAfterSeconds;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    IndexMetadata.prototype.build = function (namingStrategy) {\n        var _this = this;\n        if (this.synchronize === false) {\n            this.name = this.givenName;\n            return this;\n        }\n        var map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            var columnPropertyPaths = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(function (columnName) {\n                    if (_this.embeddedMetadata)\n                        return _this.embeddedMetadata.propertyPath + \".\" + columnName;\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(function (propertyPath) { return map[propertyPath] = 1; });\n            }\n            else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult_1)) {\n                    columnPropertyPaths = columnsFnResult_1.map(function (i) { return String(i); });\n                    columnPropertyPaths.forEach(function (name) { return map[name] = 1; });\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) { return String(i); });\n                    Object.keys(columnsFnResult_1).forEach(function (columnName) { return map[columnName] = columnsFnResult_1[columnName]; });\n                }\n            }\n            this.columns = columnPropertyPaths.map(function (propertyPath) {\n                var columnWithSameName = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === propertyPath; });\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                var relationWithSameName = _this.entityMetadata.relations.find(function (relation) { return relation.isWithJoinColumn && relation.propertyName === propertyPath; });\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                var indexName = _this.givenName ? \"\\\"\" + _this.givenName + \"\\\" \" : \"\";\n                var entityName = _this.entityMetadata.targetName;\n                throw new Error(\"Index \" + indexName + \"contains column that is missing in the entity (\" + entityName + \"): \" + propertyPath);\n            })\n                .reduce(function (a, b) { return a.concat(b); });\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {\n            var column = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === key; });\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(function (column) { return column.databaseName; }), this.where);\n        return this;\n    };\n    return IndexMetadata;\n}());\nexport { IndexMetadata };\n\n//# sourceMappingURL=IndexMetadata.js.map\n","/**\n * Contains all information about entity's relation count.\n */\nvar RelationCountMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function RelationCountMetadata(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation count metadata properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    RelationCountMetadata.prototype.build = function () {\n        var propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        var relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(\"Cannot find relation \" + propertyPath + \". Wrong relation specified for @RelationCount decorator.\");\n        this.relation = relation;\n    };\n    return RelationCountMetadata;\n}());\nexport { RelationCountMetadata };\n\n//# sourceMappingURL=RelationCountMetadata.js.map\n","/**\n * Contains all information about entity's relation count.\n */\nvar RelationIdMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function RelationIdMetadata(options) {\n        this.entityMetadata = options.entityMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.relationNameOrFactory = options.args.relation;\n        this.alias = options.args.alias;\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Sets relation id value from the given entity.\n     *\n     * todo: make it to work in embeds as well.\n     */\n    RelationIdMetadata.prototype.setValue = function (entity) {\n        var _this = this;\n        var inverseEntity = this.relation.getEntityValue(entity);\n        if (Array.isArray(inverseEntity)) {\n            entity[this.propertyName] = inverseEntity.map(function (item) {\n                return _this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\n            }).filter(function (item) { return item !== null && item !== undefined; });\n        }\n        else {\n            var value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\n            if (value !== undefined)\n                entity[this.propertyName] = value;\n        }\n    };\n    // ---------------------------------------------------------------------\n    // Public Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation id properties.\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\n     */\n    RelationIdMetadata.prototype.build = function () {\n        var propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\n        var relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\n        if (!relation)\n            throw new Error(\"Cannot find relation \" + propertyPath + \". Wrong relation specified for @RelationId decorator.\");\n        this.relation = relation;\n    };\n    return RelationIdMetadata;\n}());\nexport { RelationIdMetadata };\n\n//# sourceMappingURL=RelationIdMetadata.js.map\n","import * as tslib_1 from \"tslib\";\nimport { EntityMetadata } from \"./EntityMetadata\";\n/**\n * Contains all information about some entity's relation.\n */\nvar RelationMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function RelationMetadata(options) {\n        /**\n         * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\n         */\n        this.isTreeParent = false;\n        /**\n         * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\n         */\n        this.isTreeChildren = false;\n        /**\n         * Indicates if this relation's column is a primary key.\n         * Can be used only for many-to-one and owner one-to-one relations.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if this relation is lazily loaded.\n         */\n        this.isLazy = false;\n        /**\n         * Indicates if this relation is eagerly loaded.\n         */\n        this.isEager = false;\n        /**\n         * Indicates if persistence is enabled for the relation.\n         * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\n         * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\n         * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\n         */\n        this.persistenceEnabled = true;\n        /**\n         * If set to true then related objects are allowed to be inserted to the database.\n         */\n        this.isCascadeInsert = false;\n        /**\n         * If set to true then related objects are allowed to be updated in the database.\n         */\n        this.isCascadeUpdate = false;\n        /**\n         * If set to true then related objects are allowed to be remove from the database.\n         */\n        this.isCascadeRemove = false;\n        /**\n         * If set to true then related objects are allowed to be soft-removed from the database.\n         */\n        this.isCascadeSoftRemove = false;\n        /**\n         * If set to true then related objects are allowed to be recovered from the database.\n         */\n        this.isCascadeRecover = false;\n        /**\n         * Indicates if relation column value can be nullable or not.\n         */\n        this.isNullable = true;\n        /**\n         * Indicates if this side is an owner of this relation.\n         */\n        this.isOwning = false;\n        /**\n         * Checks if this relation's type is \"one-to-one\".\n         */\n        this.isOneToOne = false;\n        /**\n         * Checks if this relation is owner side of the \"one-to-one\" relation.\n         * Owner side means this side of relation has a join column in the table.\n         */\n        this.isOneToOneOwner = false;\n        /**\n         * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\n         */\n        this.isWithJoinColumn = false;\n        /**\n         * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\n         * NOT owner side means this side of relation does not have a join column in the table.\n         */\n        this.isOneToOneNotOwner = false;\n        /**\n         * Checks if this relation's type is \"one-to-many\".\n         */\n        this.isOneToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-one\".\n         */\n        this.isManyToOne = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\".\n         */\n        this.isManyToMany = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\n         * Owner side means this side of relation has a join table.\n         */\n        this.isManyToManyOwner = false;\n        /**\n         * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\n         * Not owner side means this side of relation does not have a join table.\n         */\n        this.isManyToManyNotOwner = false;\n        /**\n         * Foreign keys created for this relation.\n         */\n        this.foreignKeys = [];\n        /**\n         * Join table columns.\n         * Join columns can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be empty.\n         * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\n         * If this relation is many-to-many then it takes all owner join columns from the junction entity.\n         */\n        this.joinColumns = [];\n        /**\n         * Inverse join table columns.\n         * Inverse join columns are supported only for many-to-many relations\n         * and can be obtained only from owner side of the relation.\n         * From non-owner side of the relation join columns will be undefined.\n         */\n        this.inverseJoinColumns = [];\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        var args = options.args;\n        this.target = args.target;\n        this.propertyName = args.propertyName;\n        this.relationType = args.relationType;\n        if (args.inverseSideProperty)\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty;\n        this.isLazy = args.isLazy || false;\n        // this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\n        // this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\n        // this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\n        // this.isCascadeSoftRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"soft-remove\") !== -1);\n        // this.isCascadeRecover = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"recover\") !== -1);\n        this.isCascadeInsert = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"insert\") !== -1);\n        this.isCascadeUpdate = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"update\") !== -1);\n        this.isCascadeRemove = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"remove\") !== -1);\n        this.isCascadeSoftRemove = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"soft-remove\") !== -1);\n        this.isCascadeRecover = args.options.cascade === true || (Array.isArray(args.options.cascade) && args.options.cascade.indexOf(\"recover\") !== -1);\n        this.isPrimary = args.options.primary || false;\n        this.isNullable = args.options.nullable === false || this.isPrimary ? false : true;\n        this.onDelete = args.options.onDelete;\n        this.onUpdate = args.options.onUpdate;\n        this.deferrable = args.options.deferrable;\n        this.isEager = args.options.eager || false;\n        this.persistenceEnabled = args.options.persistence === false ? false : true;\n        this.isTreeParent = args.isTreeParent || false;\n        this.isTreeChildren = args.isTreeChildren || false;\n        this.type = args.type instanceof Function ? args.type() : args.type;\n        this.isOneToOne = this.relationType === \"one-to-one\";\n        this.isOneToMany = this.relationType === \"one-to-many\";\n        this.isManyToOne = this.relationType === \"many-to-one\";\n        this.isManyToMany = this.relationType === \"many-to-many\";\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false;\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Creates join column ids map from the given related entity ids array.\n     */\n    RelationMetadata.prototype.getRelationIdMap = function (entity) {\n        var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;\n        var referencedColumns = joinColumns.map(function (joinColumn) { return joinColumn.referencedColumn; });\n        // console.log(\"entity\", entity);\n        // console.log(\"referencedColumns\", referencedColumns);\n        return EntityMetadata.getValueMap(entity, referencedColumns);\n    };\n    /**\n     * Ensures that given object is an entity id map.\n     * If given id is an object then it means its already id map.\n     * If given id isn't an object then it means its a value of the id column\n     * and it creates a new id map with this value and name of the primary column.\n     */\n    RelationMetadata.prototype.ensureRelationIdMap = function (id) {\n        if (id instanceof Object)\n            return id;\n        var joinColumns = this.isOwning ? this.joinColumns : this.inverseRelation.joinColumns;\n        var referencedColumns = joinColumns.map(function (joinColumn) { return joinColumn.referencedColumn; });\n        if (referencedColumns.length > 1)\n            throw new Error(\"Cannot create relation id map for a single value because relation contains multiple referenced columns.\");\n        return referencedColumns[0].createValueMap(id);\n    };\n    /**\n     * Extracts column value from the given entity.\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\n     */\n    RelationMetadata.prototype.getEntityValue = function (entity, getLazyRelationsPromiseValue) {\n        if (getLazyRelationsPromiseValue === void 0) { getLazyRelationsPromiseValue = false; }\n        if (entity === null || entity === undefined)\n            return undefined;\n        // extract column value from embeddeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = tslib_1.__spread(this.embeddedMetadata.parentPropertyNames);\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\n            var extractEmbeddedColumnValue_1 = function (propertyNames, value) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    if (value[propertyName]) {\n                        return extractEmbeddedColumnValue_1(propertyNames, value[propertyName]);\n                    }\n                    return undefined;\n                }\n                return value;\n            };\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\n            var embeddedObject = extractEmbeddedColumnValue_1(propertyNames, entity);\n            if (this.isLazy) {\n                if (embeddedObject[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return embeddedObject[this.propertyName];\n                return undefined;\n            }\n            return embeddedObject ? embeddedObject[this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName] : undefined;\n        }\n        else { // no embeds - no problems. Simply return column name by property name of the entity\n            if (this.isLazy) {\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\n                    return entity[\"__\" + this.propertyName + \"__\"];\n                if (getLazyRelationsPromiseValue === true)\n                    return entity[this.propertyName];\n                return undefined;\n            }\n            return entity[this.propertyName];\n        }\n    };\n    /**\n     * Sets given entity's relation's value.\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\n     *\n     * If merge is set to true, it merges given value into currently\n     */\n    RelationMetadata.prototype.setEntityValue = function (entity, value) {\n        var propertyName = this.isLazy ? \"__\" + this.propertyName + \"__\" : this.propertyName;\n        if (this.embeddedMetadata) {\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var extractEmbeddedColumnValue_2 = function (embeddedMetadatas, map) {\n                // if (!object[embeddedMetadata.propertyName])\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                var embeddedMetadata = embeddedMetadatas.shift();\n                if (embeddedMetadata) {\n                    if (!map[embeddedMetadata.propertyName])\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\n                    extractEmbeddedColumnValue_2(embeddedMetadatas, map[embeddedMetadata.propertyName]);\n                    return map;\n                }\n                map[propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_2(tslib_1.__spread(this.embeddedMetadata.embeddedMetadataTree), entity);\n        }\n        else {\n            entity[propertyName] = value;\n        }\n    };\n    /**\n     * Creates entity id map from the given entity ids array.\n     */\n    RelationMetadata.prototype.createValueMap = function (value) {\n        var _this = this;\n        var _a;\n        // extract column value from embeds of entity if column is in embedded\n        if (this.embeddedMetadata) {\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\n            // we need to get value of \"id\" column from the post real entity object and return it in a\n            // { data: { information: { counters: { id: ... } } } } format\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\n            var propertyNames = tslib_1.__spread(this.embeddedMetadata.parentPropertyNames);\n            // now need to access post[data][information][counters] to get column value from the counters\n            // and on each step we need to create complex literal object, e.g. first { data },\n            // then { data: { information } }, then { data: { information: { counters } } },\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\n            // this recursive function helps doing that\n            var extractEmbeddedColumnValue_3 = function (propertyNames, map) {\n                var propertyName = propertyNames.shift();\n                if (propertyName) {\n                    map[propertyName] = {};\n                    extractEmbeddedColumnValue_3(propertyNames, map[propertyName]);\n                    return map;\n                }\n                map[_this.propertyName] = value;\n                return map;\n            };\n            return extractEmbeddedColumnValue_3(propertyNames, {});\n        }\n        else { // no embeds - no problems. Simply return column property name and its value of the entity\n            return _a = {}, _a[this.propertyName] = value, _a;\n        }\n    };\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend relation metadata properties.\n     * This builder method should be used only after embedded metadata tree was build.\n     */\n    RelationMetadata.prototype.build = function () {\n        this.propertyPath = this.buildPropertyPath();\n    };\n    /**\n     * Registers given foreign keys in the relation.\n     * This builder method should be used to register foreign key in the relation.\n     */\n    RelationMetadata.prototype.registerForeignKeys = function () {\n        var foreignKeys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            foreignKeys[_i] = arguments[_i];\n        }\n        var _a;\n        (_a = this.foreignKeys).push.apply(_a, tslib_1.__spread(foreignKeys));\n        this.joinColumns = this.foreignKeys[0] ? this.foreignKeys[0].columns : [];\n        this.inverseJoinColumns = this.foreignKeys[1] ? this.foreignKeys[1].columns : [];\n        this.isOwning = this.isManyToOne || ((this.isManyToMany || this.isOneToOne) && this.joinColumns.length > 0);\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning;\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning;\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning;\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning;\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner;\n    };\n    /**\n     * Registers a given junction entity metadata.\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\n     */\n    RelationMetadata.prototype.registerJunctionEntityMetadata = function (junctionEntityMetadata) {\n        this.junctionEntityMetadata = junctionEntityMetadata;\n        this.joinTableName = junctionEntityMetadata.tableName;\n        if (this.inverseRelation) {\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata;\n            this.joinTableName = junctionEntityMetadata.tableName;\n        }\n    };\n    /**\n     * Builds inverse side property path based on given inverse side property factory.\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\n     */\n    RelationMetadata.prototype.buildInverseSidePropertyPath = function () {\n        if (this.givenInverseSidePropertyFactory) {\n            var ownerEntityPropertiesMap = this.inverseEntityMetadata.propertiesMap;\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\n                return this.givenInverseSidePropertyFactory(ownerEntityPropertiesMap);\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\n                return this.givenInverseSidePropertyFactory;\n        }\n        else if (this.isTreeParent && this.entityMetadata.treeChildrenRelation) {\n            return this.entityMetadata.treeChildrenRelation.propertyName;\n        }\n        else if (this.isTreeChildren && this.entityMetadata.treeParentRelation) {\n            return this.entityMetadata.treeParentRelation.propertyName;\n        }\n        return \"\";\n    };\n    /**\n     * Builds relation's property path based on its embedded tree.\n     */\n    RelationMetadata.prototype.buildPropertyPath = function () {\n        if (!this.embeddedMetadata || !this.embeddedMetadata.parentPropertyNames.length)\n            return this.propertyName;\n        return this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\" + this.propertyName;\n    };\n    return RelationMetadata;\n}());\nexport { RelationMetadata };\n\n//# sourceMappingURL=RelationMetadata.js.map\n","/**\n * Unique metadata contains all information about table's unique constraints.\n */\nvar UniqueMetadata = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function UniqueMetadata(options) {\n        /**\n         * Unique columns.\n         */\n        this.columns = [];\n        /**\n         * Map of column names with order set.\n         * Used only by MongoDB driver.\n         */\n        this.columnNamesWithOrderingMap = {};\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n        if (options.args) {\n            this.target = options.args.target;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    UniqueMetadata.prototype.build = function (namingStrategy) {\n        var _this = this;\n        var map = {};\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            var columnPropertyPaths = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(function (columnName) {\n                    if (_this.embeddedMetadata)\n                        return _this.embeddedMetadata.propertyPath + \".\" + columnName;\n                    return columnName;\n                });\n                columnPropertyPaths.forEach(function (propertyPath) { return map[propertyPath] = 1; });\n            }\n            else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult_1)) {\n                    columnPropertyPaths = columnsFnResult_1.map(function (i) { return String(i); });\n                    columnPropertyPaths.forEach(function (name) { return map[name] = 1; });\n                }\n                else {\n                    columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) { return String(i); });\n                    Object.keys(columnsFnResult_1).forEach(function (columnName) { return map[columnName] = columnsFnResult_1[columnName]; });\n                }\n            }\n            this.columns = columnPropertyPaths.map(function (propertyName) {\n                var columnWithSameName = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === propertyName; });\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                var relationWithSameName = _this.entityMetadata.relations.find(function (relation) { return relation.isWithJoinColumn && relation.propertyName === propertyName; });\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                var indexName = _this.givenName ? \"\\\"\" + _this.givenName + \"\\\" \" : \"\";\n                var entityName = _this.entityMetadata.targetName;\n                throw new Error(\"Unique constraint \" + indexName + \"contains column that is missing in the entity (\" + entityName + \"): \" + propertyName);\n            })\n                .reduce(function (a, b) { return a.concat(b); });\n        }\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {\n            var column = _this.entityMetadata.columns.find(function (column) { return column.propertyPath === key; });\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n            return updatedMap;\n        }, {});\n        this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tablePath, this.columns.map(function (column) { return column.databaseName; }));\n        return this;\n    };\n    return UniqueMetadata;\n}());\nexport { UniqueMetadata };\n\n//# sourceMappingURL=UniqueMetadata.js.map\n","/**\n * Provides a constants for each entity listener type.\n */\nvar EventListenerTypes = /** @class */ (function () {\n    function EventListenerTypes() {\n    }\n    EventListenerTypes.AFTER_LOAD = \"after-load\";\n    EventListenerTypes.BEFORE_INSERT = \"before-insert\";\n    EventListenerTypes.AFTER_INSERT = \"after-insert\";\n    EventListenerTypes.BEFORE_UPDATE = \"before-update\";\n    EventListenerTypes.AFTER_UPDATE = \"after-update\";\n    EventListenerTypes.BEFORE_REMOVE = \"before-remove\";\n    EventListenerTypes.AFTER_REMOVE = \"after-remove\";\n    return EventListenerTypes;\n}());\nexport { EventListenerTypes };\n\n//# sourceMappingURL=EventListenerTypes.js.map\n","/**\n * Represents entity of the migration in the database.\n */\nvar Migration = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function Migration(id, timestamp, name, instance) {\n        this.id = id;\n        this.timestamp = timestamp;\n        this.name = name;\n        this.instance = instance;\n    }\n    return Migration;\n}());\nexport { Migration };\n\n//# sourceMappingURL=Migration.js.map\n","import * as tslib_1 from \"tslib\";\nimport { Table } from \"../schema-builder/table/Table\";\nimport { Migration } from \"./Migration\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nvar MigrationExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function MigrationExecutor(connection, queryRunner) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates how migrations should be run in transactions.\n         *   all: all migrations are run in a single transaction\n         *   none: all migrations are run without a transaction\n         *   each: each migration is run in a separate transaction\n         */\n        this.transaction = \"all\";\n        var options = this.connection.driver.options;\n        this.migrationsTableName = connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(this.migrationsTableName, options.schema, options.database);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Tries to execute a single migration given.\n     */\n    MigrationExecutor.prototype.executeMigration = function (migration) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.withQueryRunner(function (queryRunner) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        return tslib_1.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                                case 1:\n                                    _a.sent();\n                                    return [4 /*yield*/, migration.instance.up(queryRunner)];\n                                case 2:\n                                    _a.sent();\n                                    return [4 /*yield*/, this.insertExecutedMigration(queryRunner, migration)];\n                                case 3:\n                                    _a.sent();\n                                    return [2 /*return*/, migration];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    /**\n     * Returns an array of all migrations.\n     */\n    MigrationExecutor.prototype.getAllMigrations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, Promise.resolve(this.getMigrations())];\n            });\n        });\n    };\n    /**\n     * Returns an array of all executed migrations.\n     */\n    MigrationExecutor.prototype.getExecutedMigrations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.withQueryRunner(function (queryRunner) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        return tslib_1.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                                case 1:\n                                    _a.sent();\n                                    return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                                case 2: return [2 /*return*/, _a.sent()];\n                            }\n                        });\n                    }); })];\n            });\n        });\n    };\n    /**\n     * Returns an array of all pending migrations.\n     */\n    MigrationExecutor.prototype.getPendingMigrations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var allMigrations, executedMigrations;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getAllMigrations()];\n                    case 1:\n                        allMigrations = _a.sent();\n                        return [4 /*yield*/, this.getExecutedMigrations()];\n                    case 2:\n                        executedMigrations = _a.sent();\n                        return [2 /*return*/, allMigrations.filter(function (migration) {\n                                return executedMigrations.find(function (executedMigration) {\n                                    return executedMigration.name === migration.name;\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Inserts an executed migration.\n     */\n    MigrationExecutor.prototype.insertMigration = function (migration) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.withQueryRunner(function (queryRunner) {\n                _this.insertExecutedMigration(queryRunner, migration)\n                    .then(resolve)\n                    .catch(reject);\n            });\n        });\n    };\n    /**\n     * Deletes an executed migration.\n     */\n    MigrationExecutor.prototype.deleteMigration = function (migration) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.withQueryRunner(function (queryRunner) {\n                _this.deleteExecutedMigration(queryRunner, migration)\n                    .then(resolve)\n                    .catch(reject);\n            });\n        });\n    };\n    /**\n     * Lists all migrations and whether they have been executed or not\n     * returns true if there are unapplied migrations\n     */\n    MigrationExecutor.prototype.showMigrations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var e_1, _a, hasUnappliedMigrations, queryRunner, executedMigrations, allMigrations, _loop_1, this_1, allMigrations_1, allMigrations_1_1, migration;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        hasUnappliedMigrations = false;\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // create migrations table if its not created yet\n                        return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                    case 1:\n                        // create migrations table if its not created yet\n                        _b.sent();\n                        return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                    case 2:\n                        executedMigrations = _b.sent();\n                        allMigrations = this.getMigrations();\n                        _loop_1 = function (migration) {\n                            var executedMigration = executedMigrations.find(function (executedMigration) { return executedMigration.name === migration.name; });\n                            if (executedMigration) {\n                                this_1.connection.logger.logSchemaBuild(\" [X] \" + migration.name);\n                            }\n                            else {\n                                hasUnappliedMigrations = true;\n                                this_1.connection.logger.logSchemaBuild(\" [ ] \" + migration.name);\n                            }\n                        };\n                        this_1 = this;\n                        try {\n                            for (allMigrations_1 = tslib_1.__values(allMigrations), allMigrations_1_1 = allMigrations_1.next(); !allMigrations_1_1.done; allMigrations_1_1 = allMigrations_1.next()) {\n                                migration = allMigrations_1_1.value;\n                                _loop_1(migration);\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (allMigrations_1_1 && !allMigrations_1_1.done && (_a = allMigrations_1.return)) _a.call(allMigrations_1);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                        if (!!this.queryRunner) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 3:\n                        _b.sent();\n                        _b.label = 4;\n                    case 4: return [2 /*return*/, hasUnappliedMigrations];\n                }\n            });\n        });\n    };\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    MigrationExecutor.prototype.executePendingMigrations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, successMigrations, pendingMigrations, transactionStartedByUs, err_1, rollbackError_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // create migrations table if its not created yet\n                        return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                    case 1:\n                        // create migrations table if its not created yet\n                        _a.sent();\n                        return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                    case 2:\n                        executedMigrations = _a.sent();\n                        lastTimeExecutedMigration = this.getLatestTimestampMigration(executedMigrations);\n                        allMigrations = this.getMigrations();\n                        successMigrations = [];\n                        pendingMigrations = allMigrations.filter(function (migration) {\n                            // check if we already have executed migration\n                            var executedMigration = executedMigrations.find(function (executedMigration) { return executedMigration.name === migration.name; });\n                            if (executedMigration)\n                                return false;\n                            // migration is new and not executed. now check if its timestamp is correct\n                            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n                            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n                            // every check is passed means that migration was not run yet and we need to run it\n                            return true;\n                        });\n                        if (!!pendingMigrations.length) return [3 /*break*/, 5];\n                        this.connection.logger.logSchemaBuild(\"No migrations are pending\");\n                        if (!!this.queryRunner) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/, []];\n                    case 5:\n                        // log information about migration execution\n                        this.connection.logger.logSchemaBuild(executedMigrations.length + \" migrations are already loaded in the database.\");\n                        this.connection.logger.logSchemaBuild(allMigrations.length + \" migrations were found in the source code.\");\n                        if (lastTimeExecutedMigration)\n                            this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + \" is the last executed migration. It was executed on \" + new Date(lastTimeExecutedMigration.timestamp).toString() + \".\");\n                        this.connection.logger.logSchemaBuild(pendingMigrations.length + \" migrations are new migrations that needs to be executed.\");\n                        transactionStartedByUs = false;\n                        if (!(this.transaction === \"all\" && !queryRunner.isTransactionActive)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 6:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 7;\n                    case 7:\n                        _a.trys.push([7, 11, 16, 19]);\n                        return [4 /*yield*/, PromiseUtils.runInSequence(pendingMigrations, function (migration) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var _this = this;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!(this.transaction === \"each\" && !queryRunner.isTransactionActive)) return [3 /*break*/, 2];\n                                            return [4 /*yield*/, queryRunner.startTransaction()];\n                                        case 1:\n                                            _a.sent();\n                                            transactionStartedByUs = true;\n                                            _a.label = 2;\n                                        case 2: return [2 /*return*/, migration.instance.up(queryRunner)\n                                                .then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                return tslib_1.__generator(this, function (_a) {\n                                                    switch (_a.label) {\n                                                        case 0: // now when migration is executed we need to insert record about it into the database\n                                                        return [4 /*yield*/, this.insertExecutedMigration(queryRunner, migration)];\n                                                        case 1:\n                                                            _a.sent();\n                                                            if (!(this.transaction === \"each\" && transactionStartedByUs)) return [3 /*break*/, 3];\n                                                            return [4 /*yield*/, queryRunner.commitTransaction()];\n                                                        case 2:\n                                                            _a.sent();\n                                                            _a.label = 3;\n                                                        case 3: return [2 /*return*/];\n                                                    }\n                                                });\n                                            }); })\n                                                .then(function () {\n                                                successMigrations.push(migration);\n                                                _this.connection.logger.logSchemaBuild(\"Migration \" + migration.name + \" has been executed successfully.\");\n                                            })];\n                                    }\n                                });\n                            }); })];\n                    case 8:\n                        _a.sent();\n                        if (!(this.transaction === \"all\" && transactionStartedByUs)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 9:\n                        _a.sent();\n                        _a.label = 10;\n                    case 10: return [3 /*break*/, 19];\n                    case 11:\n                        err_1 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 15];\n                        _a.label = 12;\n                    case 12:\n                        _a.trys.push([12, 14, , 15]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 13:\n                        _a.sent();\n                        return [3 /*break*/, 15];\n                    case 14:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 15];\n                    case 15: throw err_1;\n                    case 16:\n                        if (!!this.queryRunner) return [3 /*break*/, 18];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 17:\n                        _a.sent();\n                        _a.label = 18;\n                    case 18: return [7 /*endfinally*/];\n                    case 19: return [2 /*return*/, successMigrations];\n                }\n            });\n        });\n    };\n    /**\n     * Reverts last migration that were run.\n     */\n    MigrationExecutor.prototype.undoLastMigration = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, executedMigrations, lastTimeExecutedMigration, allMigrations, migrationToRevert, transactionStartedByUs, err_2, rollbackError_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // create migrations table if its not created yet\n                        return [4 /*yield*/, this.createMigrationsTableIfNotExist(queryRunner)];\n                    case 1:\n                        // create migrations table if its not created yet\n                        _a.sent();\n                        return [4 /*yield*/, this.loadExecutedMigrations(queryRunner)];\n                    case 2:\n                        executedMigrations = _a.sent();\n                        lastTimeExecutedMigration = this.getLatestExecutedMigration(executedMigrations);\n                        // if no migrations found in the database then nothing to revert\n                        if (!lastTimeExecutedMigration) {\n                            this.connection.logger.logSchemaBuild(\"No migrations was found in the database. Nothing to revert!\");\n                            return [2 /*return*/];\n                        }\n                        allMigrations = this.getMigrations();\n                        migrationToRevert = allMigrations.find(function (migration) { return migration.name === lastTimeExecutedMigration.name; });\n                        // if no migrations found in the database then nothing to revert\n                        if (!migrationToRevert)\n                            throw new Error(\"No migration \" + lastTimeExecutedMigration.name + \" was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.\");\n                        // log information about migration execution\n                        this.connection.logger.logSchemaBuild(executedMigrations.length + \" migrations are already loaded in the database.\");\n                        this.connection.logger.logSchemaBuild(lastTimeExecutedMigration.name + \" is the last executed migration. It was executed on \" + new Date(lastTimeExecutedMigration.timestamp).toString() + \".\");\n                        this.connection.logger.logSchemaBuild(\"Now reverting it...\");\n                        transactionStartedByUs = false;\n                        if (!((this.transaction !== \"none\") && !queryRunner.isTransactionActive)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 3:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 4;\n                    case 4:\n                        _a.trys.push([4, 9, 14, 17]);\n                        return [4 /*yield*/, migrationToRevert.instance.down(queryRunner)];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.deleteExecutedMigration(queryRunner, migrationToRevert)];\n                    case 6:\n                        _a.sent();\n                        this.connection.logger.logSchemaBuild(\"Migration \" + migrationToRevert.name + \" has been reverted successfully.\");\n                        if (!transactionStartedByUs) return [3 /*break*/, 8];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [3 /*break*/, 17];\n                    case 9:\n                        err_2 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 13];\n                        _a.label = 10;\n                    case 10:\n                        _a.trys.push([10, 12, , 13]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 12:\n                        rollbackError_2 = _a.sent();\n                        return [3 /*break*/, 13];\n                    case 13: throw err_2;\n                    case 14:\n                        if (!!this.queryRunner) return [3 /*break*/, 16];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 15:\n                        _a.sent();\n                        _a.label = 16;\n                    case 16: return [7 /*endfinally*/];\n                    case 17: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    MigrationExecutor.prototype.createMigrationsTableIfNotExist = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tableExist;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // If driver is mongo no need to create\n                        if (this.connection.driver instanceof MongoDriver) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, queryRunner.hasTable(this.migrationsTable)];\n                    case 1:\n                        tableExist = _a.sent();\n                        if (!!tableExist) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.createTable(new Table({\n                                name: this.migrationsTable,\n                                columns: [\n                                    {\n                                        name: \"id\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationId }),\n                                        isGenerated: true,\n                                        generationStrategy: \"increment\",\n                                        isPrimary: true,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"timestamp\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }),\n                                        isPrimary: false,\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"name\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }),\n                                        isNullable: false\n                                    },\n                                ]\n                            }))];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all migrations that were executed and saved into the database (sorts by id).\n     */\n    MigrationExecutor.prototype.loadExecutedMigrations = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var mongoRunner, migrationsRaw;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.connection.driver instanceof MongoDriver)) return [3 /*break*/, 2];\n                        mongoRunner = queryRunner;\n                        return [4 /*yield*/, mongoRunner.databaseConnection\n                                .db(this.connection.driver.database)\n                                .collection(this.migrationsTableName)\n                                .find()\n                                .sort({ \"_id\": -1 })\n                                .toArray()];\n                    case 1: return [2 /*return*/, _a.sent()];\n                    case 2: return [4 /*yield*/, this.connection.manager\n                            .createQueryBuilder(queryRunner)\n                            .select()\n                            .orderBy(this.connection.driver.escape(\"id\"), \"DESC\")\n                            .from(this.migrationsTable, this.migrationsTableName)\n                            .getRawMany()];\n                    case 3:\n                        migrationsRaw = _a.sent();\n                        return [2 /*return*/, migrationsRaw.map(function (migrationRaw) {\n                                return new Migration(parseInt(migrationRaw[\"id\"]), parseInt(migrationRaw[\"timestamp\"]), migrationRaw[\"name\"]);\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    MigrationExecutor.prototype.getMigrations = function () {\n        var migrations = this.connection.migrations.map(function (migration) {\n            var migrationClassName = migration.name || migration.constructor.name;\n            var migrationTimestamp = parseInt(migrationClassName.substr(-13), 10);\n            if (!migrationTimestamp || isNaN(migrationTimestamp)) {\n                throw new Error(migrationClassName + \" migration name is wrong. Migration class name should have a JavaScript timestamp appended.\");\n            }\n            return new Migration(undefined, migrationTimestamp, migrationClassName, migration);\n        });\n        this.checkForDuplicateMigrations(migrations);\n        // sort them by timestamp\n        return migrations.sort(function (a, b) { return a.timestamp - b.timestamp; });\n    };\n    MigrationExecutor.prototype.checkForDuplicateMigrations = function (migrations) {\n        var migrationNames = migrations.map(function (migration) { return migration.name; });\n        var duplicates = Array.from(new Set(migrationNames.filter(function (migrationName, index) { return migrationNames.indexOf(migrationName) < index; })));\n        if (duplicates.length > 0) {\n            throw Error(\"Duplicate migrations: \" + duplicates.join(\", \"));\n        }\n    };\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    MigrationExecutor.prototype.getLatestTimestampMigration = function (migrations) {\n        var sortedMigrations = migrations.map(function (migration) { return migration; }).sort(function (a, b) { return (a.timestamp - b.timestamp) * -1; });\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    };\n    /**\n     * Finds the latest migration in the given array of migrations.\n     * PRE: Migration array must be sorted by descending id.\n     */\n    MigrationExecutor.prototype.getLatestExecutedMigration = function (sortedMigrations) {\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    };\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    MigrationExecutor.prototype.insertExecutedMigration = function (queryRunner, migration) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var values, mongoRunner, qb;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        values = {};\n                        if (this.connection.driver instanceof SqlServerDriver) {\n                            values[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));\n                            values[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));\n                        }\n                        else {\n                            values[\"timestamp\"] = migration.timestamp;\n                            values[\"name\"] = migration.name;\n                        }\n                        if (!(this.connection.driver instanceof MongoDriver)) return [3 /*break*/, 2];\n                        mongoRunner = queryRunner;\n                        return [4 /*yield*/, mongoRunner.databaseConnection.db(this.connection.driver.database).collection(this.migrationsTableName).insert(values)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 2:\n                        qb = queryRunner.manager.createQueryBuilder();\n                        return [4 /*yield*/, qb.insert()\n                                .into(this.migrationsTable)\n                                .values(values)\n                                .execute()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    MigrationExecutor.prototype.deleteExecutedMigration = function (queryRunner, migration) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var conditions, mongoRunner, qb;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        conditions = {};\n                        if (this.connection.driver instanceof SqlServerDriver) {\n                            conditions[\"timestamp\"] = new MssqlParameter(migration.timestamp, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationTimestamp }));\n                            conditions[\"name\"] = new MssqlParameter(migration.name, this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.migrationName }));\n                        }\n                        else {\n                            conditions[\"timestamp\"] = migration.timestamp;\n                            conditions[\"name\"] = migration.name;\n                        }\n                        if (!(this.connection.driver instanceof MongoDriver)) return [3 /*break*/, 2];\n                        mongoRunner = queryRunner;\n                        return [4 /*yield*/, mongoRunner.databaseConnection.db(this.connection.driver.database).collection(this.migrationsTableName).deleteOne(conditions)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 2:\n                        qb = queryRunner.manager.createQueryBuilder();\n                        return [4 /*yield*/, qb.delete()\n                                .from(this.migrationsTable)\n                                .where(qb.escape(\"timestamp\") + \" = :timestamp\")\n                                .andWhere(qb.escape(\"name\") + \" = :name\")\n                                .setParameters(conditions)\n                                .execute()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MigrationExecutor.prototype.withQueryRunner = function (callback) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 2, 5]);\n                        return [2 /*return*/, callback(queryRunner)];\n                    case 2:\n                        if (!!this.queryRunner) return [3 /*break*/, 4];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return MigrationExecutor;\n}());\nexport { MigrationExecutor };\n\n//# sourceMappingURL=MigrationExecutor.js.map\n","import * as tslib_1 from \"tslib\";\nimport { RandomGenerator } from \"../util/RandomGenerator\";\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\";\nimport { Table } from \"../schema-builder/table/Table\";\n/**\n * Naming strategy that is used by default.\n */\nvar DefaultNamingStrategy = /** @class */ (function () {\n    function DefaultNamingStrategy() {\n        this.nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" };\n        this.materializedPathColumnName = \"mpath\";\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    DefaultNamingStrategy.prototype.tableName = function (targetName, userSpecifiedName) {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n    };\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    DefaultNamingStrategy.prototype.closureJunctionTableName = function (originalClosureTableName) {\n        return originalClosureTableName + \"_closure\";\n    };\n    DefaultNamingStrategy.prototype.columnName = function (propertyName, customName, embeddedPrefixes) {\n        var name = customName || propertyName;\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n        return name;\n    };\n    DefaultNamingStrategy.prototype.relationName = function (propertyName) {\n        return propertyName;\n    };\n    DefaultNamingStrategy.prototype.primaryKeyName = function (tableOrName, columnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        var clonedColumnNames = tslib_1.__spread(columnNames);\n        clonedColumnNames.sort();\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    };\n    DefaultNamingStrategy.prototype.uniqueConstraintName = function (tableOrName, columnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        var clonedColumnNames = tslib_1.__spread(columnNames);\n        clonedColumnNames.sort();\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n    };\n    DefaultNamingStrategy.prototype.relationConstraintName = function (tableOrName, columnNames, where) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        var clonedColumnNames = tslib_1.__spread(columnNames);\n        clonedColumnNames.sort();\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n        if (where)\n            key += \"_\" + where;\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    };\n    DefaultNamingStrategy.prototype.defaultConstraintName = function (tableOrName, columnName) {\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + columnName;\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n    };\n    DefaultNamingStrategy.prototype.foreignKeyName = function (tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        var clonedColumnNames = tslib_1.__spread(columnNames);\n        clonedColumnNames.sort();\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    };\n    DefaultNamingStrategy.prototype.indexName = function (tableOrName, columnNames, where) {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        var clonedColumnNames = tslib_1.__spread(columnNames);\n        clonedColumnNames.sort();\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n        if (where)\n            key += \"_\" + where;\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n    };\n    DefaultNamingStrategy.prototype.checkConstraintName = function (tableOrName, expression) {\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + expression;\n        return \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n    };\n    DefaultNamingStrategy.prototype.exclusionConstraintName = function (tableOrName, expression) {\n        var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        var replacedTableName = tableName.replace(\".\", \"_\");\n        var key = replacedTableName + \"_\" + expression;\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    };\n    DefaultNamingStrategy.prototype.joinColumnName = function (relationName, referencedColumnName) {\n        return camelCase(relationName + \"_\" + referencedColumnName);\n    };\n    DefaultNamingStrategy.prototype.joinTableName = function (firstTableName, secondTableName, firstPropertyName, secondPropertyName) {\n        return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n    };\n    DefaultNamingStrategy.prototype.joinTableColumnDuplicationPrefix = function (columnName, index) {\n        return columnName + \"_\" + index;\n    };\n    DefaultNamingStrategy.prototype.joinTableColumnName = function (tableName, propertyName, columnName) {\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n    };\n    DefaultNamingStrategy.prototype.joinTableInverseColumnName = function (tableName, propertyName, columnName) {\n        return this.joinTableColumnName(tableName, propertyName, columnName);\n    };\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    DefaultNamingStrategy.prototype.prefixTableName = function (prefix, tableName) {\n        return prefix + tableName;\n    };\n    DefaultNamingStrategy.prototype.eagerJoinRelationAlias = function (alias, propertyPath) {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n    };\n    return DefaultNamingStrategy;\n}());\nexport { DefaultNamingStrategy };\n\n//# sourceMappingURL=DefaultNamingStrategy.js.map\n","import * as tslib_1 from \"tslib\";\nimport { MustBeEntityError } from \"../error/MustBeEntityError\";\nimport { SubjectExecutor } from \"./SubjectExecutor\";\nimport { CannotDetermineEntityError } from \"../error/CannotDetermineEntityError\";\nimport { Subject } from \"./Subject\";\nimport { OneToManySubjectBuilder } from \"./subject-builder/OneToManySubjectBuilder\";\nimport { OneToOneInverseSideSubjectBuilder } from \"./subject-builder/OneToOneInverseSideSubjectBuilder\";\nimport { ManyToManySubjectBuilder } from \"./subject-builder/ManyToManySubjectBuilder\";\nimport { SubjectDatabaseEntityLoader } from \"./SubjectDatabaseEntityLoader\";\nimport { CascadesSubjectBuilder } from \"./subject-builder/CascadesSubjectBuilder\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\n/**\n * Persists a single entity or multiple entities - saves or removes them.\n */\nvar EntityPersistExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function EntityPersistExecutor(connection, queryRunner, mode, target, entity, options) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.mode = mode;\n        this.target = target;\n        this.entity = entity;\n        this.options = options;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes persistence operation ob given entity or entities.\n     */\n    EntityPersistExecutor.prototype.execute = function () {\n        var _this = this;\n        // check if entity we are going to save is valid and is an object\n        if (!this.entity || !(this.entity instanceof Object))\n            return Promise.reject(new MustBeEntityError(this.mode, this.entity));\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\n        return Promise.resolve().then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var queryRunner, entities, entitiesInChunks, executors, executorsWithExecutableOperations, isTransactionStartedByUs, error_1, rollbackError_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\n                        // save data in the query runner - this is useful functionality to share data from outside of the world\n                        // with third classes - like subscribers and listener methods\n                        if (this.options && this.options.data)\n                            queryRunner.data = this.options.data;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 15, 18]);\n                        entities = Array.isArray(this.entity) ? this.entity : [this.entity];\n                        entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0 ? OrmUtils.chunk(entities, this.options.chunk) : [entities];\n                        return [4 /*yield*/, Promise.all(entitiesInChunks.map(function (entities) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var subjects, cascadesSubjectBuilder;\n                                var _this = this;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            subjects = [];\n                                            // create subjects for all entities we received for the persistence\n                                            entities.forEach(function (entity) {\n                                                var entityTarget = _this.target ? _this.target : entity.constructor;\n                                                if (entityTarget === Object)\n                                                    throw new CannotDetermineEntityError(_this.mode);\n                                                subjects.push(new Subject({\n                                                    metadata: _this.connection.getMetadata(entityTarget),\n                                                    entity: entity,\n                                                    canBeInserted: _this.mode === \"save\",\n                                                    canBeUpdated: _this.mode === \"save\",\n                                                    mustBeRemoved: _this.mode === \"remove\",\n                                                    canBeSoftRemoved: _this.mode === \"soft-remove\",\n                                                    canBeRecovered: _this.mode === \"recover\"\n                                                }));\n                                            });\n                                            cascadesSubjectBuilder = new CascadesSubjectBuilder(subjects);\n                                            subjects.forEach(function (subject) {\n                                                // next step we build list of subjects we will operate with\n                                                // these subjects are subjects that we need to insert or update alongside with main persisted entity\n                                                cascadesSubjectBuilder.build(subject, _this.mode);\n                                            });\n                                            // console.timeEnd(\"building cascades...\");\n                                            // load database entities for all subjects we have\n                                            // next step is to load database entities for all operate subjects\n                                            // console.time(\"loading...\");\n                                            return [4 /*yield*/, new SubjectDatabaseEntityLoader(queryRunner, subjects).load(this.mode)];\n                                        case 1:\n                                            // console.timeEnd(\"building cascades...\");\n                                            // load database entities for all subjects we have\n                                            // next step is to load database entities for all operate subjects\n                                            // console.time(\"loading...\");\n                                            _a.sent();\n                                            // console.timeEnd(\"loading...\");\n                                            // console.time(\"other subjects...\");\n                                            // build all related subjects and change maps\n                                            if (this.mode === \"save\" || this.mode === \"soft-remove\" || this.mode === \"recover\") {\n                                                new OneToManySubjectBuilder(subjects).build();\n                                                new OneToOneInverseSideSubjectBuilder(subjects).build();\n                                                new ManyToManySubjectBuilder(subjects).build();\n                                            }\n                                            else {\n                                                subjects.forEach(function (subject) {\n                                                    if (subject.mustBeRemoved) {\n                                                        new ManyToManySubjectBuilder(subjects).buildForAllRemoval(subject);\n                                                    }\n                                                });\n                                            }\n                                            // console.timeEnd(\"other subjects...\");\n                                            // console.timeEnd(\"building subjects...\");\n                                            // console.log(\"subjects\", subjects);\n                                            // create a subject executor\n                                            return [2 /*return*/, new SubjectExecutor(queryRunner, subjects, this.options)];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        executors = _a.sent();\n                        executorsWithExecutableOperations = executors.filter(function (executor) { return executor.hasExecutableOperations; });\n                        if (executorsWithExecutableOperations.length === 0)\n                            return [2 /*return*/];\n                        isTransactionStartedByUs = false;\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 9, , 14]);\n                        if (!!queryRunner.isTransactionActive) return [3 /*break*/, 5];\n                        if (!(!this.options || this.options.transaction !== false)) return [3 /*break*/, 5];\n                        isTransactionStartedByUs = true;\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: \n                    // execute all persistence operations for all entities we have\n                    // console.time(\"executing subject executors...\");\n                    return [4 /*yield*/, PromiseUtils.runInSequence(executorsWithExecutableOperations, function (executor) { return executor.execute(); })];\n                    case 6:\n                        // execute all persistence operations for all entities we have\n                        // console.time(\"executing subject executors...\");\n                        _a.sent();\n                        if (!(isTransactionStartedByUs === true)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [3 /*break*/, 14];\n                    case 9:\n                        error_1 = _a.sent();\n                        if (!isTransactionStartedByUs) return [3 /*break*/, 13];\n                        _a.label = 10;\n                    case 10:\n                        _a.trys.push([10, 12, , 13]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 11:\n                        _a.sent();\n                        return [3 /*break*/, 13];\n                    case 12:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 13];\n                    case 13: throw error_1;\n                    case 14: return [3 /*break*/, 18];\n                    case 15:\n                        if (!!this.queryRunner) return [3 /*break*/, 17];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 16:\n                        _a.sent();\n                        _a.label = 17;\n                    case 17: return [7 /*endfinally*/];\n                    case 18: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    return EntityPersistExecutor;\n}());\nexport { EntityPersistExecutor };\n\n//# sourceMappingURL=EntityPersistExecutor.js.map\n","import * as tslib_1 from \"tslib\";\nimport { OrmUtils } from \"../util/OrmUtils\";\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nvar Subject = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function Subject(options) {\n        var _a;\n        /**\n         * Subject identifier.\n         * This identifier is not limited to table entity primary columns.\n         * This can be entity id or ids as well as some unique entity properties, like name or title.\n         * Insert / Update / Remove operation will be executed by a given identifier.\n         */\n        this.identifier = undefined;\n        /**\n         * Copy of entity but with relational ids fulfilled.\n         */\n        this.entityWithFulfilledIds = undefined;\n        /**\n         * Indicates if database entity was loaded.\n         * No matter if it was found or not, it indicates the fact of loading.\n         */\n        this.databaseEntityLoaded = false;\n        /**\n         * Changes needs to be applied in the database for the given subject.\n         */\n        this.changeMaps = [];\n        /**\n         * Indicates if this subject can be inserted into the database.\n         * This means that this subject either is newly persisted, either can be inserted by cascades.\n         */\n        this.canBeInserted = false;\n        /**\n         * Indicates if this subject can be updated in the database.\n         * This means that this subject either was persisted, either can be updated by cascades.\n         */\n        this.canBeUpdated = false;\n        /**\n         * Indicates if this subject MUST be removed from the database.\n         * This means that this subject either was removed, either was removed by cascades.\n         */\n        this.mustBeRemoved = false;\n        /**\n         * Indicates if this subject can be soft-removed from the database.\n         * This means that this subject either was soft-removed, either was soft-removed by cascades.\n         */\n        this.canBeSoftRemoved = false;\n        /**\n         * Indicates if this subject can be recovered from the database.\n         * This means that this subject either was recovered, either was recovered by cascades.\n         */\n        this.canBeRecovered = false;\n        /**\n         * Relations updated by the change maps.\n         */\n        this.updatedRelationMaps = [];\n        /**\n         * List of updated columns\n         */\n        this.diffColumns = [];\n        /**\n         * List of updated relations\n         */\n        this.diffRelations = [];\n        this.metadata = options.metadata;\n        this.entity = options.entity;\n        this.parentSubject = options.parentSubject;\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted;\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated;\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved;\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved;\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered;\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier;\n        if (options.changeMaps !== undefined)\n            (_a = this.changeMaps).push.apply(_a, tslib_1.__spread(options.changeMaps));\n        this.recompute();\n    }\n    Object.defineProperty(Subject.prototype, \"mustBeInserted\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Checks if this subject must be inserted into the database.\n         * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n         * and if it does not have database entity set.\n         */\n        get: function () {\n            return this.canBeInserted && !this.databaseEntity;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Subject.prototype, \"mustBeUpdated\", {\n        /**\n         * Checks if this subject must be updated into the database.\n         * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n         * and if it does have differentiated columns or relations.\n         */\n        get: function () {\n            return this.canBeUpdated &&\n                this.identifier &&\n                (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity)) &&\n                // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n                this.changeMaps.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Subject.prototype, \"mustBeSoftRemoved\", {\n        /**\n         * Checks if this subject must be soft-removed into the database.\n         * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n         * and if it does have differentiated columns or relations.\n         */\n        get: function () {\n            return this.canBeSoftRemoved &&\n                this.identifier &&\n                (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Subject.prototype, \"mustBeRecovered\", {\n        /**\n         * Checks if this subject must be recovered into the database.\n         * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n         * and if it does have differentiated columns or relations.\n         */\n        get: function () {\n            return this.canBeRecovered &&\n                this.identifier &&\n                (this.databaseEntityLoaded === false || (this.databaseEntityLoaded && this.databaseEntity));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    Subject.prototype.createValueSetAndPopChangeMap = function () {\n        var _this = this;\n        var changeMapsWithoutValues = [];\n        var changeSet = this.changeMaps.reduce(function (updateMap, changeMap) {\n            var value = changeMap.value;\n            if (value instanceof Subject) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet ? value.insertedValueSet : value.entity;\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n            var valueMap;\n            if (_this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn.getEntityValue(value));\n            }\n            else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value);\n            }\n            else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (value instanceof Object) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    var relationId = changeMap.relation.getRelationIdMap(value);\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap);\n                        _this.canBeUpdated = true;\n                        return updateMap;\n                    }\n                    valueMap = changeMap.relation.createValueMap(relationId);\n                    _this.updatedRelationMaps.push({ relation: changeMap.relation, value: relationId });\n                }\n                else { // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation.createValueMap(value);\n                    _this.updatedRelationMaps.push({ relation: changeMap.relation, value: value });\n                }\n            }\n            OrmUtils.mergeDeep(updateMap, valueMap);\n            return updateMap;\n        }, {});\n        this.changeMaps = changeMapsWithoutValues;\n        return changeSet;\n    };\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    Subject.prototype.recompute = function () {\n        var _this = this;\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity);\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach(function (primaryColumn) {\n                    if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === _this.parentSubject.metadata) {\n                        primaryColumn.setEntityValue(_this.entityWithFulfilledIds, _this.parentSubject.entity);\n                    }\n                });\n            }\n            this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\n        }\n        else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\n        }\n    };\n    return Subject;\n}());\nexport { Subject };\n\n//# sourceMappingURL=Subject.js.map\n","import { DateUtils } from \"../util/DateUtils\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\";\n/**\n * Finds what columns are changed in the subject entities.\n */\nvar SubjectChangedColumnsComputer = /** @class */ (function () {\n    function SubjectChangedColumnsComputer() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Finds what columns are changed in the subject entities.\n     */\n    SubjectChangedColumnsComputer.prototype.compute = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            _this.computeDiffColumns(subject);\n            _this.computeDiffRelationalColumns(subjects, subject);\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    SubjectChangedColumnsComputer.prototype.computeDiffColumns = function (subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.columns.forEach(function (column) {\n            // ignore special columns\n            if (column.isVirtual ||\n                column.isDiscriminator // ||\n            // column.isUpdateDate ||\n            // column.isVersion ||\n            // column.isCreateDate\n            )\n                return;\n            var changeMap = subject.changeMaps.find(function (changeMap) { return changeMap.column === column; });\n            if (changeMap) {\n                subject.changeMaps.splice(subject.changeMaps.indexOf(changeMap), 1);\n            }\n            // get user provided value - column value from the user provided persisted entity\n            var entityValue = column.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (entityValue === undefined)\n                return;\n            // if there is no database entity then all columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // get database value of the column\n                var databaseValue = column.getEntityValue(subject.databaseEntity, true);\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\n                if (column.relationMetadata) {\n                    var value = column.relationMetadata.getEntityValue(subject.entity);\n                    if (value !== null && value !== undefined)\n                        return;\n                }\n                var normalizedValue = entityValue;\n                // normalize special values to make proper comparision\n                if (entityValue !== null) {\n                    switch (column.type) {\n                        case \"date\":\n                            normalizedValue = DateUtils.mixedDateToDateString(entityValue);\n                            break;\n                        case \"time\":\n                        case \"time with time zone\":\n                        case \"time without time zone\":\n                        case \"timetz\":\n                            normalizedValue = DateUtils.mixedDateToTimeString(entityValue);\n                            break;\n                        case \"datetime\":\n                        case \"datetime2\":\n                        case Date:\n                        case \"timestamp\":\n                        case \"timestamp without time zone\":\n                        case \"timestamp with time zone\":\n                        case \"timestamp with local time zone\":\n                        case \"timestamptz\":\n                            normalizedValue = DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                            databaseValue = DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n                            break;\n                        case \"json\":\n                        case \"jsonb\":\n                            // JSON.stringify doesn't work because postgresql sorts jsonb before save.\n                            // If you try to save json '[{\"messages\": \"\", \"attribute Key\": \"\", \"level\":\"\"}] ' as jsonb,\n                            // then postgresql will save it as '[{\"level\": \"\", \"message\":\"\", \"attributeKey\": \"\"}]'\n                            if (OrmUtils.deepCompare(entityValue, databaseValue))\n                                return;\n                            break;\n                        case \"simple-array\":\n                            normalizedValue = DateUtils.simpleArrayToString(entityValue);\n                            databaseValue = DateUtils.simpleArrayToString(databaseValue);\n                            break;\n                        case \"simple-enum\":\n                            normalizedValue = DateUtils.simpleEnumToString(entityValue);\n                            databaseValue = DateUtils.simpleEnumToString(databaseValue);\n                            break;\n                        case \"simple-json\":\n                            normalizedValue = DateUtils.simpleJsonToString(entityValue);\n                            databaseValue = DateUtils.simpleJsonToString(databaseValue);\n                            break;\n                    }\n                    if (column.transformer) {\n                        normalizedValue = ApplyValueTransformers.transformTo(column.transformer, entityValue);\n                    }\n                }\n                // if value is not changed - then do nothing\n                if (normalizedValue === databaseValue)\n                    return;\n            }\n            subject.diffColumns.push(column);\n            subject.changeMaps.push({\n                column: column,\n                value: entityValue\n            });\n        });\n    };\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    SubjectChangedColumnsComputer.prototype.computeDiffRelationalColumns = function (allSubjects, subject) {\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n        subject.metadata.relationsWithJoinColumns.forEach(function (relation) {\n            // get the related entity from the persisted entity\n            var relatedEntity = relation.getEntityValue(subject.entity);\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (relatedEntity === undefined)\n                return;\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n                // here we cover two scenarios:\n                // 1. related entity can be another entity which is natural way\n                // 2. related entity can be just an entity id\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we create an id map from it to make a proper comparision\n                var relatedEntityRelationIdMap = relatedEntity;\n                if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object)\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap);\n                // get database related entity. Since loadRelationIds are used on databaseEntity\n                // related entity will contain only its relation ids\n                var databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\n                // if relation ids are equal then we don't need to update anything\n                var areRelatedIdsEqual = OrmUtils.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\n                if (areRelatedIdsEqual) {\n                    return;\n                }\n                else {\n                    subject.diffRelations.push(relation);\n                }\n            }\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\n            var valueSubject = allSubjects.find(function (subject) { return subject.mustBeInserted && subject.entity === relatedEntity; });\n            if (valueSubject)\n                relatedEntity = valueSubject;\n            // find if there is already a relation to be changed\n            var changeMap = subject.changeMaps.find(function (changeMap) { return changeMap.relation === relation; });\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = relatedEntity;\n            }\n            else { // if it wasn't found add a new relation for change\n                subject.changeMaps.push({\n                    relation: relation,\n                    value: relatedEntity\n                });\n            }\n        });\n    };\n    return SubjectChangedColumnsComputer;\n}());\nexport { SubjectChangedColumnsComputer };\n\n//# sourceMappingURL=SubjectChangedColumnsComputer.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Loads database entities for all operate subjects which do not have database entity set.\n * All entities that we load database entities for are marked as updated or inserted.\n * To understand which of them really needs to be inserted or updated we need to load\n * their original representations from the database.\n */\nvar SubjectDatabaseEntityLoader = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function SubjectDatabaseEntityLoader(queryRunner, subjects) {\n        this.queryRunner = queryRunner;\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Loads database entities for all subjects.\n     *\n     * loadAllRelations flag is used to load all relation ids of the object, no matter if they present in subject entity or not.\n     * This option is used for deletion.\n     */\n    SubjectDatabaseEntityLoader.prototype.load = function (operationType) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promises = this.groupByEntityTargets().map(function (subjectGroup) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var e_1, _a, allIds, allSubjects, loadRelationPropertyPaths, findOptions, entities, allSubjects_1, allSubjects_1_1, subject;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        allIds = [];\n                                        allSubjects = [];\n                                        subjectGroup.subjects.forEach(function (subject) {\n                                            // we don't load if subject already has a database entity loaded\n                                            if (subject.databaseEntity || !subject.identifier)\n                                                return;\n                                            allIds.push(subject.identifier);\n                                            allSubjects.push(subject);\n                                        });\n                                        // if there no ids found (means all entities are new and have generated ids) - then nothing to load there\n                                        if (!allIds.length)\n                                            return [2 /*return*/];\n                                        loadRelationPropertyPaths = [];\n                                        // for the save, soft-remove and recover operation\n                                        // extract all property paths of the relations we need to load relation ids for\n                                        // this is for optimization purpose - this way we don't load relation ids for entities\n                                        // whose relations are undefined, and since they are undefined its really pointless to\n                                        // load something for them, since undefined properties are skipped by the orm\n                                        if (operationType === \"save\" || operationType === \"soft-remove\" || operationType === \"recover\") {\n                                            subjectGroup.subjects.forEach(function (subject) {\n                                                // gets all relation property paths that exist in the persisted entity.\n                                                subject.metadata.relations.forEach(function (relation) {\n                                                    var value = relation.getEntityValue(subject.entityWithFulfilledIds);\n                                                    if (value === undefined)\n                                                        return;\n                                                    if (loadRelationPropertyPaths.indexOf(relation.propertyPath) === -1)\n                                                        loadRelationPropertyPaths.push(relation.propertyPath);\n                                                });\n                                            });\n                                        }\n                                        else { // remove\n                                            // for remove operation\n                                            // we only need to load junction relation ids since only they are removed by cascades\n                                            loadRelationPropertyPaths.push.apply(// remove\n                                            loadRelationPropertyPaths, tslib_1.__spread(subjectGroup.subjects[0].metadata.manyToManyRelations.map(function (relation) { return relation.propertyPath; })));\n                                        }\n                                        findOptions = {\n                                            loadEagerRelations: false,\n                                            loadRelationIds: {\n                                                relations: loadRelationPropertyPaths,\n                                                disableMixedMap: true\n                                            },\n                                            // the soft-deleted entities should be included in the loaded entities for recover operation\n                                            withDeleted: true\n                                        };\n                                        return [4 /*yield*/, this.queryRunner.manager\n                                                .getRepository(subjectGroup.target)\n                                                .findByIds(allIds, findOptions)];\n                                    case 1:\n                                        entities = _b.sent();\n                                        // now when we have entities we need to find subject of each entity\n                                        // and insert that entity into database entity of the found subjects\n                                        entities.forEach(function (entity) {\n                                            var subjects = _this.findByPersistEntityLike(subjectGroup.target, entity);\n                                            subjects.forEach(function (subject) {\n                                                subject.databaseEntity = entity;\n                                                if (!subject.identifier)\n                                                    subject.identifier = subject.metadata.hasAllPrimaryKeys(entity) ? subject.metadata.getEntityIdMap(entity) : undefined;\n                                            });\n                                        });\n                                        try {\n                                            // this way we tell what subjects we tried to load database entities of\n                                            for (allSubjects_1 = tslib_1.__values(allSubjects), allSubjects_1_1 = allSubjects_1.next(); !allSubjects_1_1.done; allSubjects_1_1 = allSubjects_1.next()) {\n                                                subject = allSubjects_1_1.value;\n                                                subject.databaseEntityLoaded = true;\n                                            }\n                                        }\n                                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                                        finally {\n                                            try {\n                                                if (allSubjects_1_1 && !allSubjects_1_1.done && (_a = allSubjects_1.return)) _a.call(allSubjects_1);\n                                            }\n                                            finally { if (e_1) throw e_1.error; }\n                                        }\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Finds subjects where entity like given subject's entity.\n     * Comparision made by entity id.\n     * Multiple subjects may be returned if duplicates are present in the subject array.\n     * This will likely result in the same row being updated multiple times during a transaction.\n     */\n    SubjectDatabaseEntityLoader.prototype.findByPersistEntityLike = function (entityTarget, entity) {\n        return this.subjects.filter(function (subject) {\n            if (!subject.entity)\n                return false;\n            if (subject.entity === entity)\n                return true;\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);\n        });\n    };\n    /**\n     * Groups given Subject objects into groups separated by entity targets.\n     */\n    SubjectDatabaseEntityLoader.prototype.groupByEntityTargets = function () {\n        return this.subjects.reduce(function (groups, operatedEntity) {\n            var group = groups.find(function (group) { return group.target === operatedEntity.metadata.target; });\n            if (!group) {\n                group = { target: operatedEntity.metadata.target, subjects: [] };\n                groups.push(group);\n            }\n            group.subjects.push(operatedEntity);\n            return groups;\n        }, []);\n    };\n    return SubjectDatabaseEntityLoader;\n}());\nexport { SubjectDatabaseEntityLoader };\n\n//# sourceMappingURL=SubjectDatabaseEntityLoader.js.map\n","import * as tslib_1 from \"tslib\";\nimport { SapDriver } from \"../driver/sap/SapDriver\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\nimport { SubjectTopoligicalSorter } from \"./SubjectTopoligicalSorter\";\nimport { SubjectChangedColumnsComputer } from \"./SubjectChangedColumnsComputer\";\nimport { SubjectWithoutIdentifierError } from \"../error/SubjectWithoutIdentifierError\";\nimport { SubjectRemovedAndUpdatedError } from \"../error/SubjectRemovedAndUpdatedError\";\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { NestedSetSubjectExecutor } from \"./tree/NestedSetSubjectExecutor\";\nimport { ClosureSubjectExecutor } from \"./tree/ClosureSubjectExecutor\";\nimport { MaterializedPathSubjectExecutor } from \"./tree/MaterializedPathSubjectExecutor\";\nimport { OrmUtils } from \"../util/OrmUtils\";\n/**\n * Executes all database operations (inserts, updated, deletes) that must be executed\n * with given persistence subjects.\n */\nvar SubjectExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SubjectExecutor(queryRunner, subjects, options) {\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).\n         */\n        this.hasExecutableOperations = false;\n        /**\n         * Subjects that must be inserted.\n         */\n        this.insertSubjects = [];\n        /**\n         * Subjects that must be updated.\n         */\n        this.updateSubjects = [];\n        /**\n         * Subjects that must be removed.\n         */\n        this.removeSubjects = [];\n        /**\n         * Subjects that must be soft-removed.\n         */\n        this.softRemoveSubjects = [];\n        /**\n         * Subjects that must be recovered.\n         */\n        this.recoverSubjects = [];\n        this.queryRunner = queryRunner;\n        this.allSubjects = subjects;\n        this.options = options;\n        this.validate();\n        this.recompute();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes all operations over given array of subjects.\n     * Executes queries using given query runner.\n     */\n    SubjectExecutor.prototype.execute = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var broadcasterResult;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        broadcasterResult = undefined;\n                        if (!(!this.options || this.options.listeners !== false)) return [3 /*break*/, 2];\n                        // console.time(\".broadcastBeforeEventsForAll\");\n                        broadcasterResult = this.broadcastBeforeEventsForAll();\n                        if (!(broadcasterResult.promises.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(broadcasterResult.promises)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects\n                        // recompute only in the case if any listener or subscriber was really executed\n                        if (broadcasterResult && broadcasterResult.count > 0) {\n                            // console.time(\".recompute\");\n                            this.insertSubjects.forEach(function (subject) { return subject.recompute(); });\n                            this.updateSubjects.forEach(function (subject) { return subject.recompute(); });\n                            this.removeSubjects.forEach(function (subject) { return subject.recompute(); });\n                            this.softRemoveSubjects.forEach(function (subject) { return subject.recompute(); });\n                            this.recoverSubjects.forEach(function (subject) { return subject.recompute(); });\n                            this.recompute();\n                            // console.timeEnd(\".recompute\");\n                        }\n                        // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly\n                        // console.timeEnd(\"prepare\");\n                        // execute all insert operations\n                        // console.time(\".insertion\");\n                        this.insertSubjects = new SubjectTopoligicalSorter(this.insertSubjects).sort(\"insert\");\n                        return [4 /*yield*/, this.executeInsertOperations()];\n                    case 3:\n                        _a.sent();\n                        // console.timeEnd(\".insertion\");\n                        // recompute update operations since insertion can create updation operations for the\n                        // properties it wasn't able to handle on its own (referenced columns)\n                        this.updateSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeUpdated; });\n                        // execute update operations\n                        // console.time(\".updation\");\n                        return [4 /*yield*/, this.executeUpdateOperations()];\n                    case 4:\n                        // execute update operations\n                        // console.time(\".updation\");\n                        _a.sent();\n                        // console.timeEnd(\".updation\");\n                        // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal\n                        // console.time(\".removal\");\n                        this.removeSubjects = new SubjectTopoligicalSorter(this.removeSubjects).sort(\"delete\");\n                        return [4 /*yield*/, this.executeRemoveOperations()];\n                    case 5:\n                        _a.sent();\n                        // console.timeEnd(\".removal\");\n                        // recompute soft-remove operations\n                        this.softRemoveSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeSoftRemoved; });\n                        // execute soft-remove operations\n                        return [4 /*yield*/, this.executeSoftRemoveOperations()];\n                    case 6:\n                        // execute soft-remove operations\n                        _a.sent();\n                        // recompute recover operations\n                        this.recoverSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeRecovered; });\n                        // execute recover operations\n                        return [4 /*yield*/, this.executeRecoverOperations()];\n                    case 7:\n                        // execute recover operations\n                        _a.sent();\n                        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n                        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n                        return [4 /*yield*/, this.updateSpecialColumnsInPersistedEntities()];\n                    case 8:\n                        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\n                        // console.time(\".updateSpecialColumnsInPersistedEntities\");\n                        _a.sent();\n                        if (!(!this.options || this.options.listeners !== false)) return [3 /*break*/, 10];\n                        // console.time(\".broadcastAfterEventsForAll\");\n                        broadcasterResult = this.broadcastAfterEventsForAll();\n                        if (!(broadcasterResult.promises.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, Promise.all(broadcasterResult.promises)];\n                    case 9:\n                        _a.sent();\n                        _a.label = 10;\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Validates all given subjects.\n     */\n    SubjectExecutor.prototype.validate = function () {\n        this.allSubjects.forEach(function (subject) {\n            if (subject.mustBeUpdated && subject.mustBeRemoved)\n                throw new SubjectRemovedAndUpdatedError(subject);\n        });\n    };\n    /**\n     * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.\n     */\n    SubjectExecutor.prototype.recompute = function () {\n        new SubjectChangedColumnsComputer().compute(this.allSubjects);\n        this.insertSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeInserted; });\n        this.updateSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeUpdated; });\n        this.removeSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeRemoved; });\n        this.softRemoveSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeSoftRemoved; });\n        this.recoverSubjects = this.allSubjects.filter(function (subject) { return subject.mustBeRecovered; });\n        this.hasExecutableOperations = this.insertSubjects.length > 0 || this.updateSubjects.length > 0 || this.removeSubjects.length > 0 || this.softRemoveSubjects.length > 0 || this.recoverSubjects.length > 0;\n    };\n    /**\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\" events for all given subjects.\n     */\n    SubjectExecutor.prototype.broadcastBeforeEventsForAll = function () {\n        var _this = this;\n        var result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeInsertEvent(result, subject.metadata, subject.entity); });\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations); });\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        if (this.softRemoveSubjects.length)\n            this.softRemoveSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations); });\n        if (this.recoverSubjects.length)\n            this.recoverSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations); });\n        return result;\n    };\n    /**\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\" events for all given subjects.\n     * Returns void if there wasn't any listener or subscriber executed.\n     * Note: this method has a performance-optimized code organization.\n     */\n    SubjectExecutor.prototype.broadcastAfterEventsForAll = function () {\n        var _this = this;\n        var result = new BroadcasterResult();\n        if (this.insertSubjects.length)\n            this.insertSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterInsertEvent(result, subject.metadata, subject.entity); });\n        if (this.updateSubjects.length)\n            this.updateSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations); });\n        if (this.removeSubjects.length)\n            this.removeSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterRemoveEvent(result, subject.metadata, subject.entity, subject.databaseEntity); });\n        if (this.softRemoveSubjects.length)\n            this.softRemoveSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations); });\n        if (this.recoverSubjects.length)\n            this.recoverSubjects.forEach(function (subject) { return _this.queryRunner.broadcaster.broadcastAfterUpdateEvent(result, subject.metadata, subject.entity, subject.databaseEntity, subject.diffColumns, subject.diffRelations); });\n        return result;\n    };\n    /**\n     * Executes insert operations.\n     */\n    SubjectExecutor.prototype.executeInsertOperations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, groupedInsertSubjects, groupedInsertSubjectKeys;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = tslib_1.__read(this.groupBulkSubjects(this.insertSubjects, \"insert\"), 2), groupedInsertSubjects = _a[0], groupedInsertSubjectKeys = _a[1];\n                        // then we run insertion in the sequential order which is important since we have an ordered subjects\n                        return [4 /*yield*/, PromiseUtils.runInSequence(groupedInsertSubjectKeys, function (groupName) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var subjects, bulkInsertMaps, bulkInsertSubjects, singleInsertSubjects, manager, insertResult_1, insertResult_2;\n                                var _this = this;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            subjects = groupedInsertSubjects[groupName];\n                                            bulkInsertMaps = [];\n                                            bulkInsertSubjects = [];\n                                            singleInsertSubjects = [];\n                                            if (this.queryRunner.connection.driver instanceof MongoDriver) {\n                                                subjects.forEach(function (subject) {\n                                                    if (subject.metadata.createDateColumn && subject.entity) {\n                                                        subject.entity[subject.metadata.createDateColumn.databaseName] = new Date();\n                                                    }\n                                                    if (subject.metadata.updateDateColumn && subject.entity) {\n                                                        subject.entity[subject.metadata.updateDateColumn.databaseName] = new Date();\n                                                    }\n                                                    subject.createValueSetAndPopChangeMap();\n                                                    bulkInsertSubjects.push(subject);\n                                                    bulkInsertMaps.push(subject.entity);\n                                                });\n                                            }\n                                            else if (this.queryRunner.connection.driver instanceof OracleDriver) {\n                                                subjects.forEach(function (subject) {\n                                                    singleInsertSubjects.push(subject);\n                                                });\n                                            }\n                                            else {\n                                                subjects.forEach(function (subject) {\n                                                    // we do not insert in bulk in following cases:\n                                                    // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows\n                                                    // - when entity is a tree table, since tree tables require extra operation per each inserted row\n                                                    // - when oracle is used, since oracle's bulk insertion is very bad\n                                                    if (subject.changeMaps.length === 0 ||\n                                                        subject.metadata.treeType ||\n                                                        _this.queryRunner.connection.driver instanceof OracleDriver ||\n                                                        _this.queryRunner.connection.driver instanceof SapDriver) {\n                                                        singleInsertSubjects.push(subject);\n                                                    }\n                                                    else {\n                                                        bulkInsertSubjects.push(subject);\n                                                        bulkInsertMaps.push(subject.createValueSetAndPopChangeMap());\n                                                    }\n                                                });\n                                            }\n                                            if (!(this.queryRunner instanceof MongoQueryRunner)) return [3 /*break*/, 2];\n                                            manager = this.queryRunner.manager;\n                                            return [4 /*yield*/, manager.insert(subjects[0].metadata.target, bulkInsertMaps)];\n                                        case 1:\n                                            insertResult_1 = _a.sent();\n                                            subjects.forEach(function (subject, index) {\n                                                subject.identifier = insertResult_1.identifiers[index];\n                                                subject.generatedMap = insertResult_1.generatedMaps[index];\n                                                subject.insertedValueSet = bulkInsertMaps[index];\n                                            });\n                                            return [3 /*break*/, 6];\n                                        case 2:\n                                            if (!(bulkInsertMaps.length > 0)) return [3 /*break*/, 4];\n                                            return [4 /*yield*/, this.queryRunner\n                                                    .manager\n                                                    .createQueryBuilder()\n                                                    .insert()\n                                                    .into(subjects[0].metadata.target)\n                                                    .values(bulkInsertMaps)\n                                                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                                                    .callListeners(false)\n                                                    .execute()];\n                                        case 3:\n                                            insertResult_2 = _a.sent();\n                                            bulkInsertSubjects.forEach(function (subject, index) {\n                                                subject.identifier = insertResult_2.identifiers[index];\n                                                subject.generatedMap = insertResult_2.generatedMaps[index];\n                                                subject.insertedValueSet = bulkInsertMaps[index];\n                                            });\n                                            _a.label = 4;\n                                        case 4:\n                                            if (!(singleInsertSubjects.length > 0)) return [3 /*break*/, 6];\n                                            return [4 /*yield*/, PromiseUtils.runInSequence(singleInsertSubjects, function (subject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                                    return tslib_1.__generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                subject.insertedValueSet = subject.createValueSetAndPopChangeMap(); // important to have because query builder sets inserted values into it\n                                                                if (!(subject.metadata.treeType === \"nested-set\")) return [3 /*break*/, 2];\n                                                                return [4 /*yield*/, new NestedSetSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 1:\n                                                                _a.sent();\n                                                                _a.label = 2;\n                                                            case 2: return [4 /*yield*/, this.queryRunner\n                                                                    .manager\n                                                                    .createQueryBuilder()\n                                                                    .insert()\n                                                                    .into(subject.metadata.target)\n                                                                    .values(subject.insertedValueSet)\n                                                                    .updateEntity(this.options && this.options.reload === false ? false : true)\n                                                                    .callListeners(false)\n                                                                    .execute()\n                                                                    .then(function (insertResult) {\n                                                                    subject.identifier = insertResult.identifiers[0];\n                                                                    subject.generatedMap = insertResult.generatedMaps[0];\n                                                                })];\n                                                            case 3:\n                                                                _a.sent();\n                                                                if (!(subject.metadata.treeType === \"closure-table\")) return [3 /*break*/, 5];\n                                                                return [4 /*yield*/, new ClosureSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 4:\n                                                                _a.sent();\n                                                                return [3 /*break*/, 7];\n                                                            case 5:\n                                                                if (!(subject.metadata.treeType === \"materialized-path\")) return [3 /*break*/, 7];\n                                                                return [4 /*yield*/, new MaterializedPathSubjectExecutor(this.queryRunner).insert(subject)];\n                                                            case 6:\n                                                                _a.sent();\n                                                                _a.label = 7;\n                                                            case 7: return [2 /*return*/];\n                                                        }\n                                                    });\n                                                }); })];\n                                        case 5:\n                                            _a.sent();\n                                            _a.label = 6;\n                                        case 6:\n                                            subjects.forEach(function (subject) {\n                                                if (subject.generatedMap) {\n                                                    subject.metadata.columns.forEach(function (column) {\n                                                        var value = column.getEntityValue(subject.generatedMap);\n                                                        if (value !== undefined && value !== null) {\n                                                            var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                            column.setEntityValue(subject.generatedMap, preparedValue);\n                                                        }\n                                                    });\n                                                }\n                                            });\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        // then we run insertion in the sequential order which is important since we have an ordered subjects\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates all given subjects in the database.\n     */\n    SubjectExecutor.prototype.executeUpdateOperations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.updateSubjects.map(function (subject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var partialEntity, manager, updateMap, updateQueryBuilder, updateResult;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!subject.identifier)\n                                            throw new SubjectWithoutIdentifierError(subject);\n                                        if (!(this.queryRunner instanceof MongoQueryRunner)) return [3 /*break*/, 2];\n                                        partialEntity = OrmUtils.mergeDeep({}, subject.entity);\n                                        if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {\n                                            delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                                        }\n                                        if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {\n                                            delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                                        }\n                                        if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {\n                                            partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                                        }\n                                        manager = this.queryRunner.manager;\n                                        return [4 /*yield*/, manager.update(subject.metadata.target, subject.identifier, partialEntity)];\n                                    case 1:\n                                        _a.sent();\n                                        return [3 /*break*/, 4];\n                                    case 2:\n                                        updateMap = subject.createValueSetAndPopChangeMap();\n                                        updateQueryBuilder = this.queryRunner\n                                            .manager\n                                            .createQueryBuilder()\n                                            .update(subject.metadata.target)\n                                            .set(updateMap)\n                                            .updateEntity(this.options && this.options.reload === false ? false : true)\n                                            .callListeners(false);\n                                        if (subject.entity) {\n                                            updateQueryBuilder.whereEntity(subject.identifier);\n                                        }\n                                        else { // in this case identifier is just conditions object to update by\n                                            updateQueryBuilder.where(subject.identifier);\n                                        }\n                                        return [4 /*yield*/, updateQueryBuilder.execute()];\n                                    case 3:\n                                        updateResult = _a.sent();\n                                        subject.generatedMap = updateResult.generatedMaps[0];\n                                        if (subject.generatedMap) {\n                                            subject.metadata.columns.forEach(function (column) {\n                                                var value = column.getEntityValue(subject.generatedMap);\n                                                if (value !== undefined && value !== null) {\n                                                    var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                    column.setEntityValue(subject.generatedMap, preparedValue);\n                                                }\n                                            });\n                                        }\n                                        _a.label = 4;\n                                    case 4: return [2 /*return*/];\n                                }\n                            });\n                        }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Removes all given subjects from the database.\n     *\n     * todo: we need to apply topological sort here as well\n     */\n    SubjectExecutor.prototype.executeRemoveOperations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, groupedRemoveSubjects, groupedRemoveSubjectKeys;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = tslib_1.__read(this.groupBulkSubjects(this.removeSubjects, \"delete\"), 2), groupedRemoveSubjects = _a[0], groupedRemoveSubjectKeys = _a[1];\n                        return [4 /*yield*/, PromiseUtils.runInSequence(groupedRemoveSubjectKeys, function (groupName) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var subjects, deleteMaps, manager;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            subjects = groupedRemoveSubjects[groupName];\n                                            deleteMaps = subjects.map(function (subject) {\n                                                if (!subject.identifier)\n                                                    throw new SubjectWithoutIdentifierError(subject);\n                                                return subject.identifier;\n                                            });\n                                            if (!(this.queryRunner instanceof MongoQueryRunner)) return [3 /*break*/, 2];\n                                            manager = this.queryRunner.manager;\n                                            return [4 /*yield*/, manager.delete(subjects[0].metadata.target, deleteMaps)];\n                                        case 1:\n                                            _a.sent();\n                                            return [3 /*break*/, 4];\n                                        case 2: \n                                        // here we execute our deletion query\n                                        // we don't need to specify entities and set update entity to true since the only thing query builder\n                                        // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                                        // also, we disable listeners because we call them on our own in persistence layer\n                                        return [4 /*yield*/, this.queryRunner\n                                                .manager\n                                                .createQueryBuilder()\n                                                .delete()\n                                                .from(subjects[0].metadata.target)\n                                                .where(deleteMaps)\n                                                .callListeners(false)\n                                                .execute()];\n                                        case 3:\n                                            // here we execute our deletion query\n                                            // we don't need to specify entities and set update entity to true since the only thing query builder\n                                            // will do for use is a primary keys deletion which is handled by us later once persistence is finished\n                                            // also, we disable listeners because we call them on our own in persistence layer\n                                            _a.sent();\n                                            _a.label = 4;\n                                        case 4: return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Soft-removes all given subjects in the database.\n     */\n    SubjectExecutor.prototype.executeSoftRemoveOperations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.softRemoveSubjects.map(function (subject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var partialEntity, manager, softDeleteQueryBuilder, updateResult;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!subject.identifier)\n                                            throw new SubjectWithoutIdentifierError(subject);\n                                        if (!(this.queryRunner instanceof MongoQueryRunner)) return [3 /*break*/, 2];\n                                        partialEntity = OrmUtils.mergeDeep({}, subject.entity);\n                                        if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {\n                                            delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                                        }\n                                        if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {\n                                            delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                                        }\n                                        if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {\n                                            partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                                        }\n                                        if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {\n                                            partialEntity[subject.metadata.deleteDateColumn.propertyName] = new Date();\n                                        }\n                                        manager = this.queryRunner.manager;\n                                        return [4 /*yield*/, manager.update(subject.metadata.target, subject.identifier, partialEntity)];\n                                    case 1:\n                                        _a.sent();\n                                        return [3 /*break*/, 4];\n                                    case 2:\n                                        softDeleteQueryBuilder = this.queryRunner\n                                            .manager\n                                            .createQueryBuilder()\n                                            .softDelete()\n                                            .from(subject.metadata.target)\n                                            .updateEntity(this.options && this.options.reload === false ? false : true)\n                                            .callListeners(false);\n                                        if (subject.entity) {\n                                            softDeleteQueryBuilder.whereEntity(subject.identifier);\n                                        }\n                                        else { // in this case identifier is just conditions object to update by\n                                            softDeleteQueryBuilder.where(subject.identifier);\n                                        }\n                                        return [4 /*yield*/, softDeleteQueryBuilder.execute()];\n                                    case 3:\n                                        updateResult = _a.sent();\n                                        subject.generatedMap = updateResult.generatedMaps[0];\n                                        if (subject.generatedMap) {\n                                            subject.metadata.columns.forEach(function (column) {\n                                                var value = column.getEntityValue(subject.generatedMap);\n                                                if (value !== undefined && value !== null) {\n                                                    var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                    column.setEntityValue(subject.generatedMap, preparedValue);\n                                                }\n                                            });\n                                        }\n                                        _a.label = 4;\n                                    case 4: return [2 /*return*/];\n                                }\n                            });\n                        }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Recovers all given subjects in the database.\n     */\n    SubjectExecutor.prototype.executeRecoverOperations = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(this.recoverSubjects.map(function (subject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var partialEntity, manager, softDeleteQueryBuilder, updateResult;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        if (!subject.identifier)\n                                            throw new SubjectWithoutIdentifierError(subject);\n                                        if (!(this.queryRunner instanceof MongoQueryRunner)) return [3 /*break*/, 2];\n                                        partialEntity = OrmUtils.mergeDeep({}, subject.entity);\n                                        if (subject.metadata.objectIdColumn && subject.metadata.objectIdColumn.propertyName) {\n                                            delete partialEntity[subject.metadata.objectIdColumn.propertyName];\n                                        }\n                                        if (subject.metadata.createDateColumn && subject.metadata.createDateColumn.propertyName) {\n                                            delete partialEntity[subject.metadata.createDateColumn.propertyName];\n                                        }\n                                        if (subject.metadata.updateDateColumn && subject.metadata.updateDateColumn.propertyName) {\n                                            partialEntity[subject.metadata.updateDateColumn.propertyName] = new Date();\n                                        }\n                                        if (subject.metadata.deleteDateColumn && subject.metadata.deleteDateColumn.propertyName) {\n                                            partialEntity[subject.metadata.deleteDateColumn.propertyName] = null;\n                                        }\n                                        manager = this.queryRunner.manager;\n                                        return [4 /*yield*/, manager.update(subject.metadata.target, subject.identifier, partialEntity)];\n                                    case 1:\n                                        _a.sent();\n                                        return [3 /*break*/, 4];\n                                    case 2:\n                                        softDeleteQueryBuilder = this.queryRunner\n                                            .manager\n                                            .createQueryBuilder()\n                                            .restore()\n                                            .from(subject.metadata.target)\n                                            .updateEntity(this.options && this.options.reload === false ? false : true)\n                                            .callListeners(false);\n                                        if (subject.entity) {\n                                            softDeleteQueryBuilder.whereEntity(subject.identifier);\n                                        }\n                                        else { // in this case identifier is just conditions object to update by\n                                            softDeleteQueryBuilder.where(subject.identifier);\n                                        }\n                                        return [4 /*yield*/, softDeleteQueryBuilder.execute()];\n                                    case 3:\n                                        updateResult = _a.sent();\n                                        subject.generatedMap = updateResult.generatedMaps[0];\n                                        if (subject.generatedMap) {\n                                            subject.metadata.columns.forEach(function (column) {\n                                                var value = column.getEntityValue(subject.generatedMap);\n                                                if (value !== undefined && value !== null) {\n                                                    var preparedValue = _this.queryRunner.connection.driver.prepareHydratedValue(value, column);\n                                                    column.setEntityValue(subject.generatedMap, preparedValue);\n                                                }\n                                            });\n                                        }\n                                        _a.label = 4;\n                                    case 4: return [2 /*return*/];\n                                }\n                            });\n                        }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    SubjectExecutor.prototype.updateSpecialColumnsInPersistedEntities = function () {\n        var _this = this;\n        // update inserted entity properties\n        if (this.insertSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.insertSubjects);\n        // update updated entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.updateSubjects);\n        // update soft-removed entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.softRemoveSubjects);\n        // update recovered entity properties\n        if (this.updateSubjects.length)\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(this.recoverSubjects);\n        // remove ids from the entities that were removed\n        if (this.removeSubjects.length) {\n            this.removeSubjects.forEach(function (subject) {\n                if (!subject.entity)\n                    return;\n                subject.metadata.primaryColumns.forEach(function (primaryColumn) {\n                    primaryColumn.setEntityValue(subject.entity, undefined);\n                });\n            });\n        }\n        // other post-persist updations\n        this.allSubjects.forEach(function (subject) {\n            if (!subject.entity)\n                return;\n            subject.metadata.relationIds.forEach(function (relationId) {\n                relationId.setValue(subject.entity);\n            });\n            // mongo _id remove\n            if (_this.queryRunner instanceof MongoQueryRunner) {\n                if (subject.metadata.objectIdColumn\n                    && subject.metadata.objectIdColumn.databaseName\n                    && subject.metadata.objectIdColumn.databaseName !== subject.metadata.objectIdColumn.propertyName) {\n                    delete subject.entity[subject.metadata.objectIdColumn.databaseName];\n                }\n            }\n        });\n    };\n    /**\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\n     * Also updates nullable columns and columns with default values.\n     */\n    SubjectExecutor.prototype.updateSpecialColumnsInInsertedAndUpdatedEntities = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            if (!subject.entity)\n                return;\n            // set values to \"null\" for nullable columns that did not have values\n            subject.metadata.columns.forEach(function (column) {\n                // if table inheritance is used make sure this column is not child's column\n                if (subject.metadata.childEntityMetadatas.length > 0 && subject.metadata.childEntityMetadatas.map(function (metadata) { return metadata.target; }).indexOf(column.target) !== -1)\n                    return;\n                // entities does not have virtual columns\n                if (column.isVirtual)\n                    return;\n                // update nullable columns\n                if (column.isNullable) {\n                    var columnValue = column.getEntityValue(subject.entity);\n                    if (columnValue === undefined)\n                        column.setEntityValue(subject.entity, null);\n                }\n                // update relational columns\n                if (subject.updatedRelationMaps.length > 0) {\n                    subject.updatedRelationMaps.forEach(function (updatedRelationMap) {\n                        updatedRelationMap.relation.joinColumns.forEach(function (column) {\n                            if (column.isVirtual === true)\n                                return;\n                            column.setEntityValue(subject.entity, updatedRelationMap.value instanceof Object ? column.referencedColumn.getEntityValue(updatedRelationMap.value) : updatedRelationMap.value);\n                        });\n                    });\n                }\n            });\n            // merge into entity all generated values returned by a database\n            if (subject.generatedMap)\n                _this.queryRunner.manager.merge(subject.metadata.target, subject.entity, subject.generatedMap);\n        });\n    };\n    /**\n     * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.\n     * However there are some limitations with bulk insertions of data into tables with generated (increment) columns\n     * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns\n     * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,\n     * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.\n     * That's why we only support bulking in junction tables for those drivers.\n     *\n     * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated\n     * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.\n     */\n    SubjectExecutor.prototype.groupBulkSubjects = function (subjects, type) {\n        var group = {};\n        var keys = [];\n        var groupingAllowed = type === \"delete\" || this.queryRunner.connection.driver.isReturningSqlSupported();\n        subjects.forEach(function (subject, index) {\n            var key = groupingAllowed || subject.metadata.isJunction ? subject.metadata.name : subject.metadata.name + \"_\" + index;\n            if (!group[key]) {\n                group[key] = [subject];\n                keys.push(key);\n            }\n            else {\n                group[key].push(subject);\n            }\n        });\n        return [group, keys];\n    };\n    return SubjectExecutor;\n}());\nexport { SubjectExecutor };\n\n//# sourceMappingURL=SubjectExecutor.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Orders insert or remove subjects in proper order (using topological sorting)\n * to make sure insert or remove operations are executed in a proper order.\n */\nvar SubjectTopoligicalSorter = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SubjectTopoligicalSorter(subjects) {\n        this.subjects = tslib_1.__spread(subjects); // copy subjects to prevent changing of sent array\n        this.metadatas = this.getUniqueMetadatas(this.subjects);\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sorts (orders) subjects in their topological order.\n     */\n    SubjectTopoligicalSorter.prototype.sort = function (direction) {\n        var _this = this;\n        // if there are no metadatas it probably mean there is no subjects... we don't have to do anything here\n        if (!this.metadatas.length)\n            return this.subjects;\n        var sortedSubjects = [];\n        // first if we sort for deletion all junction subjects\n        // junction subjects are subjects without entity and database entity set\n        if (direction === \"delete\") {\n            var junctionSubjects = this.subjects.filter(function (subject) { return !subject.entity && !subject.databaseEntity; });\n            sortedSubjects.push.apply(sortedSubjects, tslib_1.__spread(junctionSubjects));\n            this.removeAlreadySorted(junctionSubjects);\n        }\n        // next we always insert entities with non-nullable relations, sort them first\n        var nonNullableDependencies = this.getNonNullableDependencies();\n        var sortedNonNullableEntityTargets = this.toposort(nonNullableDependencies);\n        if (direction === \"insert\")\n            sortedNonNullableEntityTargets = sortedNonNullableEntityTargets.reverse();\n        // so we have a sorted entity targets\n        // go thought each of them and find all subjects with sorted entity target\n        // add those sorted targets and remove them from original array of targets\n        sortedNonNullableEntityTargets.forEach(function (sortedEntityTarget) {\n            var entityTargetSubjects = _this.subjects.filter(function (subject) { return subject.metadata.targetName === sortedEntityTarget; });\n            sortedSubjects.push.apply(sortedSubjects, tslib_1.__spread(entityTargetSubjects));\n            _this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // next sort all other entities\n        // same process as in above but with other entities\n        var otherDependencies = this.getDependencies();\n        var sortedOtherEntityTargets = this.toposort(otherDependencies);\n        if (direction === \"insert\")\n            sortedOtherEntityTargets = sortedOtherEntityTargets.reverse();\n        sortedOtherEntityTargets.forEach(function (sortedEntityTarget) {\n            var entityTargetSubjects = _this.subjects.filter(function (subject) { return subject.metadata.targetName === sortedEntityTarget; });\n            sortedSubjects.push.apply(sortedSubjects, tslib_1.__spread(entityTargetSubjects));\n            _this.removeAlreadySorted(entityTargetSubjects);\n        });\n        // if we have something left in the subjects add them as well\n        sortedSubjects.push.apply(sortedSubjects, tslib_1.__spread(this.subjects));\n        return sortedSubjects;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes already sorted subjects from this.subjects list of subjects.\n     */\n    SubjectTopoligicalSorter.prototype.removeAlreadySorted = function (subjects) {\n        var _this = this;\n        subjects.forEach(function (subject) {\n            _this.subjects.splice(_this.subjects.indexOf(subject), 1);\n        });\n    };\n    /**\n     * Extracts all unique metadatas from the given subjects.\n     */\n    SubjectTopoligicalSorter.prototype.getUniqueMetadatas = function (subjects) {\n        var metadatas = [];\n        subjects.forEach(function (subject) {\n            if (metadatas.indexOf(subject.metadata) === -1)\n                metadatas.push(subject.metadata);\n        });\n        return metadatas;\n    };\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    SubjectTopoligicalSorter.prototype.getNonNullableDependencies = function () {\n        return this.metadatas.reduce(function (dependencies, metadata) {\n            metadata.relationsWithJoinColumns.forEach(function (relation) {\n                if (relation.isNullable)\n                    return;\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, []);\n    };\n    /**\n     * Gets dependency tree for all entity metadatas with non-nullable relations.\n     * We need to execute insertions first for entities which non-nullable relations.\n     */\n    SubjectTopoligicalSorter.prototype.getDependencies = function () {\n        return this.metadatas.reduce(function (dependencies, metadata) {\n            metadata.relationsWithJoinColumns.forEach(function (relation) {\n                // if relation is self-referenced we skip it\n                if (relation.inverseEntityMetadata === metadata)\n                    return;\n                dependencies.push([metadata.targetName, relation.inverseEntityMetadata.targetName]);\n            });\n            return dependencies;\n        }, []);\n    };\n    /**\n     * Sorts given graph using topological sorting algorithm.\n     *\n     * Algorithm is kindly taken from https://github.com/marcelklehr/toposort repository.\n     */\n    SubjectTopoligicalSorter.prototype.toposort = function (edges) {\n        function uniqueNodes(arr) {\n            var res = [];\n            for (var i_1 = 0, len = arr.length; i_1 < len; i_1++) {\n                var edge = arr[i_1];\n                if (res.indexOf(edge[0]) < 0)\n                    res.push(edge[0]);\n                if (res.indexOf(edge[1]) < 0)\n                    res.push(edge[1]);\n            }\n            return res;\n        }\n        var nodes = uniqueNodes(edges);\n        var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor;\n        while (i--) {\n            if (!visited[i])\n                visit(nodes[i], i, []);\n        }\n        function visit(node, i, predecessors) {\n            if (predecessors.indexOf(node) >= 0) {\n                throw new Error(\"Cyclic dependency: \" + JSON.stringify(node)); // todo: better error\n            }\n            if (!~nodes.indexOf(node)) {\n                throw new Error(\"Found unknown node. Make sure to provided all involved nodes. Unknown node: \" + JSON.stringify(node));\n            }\n            if (visited[i])\n                return;\n            visited[i] = true;\n            // outgoing edges\n            var outgoing = edges.filter(function (edge) {\n                return edge[0] === node;\n            });\n            if (i = outgoing.length) {\n                var preds = predecessors.concat(node);\n                do {\n                    var child = outgoing[--i][1];\n                    visit(child, nodes.indexOf(child), preds);\n                } while (i);\n            }\n            sorted[--cursor] = node;\n        }\n        return sorted;\n    };\n    return SubjectTopoligicalSorter;\n}());\nexport { SubjectTopoligicalSorter };\n\n//# sourceMappingURL=SubjectTopoligicalSorter.js.map\n","import * as tslib_1 from \"tslib\";\nimport { Subject } from \"../Subject\";\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nvar CascadesSubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function CascadesSubjectBuilder(allSubjects) {\n        this.allSubjects = allSubjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    CascadesSubjectBuilder.prototype.build = function (subject, operationType) {\n        var _this = this;\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(function (_a) {\n            var _b = tslib_1.__read(_a, 3), relation = _b[0], relationEntity = _b[1], relationEntityMetadata = _b[2];\n            // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set\n            if (relationEntity === undefined ||\n                relationEntity === null ||\n                (!relation.isCascadeInsert && !relation.isCascadeUpdate && !relation.isCascadeSoftRemove && !relation.isCascadeRecover))\n                return;\n            // if relation entity is just a relation id set (for example post.tag = 1)\n            // then we don't really need to check cascades since there is no object to insert or update\n            if (!(relationEntity instanceof Object))\n                return;\n            // if we already has this entity in list of operated subjects then skip it to avoid recursion\n            var alreadyExistRelationEntitySubject = _this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n            if (alreadyExistRelationEntitySubject) {\n                if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet\n                    alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true && operationType === \"save\";\n                if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet\n                    alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true && operationType === \"save\";\n                if (alreadyExistRelationEntitySubject.canBeSoftRemoved === false) // if its not marked for removal yet\n                    alreadyExistRelationEntitySubject.canBeSoftRemoved = relation.isCascadeSoftRemove === true && operationType === \"soft-remove\";\n                if (alreadyExistRelationEntitySubject.canBeRecovered === false) // if its not marked for recovery yet\n                    alreadyExistRelationEntitySubject.canBeRecovered = relation.isCascadeRecover === true && operationType === \"recover\";\n                return;\n            }\n            // mark subject with what we can do with it\n            // and add to the array of subjects to load only if there is no same entity there already\n            var relationEntitySubject = new Subject({\n                metadata: relationEntityMetadata,\n                parentSubject: subject,\n                entity: relationEntity,\n                canBeInserted: relation.isCascadeInsert === true && operationType === \"save\",\n                canBeUpdated: relation.isCascadeUpdate === true && operationType === \"save\",\n                canBeSoftRemoved: relation.isCascadeSoftRemove === true && operationType === \"soft-remove\",\n                canBeRecovered: relation.isCascadeRecover === true && operationType === \"recover\"\n            });\n            _this.allSubjects.push(relationEntitySubject);\n            // go recursively and find other entities we need to insert/update\n            _this.build(relationEntitySubject, operationType);\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    CascadesSubjectBuilder.prototype.findByPersistEntityLike = function (entityTarget, entity) {\n        return this.allSubjects.find(function (subject) {\n            if (!subject.entity)\n                return false;\n            if (subject.entity === entity)\n                return true;\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds, entity);\n        });\n    };\n    return CascadesSubjectBuilder;\n}());\nexport { CascadesSubjectBuilder };\n\n//# sourceMappingURL=CascadesSubjectBuilder.js.map\n","import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nvar ManyToManySubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function ManyToManySubjectBuilder(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    ManyToManySubjectBuilder.prototype.build = function () {\n        var _this = this;\n        this.subjects.forEach(function (subject) {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity)\n                return;\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach(function (relation) {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n                _this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    };\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    ManyToManySubjectBuilder.prototype.buildForAllRemoval = function (subject) {\n        var _this = this;\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity)\n            return;\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach(function (relation) {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false)\n                return;\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            var relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity);\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach(function (relationId) {\n                var junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: _this.buildJunctionIdentifier(subject, relation, relationId)\n                });\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                _this.subjects.push(junctionSubject);\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    ManyToManySubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {\n        var _this = this;\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        var databaseRelatedEntityIds = [];\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        var relatedEntities = relation.getEntityValue(subject.entity);\n        if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = [];\n        if (!(Array.isArray(relatedEntities)))\n            return;\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach(function (relatedEntity) {\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n            // extract only relation id from the related entities, since we only need it for comparision\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            var relatedEntitySubject = _this.subjects.find(function (subject) {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n            }\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            var relatedEntityExistInDatabase = databaseRelatedEntityIds.find(function (databaseRelatedEntityRelationId) {\n                return OrmUtils.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n            });\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase)\n                return;\n            var ownerValue = relation.isOwning ? subject : (relatedEntitySubject || relatedEntity); // by example: ownerEntityMap is post from subject here\n            var inverseValue = relation.isOwning ? (relatedEntitySubject || relatedEntity) : subject; // by example: inverseEntityMap is category from categories array here\n            // create a new subject for insert operation of junction rows\n            var junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                canBeInserted: true,\n            });\n            _this.subjects.push(junctionSubject);\n            relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                });\n            });\n            relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: inverseValue,\n                });\n            });\n        });\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        var changedInverseEntityRelationIds = [];\n        relatedEntities.forEach(function (relatedEntity) {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            var relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity);\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            var relatedEntitySubject = _this.subjects.find(function (subject) {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n            if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null)\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n        });\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        var removedJunctionEntityIds = databaseRelatedEntityIds.filter(function (existRelationId) {\n            return !changedInverseEntityRelationIds.find(function (changedRelationId) {\n                return OrmUtils.compareIds(changedRelationId, existRelationId);\n            });\n        });\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach(function (removedEntityRelationId) {\n            var junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: _this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)\n            });\n            _this.subjects.push(junctionSubject);\n        });\n    };\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    ManyToManySubjectBuilder.prototype.buildJunctionIdentifier = function (subject, relation, relationId) {\n        var ownerEntityMap = relation.isOwning ? subject.entity : relationId;\n        var inverseEntityMap = relation.isOwning ? relationId : subject.entity;\n        var identifier = {};\n        relation.junctionEntityMetadata.ownerColumns.forEach(function (column) {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));\n        });\n        relation.junctionEntityMetadata.inverseColumns.forEach(function (column) {\n            OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));\n        });\n        return identifier;\n    };\n    return ManyToManySubjectBuilder;\n}());\nexport { ManyToManySubjectBuilder };\n\n//# sourceMappingURL=ManyToManySubjectBuilder.js.map\n","import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\";\n/**\n * Builds operations needs to be executed for one-to-many relations of the given subjects.\n *\n * by example: post contains one-to-many relation with category in the property called \"categories\", e.g.\n *             @OneToMany(type => Category, category => category.post) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToOneInverseSideOperationBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nvar OneToManySubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function OneToManySubjectBuilder(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds all required operations.\n     */\n    OneToManySubjectBuilder.prototype.build = function () {\n        var _this = this;\n        this.subjects.forEach(function (subject) {\n            subject.metadata.oneToManyRelations.forEach(function (relation) {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false)\n                    return;\n                _this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    OneToManySubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {\n        var _this = this;\n        // prepare objects (relation id maps) for the database entity\n        // note: subject.databaseEntity contains relations with loaded relation ids only\n        // by example: since subject is a post, we are expecting to get all post's categories saved in the database here,\n        //             particularly their relation ids, e.g. category ids stored in the database\n        var relatedEntityDatabaseRelationIds = [];\n        if (subject.databaseEntity) { // related entities in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationIds = relation.getEntityValue(subject.databaseEntity);\n        }\n        // get related entities of persisted entity\n        // by example: get categories from the passed to persist post entity\n        var relatedEntities = relation.getEntityValue(subject.entity);\n        if (relatedEntities === null) // we treat relations set to null as removed, so we don't skip it\n            relatedEntities = [];\n        if (relatedEntities === undefined) // if relation is undefined then nothing to update\n            return;\n        // extract only relation ids from the related entities, since we only need them for comparision\n        // by example: extract from categories only relation ids (category id, or let's say category title, depend on join column options)\n        var relatedPersistedEntityRelationIds = [];\n        relatedEntities.forEach(function (relatedEntity) {\n            var relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            var relatedEntitySubject = _this.subjects.find(function (subject) {\n                return subject.entity === relatedEntity;\n            });\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relationIdMap = relatedEntitySubject.identifier;\n            // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n            // by example: if post contains categories which does not have ids yet (because they are new)\n            //             it means they are always newly inserted and relation update operation always must be created for them\n            //             it does not make sense to perform difference operation for them for both add and remove actions\n            if (!relationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new Error(`One-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject)\n                    return;\n                // okay, so related subject exist and its marked for insertion, then add a new change map\n                // by example: this will tell category to insert into its post relation our post we are working with\n                //             relatedEntitySubject is newly inserted CategorySubject\n                //             relation.inverseRelation is ManyToOne relation inside Category\n                //             subject is Post needs to be inserted into Category\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation,\n                    value: subject\n                });\n                return;\n            }\n            // check if this binding really exist in the database\n            // by example: find our category if its already bind in the database\n            var relationIdInDatabaseSubjectRelation = relatedEntityDatabaseRelationIds.find(function (relatedDatabaseEntityRelationId) {\n                return OrmUtils.compareIds(relationIdMap, relatedDatabaseEntityRelationId);\n            });\n            // if relationIdMap DOES NOT exist in the subject's relation in the database it means its a new relation and we need to \"bind\" them\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is ManyToOne relation inside Category\n            //             subject is Post needs to be inserted into Category\n            if (!relationIdInDatabaseSubjectRelation) {\n                // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n                // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n                // we create a new subject here:\n                if (!relatedEntitySubject) {\n                    relatedEntitySubject = new Subject({\n                        metadata: relation.inverseEntityMetadata,\n                        parentSubject: subject,\n                        canBeUpdated: true,\n                        identifier: relationIdMap\n                    });\n                    _this.subjects.push(relatedEntitySubject);\n                }\n                relatedEntitySubject.changeMaps.push({\n                    relation: relation.inverseRelation,\n                    value: subject\n                });\n            }\n            // if related entity has relation id then we add it to the list of relation ids\n            // this list will be used later to compare with database relation ids to find a difference\n            // what exist in this array and does not exist in the database are newly inserted relations\n            // what does not exist in this array, but exist in the database are removed relations\n            // removed relations are set to null from inverse side of relation\n            relatedPersistedEntityRelationIds.push(relationIdMap);\n        });\n        // find what related entities were added and what were removed based on difference between what we save and what database has\n        EntityMetadata\n            .difference(relatedEntityDatabaseRelationIds, relatedPersistedEntityRelationIds)\n            .forEach(function (removedRelatedEntityRelationId) {\n            // todo: probably we can improve this in the future by finding entity with column those values,\n            // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n            // we create a new subject which operations will be executed in subject operation executor\n            var removedRelatedEntitySubject = new Subject({\n                metadata: relation.inverseEntityMetadata,\n                parentSubject: subject,\n                canBeUpdated: true,\n                identifier: removedRelatedEntityRelationId,\n                changeMaps: [{\n                        relation: relation.inverseRelation,\n                        value: null\n                    }]\n            });\n            _this.subjects.push(removedRelatedEntitySubject);\n        });\n    };\n    return OneToManySubjectBuilder;\n}());\nexport { OneToManySubjectBuilder };\n\n//# sourceMappingURL=OneToManySubjectBuilder.js.map\n","import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nvar OneToOneInverseSideSubjectBuilder = /** @class */ (function () {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n    function OneToOneInverseSideSubjectBuilder(subjects) {\n        this.subjects = subjects;\n    }\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds all required operations.\n     */\n    OneToOneInverseSideSubjectBuilder.prototype.build = function () {\n        var _this = this;\n        this.subjects.forEach(function (subject) {\n            subject.metadata.oneToOneRelations.forEach(function (relation) {\n                // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n                // skip relations for which persistence is disabled\n                if (relation.isOwning || relation.persistenceEnabled === false)\n                    return;\n                _this.buildForSubjectRelation(subject, relation);\n            });\n        });\n    };\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n     */\n    OneToOneInverseSideSubjectBuilder.prototype.buildForSubjectRelation = function (subject, relation) {\n        // prepare objects (relation id map) for the database entity\n        // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n        // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n        //             particularly its relation id, e.g. category id stored in the database\n        var relatedEntityDatabaseRelationId = undefined;\n        if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity);\n        // get related entities of persisted entity\n        // by example: get category from the passed to persist post entity\n        var relatedEntity = relation.getEntityValue(subject.entity); // by example: relatedEntity is a category here\n        if (relatedEntity === undefined) // if relation is undefined then nothing to update\n            return;\n        // if related entity is null then we need to check if there a bind in the database and unset it\n        // if there is no bind in the entity then we don't need to do anything\n        // by example: if post.category = null and category has this post in the database then we unset it\n        if (relatedEntity === null) {\n            // it makes sense to update database only there is a previously set value in the database\n            if (relatedEntityDatabaseRelationId) {\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n                var removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: relatedEntityDatabaseRelationId,\n                    changeMaps: [{\n                            relation: relation.inverseRelation,\n                            value: null\n                        }]\n                });\n                this.subjects.push(removedRelatedEntitySubject);\n            }\n            return;\n        } // else means entity is bind in the database\n        // extract only relation id from the related entities, since we only need it for comparision\n        // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n        var relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n        // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n        var relatedEntitySubject = this.subjects.find(function (operateSubject) {\n            return !!operateSubject.entity && operateSubject.entity === relatedEntity;\n        });\n        // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n        if (relatedEntitySubject)\n            relationIdMap = relatedEntitySubject.identifier;\n        // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n        // by example: if post contains category which does not have id(s) yet (because its a new category)\n        //             it means its always newly inserted and relation update operation always must be created for it\n        //             it does not make sense to perform difference operation for it for both add and remove actions\n        if (!relationIdMap) {\n            // we decided to remove this error because it brings complications when saving object with non-saved entities\n            // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n            // in this persistence because he didn't pass this entity for save or he did not set cascades\n            // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n            // if (!relatedEntitySubject)\n            //     throw new Error(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n            //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n            //         `Please setup cascade insertion or save entity before binding it.`);\n            if (!relatedEntitySubject)\n                return;\n            // okay, so related subject exist and its marked for insertion, then add a new change map\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is OneToOne owner relation inside Category\n            //             subject is Post needs to be inserted into Category\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject\n            });\n        }\n        // check if this binding really exist in the database\n        // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n        var areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && OrmUtils.compareIds(relationIdMap, relatedEntityDatabaseRelationId);\n        // if they aren't equal it means its a new relation and we need to \"bind\" them\n        // by example: this will tell category to insert into its post relation our post we are working with\n        //             relatedEntitySubject is newly inserted CategorySubject\n        //             relation.inverseRelation is ManyToOne relation inside Category\n        //             subject is Post needs to be inserted into Category\n        if (!areRelatedIdEqualWithDatabase) {\n            // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n            // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n            // we create a new subject here:\n            if (!relatedEntitySubject) {\n                relatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    canBeUpdated: true,\n                    identifier: relationIdMap\n                });\n                this.subjects.push(relatedEntitySubject);\n            }\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation,\n                value: subject\n            });\n        }\n    };\n    return OneToOneInverseSideSubjectBuilder;\n}());\nexport { OneToOneInverseSideSubjectBuilder };\n\n//# sourceMappingURL=OneToOneInverseSideSubjectBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { CannotAttachTreeChildrenEntityError } from \"../../error/CannotAttachTreeChildrenEntityError\";\n/**\n * Executes subject operations for closure entities.\n */\nvar ClosureSubjectExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ClosureSubjectExecutor(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Removes all children of the given subject's entity.\n\n    async deleteChildrenOf(subject: Subject) {\n        // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);\n        // console.log(\"relationValue: \", relationValue);\n        // this.queryRunner.manager\n        //     .createQueryBuilder()\n        //     .from(subject.metadata.closureJunctionTable.target, \"tree\")\n        //     .where(\"tree.\");\n    }*/\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    ClosureSubjectExecutor.prototype.insert = function (subject) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var closureJunctionInsertMap, parent, escape_1, tableName, ancestorColumnNames, descendantColumnNames, firstQueryParameters_1, childEntityIdValues_1, childEntityIds1, whereCondition;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        closureJunctionInsertMap = {};\n                        subject.metadata.closureJunctionTable.ancestorColumns.forEach(function (column) {\n                            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n                        });\n                        subject.metadata.closureJunctionTable.descendantColumns.forEach(function (column) {\n                            closureJunctionInsertMap[column.databaseName] = subject.identifier;\n                        });\n                        // insert values into the closure junction table\n                        return [4 /*yield*/, this.queryRunner\n                                .manager\n                                .createQueryBuilder()\n                                .insert()\n                                .into(subject.metadata.closureJunctionTable.tablePath)\n                                .values(closureJunctionInsertMap)\n                                .updateEntity(false)\n                                .callListeners(false)\n                                .execute()];\n                    case 1:\n                        // insert values into the closure junction table\n                        _a.sent();\n                        parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);\n                        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n                            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n                        if (!parent) return [3 /*break*/, 3];\n                        escape_1 = function (alias) { return _this.queryRunner.connection.driver.escape(alias); };\n                        tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\n                        ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                            return escape_1(column.databaseName);\n                        });\n                        firstQueryParameters_1 = [];\n                        childEntityIdValues_1 = subject.metadata.primaryColumns.map(function (column) { return column.getEntityValue(subject.insertedValueSet); });\n                        childEntityIds1 = subject.metadata.primaryColumns.map(function (column, index) {\n                            firstQueryParameters_1.push(childEntityIdValues_1[index]);\n                            return _this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                        });\n                        whereCondition = subject.metadata.primaryColumns.map(function (column) {\n                            var columnName = escape_1(column.databaseName + \"_descendant\");\n                            var parentId = column.getEntityValue(parent);\n                            if (!parentId)\n                                throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\n                            firstQueryParameters_1.push(parentId);\n                            var parameterName = _this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters_1.length - 1);\n                            return columnName + \" = \" + parameterName;\n                        }).join(\", \");\n                        return [4 /*yield*/, this.queryRunner.query(\"INSERT INTO \" + tableName + \" (\" + tslib_1.__spread(ancestorColumnNames, descendantColumnNames).join(\", \") + \") \" +\n                                (\"SELECT \" + ancestorColumnNames.join(\", \") + \", \" + childEntityIds1.join(\", \") + \" FROM \" + tableName + \" WHERE \" + whereCondition), firstQueryParameters_1)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    ClosureSubjectExecutor.prototype.getTableName = function (tablePath) {\n        var _this = this;\n        return tablePath.split(\".\")\n            .map(function (i) {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return _this.queryRunner.connection.driver.escape(i);\n        }).join(\".\");\n    };\n    return ClosureSubjectExecutor;\n}());\nexport { ClosureSubjectExecutor };\n\n//# sourceMappingURL=ClosureSubjectExecutor.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Executes subject operations for materialized-path tree entities.\n */\nvar MaterializedPathSubjectExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function MaterializedPathSubjectExecutor(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    MaterializedPathSubjectExecutor.prototype.insert = function (subject) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, parent, parentId, parentPath, insertedEntityId;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);\n                        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n                            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n                        parentId = subject.metadata.getEntityIdMap(parent);\n                        parentPath = \"\";\n                        if (!parentId) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.queryRunner.manager\n                                .createQueryBuilder()\n                                .select(subject.metadata.targetName + \".\" + subject.metadata.materializedPathColumn.propertyPath, \"path\")\n                                .from(subject.metadata.target, subject.metadata.targetName)\n                                .whereInIds(parentId)\n                                .getRawOne()\n                                .then(function (result) { return result ? result[\"path\"] : undefined; })];\n                    case 1:\n                        parentPath = _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        insertedEntityId = subject.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {\n                            return joinColumn.referencedColumn.getEntityValue(subject.insertedValueSet);\n                        }).join(\"_\");\n                        return [4 /*yield*/, this.queryRunner.manager\n                                .createQueryBuilder()\n                                .update(subject.metadata.target)\n                                .set((_a = {},\n                                _a[subject.metadata.materializedPathColumn.propertyPath] = parentPath + insertedEntityId + \".\",\n                                _a))\n                                .where(subject.identifier)\n                                .execute()];\n                    case 3:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return MaterializedPathSubjectExecutor;\n}());\nexport { MaterializedPathSubjectExecutor };\n\n//# sourceMappingURL=MaterializedPathSubjectExecutor.js.map\n","import * as tslib_1 from \"tslib\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Executes subject operations for nested set tree entities.\n */\nvar NestedSetSubjectExecutor = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function NestedSetSubjectExecutor(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    NestedSetSubjectExecutor.prototype.insert = function (subject) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var escape, tableName, leftColumnName, rightColumnName, parent, parentId, parentNsRight;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        escape = function (alias) { return _this.queryRunner.connection.driver.escape(alias); };\n                        tableName = this.getTableName(subject.metadata.tablePath);\n                        leftColumnName = escape(subject.metadata.nestedSetLeftColumn.databaseName);\n                        rightColumnName = escape(subject.metadata.nestedSetRightColumn.databaseName);\n                        parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);\n                        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n                            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n                        parentId = subject.metadata.getEntityIdMap(parent);\n                        parentNsRight = undefined;\n                        if (!parentId) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.queryRunner.manager\n                                .createQueryBuilder()\n                                .select(subject.metadata.targetName + \".\" + subject.metadata.nestedSetRightColumn.propertyPath, \"right\")\n                                .from(subject.metadata.target, subject.metadata.targetName)\n                                .whereInIds(parentId)\n                                .getRawOne()\n                                .then(function (result) {\n                                var value = result ? result[\"right\"] : undefined;\n                                // CockroachDB returns numeric types as string\n                                return typeof value === \"string\" ? parseInt(value) : value;\n                            })];\n                    case 1:\n                        parentNsRight = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        if (!(parentNsRight !== undefined)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.queryRunner.query(\"UPDATE \" + tableName + \" SET \" +\n                                (leftColumnName + \" = CASE WHEN \" + leftColumnName + \" > \" + parentNsRight + \" THEN \" + leftColumnName + \" + 2 ELSE \" + leftColumnName + \" END,\") +\n                                (rightColumnName + \" = \" + rightColumnName + \" + 2 \") +\n                                (\"WHERE \" + rightColumnName + \" >= \" + parentNsRight))];\n                    case 3:\n                        _a.sent();\n                        OrmUtils.mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(parentNsRight), subject.metadata.nestedSetRightColumn.createValueMap(parentNsRight + 1));\n                        return [3 /*break*/, 5];\n                    case 4:\n                        OrmUtils.mergeDeep(subject.insertedValueSet, subject.metadata.nestedSetLeftColumn.createValueMap(1), subject.metadata.nestedSetRightColumn.createValueMap(2));\n                        _a.label = 5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    NestedSetSubjectExecutor.prototype.getTableName = function (tablePath) {\n        var _this = this;\n        return tablePath.split(\".\")\n            .map(function (i) {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return _this.queryRunner.connection.driver.escape(i);\n        }).join(\".\");\n    };\n    return NestedSetSubjectExecutor;\n}());\nexport { NestedSetSubjectExecutor };\n\n//# sourceMappingURL=NestedSetSubjectExecutor.js.map\n","/**\n * Dummy driver classes for replacement via `package.json` in browser builds.\n * Using those classes reduces the build size by one third.\n *\n * If we don't include those dummy classes (and just disable the driver import\n * with `false` in `package.json`) typeorm will throw an error on runtime,\n * even if those driver are not used.\n */\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar MongoDriver = /** @class */ (function () {\n    function MongoDriver() {\n    }\n    return MongoDriver;\n}());\nexport { MongoDriver };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar MongoQueryRunner = /** @class */ (function () {\n    function MongoQueryRunner() {\n    }\n    return MongoQueryRunner;\n}());\nexport { MongoQueryRunner };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar MongoEntityManager = /** @class */ (function () {\n    function MongoEntityManager() {\n    }\n    return MongoEntityManager;\n}());\nexport { MongoEntityManager };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar MongoRepository = /** @class */ (function () {\n    function MongoRepository() {\n    }\n    return MongoRepository;\n}());\nexport { MongoRepository };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar PostgresDriver = /** @class */ (function () {\n    function PostgresDriver() {\n    }\n    return PostgresDriver;\n}());\nexport { PostgresDriver };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar SqlServerDriver = /** @class */ (function () {\n    function SqlServerDriver() {\n    }\n    return SqlServerDriver;\n}());\nexport { SqlServerDriver };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar SapDriver = /** @class */ (function () {\n    function SapDriver() {\n    }\n    return SapDriver;\n}());\nexport { SapDriver };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar MysqlDriver = /** @class */ (function () {\n    function MysqlDriver() {\n    }\n    return MysqlDriver;\n}());\nexport { MysqlDriver };\n/**\n * DO NOT IMPORT THIS CLASS -\n * This is a dummy class for replacement via `package.json` in browser builds\n */\nvar OracleDriver = /** @class */ (function () {\n    function OracleDriver() {\n    }\n    return OracleDriver;\n}());\nexport { OracleDriver };\n\n//# sourceMappingURL=BrowserDisabledDriversDummy.js.map\n","/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nvar PlatformTools = /** @class */ (function () {\n    function PlatformTools() {\n    }\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    PlatformTools.getGlobalVariable = function () {\n        if (typeof window !== \"undefined\") {\n            return window;\n        }\n        else {\n            // NativeScript uses global, not window\n            return global;\n        }\n    };\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    PlatformTools.load = function (name) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: require(\\\"\" + name + \"\\\").\");\n        return \"\";\n    };\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    PlatformTools.pathNormalize = function (pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: path.normalize(\\\"\" + pathStr + \"\\\").\");\n        return \"\";\n    };\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    PlatformTools.pathExtname = function (pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: path.extname(\\\"\" + pathStr + \"\\\").\");\n        return \"\";\n    };\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    PlatformTools.pathResolve = function (pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: path.resolve(\\\"\" + pathStr + \"\\\").\");\n        return \"\";\n    };\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    PlatformTools.fileExist = function (pathStr) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\\\"\" + pathStr + \"\\\").\");\n        return false;\n    };\n    /**\n     * Gets environment variable.\n     */\n    PlatformTools.getEnvVariable = function (name) {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    };\n    PlatformTools.readFileSync = function (filename) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\\\"\" + filename + \"\\\").\");\n        return null;\n    };\n    PlatformTools.appendFileSync = function (filename, data) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\\\"\" + filename + \"\\\").\");\n    };\n    PlatformTools.writeFile = function (path, data) {\n        if (this.type === \"browser\")\n            throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\\\"\" + path + \"\\\").\");\n        return Promise.reject(null);\n    };\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    PlatformTools.highlightSql = function (sql) {\n        return sql;\n    };\n    /**\n     * Highlights json string to be print in the console.\n     */\n    PlatformTools.highlightJson = function (json) {\n        return json;\n    };\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    PlatformTools.logInfo = function (prefix, info) {\n        console.info(prefix + \" \", info);\n    };\n    PlatformTools.logError = function (prefix, error) {\n        console.error(prefix + \" \", error);\n    };\n    PlatformTools.logWarn = function (prefix, warning) {\n        console.warn(prefix + \" \", warning);\n    };\n    PlatformTools.log = function (message) {\n        console.log(message);\n    };\n    PlatformTools.warn = function (message) {\n        return message;\n    };\n    /**\n     * Type of the currently running platform.\n     */\n    PlatformTools.type = \"browser\";\n    return PlatformTools;\n}());\nexport { PlatformTools };\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n    }\n    return EventEmitter;\n}());\nexport { EventEmitter };\nvar Readable = /** @class */ (function () {\n    function Readable() {\n    }\n    return Readable;\n}());\nexport { Readable };\nvar Writable = /** @class */ (function () {\n    function Writable() {\n    }\n    return Writable;\n}());\nexport { Writable };\nif (typeof window !== \"undefined\") {\n    window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n\n//# sourceMappingURL=PlatformTools.js.map\n","import { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n */\nvar Alias = /** @class */ (function () {\n    function Alias(alias) {\n        ObjectUtils.assign(this, alias || {});\n    }\n    Object.defineProperty(Alias.prototype, \"target\", {\n        get: function () {\n            return this.metadata.target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Alias.prototype, \"hasMetadata\", {\n        get: function () {\n            return !!this._metadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Alias.prototype, \"metadata\", {\n        get: function () {\n            if (!this._metadata)\n                throw new Error(\"Cannot get entity metadata for the given alias \\\"\" + this.name + \"\\\"\");\n            return this._metadata;\n        },\n        set: function (metadata) {\n            this._metadata = metadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Alias;\n}());\nexport { Alias };\n\n//# sourceMappingURL=Alias.js.map\n","/**\n * Syntax sugar.\n * Allows to use brackets in WHERE expressions for better syntax.\n */\nvar Brackets = /** @class */ (function () {\n    /**\n     * Given WHERE query builder that will build a WHERE expression that will be taken into brackets.\n     */\n    function Brackets(whereFactory) {\n        this.whereFactory = whereFactory;\n    }\n    return Brackets;\n}());\nexport { Brackets };\n\n//# sourceMappingURL=Brackets.js.map\n","import * as tslib_1 from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { DeleteResult } from \"./result/DeleteResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { EntitySchema } from \"../index\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar DeleteQueryBuilder = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteQueryBuilder, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {\n        var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;\n        _this.expressionMap.aliasNamePrefixingEnabled = false;\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    DeleteQueryBuilder.prototype.getQuery = function () {\n        var sql = this.createDeleteExpression();\n        return sql.trim();\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    DeleteQueryBuilder.prototype.execute = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, sql, parameters, queryRunner, transactionStartedByUs, broadcastResult, deleteResult, result, driver, broadcastResult, error_1, rollbackError_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = tslib_1.__read(this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 11, 16, 21]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _b.sent();\n                        transactionStartedByUs = true;\n                        _b.label = 3;\n                    case 3:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 5];\n                        broadcastResult = new BroadcasterResult();\n                        queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n                        if (!(broadcastResult.promises.length > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, Promise.all(broadcastResult.promises)];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        deleteResult = new DeleteResult();\n                        return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 6:\n                        result = _b.sent();\n                        driver = queryRunner.connection.driver;\n                        if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver) {\n                            deleteResult.raw = result;\n                            deleteResult.affected = result.affectedRows;\n                        }\n                        else if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof CockroachDriver) {\n                            deleteResult.raw = result[0] ? result[0] : null;\n                            // don't return 0 because it could confuse. null means that we did not receive this value\n                            deleteResult.affected = typeof result[1] === \"number\" ? result[1] : null;\n                        }\n                        else if (driver instanceof OracleDriver) {\n                            deleteResult.affected = result;\n                        }\n                        else {\n                            deleteResult.raw = result;\n                        }\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 8];\n                        broadcastResult = new BroadcasterResult();\n                        queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n                        if (!(broadcastResult.promises.length > 0)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, Promise.all(broadcastResult.promises)];\n                    case 7:\n                        _b.sent();\n                        _b.label = 8;\n                    case 8:\n                        if (!transactionStartedByUs) return [3 /*break*/, 10];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 9:\n                        _b.sent();\n                        _b.label = 10;\n                    case 10: return [2 /*return*/, deleteResult];\n                    case 11:\n                        error_1 = _b.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 15];\n                        _b.label = 12;\n                    case 12:\n                        _b.trys.push([12, 14, , 15]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 13:\n                        _b.sent();\n                        return [3 /*break*/, 15];\n                    case 14:\n                        rollbackError_1 = _b.sent();\n                        return [3 /*break*/, 15];\n                    case 15: throw error_1;\n                    case 16:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 18];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 17:\n                        _b.sent();\n                        _b.label = 18;\n                    case 18:\n                        if (!(this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive)) return [3 /*break*/, 20];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 19:\n                        _b.sent();\n                        _b.label = 20;\n                    case 20: return [7 /*endfinally*/];\n                    case 21: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    DeleteQueryBuilder.prototype.from = function (entityTarget, aliasName) {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        var mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    };\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    DeleteQueryBuilder.prototype.where = function (where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        var condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    DeleteQueryBuilder.prototype.andWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    DeleteQueryBuilder.prototype.orWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    DeleteQueryBuilder.prototype.whereInIds = function (ids) {\n        return this.where(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    DeleteQueryBuilder.prototype.andWhereInIds = function (ids) {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    DeleteQueryBuilder.prototype.orWhereInIds = function (ids) {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    DeleteQueryBuilder.prototype.output = function (output) {\n        return this.returning(output);\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    DeleteQueryBuilder.prototype.returning = function (returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n        this.expressionMap.returning = returning;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    DeleteQueryBuilder.prototype.createDeleteExpression = function () {\n        var tableName = this.getTableName(this.getMainTableName());\n        var whereExpression = this.createWhereExpression();\n        var returningExpression = this.createReturningExpression();\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof CockroachDriver)) {\n            return \"DELETE FROM \" + tableName + whereExpression + \" RETURNING \" + returningExpression;\n        }\n        else if (returningExpression !== \"\" && this.connection.driver instanceof SqlServerDriver) {\n            return \"DELETE FROM \" + tableName + \" OUTPUT \" + returningExpression + whereExpression;\n        }\n        else {\n            return \"DELETE FROM \" + tableName + whereExpression;\n        }\n    };\n    return DeleteQueryBuilder;\n}(QueryBuilder));\nexport { DeleteQueryBuilder };\n\n//# sourceMappingURL=DeleteQueryBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { SapDriver } from \"../driver/sap/SapDriver\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { RandomGenerator } from \"../util/RandomGenerator\";\nimport { InsertResult } from \"./result/InsertResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { InsertValuesMissingError } from \"../error/InsertValuesMissingError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { AbstractSqliteDriver } from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { EntitySchema } from \"../entity-schema/EntitySchema\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar InsertQueryBuilder = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertQueryBuilder, _super);\n    function InsertQueryBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    InsertQueryBuilder.prototype.getQuery = function () {\n        var sql = this.createInsertExpression();\n        return sql.trim();\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    InsertQueryBuilder.prototype.execute = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, transactionStartedByUs, valueSets, broadcastResult_1, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, insertSql, parameters, insertResult, statements, _b, broadcastResult_2, error_1, rollbackError_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 13, 18, 23]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _c.sent();\n                        transactionStartedByUs = true;\n                        _c.label = 3;\n                    case 3:\n                        valueSets = this.getValueSets();\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 5];\n                        broadcastResult_1 = new BroadcasterResult();\n                        valueSets.forEach(function (valueSet) {\n                            queryRunner.broadcaster.broadcastBeforeInsertEvent(broadcastResult_1, _this.expressionMap.mainAlias.metadata, valueSet);\n                        });\n                        if (!(broadcastResult_1.promises.length > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, Promise.all(broadcastResult_1.promises)];\n                    case 4:\n                        _c.sent();\n                        _c.label = 5;\n                    case 5:\n                        declareSql = null;\n                        selectOutputSql = null;\n                        returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n                        if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata) {\n                            this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getInsertionReturningColumns();\n                            if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof SqlServerDriver) {\n                                declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", this.expressionMap.extraReturningColumns);\n                                selectOutputSql = \"SELECT * FROM @OutputTable\";\n                            }\n                        }\n                        _a = tslib_1.__read(this.getQueryAndParameters(), 2), insertSql = _a[0], parameters = _a[1];\n                        insertResult = new InsertResult();\n                        statements = [declareSql, insertSql, selectOutputSql];\n                        _b = insertResult;\n                        return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(\";\\n\\n\"), parameters)];\n                    case 6:\n                        _b.raw = _c.sent();\n                        if (!(this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 8];\n                        // console.time(\".updating entity\");\n                        return [4 /*yield*/, returningResultsEntityUpdator.insert(insertResult, valueSets)];\n                    case 7:\n                        // console.time(\".updating entity\");\n                        _c.sent();\n                        _c.label = 8;\n                    case 8:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 10];\n                        broadcastResult_2 = new BroadcasterResult();\n                        valueSets.forEach(function (valueSet) {\n                            queryRunner.broadcaster.broadcastAfterInsertEvent(broadcastResult_2, _this.expressionMap.mainAlias.metadata, valueSet);\n                        });\n                        if (!(broadcastResult_2.promises.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, Promise.all(broadcastResult_2.promises)];\n                    case 9:\n                        _c.sent();\n                        _c.label = 10;\n                    case 10:\n                        if (!transactionStartedByUs) return [3 /*break*/, 12];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 11:\n                        _c.sent();\n                        _c.label = 12;\n                    case 12: \n                    // console.timeEnd(\".commit\");\n                    return [2 /*return*/, insertResult];\n                    case 13:\n                        error_1 = _c.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 17];\n                        _c.label = 14;\n                    case 14:\n                        _c.trys.push([14, 16, , 17]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 15:\n                        _c.sent();\n                        return [3 /*break*/, 17];\n                    case 16:\n                        rollbackError_1 = _c.sent();\n                        return [3 /*break*/, 17];\n                    case 17: throw error_1;\n                    case 18:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 20];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 19:\n                        _c.sent();\n                        _c.label = 20;\n                    case 20:\n                        if (!(this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive)) return [3 /*break*/, 22];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 21:\n                        _c.sent();\n                        _c.label = 22;\n                    case 22: return [7 /*endfinally*/];\n                    case 23: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies INTO which entity's table insertion will be executed.\n     */\n    InsertQueryBuilder.prototype.into = function (entityTarget, columns) {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        var mainAlias = this.createFromAlias(entityTarget);\n        this.expressionMap.setMainAlias(mainAlias);\n        this.expressionMap.insertColumns = columns || [];\n        return this;\n    };\n    /**\n     * Values needs to be inserted into table.\n     */\n    InsertQueryBuilder.prototype.values = function (values) {\n        this.expressionMap.valuesSet = values;\n        return this;\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    InsertQueryBuilder.prototype.output = function (output) {\n        return this.returning(output);\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    InsertQueryBuilder.prototype.returning = function (returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n        this.expressionMap.returning = returning;\n        return this;\n    };\n    /**\n     * Indicates if entity must be updated after insertion operations.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    InsertQueryBuilder.prototype.updateEntity = function (enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    };\n    /**\n     * Adds additional ON CONFLICT statement supported in postgres and cockroach.\n     */\n    InsertQueryBuilder.prototype.onConflict = function (statement) {\n        this.expressionMap.onConflict = statement;\n        return this;\n    };\n    /**\n     * Adds additional ignore statement supported in databases.\n     */\n    InsertQueryBuilder.prototype.orIgnore = function (statement) {\n        if (statement === void 0) { statement = true; }\n        this.expressionMap.onIgnore = statement;\n        return this;\n    };\n    /**\n     * Adds additional update statement supported in databases.\n     */\n    InsertQueryBuilder.prototype.orUpdate = function (statement) {\n        this.expressionMap.onUpdate = {};\n        if (statement && Array.isArray(statement.conflict_target))\n            this.expressionMap.onUpdate.conflict = \" ( \" + statement.conflict_target.join(\", \") + \" ) \";\n        if (statement && typeof statement.conflict_target === \"string\")\n            this.expressionMap.onUpdate.conflict = \" ON CONSTRAINT \" + statement.conflict_target + \" \";\n        if (statement && Array.isArray(statement.columns))\n            this.expressionMap.onUpdate.columns = statement.columns.map(function (column) { return column + \" = :\" + column; }).join(\", \");\n        if (statement && Array.isArray(statement.overwrite)) {\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n                this.expressionMap.onUpdate.overwrite = statement.overwrite.map(function (column) { return column + \" = VALUES(\" + column + \")\"; }).join(\", \");\n            }\n            else if (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof CockroachDriver) {\n                this.expressionMap.onUpdate.overwrite = statement.overwrite.map(function (column) { return column + \" = EXCLUDED.\" + column; }).join(\", \");\n            }\n        }\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates INSERT express used to perform insert query.\n     */\n    InsertQueryBuilder.prototype.createInsertExpression = function () {\n        var tableName = this.getTableName(this.getMainTableName());\n        var valuesExpression = this.createValuesExpression(); // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\n        var returningExpression = this.createReturningExpression();\n        var columnsExpression = this.createColumnNamesExpression();\n        var query = \"INSERT \";\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n            query += \"\" + (this.expressionMap.onIgnore ? \" IGNORE \" : \"\");\n        }\n        query += \"INTO \" + tableName;\n        // add columns expression\n        if (columnsExpression) {\n            query += \"(\" + columnsExpression + \")\";\n        }\n        else {\n            if (!valuesExpression && (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) // special syntax for mysql DEFAULT VALUES insertion\n                query += \"()\";\n        }\n        // add OUTPUT expression\n        if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            query += \" OUTPUT \" + returningExpression;\n        }\n        // add VALUES expression\n        if (valuesExpression) {\n            query += \" VALUES \" + valuesExpression;\n        }\n        else {\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) { // special syntax for mysql DEFAULT VALUES insertion\n                query += \" VALUES ()\";\n            }\n            else {\n                query += \" DEFAULT VALUES\";\n            }\n        }\n        if (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof AbstractSqliteDriver || this.connection.driver instanceof CockroachDriver) {\n            query += \"\" + (this.expressionMap.onIgnore ? \" ON CONFLICT DO NOTHING \" : \"\");\n            query += \"\" + (this.expressionMap.onConflict ? \" ON CONFLICT \" + this.expressionMap.onConflict : \"\");\n            if (this.expressionMap.onUpdate) {\n                var _a = this.expressionMap.onUpdate, overwrite = _a.overwrite, columns = _a.columns, conflict = _a.conflict;\n                query += \"\" + (columns ? \" ON CONFLICT \" + conflict + \" DO UPDATE SET \" + columns : \"\");\n                query += \"\" + (overwrite ? \" ON CONFLICT \" + conflict + \" DO UPDATE SET \" + overwrite : \"\");\n            }\n        }\n        else if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n            if (this.expressionMap.onUpdate) {\n                var _b = this.expressionMap.onUpdate, overwrite = _b.overwrite, columns = _b.columns;\n                query += \"\" + (columns ? \" ON DUPLICATE KEY UPDATE \" + columns : \"\");\n                query += \"\" + (overwrite ? \" ON DUPLICATE KEY UPDATE \" + overwrite : \"\");\n            }\n        }\n        // add RETURNING expression\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            query += \" RETURNING \" + returningExpression;\n        }\n        return query;\n    };\n    /**\n     * Gets list of columns where values must be inserted to.\n     */\n    InsertQueryBuilder.prototype.getInsertedColumns = function () {\n        var _this = this;\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            return [];\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            // if user specified list of columns he wants to insert to, then we filter only them\n            if (_this.expressionMap.insertColumns.length)\n                return _this.expressionMap.insertColumns.indexOf(column.propertyPath) !== -1;\n            // skip columns the user doesn't want included by default\n            if (!column.isInsert) {\n                return false;\n            }\n            // if user did not specified such list then return all columns except auto-increment one\n            // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\n            if (column.isGenerated && column.generationStrategy === \"increment\"\n                && !(_this.connection.driver instanceof OracleDriver)\n                && !(_this.connection.driver instanceof AbstractSqliteDriver)\n                && !(_this.connection.driver instanceof MysqlDriver)\n                && !(_this.connection.driver instanceof AuroraDataApiDriver))\n                return false;\n            return true;\n        });\n    };\n    /**\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\n     */\n    InsertQueryBuilder.prototype.createColumnNamesExpression = function () {\n        var _this = this;\n        var columns = this.getInsertedColumns();\n        if (columns.length > 0)\n            return columns.map(function (column) { return _this.escape(column.databaseName); }).join(\", \");\n        // in the case if there are no insert columns specified and table without metadata used\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\n        if (!this.expressionMap.mainAlias.hasMetadata && !this.expressionMap.insertColumns.length) {\n            var valueSets = this.getValueSets();\n            if (valueSets.length === 1)\n                return Object.keys(valueSets[0]).map(function (columnName) { return _this.escape(columnName); }).join(\", \");\n        }\n        // get a table name and all column database names\n        return this.expressionMap.insertColumns.map(function (columnName) { return _this.escape(columnName); }).join(\", \");\n    };\n    /**\n     * Creates list of values needs to be inserted in the VALUES expression.\n     */\n    InsertQueryBuilder.prototype.createValuesExpression = function () {\n        var _this = this;\n        var valueSets = this.getValueSets();\n        var columns = this.getInsertedColumns();\n        // if column metadatas are given then apply all necessary operations with values\n        if (columns.length > 0) {\n            var expression_1 = \"\";\n            var parametersCount_1 = Object.keys(this.expressionMap.nativeParameters).length;\n            valueSets.forEach(function (valueSet, valueSetIndex) {\n                columns.forEach(function (column, columnIndex) {\n                    if (columnIndex === 0) {\n                        expression_1 += \"(\";\n                    }\n                    var paramName = \"i\" + valueSetIndex + \"_\" + column.databaseName;\n                    // extract real value from the entity\n                    var value = column.getEntityValue(valueSet);\n                    // if column is relational and value is an object then get real referenced column value from this object\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\n                    // and we extract \"1\" from this object\n                    /*if (column.referencedColumn && value instanceof Object && !(value instanceof Function)) { // todo: check if we still need it since getEntityValue already has similar code\n                        value = column.referencedColumn.getEntityValue(value);\n                    }*/\n                    if (!(value instanceof Function)) {\n                        // make sure our value is normalized by a driver\n                        value = _this.connection.driver.preparePersistentValue(value, column);\n                    }\n                    // newly inserted entities always have a version equal to 1 (first version)\n                    // also, user-specified version must be empty\n                    if (column.isVersion && value === undefined) {\n                        expression_1 += \"1\";\n                        // } else if (column.isNestedSetLeft) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                        //\n                        // } else if (column.isNestedSetRight) {\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\n                        //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\n                        //     expression += subQuery;\n                    }\n                    else if (column.isDiscriminator) {\n                        _this.expressionMap.nativeParameters[\"discriminator_value_\" + parametersCount_1] = _this.expressionMap.mainAlias.metadata.discriminatorValue;\n                        expression_1 += _this.connection.driver.createParameter(\"discriminator_value_\" + parametersCount_1, parametersCount_1);\n                        parametersCount_1++;\n                        // return \"1\";\n                        // for create and update dates we insert current date\n                        // no, we don't do it because this constant is already in \"default\" value of the column\n                        // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\n                        // } else if (column.isCreateDate || column.isUpdateDate) {\n                        //     return \"CURRENT_TIMESTAMP\";\n                        // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\n                    }\n                    else if (column.isGenerated && column.generationStrategy === \"uuid\" && !_this.connection.driver.isUUIDGenerationSupported() && value === undefined) {\n                        var paramName_1 = \"uuid_\" + column.databaseName + valueSetIndex;\n                        value = RandomGenerator.uuid4();\n                        _this.expressionMap.nativeParameters[paramName_1] = value;\n                        expression_1 += _this.connection.driver.createParameter(paramName_1, parametersCount_1);\n                        parametersCount_1++;\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if (_this.connection.driver instanceof AbstractSqliteDriver || _this.connection.driver instanceof SapDriver) { // unfortunately sqlite does not support DEFAULT expression in INSERT queries\n                            if (column.default !== undefined) { // try to use default defined in the column\n                                expression_1 += _this.connection.driver.normalizeDefault(column);\n                            }\n                            else {\n                                expression_1 += \"NULL\"; // otherwise simply use NULL and pray if column is nullable\n                            }\n                        }\n                        else {\n                            expression_1 += \"DEFAULT\";\n                        }\n                        // support for SQL expressions in queries\n                    }\n                    else if (value instanceof Function) {\n                        expression_1 += value();\n                        // just any other regular value\n                    }\n                    else {\n                        if (_this.connection.driver instanceof SqlServerDriver)\n                            value = _this.connection.driver.parametrizeValue(column, value);\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\n                        // if (value instanceof Array)\n                        //     value = new ArrayParameter(value);\n                        _this.expressionMap.nativeParameters[paramName] = value;\n                        if ((_this.connection.driver instanceof MysqlDriver || _this.connection.driver instanceof AuroraDataApiDriver) && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            var useLegacy = _this.connection.driver.options.legacySpatialSupport;\n                            var geomFromText = useLegacy ? \"GeomFromText\" : \"ST_GeomFromText\";\n                            if (column.srid != null) {\n                                expression_1 += geomFromText + \"(\" + _this.connection.driver.createParameter(paramName, parametersCount_1) + \", \" + column.srid + \")\";\n                            }\n                            else {\n                                expression_1 += geomFromText + \"(\" + _this.connection.driver.createParameter(paramName, parametersCount_1) + \")\";\n                            }\n                        }\n                        else if (_this.connection.driver instanceof PostgresDriver && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                                expression_1 += \"ST_SetSRID(ST_GeomFromGeoJSON(\" + _this.connection.driver.createParameter(paramName, parametersCount_1) + \"), \" + column.srid + \")::\" + column.type;\n                            }\n                            else {\n                                expression_1 += \"ST_GeomFromGeoJSON(\" + _this.connection.driver.createParameter(paramName, parametersCount_1) + \")::\" + column.type;\n                            }\n                        }\n                        else if (_this.connection.driver instanceof SqlServerDriver && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression_1 += column.type + \"::STGeomFromText(\" + _this.connection.driver.createParameter(paramName, parametersCount_1) + \", \" + (column.srid || \"0\") + \")\";\n                        }\n                        else {\n                            expression_1 += _this.connection.driver.createParameter(paramName, parametersCount_1);\n                        }\n                        parametersCount_1++;\n                    }\n                    if (columnIndex === columns.length - 1) {\n                        if (valueSetIndex === valueSets.length - 1) {\n                            expression_1 += \")\";\n                        }\n                        else {\n                            expression_1 += \"), \";\n                        }\n                    }\n                    else {\n                        expression_1 += \", \";\n                    }\n                });\n            });\n            if (expression_1 === \"()\")\n                return \"\";\n            return expression_1;\n        }\n        else { // for tables without metadata\n            // get values needs to be inserted\n            var expression_2 = \"\";\n            var parametersCount_2 = Object.keys(this.expressionMap.nativeParameters).length;\n            valueSets.forEach(function (valueSet, insertionIndex) {\n                var columns = Object.keys(valueSet);\n                columns.forEach(function (columnName, columnIndex) {\n                    if (columnIndex === 0) {\n                        expression_2 += \"(\";\n                    }\n                    var paramName = \"i\" + insertionIndex + \"_\" + columnName;\n                    var value = valueSet[columnName];\n                    // support for SQL expressions in queries\n                    if (value instanceof Function) {\n                        expression_2 += value();\n                        // if value for this column was not provided then insert default value\n                    }\n                    else if (value === undefined) {\n                        if (_this.connection.driver instanceof AbstractSqliteDriver || _this.connection.driver instanceof SapDriver) {\n                            expression_2 += \"NULL\";\n                        }\n                        else {\n                            expression_2 += \"DEFAULT\";\n                        }\n                        // just any other regular value\n                    }\n                    else {\n                        _this.expressionMap.nativeParameters[paramName] = value;\n                        expression_2 += _this.connection.driver.createParameter(paramName, parametersCount_2);\n                        parametersCount_2++;\n                    }\n                    if (columnIndex === Object.keys(valueSet).length - 1) {\n                        if (insertionIndex === valueSets.length - 1) {\n                            expression_2 += \")\";\n                        }\n                        else {\n                            expression_2 += \"), \";\n                        }\n                    }\n                    else {\n                        expression_2 += \", \";\n                    }\n                });\n            });\n            if (expression_2 === \"()\")\n                return \"\";\n            return expression_2;\n        }\n    };\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    InsertQueryBuilder.prototype.getValueSets = function () {\n        if (Array.isArray(this.expressionMap.valuesSet) && this.expressionMap.valuesSet.length > 0)\n            return this.expressionMap.valuesSet;\n        if (this.expressionMap.valuesSet instanceof Object)\n            return [this.expressionMap.valuesSet];\n        throw new InsertValuesMissingError();\n    };\n    return InsertQueryBuilder;\n}(QueryBuilder));\nexport { InsertQueryBuilder };\n\n//# sourceMappingURL=InsertQueryBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryBuilderUtils } from \"./QueryBuilderUtils\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Stores all join attributes which will be used to build a JOIN query.\n */\nvar JoinAttribute = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function JoinAttribute(connection, queryExpressionMap, joinAttribute) {\n        this.connection = connection;\n        this.queryExpressionMap = queryExpressionMap;\n        this.isSelectedEvaluated = false;\n        this.relationEvaluated = false;\n        ObjectUtils.assign(this, joinAttribute || {});\n    }\n    Object.defineProperty(JoinAttribute.prototype, \"isMany\", {\n        // -------------------------------------------------------------------------\n        // Public Methods\n        // -------------------------------------------------------------------------\n        get: function () {\n            if (this.isMappingMany !== undefined)\n                return this.isMappingMany;\n            if (this.relation)\n                return this.relation.isManyToMany || this.relation.isOneToMany;\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"isSelected\", {\n        /**\n         * Indicates if this join is selected.\n         */\n        get: function () {\n            var _this = this;\n            if (!this.isSelectedEvaluated) {\n                var getValue = function () {\n                    var e_1, _a;\n                    var _loop_1 = function (select) {\n                        if (select.selection === _this.alias.name)\n                            return { value: true };\n                        if (_this.metadata && !!_this.metadata.columns.find(function (column) { return select.selection === _this.alias.name + \".\" + column.propertyPath; }))\n                            return { value: true };\n                    };\n                    try {\n                        for (var _b = tslib_1.__values(_this.queryExpressionMap.selects), _c = _b.next(); !_c.done; _c = _b.next()) {\n                            var select = _c.value;\n                            var state_1 = _loop_1(select);\n                            if (typeof state_1 === \"object\")\n                                return state_1.value;\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    return false;\n                };\n                this.isSelectedCache = getValue();\n                this.isSelectedEvaluated = true;\n            }\n            return this.isSelectedCache;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"tablePath\", {\n        /**\n         * Name of the table which we should join.\n         */\n        get: function () {\n            return this.metadata ? this.metadata.tablePath : this.entityOrProperty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"parentAlias\", {\n        /**\n         * Alias of the parent of this join.\n         * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n         * This value is extracted from entityOrProperty value.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n                return undefined;\n            return this.entityOrProperty.substr(0, this.entityOrProperty.indexOf(\".\"));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"relationPropertyPath\", {\n        /**\n         * Relation property name of the parent.\n         * This is used to understand what is joined.\n         * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n         * This value is extracted from entityOrProperty value.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\n                return undefined;\n            return this.entityOrProperty.substr(this.entityOrProperty.indexOf(\".\") + 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"relation\", {\n        /**\n         * Relation of the parent.\n         * This is used to understand what is joined.\n         * This is available when join was made using \"post.category\" syntax.\n         * Relation can be undefined if entityOrProperty is regular entity or custom table.\n         */\n        get: function () {\n            var _this = this;\n            if (!this.relationEvaluated) {\n                var getValue = function () {\n                    if (!QueryBuilderUtils.isAliasProperty(_this.entityOrProperty))\n                        return undefined;\n                    var relationOwnerSelection = _this.queryExpressionMap.findAliasByName(_this.parentAlias);\n                    var relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(_this.relationPropertyPath);\n                    if (relation) {\n                        return relation;\n                    }\n                    if (relationOwnerSelection.metadata.parentEntityMetadata) {\n                        relation = relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(_this.relationPropertyPath);\n                        if (relation) {\n                            return relation;\n                        }\n                    }\n                    throw new Error(\"Relation with property path \" + _this.relationPropertyPath + \" in entity was not found.\");\n                };\n                this.relationCache = getValue.bind(this)();\n                this.relationEvaluated = true;\n            }\n            return this.relationCache;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"metadata\", {\n        /**\n         * Metadata of the joined entity.\n         * If table without entity was joined, then it will return undefined.\n         */\n        get: function () {\n            // entityOrProperty is relation, e.g. \"post.category\"\n            if (this.relation)\n                return this.relation.inverseEntityMetadata;\n            // entityOrProperty is Entity class\n            if (this.connection.hasMetadata(this.entityOrProperty))\n                return this.connection.getMetadata(this.entityOrProperty);\n            return undefined;\n            /*if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\n    \n                // first try to find entity with such name, this is needed when entity does not have a target class,\n                // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\n                const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\n                if (metadata)\n                    return metadata;\n    \n                // check if we have entity with such table name, and use its metadata if found\n                return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\n            }*/\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"junctionAlias\", {\n        /**\n         * Generates alias of junction table, whose ids we get.\n         */\n        get: function () {\n            if (!this.relation)\n                throw new Error(\"Cannot get junction table for join without relation.\");\n            return this.relation.isOwning ? this.parentAlias + \"_\" + this.alias.name : this.alias.name + \"_\" + this.parentAlias;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"mapToPropertyParentAlias\", {\n        get: function () {\n            if (!this.mapToProperty)\n                return undefined;\n            return this.mapToProperty.split(\".\")[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(JoinAttribute.prototype, \"mapToPropertyPropertyName\", {\n        get: function () {\n            if (!this.mapToProperty)\n                return undefined;\n            return this.mapToProperty.split(\".\")[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return JoinAttribute;\n}());\nexport { JoinAttribute };\n\n//# sourceMappingURL=JoinAttribute.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryExpressionMap } from \"./QueryExpressionMap\";\nimport { Brackets } from \"./Brackets\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { EntitySchema } from \"../\";\nimport { FindOperator } from \"../find-options/FindOperator\";\nimport { In } from \"../find-options/operator/In\";\nimport { EntityColumnNotFound } from \"../error/EntityColumnNotFound\";\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar QueryBuilder = /** @class */ (function () {\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    function QueryBuilder(connectionOrQueryBuilder, queryRunner) {\n        if (connectionOrQueryBuilder instanceof QueryBuilder) {\n            this.connection = connectionOrQueryBuilder.connection;\n            this.queryRunner = connectionOrQueryBuilder.queryRunner;\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();\n        }\n        else {\n            this.connection = connectionOrQueryBuilder;\n            this.queryRunner = queryRunner;\n            this.expressionMap = new QueryExpressionMap(this.connection);\n        }\n    }\n    Object.defineProperty(QueryBuilder.prototype, \"alias\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Gets the main alias string used in this query builder.\n         */\n        get: function () {\n            if (!this.expressionMap.mainAlias)\n                throw new Error(\"Main alias is not set\"); // todo: better exception\n            return this.expressionMap.mainAlias.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    QueryBuilder.prototype.select = function (selection, selectionAliasName) {\n        this.expressionMap.queryType = \"select\";\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map(function (selection) { return ({ selection: selection }); });\n        }\n        else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n        // loading it dynamically because of circular issue\n        var SelectQueryBuilderCls = require(\"./SelectQueryBuilder\").SelectQueryBuilder;\n        if (this instanceof SelectQueryBuilderCls)\n            return this;\n        return new SelectQueryBuilderCls(this);\n    };\n    /**\n     * Creates INSERT query.\n     */\n    QueryBuilder.prototype.insert = function () {\n        this.expressionMap.queryType = \"insert\";\n        // loading it dynamically because of circular issue\n        var InsertQueryBuilderCls = require(\"./InsertQueryBuilder\").InsertQueryBuilder;\n        if (this instanceof InsertQueryBuilderCls)\n            return this;\n        return new InsertQueryBuilderCls(this);\n    };\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    QueryBuilder.prototype.update = function (entityOrTableNameUpdateSet, maybeUpdateSet) {\n        var updateSet = maybeUpdateSet ? maybeUpdateSet : entityOrTableNameUpdateSet;\n        entityOrTableNameUpdateSet = entityOrTableNameUpdateSet instanceof EntitySchema ? entityOrTableNameUpdateSet.options.name : entityOrTableNameUpdateSet;\n        if (entityOrTableNameUpdateSet instanceof Function || typeof entityOrTableNameUpdateSet === \"string\") {\n            var mainAlias = this.createFromAlias(entityOrTableNameUpdateSet);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        this.expressionMap.queryType = \"update\";\n        this.expressionMap.valuesSet = updateSet;\n        // loading it dynamically because of circular issue\n        var UpdateQueryBuilderCls = require(\"./UpdateQueryBuilder\").UpdateQueryBuilder;\n        if (this instanceof UpdateQueryBuilderCls)\n            return this;\n        return new UpdateQueryBuilderCls(this);\n    };\n    /**\n     * Creates DELETE query.\n     */\n    QueryBuilder.prototype.delete = function () {\n        this.expressionMap.queryType = \"delete\";\n        // loading it dynamically because of circular issue\n        var DeleteQueryBuilderCls = require(\"./DeleteQueryBuilder\").DeleteQueryBuilder;\n        if (this instanceof DeleteQueryBuilderCls)\n            return this;\n        return new DeleteQueryBuilderCls(this);\n    };\n    QueryBuilder.prototype.softDelete = function () {\n        this.expressionMap.queryType = \"soft-delete\";\n        // loading it dynamically because of circular issue\n        var SoftDeleteQueryBuilderCls = require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder;\n        if (this instanceof SoftDeleteQueryBuilderCls)\n            return this;\n        return new SoftDeleteQueryBuilderCls(this);\n    };\n    QueryBuilder.prototype.restore = function () {\n        this.expressionMap.queryType = \"restore\";\n        // loading it dynamically because of circular issue\n        var SoftDeleteQueryBuilderCls = require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder;\n        if (this instanceof SoftDeleteQueryBuilderCls)\n            return this;\n        return new SoftDeleteQueryBuilderCls(this);\n    };\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    QueryBuilder.prototype.relation = function (entityTargetOrPropertyPath, maybePropertyPath) {\n        var entityTarget = arguments.length === 2 ? entityTargetOrPropertyPath : undefined;\n        var propertyPath = arguments.length === 2 ? maybePropertyPath : entityTargetOrPropertyPath;\n        this.expressionMap.queryType = \"relation\";\n        this.expressionMap.relationPropertyPath = propertyPath;\n        if (entityTarget) {\n            var mainAlias = this.createFromAlias(entityTarget);\n            this.expressionMap.setMainAlias(mainAlias);\n        }\n        // loading it dynamically because of circular issue\n        var RelationQueryBuilderCls = require(\"./RelationQueryBuilder\").RelationQueryBuilder;\n        if (this instanceof RelationQueryBuilderCls)\n            return this;\n        return new RelationQueryBuilderCls(this);\n    };\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    QueryBuilder.prototype.hasRelation = function (target, relation) {\n        var entityMetadata = this.connection.getMetadata(target);\n        var relations = Array.isArray(relation) ? relation : [relation];\n        return relations.every(function (relation) {\n            return !!entityMetadata.findRelationWithPropertyPath(relation);\n        });\n    };\n    /**\n     * Sets parameter name and its value.\n     */\n    QueryBuilder.prototype.setParameter = function (key, value) {\n        this.expressionMap.parameters[key] = value;\n        return this;\n    };\n    /**\n     * Adds all parameters from the given object.\n     */\n    QueryBuilder.prototype.setParameters = function (parameters) {\n        var _this = this;\n        // remove function parameters\n        Object.keys(parameters).forEach(function (key) {\n            if (parameters[key] instanceof Function) {\n                throw new Error(\"Function parameter isn't supported in the parameters. Please check \\\"\" + key + \"\\\" parameter.\");\n            }\n        });\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setParameters(parameters);\n        Object.keys(parameters).forEach(function (key) { return _this.setParameter(key, parameters[key]); });\n        return this;\n    };\n    /**\n     * Adds native parameters from the given object.\n     */\n    QueryBuilder.prototype.setNativeParameters = function (parameters) {\n        var _this = this;\n        // set parent query builder parameters as well in sub-query mode\n        if (this.expressionMap.parentQueryBuilder)\n            this.expressionMap.parentQueryBuilder.setNativeParameters(parameters);\n        Object.keys(parameters).forEach(function (key) {\n            _this.expressionMap.nativeParameters[key] = parameters[key];\n        });\n        return this;\n    };\n    /**\n     * Gets all parameters.\n     */\n    QueryBuilder.prototype.getParameters = function () {\n        var parameters = Object.assign({}, this.expressionMap.parameters);\n        // add discriminator column parameter if it exist\n        if (this.expressionMap.mainAlias && this.expressionMap.mainAlias.hasMetadata) {\n            var metadata = this.expressionMap.mainAlias.metadata;\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                var values = metadata.childEntityMetadatas\n                    .filter(function (childMetadata) { return childMetadata.discriminatorColumn; })\n                    .map(function (childMetadata) { return childMetadata.discriminatorValue; });\n                values.push(metadata.discriminatorValue);\n                parameters[\"discriminatorColumnValues\"] = values;\n            }\n        }\n        return parameters;\n    };\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    QueryBuilder.prototype.printSql = function () {\n        var _a = tslib_1.__read(this.getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n        this.connection.logger.logQuery(query, parameters);\n        return this;\n    };\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    QueryBuilder.prototype.getSql = function () {\n        return this.getQueryAndParameters()[0];\n    };\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    QueryBuilder.prototype.getQueryAndParameters = function () {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        var query = this.getQuery();\n        var parameters = this.getParameters();\n        return this.connection.driver.escapeQueryWithParameters(query, parameters, this.expressionMap.nativeParameters);\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    QueryBuilder.prototype.execute = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, sql, parameters, queryRunner;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = tslib_1.__read(this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];\n                        queryRunner = this.obtainQueryRunner();\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, , 3, 8]);\n                        return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 2: return [2 /*return*/, _b.sent()]; // await is needed here because we are using finally\n                    case 3:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        if (!(this.connection.driver instanceof SqljsDriver)) return [3 /*break*/, 7];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 6:\n                        _b.sent();\n                        _b.label = 7;\n                    case 7: return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    QueryBuilder.prototype.createQueryBuilder = function () {\n        return new this.constructor(this.connection, this.queryRunner);\n    };\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    QueryBuilder.prototype.clone = function () {\n        return new this.constructor(this);\n    };\n    /**\n     * Disables escaping.\n     */\n    QueryBuilder.prototype.disableEscaping = function () {\n        this.expressionMap.disableEscaping = false;\n        return this;\n    };\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    QueryBuilder.prototype.escape = function (name) {\n        if (!this.expressionMap.disableEscaping)\n            return name;\n        return this.connection.driver.escape(name);\n    };\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    QueryBuilder.prototype.setQueryRunner = function (queryRunner) {\n        this.queryRunner = queryRunner;\n        return this;\n    };\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    QueryBuilder.prototype.callListeners = function (enabled) {\n        this.expressionMap.callListeners = enabled;\n        return this;\n    };\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    QueryBuilder.prototype.useTransaction = function (enabled) {\n        this.expressionMap.useTransaction = enabled;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    QueryBuilder.prototype.getTableName = function (tablePath) {\n        var _this = this;\n        return tablePath.split(\".\")\n            .map(function (i) {\n            // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return _this.escape(i);\n        }).join(\".\");\n    };\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    QueryBuilder.prototype.getMainTableName = function () {\n        if (!this.expressionMap.mainAlias)\n            throw new Error(\"Entity where values should be inserted is not specified. Call \\\"qb.into(entity)\\\" method to specify it.\");\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath;\n        return this.expressionMap.mainAlias.tablePath;\n    };\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    QueryBuilder.prototype.createFromAlias = function (entityTarget, aliasName) {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            var metadata = this.connection.getMetadata(entityTarget);\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath\n            });\n        }\n        else {\n            var subQuery = \"\";\n            if (entityTarget instanceof Function) {\n                var subQueryBuilder = entityTarget(this.subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n            }\n            else {\n                subQuery = entityTarget;\n            }\n            var isSubQuery = entityTarget instanceof Function || entityTarget.substr(0, 1) === \"(\" && entityTarget.substr(-1) === \")\";\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                tablePath: isSubQuery === false ? entityTarget : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    };\n    /**\n     * Replaces all entity's propertyName to name in the given statement.\n     */\n    QueryBuilder.prototype.replacePropertyNames = function (statement) {\n        var _this = this;\n        this.expressionMap.aliases.forEach(function (alias) {\n            if (!alias.hasMetadata)\n                return;\n            var replaceAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? alias.name + \"\\\\.\" : \"\";\n            var replacementAliasNamePrefix = _this.expressionMap.aliasNamePrefixingEnabled ? _this.escape(alias.name) + \".\" : \"\";\n            alias.metadata.columns.forEach(function (column) {\n                var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(column.databaseName) + \"$2\");\n                var expression2 = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + column.propertyName + \"([ =\\)\\,]|.{0}$)\";\n                statement = statement.replace(new RegExp(expression2, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(column.databaseName) + \"$2\");\n            });\n            alias.metadata.relations.forEach(function (relation) {\n                tslib_1.__spread(relation.joinColumns, relation.inverseJoinColumns).forEach(function (joinColumn) {\n                    var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"\\\\.\" + joinColumn.referencedColumn.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(joinColumn.databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                });\n                if (relation.joinColumns.length > 0) {\n                    var expression = \"([ =\\(]|^.{0})\" + replaceAliasNamePrefix + relation.propertyPath + \"([ =\\)\\,]|.{0}$)\";\n                    statement = statement.replace(new RegExp(expression, \"gm\"), \"$1\" + replacementAliasNamePrefix + _this.escape(relation.joinColumns[0].databaseName) + \"$2\"); // todo: fix relation.joinColumns[0], what if multiple columns\n                }\n            });\n        });\n        return statement;\n    };\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    QueryBuilder.prototype.createWhereExpression = function () {\n        var conditions = this.createWhereExpressionString();\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            var metadata = this.expressionMap.mainAlias.metadata;\n            // Adds the global condition of \"non-deleted\" for the entity with delete date columns in select query.\n            if (this.expressionMap.queryType === \"select\" && !this.expressionMap.withDeleted && metadata.deleteDateColumn) {\n                var column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias.name + \".\" + metadata.deleteDateColumn.propertyName\n                    : metadata.deleteDateColumn.propertyName;\n                var condition = this.replacePropertyNames(column) + \" IS NULL\";\n                conditions = (conditions.length ? \"(\" + conditions + \") AND\" : \"\") + \" \" + condition;\n            }\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                var column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias.name + \".\" + metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName;\n                var condition = this.replacePropertyNames(column) + \" IN (:...discriminatorColumnValues)\";\n                return \" WHERE \" + (conditions.length ? \"(\" + conditions + \") AND\" : \"\") + \" \" + condition;\n            }\n        }\n        if (!conditions.length) // TODO copy in to discriminator condition\n            return this.expressionMap.extraAppendedAndWhereCondition ? \" WHERE \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition) : \"\";\n        if (this.expressionMap.extraAppendedAndWhereCondition)\n            return \" WHERE (\" + conditions + \") AND \" + this.replacePropertyNames(this.expressionMap.extraAppendedAndWhereCondition);\n        return \" WHERE \" + conditions;\n    };\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    QueryBuilder.prototype.createReturningExpression = function () {\n        var _this = this;\n        var columns = this.getReturningColumns();\n        var driver = this.connection.driver;\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported()) {\n            columns.push.apply(columns, tslib_1.__spread(this.expressionMap.extraReturningColumns.filter(function (column) {\n                return columns.indexOf(column) === -1;\n            })));\n        }\n        if (columns.length) {\n            var columnsExpression = columns.map(function (column) {\n                var name = _this.escape(column.databaseName);\n                if (driver instanceof SqlServerDriver) {\n                    if (_this.expressionMap.queryType === \"insert\" || _this.expressionMap.queryType === \"update\" || _this.expressionMap.queryType === \"soft-delete\" || _this.expressionMap.queryType === \"restore\") {\n                        return \"INSERTED.\" + name;\n                    }\n                    else {\n                        return _this.escape(_this.getMainTableName()) + \".\" + name;\n                    }\n                }\n                else {\n                    return name;\n                }\n            }).join(\", \");\n            if (driver instanceof OracleDriver) {\n                columnsExpression += \" INTO \" + columns.map(function (column) {\n                    var parameterName = \"output_\" + column.databaseName;\n                    _this.expressionMap.nativeParameters[parameterName] = { type: driver.columnTypeToNativeParameter(column.type), dir: driver.oracle.BIND_OUT };\n                    return _this.connection.driver.createParameter(parameterName, Object.keys(_this.expressionMap.nativeParameters).length);\n                }).join(\", \");\n            }\n            if (driver instanceof SqlServerDriver) {\n                if (this.expressionMap.queryType === \"insert\" || this.expressionMap.queryType === \"update\") {\n                    columnsExpression += \" INTO @OutputTable\";\n                }\n            }\n            return columnsExpression;\n        }\n        else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning;\n        }\n        return \"\";\n    };\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    QueryBuilder.prototype.getReturningColumns = function () {\n        var _this = this;\n        var columns = [];\n        if (Array.isArray(this.expressionMap.returning)) {\n            this.expressionMap.returning.forEach(function (columnName) {\n                if (_this.expressionMap.mainAlias.hasMetadata) {\n                    columns.push.apply(columns, tslib_1.__spread(_this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(columnName)));\n                }\n            });\n        }\n        return columns;\n    };\n    /**\n     * Concatenates all added where expressions into one string.\n     */\n    QueryBuilder.prototype.createWhereExpressionString = function () {\n        var _this = this;\n        return this.expressionMap.wheres.map(function (where, index) {\n            switch (where.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + _this.replacePropertyNames(where.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + _this.replacePropertyNames(where.condition);\n                default:\n                    return _this.replacePropertyNames(where.condition);\n            }\n        }).join(\" \");\n    };\n    /**\n     * Creates \"WHERE\" expression and variables for the given \"ids\".\n     */\n    QueryBuilder.prototype.createWhereIdsExpression = function (ids) {\n        var _this = this;\n        var _a;\n        var metadata = this.expressionMap.mainAlias.metadata;\n        var normalized = (Array.isArray(ids) ? ids : [ids]).map(function (id) { return metadata.ensureEntityIdMap(id); });\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys\n            && metadata.embeddeds.length === 0) {\n            var primaryColumn_1 = metadata.primaryColumns[0];\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            if (!primaryColumn_1.transformer) {\n                return this.computeWhereParameter((_a = {},\n                    _a[primaryColumn_1.propertyName] = In(normalized.map(function (id) { return primaryColumn_1.getEntityValue(id, false); })),\n                    _a));\n            }\n        }\n        // create shortcuts for better readability\n        var alias = this.expressionMap.aliasNamePrefixingEnabled ? this.escape(this.expressionMap.mainAlias.name) + \".\" : \"\";\n        var parameterIndex = Object.keys(this.expressionMap.nativeParameters).length;\n        var whereStrings = normalized.map(function (id, index) {\n            var whereSubStrings = [];\n            metadata.primaryColumns.forEach(function (primaryColumn, secondIndex) {\n                var parameterName = \"id_\" + index + \"_\" + secondIndex;\n                // whereSubStrings.push(alias + this.escape(primaryColumn.databaseName) + \"=:id_\" + index + \"_\" + secondIndex);\n                whereSubStrings.push(alias + _this.escape(primaryColumn.databaseName) + \" = \" + _this.connection.driver.createParameter(parameterName, parameterIndex));\n                _this.expressionMap.nativeParameters[parameterName] = primaryColumn.getEntityValue(id, true);\n                parameterIndex++;\n            });\n            return whereSubStrings.join(\" AND \");\n        });\n        return whereStrings.length > 1\n            ? \"(\" + whereStrings.map(function (whereString) { return \"(\" + whereString + \")\"; }).join(\" OR \") + \")\"\n            : whereStrings[0];\n    };\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    QueryBuilder.prototype.computeWhereParameter = function (where) {\n        var _this = this;\n        if (typeof where === \"string\")\n            return where;\n        if (where instanceof Brackets) {\n            var whereQueryBuilder = this.createQueryBuilder();\n            where.whereFactory(whereQueryBuilder);\n            var whereString = whereQueryBuilder.createWhereExpressionString();\n            this.setParameters(whereQueryBuilder.getParameters());\n            return whereString ? \"(\" + whereString + \")\" : \"\";\n        }\n        else if (where instanceof Function) {\n            return where(this);\n        }\n        else if (where instanceof Object) {\n            var wheres = Array.isArray(where) ? where : [where];\n            var andConditions = void 0;\n            var parameterIndex_1 = Object.keys(this.expressionMap.nativeParameters).length;\n            if (this.expressionMap.mainAlias.hasMetadata) {\n                andConditions = wheres.map(function (where, whereIndex) {\n                    var propertyPaths = EntityMetadata.createPropertyPath(_this.expressionMap.mainAlias.metadata, where);\n                    return propertyPaths.map(function (propertyPath, propertyIndex) {\n                        var columns = _this.expressionMap.mainAlias.metadata.findColumnsWithPropertyPath(propertyPath);\n                        if (!columns.length) {\n                            throw new EntityColumnNotFound(propertyPath);\n                        }\n                        return columns.map(function (column, columnIndex) {\n                            var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + \".\" + propertyPath : column.propertyPath;\n                            var parameterValue = column.getEntityValue(where, true);\n                            var parameterName = \"where_\" + whereIndex + \"_\" + propertyIndex + \"_\" + columnIndex;\n                            var parameterBaseCount = Object.keys(_this.expressionMap.nativeParameters).filter(function (x) { return x.startsWith(parameterName); }).length;\n                            if (parameterValue === null) {\n                                return aliasPath + \" IS NULL\";\n                            }\n                            else if (parameterValue instanceof FindOperator) {\n                                var parameters_1 = [];\n                                if (parameterValue.useParameter) {\n                                    var realParameterValues = parameterValue.multipleParameters ? parameterValue.value : [parameterValue.value];\n                                    realParameterValues.forEach(function (realParameterValue, realParameterValueIndex) {\n                                        _this.expressionMap.nativeParameters[parameterName + (parameterBaseCount + realParameterValueIndex)] = realParameterValue;\n                                        parameterIndex_1++;\n                                        parameters_1.push(_this.connection.driver.createParameter(parameterName + (parameterBaseCount + realParameterValueIndex), parameterIndex_1 - 1));\n                                    });\n                                }\n                                return parameterValue.toSql(_this.connection, aliasPath, parameters_1);\n                            }\n                            else {\n                                _this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                                parameterIndex_1++;\n                                var parameter = _this.connection.driver.createParameter(parameterName, parameterIndex_1 - 1);\n                                return aliasPath + \" = \" + parameter;\n                            }\n                        }).filter(function (expression) { return !!expression; }).join(\" AND \");\n                    }).filter(function (expression) { return !!expression; }).join(\" AND \");\n                });\n            }\n            else {\n                andConditions = wheres.map(function (where, whereIndex) {\n                    return Object.keys(where).map(function (key, parameterIndex) {\n                        var parameterValue = where[key];\n                        var aliasPath = _this.expressionMap.aliasNamePrefixingEnabled ? _this.alias + \".\" + key : key;\n                        if (parameterValue === null) {\n                            return aliasPath + \" IS NULL\";\n                        }\n                        else {\n                            var parameterName = \"where_\" + whereIndex + \"_\" + parameterIndex;\n                            _this.expressionMap.nativeParameters[parameterName] = parameterValue;\n                            parameterIndex++;\n                            return aliasPath + \" = \" + _this.connection.driver.createParameter(parameterName, parameterIndex - 1);\n                        }\n                    }).join(\" AND \");\n                });\n            }\n            if (andConditions.length > 1)\n                return andConditions.map(function (where) { return \"(\" + where + \")\"; }).join(\" OR \");\n            return andConditions.join(\"\");\n        }\n        return \"\";\n    };\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    QueryBuilder.prototype.obtainQueryRunner = function () {\n        return this.queryRunner || this.connection.createQueryRunner(\"master\");\n    };\n    return QueryBuilder;\n}());\nexport { QueryBuilder };\n\n//# sourceMappingURL=QueryBuilder.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Helper utility functions for QueryBuilder.\n */\nvar QueryBuilderUtils = /** @class */ (function () {\n    function QueryBuilderUtils() {\n    }\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    QueryBuilderUtils.isAliasProperty = function (str) {\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1)\n            return false;\n        // extra alias and its property relation\n        var _a = tslib_1.__read(str.split(\".\"), 2), aliasName = _a[0], propertyName = _a[1]; // todo: what about relations in embedded?\n        if (!aliasName || !propertyName)\n            return false;\n        // alias and property must be represented in a special format\n        // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n        //     return false;\n        // make sure string is not a subquery\n        if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1)\n            return false;\n        return true;\n    };\n    return QueryBuilderUtils;\n}());\nexport { QueryBuilderUtils };\n\n//# sourceMappingURL=QueryBuilderUtils.js.map\n","import * as tslib_1 from \"tslib\";\nimport { Alias } from \"./Alias\";\nimport { JoinAttribute } from \"./JoinAttribute\";\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\n/**\n * Contains all properties of the QueryBuilder that needs to be build a final query.\n */\nvar QueryExpressionMap = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function QueryExpressionMap(connection) {\n        this.connection = connection;\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if QueryBuilder used to select entities and not a raw results.\n         */\n        this.queryEntity = false;\n        /**\n         * All aliases (including main alias) used in the query.\n         */\n        this.aliases = [];\n        /**\n         * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\n         */\n        this.queryType = \"select\";\n        /**\n         * Data needs to be SELECT-ed.\n         */\n        this.selects = [];\n        /**\n         * Whether SELECT is DISTINCT.\n         */\n        this.selectDistinct = false;\n        /**\n         * SELECT DISTINCT ON query (postgres).\n         */\n        this.selectDistinctOn = [];\n        /**\n         * Extra returning columns to be added to the returning statement if driver supports it.\n         */\n        this.extraReturningColumns = [];\n        /**\n         * Optional on conflict statement used in insertion query in postgres.\n         */\n        this.onConflict = \"\";\n        /**\n         * Optional on ignore statement used in insertion query in databases.\n         */\n        this.onIgnore = false;\n        /**\n         * JOIN queries.\n         */\n        this.joinAttributes = [];\n        /**\n         * RelationId queries.\n         */\n        this.relationIdAttributes = [];\n        /**\n         * Relation count queries.\n         */\n        this.relationCountAttributes = [];\n        /**\n         * WHERE queries.\n         */\n        this.wheres = [];\n        /**\n         * HAVING queries.\n         */\n        this.havings = [];\n        /**\n         * ORDER BY queries.\n         */\n        this.orderBys = {};\n        /**\n         * GROUP BY queries.\n         */\n        this.groupBys = [];\n        /**\n         * Indicates if soft-deleted rows should be included in entity result.\n         * By default the soft-deleted rows are not included.\n         */\n        this.withDeleted = false;\n        /**\n         * Parameters used to be escaped in final query.\n         */\n        this.parameters = {};\n        /**\n         * Indicates if alias, table names and column names will be ecaped by driver, or not.\n         *\n         * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\n         */\n        this.disableEscaping = true;\n        /**\n         * Indicates if virtual columns should be included in entity result.\n         *\n         * todo: what to do with it? is it properly used? what about persistence?\n         */\n        this.enableRelationIdValues = false;\n        /**\n         * Extra where condition appended to the end of original where conditions with AND keyword.\n         * Original condition will be wrapped into brackets.\n         */\n        this.extraAppendedAndWhereCondition = \"\";\n        /**\n         * Indicates if query builder creates a subquery.\n         */\n        this.subQuery = false;\n        /**\n         * Indicates if property names are prefixed with alias names during property replacement.\n         * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\n         * but user can use them in WHERE expressions.\n         */\n        this.aliasNamePrefixingEnabled = true;\n        /**\n         * Indicates if query result cache is enabled or not.\n         */\n        this.cache = false;\n        /**\n         * Options that define QueryBuilder behaviour.\n         */\n        this.options = [];\n        /**\n         * List of columns where data should be inserted.\n         * Used in INSERT query.\n         */\n        this.insertColumns = [];\n        /**\n         * Used if user wants to update or delete a specific entities.\n         */\n        this.whereEntities = [];\n        /**\n         * Indicates if entity must be updated after insertion / updation.\n         * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n         */\n        this.updateEntity = true;\n        /**\n         * Indicates if listeners and subscribers must be called before and after query execution.\n         */\n        this.callListeners = true;\n        /**\n         * Indicates if query must be wrapped into transaction.\n         */\n        this.useTransaction = false;\n        /**\n         * Extra parameters.\n         * Used in InsertQueryBuilder to avoid default parameters mechanizm and execute high performance insertions.\n         */\n        this.nativeParameters = {};\n    }\n    Object.defineProperty(QueryExpressionMap.prototype, \"allOrderBys\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Get all ORDER BY queries - if order by is specified by user then it uses them,\n         * otherwise it uses default entity order by if it was set.\n         */\n        get: function () {\n            var _this = this;\n            if (!Object.keys(this.orderBys).length && this.mainAlias.hasMetadata && this.options.indexOf(\"disable-global-order\") === -1) {\n                var entityOrderBy_1 = this.mainAlias.metadata.orderBy || {};\n                return Object.keys(entityOrderBy_1).reduce(function (orderBy, key) {\n                    orderBy[_this.mainAlias.name + \".\" + key] = entityOrderBy_1[key];\n                    return orderBy;\n                }, {});\n            }\n            return this.orderBys;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a main alias and adds it to the current expression map.\n     */\n    QueryExpressionMap.prototype.setMainAlias = function (alias) {\n        // if main alias is already set then remove it from the array\n        // if (this.mainAlias)\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\n        // set new main alias\n        this.mainAlias = alias;\n        return alias;\n    };\n    /**\n     * Creates a new alias and adds it to the current expression map.\n     */\n    QueryExpressionMap.prototype.createAlias = function (options) {\n        var aliasName = options.name;\n        if (!aliasName && options.tablePath)\n            aliasName = options.tablePath;\n        if (!aliasName && options.target instanceof Function)\n            aliasName = options.target.name;\n        if (!aliasName && typeof options.target === \"string\")\n            aliasName = options.target;\n        var alias = new Alias();\n        alias.type = options.type;\n        if (aliasName)\n            alias.name = aliasName;\n        if (options.metadata)\n            alias.metadata = options.metadata;\n        if (options.target && !alias.hasMetadata)\n            alias.metadata = this.connection.getMetadata(options.target);\n        if (options.tablePath)\n            alias.tablePath = options.tablePath;\n        if (options.subQuery)\n            alias.subQuery = options.subQuery;\n        this.aliases.push(alias);\n        return alias;\n    };\n    /**\n     * Finds alias with the given name.\n     * If alias was not found it throw an exception.\n     */\n    QueryExpressionMap.prototype.findAliasByName = function (aliasName) {\n        var alias = this.aliases.find(function (alias) { return alias.name === aliasName; });\n        if (!alias)\n            throw new Error(\"\\\"\" + aliasName + \"\\\" alias was not found. Maybe you forgot to join it?\");\n        return alias;\n    };\n    QueryExpressionMap.prototype.findColumnByAliasExpression = function (aliasExpression) {\n        var _a = tslib_1.__read(aliasExpression.split(\".\"), 2), aliasName = _a[0], propertyPath = _a[1];\n        var alias = this.findAliasByName(aliasName);\n        return alias.metadata.findColumnWithPropertyName(propertyPath);\n    };\n    Object.defineProperty(QueryExpressionMap.prototype, \"relationMetadata\", {\n        /**\n         * Gets relation metadata of the relation this query builder works with.\n         *\n         * todo: add proper exceptions\n         */\n        get: function () {\n            if (!this.mainAlias)\n                throw new Error(\"Entity to work with is not specified!\"); // todo: better message\n            var relationMetadata = this.mainAlias.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n            if (!relationMetadata)\n                throw new Error(\"Relation \" + this.relationPropertyPath + \" was not found in entity \" + this.mainAlias.name); // todo: better message\n            return relationMetadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Copies all properties of the current QueryExpressionMap into a new one.\n     * Useful when QueryBuilder needs to create a copy of itself.\n     */\n    QueryExpressionMap.prototype.clone = function () {\n        var _this = this;\n        var map = new QueryExpressionMap(this.connection);\n        map.queryType = this.queryType;\n        map.selects = this.selects.map(function (select) { return select; });\n        map.selectDistinct = this.selectDistinct;\n        map.selectDistinctOn = this.selectDistinctOn;\n        this.aliases.forEach(function (alias) { return map.aliases.push(new Alias(alias)); });\n        map.mainAlias = this.mainAlias;\n        map.valuesSet = this.valuesSet;\n        map.returning = this.returning;\n        map.onConflict = this.onConflict;\n        map.onIgnore = this.onIgnore;\n        map.onUpdate = this.onUpdate;\n        map.joinAttributes = this.joinAttributes.map(function (join) { return new JoinAttribute(_this.connection, _this, join); });\n        map.relationIdAttributes = this.relationIdAttributes.map(function (relationId) { return new RelationIdAttribute(_this, relationId); });\n        map.relationCountAttributes = this.relationCountAttributes.map(function (relationCount) { return new RelationCountAttribute(_this, relationCount); });\n        map.wheres = this.wheres.map(function (where) { return (tslib_1.__assign({}, where)); });\n        map.havings = this.havings.map(function (having) { return (tslib_1.__assign({}, having)); });\n        map.orderBys = Object.assign({}, this.orderBys);\n        map.groupBys = this.groupBys.map(function (groupBy) { return groupBy; });\n        map.limit = this.limit;\n        map.offset = this.offset;\n        map.skip = this.skip;\n        map.take = this.take;\n        map.lockMode = this.lockMode;\n        map.lockVersion = this.lockVersion;\n        map.withDeleted = this.withDeleted;\n        map.parameters = Object.assign({}, this.parameters);\n        map.disableEscaping = this.disableEscaping;\n        map.enableRelationIdValues = this.enableRelationIdValues;\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition;\n        map.subQuery = this.subQuery;\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled;\n        map.cache = this.cache;\n        map.cacheId = this.cacheId;\n        map.cacheDuration = this.cacheDuration;\n        map.relationPropertyPath = this.relationPropertyPath;\n        map.of = this.of;\n        map.insertColumns = this.insertColumns;\n        map.whereEntities = this.whereEntities;\n        map.updateEntity = this.updateEntity;\n        map.callListeners = this.callListeners;\n        map.useTransaction = this.useTransaction;\n        map.nativeParameters = Object.assign({}, this.nativeParameters);\n        return map;\n    };\n    return QueryExpressionMap;\n}());\nexport { QueryExpressionMap };\n\n//# sourceMappingURL=QueryExpressionMap.js.map\n","import * as tslib_1 from \"tslib\";\nimport { RelationMetadata } from \"../metadata/RelationMetadata\";\n/**\n * Loads relation ids for the given entities.\n */\nvar RelationIdLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationIdLoader(connection) {\n        this.connection = connection;\n    }\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    RelationIdLoader.prototype.load = function (relationOrTarget, relationNameOrEntities, entitiesOrRelatedEntities, maybeRelatedEntities) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var relation, entities, relatedEntities, entityMetadata;\n            return tslib_1.__generator(this, function (_a) {\n                if (relationOrTarget instanceof RelationMetadata) {\n                    relation = relationOrTarget;\n                    entities = Array.isArray(relationNameOrEntities) ? relationNameOrEntities : [relationNameOrEntities];\n                    relatedEntities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities : (entitiesOrRelatedEntities ? [entitiesOrRelatedEntities] : undefined);\n                }\n                else {\n                    entityMetadata = this.connection.getMetadata(relationOrTarget);\n                    relation = entityMetadata.findRelationWithPropertyPath(relationNameOrEntities);\n                    if (!relation)\n                        throw new Error(\"Relation \\\"\" + relation + \"\\\" was not found in \\\"\" + entityMetadata.name + \"\\\".\");\n                    entities = Array.isArray(entitiesOrRelatedEntities) ? entitiesOrRelatedEntities : [entitiesOrRelatedEntities];\n                    relatedEntities = Array.isArray(maybeRelatedEntities) ? maybeRelatedEntities : (maybeRelatedEntities ? [maybeRelatedEntities] : undefined);\n                }\n                // load relation ids depend of relation type\n                if (relation.isManyToMany) {\n                    return [2 /*return*/, this.loadForManyToMany(relation, entities, relatedEntities)];\n                }\n                else if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    return [2 /*return*/, this.loadForManyToOneAndOneToOneOwner(relation, entities, relatedEntities)];\n                }\n                else { // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    return [2 /*return*/, this.loadForOneToManyAndOneToOneNotOwner(relation, entities, relatedEntities)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    RelationIdLoader.prototype.loadManyToManyRelationIdsAndGroup = function (relation, entitiesOrEntities, relatedEntityOrEntities) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isMany, entities, relationIds, relatedEntities, columns, inverseColumns;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        isMany = relation.isManyToMany || relation.isOneToMany;\n                        entities = Array.isArray(entitiesOrEntities) ? entitiesOrEntities : [entitiesOrEntities];\n                        if (!!relatedEntityOrEntities) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.connection.relationLoader.load(relation, entitiesOrEntities)];\n                    case 1:\n                        relatedEntityOrEntities = _a.sent();\n                        if (!relatedEntityOrEntities.length)\n                            return [2 /*return*/, entities.map(function (entity) { return ({ entity: entity, related: isMany ? [] : undefined }); })];\n                        _a.label = 2;\n                    case 2: return [4 /*yield*/, this.load(relation, entitiesOrEntities, relatedEntityOrEntities)];\n                    case 3:\n                        relationIds = _a.sent();\n                        relatedEntities = Array.isArray(relatedEntityOrEntities) ? relatedEntityOrEntities : [relatedEntityOrEntities];\n                        if (relation.isManyToManyOwner) {\n                            columns = relation.junctionEntityMetadata.inverseColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.junctionEntityMetadata.ownerColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else if (relation.isManyToManyNotOwner) {\n                            columns = relation.junctionEntityMetadata.ownerColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.junctionEntityMetadata.inverseColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else if (relation.isManyToOne || relation.isOneToOneOwner) {\n                            columns = relation.joinColumns.map(function (column) { return column.referencedColumn; });\n                            inverseColumns = relation.entityMetadata.primaryColumns;\n                        }\n                        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                            columns = relation.inverseRelation.entityMetadata.primaryColumns;\n                            inverseColumns = relation.inverseRelation.joinColumns.map(function (column) { return column.referencedColumn; });\n                        }\n                        else {\n                        }\n                        return [2 /*return*/, entities.map(function (entity) {\n                                var group = { entity: entity, related: isMany ? [] : undefined };\n                                relationIds.forEach(function (relationId) {\n                                    var entityMatched = inverseColumns.every(function (column) {\n                                        return column.getEntityValue(entity) === relationId[column.entityMetadata.name + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                                    });\n                                    if (entityMatched) {\n                                        relatedEntities.forEach(function (relatedEntity) {\n                                            var relatedEntityMatched = columns.every(function (column) {\n                                                return column.getEntityValue(relatedEntity) === relationId[column.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.propertyPath.replace(\".\", \"_\")];\n                                            });\n                                            if (relatedEntityMatched) {\n                                                if (isMany) {\n                                                    group.related.push(relatedEntity);\n                                                }\n                                                else {\n                                                    group.related = relatedEntity;\n                                                }\n                                            }\n                                        });\n                                    }\n                                });\n                                return group;\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n\n    async loadManyToManyRelationIdsAndMap(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral|ObjectLiteral[],\n        mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n        propertyName: string\n    ): Promise<void> {\n\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    RelationIdLoader.prototype.loadForManyToMany = function (relation, entities, relatedEntities) {\n        var junctionMetadata = relation.junctionEntityMetadata;\n        var mainAlias = junctionMetadata.name;\n        var columns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n        var inverseColumns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        var qb = this.connection.createQueryBuilder();\n        // select all columns from junction table\n        junctionMetadata.ownerColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        junctionMetadata.inverseColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add conditions for the given entities\n        var condition1 = \"\";\n        if (columns.length === 1) {\n            qb.setParameter(\"values1\", entities.map(function (entity) { return columns[0].referencedColumn.getEntityValue(entity); }));\n            condition1 = mainAlias + \".\" + columns[0].propertyPath + \" IN (:...values1)\"; // todo: use ANY for postgres\n        }\n        else {\n            condition1 = \"(\" + entities.map(function (entity, entityIndex) {\n                return columns.map(function (column) {\n                    var paramName = \"entity1_\" + entityIndex + \"_\" + column.propertyName;\n                    qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \") + \")\";\n        }\n        // add conditions for the given inverse entities\n        var condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                qb.setParameter(\"values2\", relatedEntities.map(function (entity) { return inverseColumns[0].referencedColumn.getEntityValue(entity); }));\n                condition2 = mainAlias + \".\" + inverseColumns[0].propertyPath + \" IN (:...values2)\"; // todo: use ANY for postgres\n            }\n            else {\n                condition2 = \"(\" + relatedEntities.map(function (entity, entityIndex) {\n                    return inverseColumns.map(function (column) {\n                        var paramName = \"entity2_\" + entityIndex + \"_\" + column.propertyName;\n                        qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                        return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                    }).join(\" AND \");\n                }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \") + \")\";\n            }\n        }\n        // execute query\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"))\n            .getRawMany();\n    };\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    RelationIdLoader.prototype.loadForManyToOneAndOneToOneOwner = function (relation, entities, relatedEntities) {\n        var mainAlias = relation.entityMetadata.targetName;\n        // select all columns we need\n        var qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n            var columnName = primaryColumn.entityMetadata.name + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        var condition = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(function (entity) { return relation.entityMetadata.primaryColumns[0].getEntityValue(entity); }));\n            condition = mainAlias + \".\" + relation.entityMetadata.primaryColumns[0].propertyPath + \" IN (:...values)\";\n        }\n        else {\n            condition = entities.map(function (entity, entityIndex) {\n                return relation.entityMetadata.primaryColumns.map(function (column, columnIndex) {\n                    var paramName = \"entity\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return mainAlias + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n        }\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    };\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    RelationIdLoader.prototype.loadForOneToManyAndOneToOneNotOwner = function (relation, entities, relatedEntities) {\n        relation = relation.inverseRelation;\n        var mainAlias = relation.entityMetadata.targetName;\n        // select all columns we need\n        var qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n            var columnName = primaryColumn.entityMetadata.name + \"_\" + relation.inverseRelation.propertyPath.replace(\".\", \"_\") + \"_\" + primaryColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + primaryColumn.propertyPath, columnName);\n        });\n        relation.joinColumns.forEach(function (column) {\n            var columnName = column.referencedColumn.entityMetadata.name + \"_\" + column.referencedColumn.propertyPath.replace(\".\", \"_\");\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        // add condition for entities\n        var condition = \"\";\n        if (relation.joinColumns.length === 1) {\n            qb.setParameter(\"values\", entities.map(function (entity) { return relation.joinColumns[0].referencedColumn.getEntityValue(entity); }));\n            condition = mainAlias + \".\" + relation.joinColumns[0].propertyPath + \" IN (:...values)\";\n        }\n        else {\n            condition = entities.map(function (entity, entityIndex) {\n                return relation.joinColumns.map(function (joinColumn, joinColumnIndex) {\n                    var paramName = \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                    qb.setParameter(paramName, joinColumn.referencedColumn.getEntityValue(entity));\n                    return mainAlias + \".\" + joinColumn.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n        }\n        // execute query\n        return qb.from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    };\n    return RelationIdLoader;\n}());\nexport { RelationIdLoader };\n\n//# sourceMappingURL=RelationIdLoader.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Wraps entities and creates getters/setters for their relations\n * to be able to lazily load relations when accessing these relations.\n */\nvar RelationLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationLoader(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads relation data for the given entity and its relation.\n     */\n    RelationLoader.prototype.load = function (relation, entityOrEntities, queryRunner) {\n        if (queryRunner && queryRunner.isReleased)\n            queryRunner = undefined; // get new one if already closed\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadManyToOneOrOneToOneOwner(relation, entityOrEntities, queryRunner);\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadOneToManyOrOneToOneNotOwner(relation, entityOrEntities, queryRunner);\n        }\n        else if (relation.isManyToManyOwner) {\n            return this.loadManyToManyOwner(relation, entityOrEntities, queryRunner);\n        }\n        else { // many-to-many non owner\n            return this.loadManyToManyNotOwner(relation, entityOrEntities, queryRunner);\n        }\n    };\n    /**\n     * Loads data for many-to-one and one-to-one owner relations.\n     *\n     * (ow) post.category<=>category.post\n     * loaded: category from post\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\n     */\n    RelationLoader.prototype.loadManyToOneOrOneToOneOwner = function (relation, entityOrEntities, queryRunner) {\n        var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        var columns = relation.entityMetadata.primaryColumns;\n        var joinColumns = relation.isOwning ? relation.joinColumns : relation.inverseRelation.joinColumns;\n        var conditions = joinColumns.map(function (joinColumn) {\n            return relation.entityMetadata.name + \".\" + joinColumn.propertyName + \" = \" + relation.propertyName + \".\" + joinColumn.referencedColumn.propertyName;\n        }).join(\" AND \");\n        var joinAliasName = relation.entityMetadata.name;\n        var qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select(relation.propertyName) // category\n            .from(relation.type, relation.propertyName) // Category, category\n            .innerJoin(relation.entityMetadata.target, joinAliasName, conditions);\n        if (columns.length === 1) {\n            qb.where(joinAliasName + \".\" + columns[0].propertyPath + \" IN (:...\" + (joinAliasName + \"_\" + columns[0].propertyName) + \")\");\n            qb.setParameter(joinAliasName + \"_\" + columns[0].propertyName, entities.map(function (entity) { return columns[0].getEntityValue(entity); }));\n        }\n        else {\n            var condition = entities.map(function (entity, entityIndex) {\n                return columns.map(function (column, columnIndex) {\n                    var paramName = joinAliasName + \"_entity_\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.getEntityValue(entity));\n                    return joinAliasName + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n            qb.where(condition);\n        }\n        return qb.getMany();\n        // return qb.getOne(); todo: fix all usages\n    };\n    /**\n     * Loads data for one-to-many and one-to-one not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\n     */\n    RelationLoader.prototype.loadOneToManyOrOneToOneNotOwner = function (relation, entityOrEntities, queryRunner) {\n        var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        var aliasName = relation.propertyName;\n        var columns = relation.inverseRelation.joinColumns;\n        var qb = this.connection\n            .createQueryBuilder(queryRunner)\n            .select(aliasName)\n            .from(relation.inverseRelation.entityMetadata.target, aliasName);\n        if (columns.length === 1) {\n            qb.where(aliasName + \".\" + columns[0].propertyPath + \" IN (:...\" + (aliasName + \"_\" + columns[0].propertyName) + \")\");\n            qb.setParameter(aliasName + \"_\" + columns[0].propertyName, entities.map(function (entity) { return columns[0].referencedColumn.getEntityValue(entity); }));\n        }\n        else {\n            var condition = entities.map(function (entity, entityIndex) {\n                return columns.map(function (column, columnIndex) {\n                    var paramName = aliasName + \"_entity_\" + entityIndex + \"_\" + columnIndex;\n                    qb.setParameter(paramName, column.referencedColumn.getEntityValue(entity));\n                    return aliasName + \".\" + column.propertyPath + \" = :\" + paramName;\n                }).join(\" AND \");\n            }).map(function (condition) { return \"(\" + condition + \")\"; }).join(\" OR \");\n            qb.where(condition);\n        }\n        return qb.getMany();\n        // return relation.isOneToMany ? qb.getMany() : qb.getOne(); todo: fix all usages\n    };\n    /**\n     * Loads data for many-to-many owner relations.\n     *\n     * SELECT category\n     * FROM category category\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = :postId\n     * AND post_categories.categoryId = category.id\n     */\n    RelationLoader.prototype.loadManyToManyOwner = function (relation, entityOrEntities, queryRunner) {\n        var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        var mainAlias = relation.propertyName;\n        var joinAlias = relation.junctionEntityMetadata.tableName;\n        var joinColumnConditions = relation.joinColumns.map(function (joinColumn) {\n            return joinAlias + \".\" + joinColumn.propertyName + \" IN (:...\" + joinColumn.propertyName + \")\";\n        });\n        var inverseJoinColumnConditions = relation.inverseJoinColumns.map(function (inverseJoinColumn) {\n            return joinAlias + \".\" + inverseJoinColumn.propertyName + \"=\" + mainAlias + \".\" + inverseJoinColumn.referencedColumn.propertyName;\n        });\n        var parameters = relation.joinColumns.reduce(function (parameters, joinColumn) {\n            parameters[joinColumn.propertyName] = entities.map(function (entity) { return joinColumn.referencedColumn.getEntityValue(entity); });\n            return parameters;\n        }, {});\n        return this.connection\n            .createQueryBuilder(queryRunner)\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, tslib_1.__spread(joinColumnConditions, inverseJoinColumnConditions).join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    };\n    /**\n     * Loads data for many-to-many not owner relations.\n     *\n     * SELECT post\n     * FROM post post\n     * INNER JOIN post_categories post_categories\n     * ON post_categories.postId = post.id\n     * AND post_categories.categoryId = post_categories.categoryId\n     */\n    RelationLoader.prototype.loadManyToManyNotOwner = function (relation, entityOrEntities, queryRunner) {\n        var entities = Array.isArray(entityOrEntities) ? entityOrEntities : [entityOrEntities];\n        var mainAlias = relation.propertyName;\n        var joinAlias = relation.junctionEntityMetadata.tableName;\n        var joinColumnConditions = relation.inverseRelation.joinColumns.map(function (joinColumn) {\n            return joinAlias + \".\" + joinColumn.propertyName + \" = \" + mainAlias + \".\" + joinColumn.referencedColumn.propertyName;\n        });\n        var inverseJoinColumnConditions = relation.inverseRelation.inverseJoinColumns.map(function (inverseJoinColumn) {\n            return joinAlias + \".\" + inverseJoinColumn.propertyName + \" IN (:...\" + inverseJoinColumn.propertyName + \")\";\n        });\n        var parameters = relation.inverseRelation.inverseJoinColumns.reduce(function (parameters, joinColumn) {\n            parameters[joinColumn.propertyName] = entities.map(function (entity) { return joinColumn.referencedColumn.getEntityValue(entity); });\n            return parameters;\n        }, {});\n        return this.connection\n            .createQueryBuilder(queryRunner)\n            .select(mainAlias)\n            .from(relation.type, mainAlias)\n            .innerJoin(joinAlias, joinAlias, tslib_1.__spread(joinColumnConditions, inverseJoinColumnConditions).join(\" AND \"))\n            .setParameters(parameters)\n            .getMany();\n    };\n    /**\n     * Wraps given entity and creates getters/setters for its given relation\n     * to be able to lazily load data when accessing this relation.\n     */\n    RelationLoader.prototype.enableLazyLoad = function (relation, entity, queryRunner) {\n        var relationLoader = this;\n        var dataIndex = \"__\" + relation.propertyName + \"__\"; // in what property of the entity loaded data will be stored\n        var promiseIndex = \"__promise_\" + relation.propertyName + \"__\"; // in what property of the entity loading promise will be stored\n        var resolveIndex = \"__has_\" + relation.propertyName + \"__\"; // indicates if relation data already was loaded or not, we need this flag if loaded data is empty\n        var setData = function (entity, value) {\n            entity[dataIndex] = value;\n            entity[resolveIndex] = true;\n            delete entity[promiseIndex];\n            return value;\n        };\n        var setPromise = function (entity, value) {\n            delete entity[resolveIndex];\n            delete entity[dataIndex];\n            entity[promiseIndex] = value;\n            value.then(\n            // ensure different value is not assigned yet\n            function (result) { return entity[promiseIndex] === value ? setData(entity, result) : result; });\n            return value;\n        };\n        Object.defineProperty(entity, relation.propertyName, {\n            get: function () {\n                if (this[resolveIndex] === true || this[dataIndex] !== undefined) // if related data already was loaded then simply return it\n                    return Promise.resolve(this[dataIndex]);\n                if (this[promiseIndex]) // if related data is loading then return a promise relationLoader loads it\n                    return this[promiseIndex];\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\n                var loader = relationLoader.load(relation, this, queryRunner).then(function (result) { return relation.isOneToOne || relation.isManyToOne ? result[0] : result; });\n                return setPromise(this, loader);\n            },\n            set: function (value) {\n                if (value instanceof Promise) { // if set data is a promise then wait for its resolve and save in the object\n                    setPromise(this, value);\n                }\n                else { // if its direct data set (non promise, probably not safe-typed)\n                    setData(this, value);\n                }\n            },\n            configurable: true\n        });\n    };\n    return RelationLoader;\n}());\nexport { RelationLoader };\n\n//# sourceMappingURL=RelationLoader.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { RelationUpdater } from \"./RelationUpdater\";\nimport { RelationRemover } from \"./RelationRemover\";\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nvar RelationQueryBuilder = /** @class */ (function (_super) {\n    tslib_1.__extends(RelationQueryBuilder, _super);\n    function RelationQueryBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    RelationQueryBuilder.prototype.getQuery = function () {\n        return \"\";\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sets entity (target) which relations will be updated.\n     */\n    RelationQueryBuilder.prototype.of = function (entity) {\n        this.expressionMap.of = entity;\n        return this;\n    };\n    /**\n     * Sets entity relation's value.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Works only for many-to-one and one-to-one relations.\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\n     */\n    RelationQueryBuilder.prototype.set = function (value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var relation, updater;\n            return tslib_1.__generator(this, function (_a) {\n                relation = this.expressionMap.relationMetadata;\n                if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n                    throw new Error(\"Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.\");\n                if (relation.isManyToMany || relation.isOneToMany)\n                    throw new Error(\"Set operation is only supported for many-to-one and one-to-one relations. \" +\n                        (\"However given \\\"\" + relation.propertyPath + \"\\\" has \" + relation.relationType + \" relation. \") +\n                        \"Use .add() method instead.\");\n                // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n                if (relation.joinColumns &&\n                    relation.joinColumns.length > 1 &&\n                    (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n                    throw new Error(\"Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \\\"...\\\", lastName: \\\"...\\\" })\");\n                updater = new RelationUpdater(this, this.expressionMap);\n                return [2 /*return*/, updater.update(value)];\n            });\n        });\n    };\n    /**\n     * Adds (binds) given value to entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    RelationQueryBuilder.prototype.add = function (value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var relation, updater;\n            return tslib_1.__generator(this, function (_a) {\n                if (Array.isArray(value) && value.length === 0)\n                    return [2 /*return*/];\n                relation = this.expressionMap.relationMetadata;\n                if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n                    throw new Error(\"Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.\");\n                if (relation.isManyToOne || relation.isOneToOne)\n                    throw new Error(\"Add operation is only supported for many-to-many and one-to-many relations. \" +\n                        (\"However given \\\"\" + relation.propertyPath + \"\\\" has \" + relation.relationType + \" relation. \") +\n                        \"Use .set() method instead.\");\n                // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n                if (relation.joinColumns &&\n                    relation.joinColumns.length > 1 &&\n                    (!(value instanceof Object) || Object.keys(value).length < relation.joinColumns.length))\n                    throw new Error(\"Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \\\"...\\\", lastName: \\\"...\\\" })\");\n                updater = new RelationUpdater(this, this.expressionMap);\n                return [2 /*return*/, updater.update(value)];\n            });\n        });\n    };\n    /**\n     * Removes (unbinds) given value from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    RelationQueryBuilder.prototype.remove = function (value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var relation, remover;\n            return tslib_1.__generator(this, function (_a) {\n                if (Array.isArray(value) && value.length === 0)\n                    return [2 /*return*/];\n                relation = this.expressionMap.relationMetadata;\n                if (!this.expressionMap.of) // todo: move this check before relation query builder creation?\n                    throw new Error(\"Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.\");\n                if (relation.isManyToOne || relation.isOneToOne)\n                    throw new Error(\"Add operation is only supported for many-to-many and one-to-many relations. \" +\n                        (\"However given \\\"\" + relation.propertyPath + \"\\\" has \" + relation.relationType + \" relation. \") +\n                        \"Use .set(null) method instead.\");\n                remover = new RelationRemover(this, this.expressionMap);\n                return [2 /*return*/, remover.remove(value)];\n            });\n        });\n    };\n    /**\n     * Adds (binds) and removes (unbinds) given values to/from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    RelationQueryBuilder.prototype.addAndRemove = function (added, removed) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.remove(removed)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.add(added)];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Gets entity's relation id.\n    async getId(): Promise<any> {\n\n    }*/\n    /**\n     * Gets entity's relation ids.\n    async getIds(): Promise<any[]> {\n        return [];\n    }*/\n    /**\n     * Loads a single entity (relational) from the relation.\n     * You can also provide id of relational entity to filter by.\n     */\n    RelationQueryBuilder.prototype.loadOne = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this.loadMany().then(function (results) { return results[0]; })];\n            });\n        });\n    };\n    /**\n     * Loads many entities (relational) from the relation.\n     * You can also provide ids of relational entities to filter by.\n     */\n    RelationQueryBuilder.prototype.loadMany = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var of, metadata;\n            return tslib_1.__generator(this, function (_a) {\n                of = this.expressionMap.of;\n                if (!(of instanceof Object)) {\n                    metadata = this.expressionMap.mainAlias.metadata;\n                    if (metadata.hasMultiplePrimaryKeys)\n                        throw new Error(\"Cannot load entity because only one primary key was specified, however entity contains multiple primary keys\");\n                    of = metadata.primaryColumns[0].createValueMap(of);\n                }\n                return [2 /*return*/, this.connection.relationLoader.load(this.expressionMap.relationMetadata, of)];\n            });\n        });\n    };\n    return RelationQueryBuilder;\n}(QueryBuilder));\nexport { RelationQueryBuilder };\n\n//# sourceMappingURL=RelationQueryBuilder.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nvar RelationRemover = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationRemover(queryBuilder, expressionMap) {\n        this.queryBuilder = queryBuilder;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs remove operation on a relation.\n     */\n    RelationRemover.prototype.remove = function (value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var relation, ofs, values_1, updateSet_1, parameters_1, conditions_1, condition, junctionMetadata_1, ofs, values, firstColumnValues, secondColumnValues_1, parameters_2, conditions_2, condition;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        relation = this.expressionMap.relationMetadata;\n                        if (!relation.isOneToMany) return [3 /*break*/, 2];\n                        ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n                        values_1 = Array.isArray(value) ? value : [value];\n                        updateSet_1 = {};\n                        relation.inverseRelation.joinColumns.forEach(function (column) {\n                            updateSet_1[column.propertyName] = null;\n                        });\n                        parameters_1 = {};\n                        conditions_1 = [];\n                        ofs.forEach(function (of, ofIndex) {\n                            conditions_1.push.apply(conditions_1, tslib_1.__spread(values_1.map(function (value, valueIndex) {\n                                return tslib_1.__spread(relation.inverseRelation.joinColumns.map(function (column, columnIndex) {\n                                    var parameterName = \"joinColumn_\" + ofIndex + \"_\" + valueIndex + \"_\" + columnIndex;\n                                    parameters_1[parameterName] = of instanceof Object ? column.referencedColumn.getEntityValue(of) : of;\n                                    return column.propertyPath + \" = :\" + parameterName;\n                                }), relation.inverseRelation.entityMetadata.primaryColumns.map(function (column, columnIndex) {\n                                    var parameterName = \"primaryColumn_\" + valueIndex + \"_\" + valueIndex + \"_\" + columnIndex;\n                                    parameters_1[parameterName] = value instanceof Object ? column.getEntityValue(value) : value;\n                                    return column.propertyPath + \" = :\" + parameterName;\n                                })).join(\" AND \");\n                            })));\n                        });\n                        condition = conditions_1.map(function (str) { return \"(\" + str + \")\"; }).join(\" OR \");\n                        if (!condition)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, this.queryBuilder\n                                .createQueryBuilder()\n                                .update(relation.inverseEntityMetadata.target)\n                                .set(updateSet_1)\n                                .where(condition)\n                                .setParameters(parameters_1)\n                                .execute()];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 2:\n                        junctionMetadata_1 = relation.junctionEntityMetadata;\n                        ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n                        values = Array.isArray(value) ? value : [value];\n                        firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n                        secondColumnValues_1 = relation.isManyToManyOwner ? values : ofs;\n                        parameters_2 = {};\n                        conditions_2 = [];\n                        firstColumnValues.forEach(function (firstColumnVal, firstColumnValIndex) {\n                            conditions_2.push.apply(conditions_2, tslib_1.__spread(secondColumnValues_1.map(function (secondColumnVal, secondColumnValIndex) {\n                                return tslib_1.__spread(junctionMetadata_1.ownerColumns.map(function (column, columnIndex) {\n                                    var parameterName = \"firstValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\n                                    parameters_2[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn.getEntityValue(firstColumnVal) : firstColumnVal;\n                                    return column.databaseName + \" = :\" + parameterName;\n                                }), junctionMetadata_1.inverseColumns.map(function (column, columnIndex) {\n                                    var parameterName = \"secondValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\n                                    parameters_2[parameterName] = secondColumnVal instanceof Object ? column.referencedColumn.getEntityValue(secondColumnVal) : secondColumnVal;\n                                    return column.databaseName + \" = :\" + parameterName;\n                                })).join(\" AND \");\n                            })));\n                        });\n                        condition = conditions_2.map(function (str) { return \"(\" + str + \")\"; }).join(\" OR \");\n                        return [4 /*yield*/, this.queryBuilder\n                                .createQueryBuilder()\n                                .delete()\n                                .from(junctionMetadata_1.tableName)\n                                .where(condition)\n                                .setParameters(parameters_2)\n                                .execute()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return RelationRemover;\n}());\nexport { RelationRemover };\n\n//# sourceMappingURL=RelationRemover.js.map\n","import * as tslib_1 from \"tslib\";\nimport { SapDriver } from \"../driver/sap/SapDriver\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nvar RelationUpdater = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationUpdater(queryBuilder, expressionMap) {\n        this.queryBuilder = queryBuilder;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Performs set or add operation on a relation.\n     */\n    RelationUpdater.prototype.update = function (value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var relation, updateSet, updateSet_1, ofs, parameters_1, conditions_1, condition, of_1, updateSet, junctionMetadata_1, ofs, values, firstColumnValues, secondColumnValues_1, bulkInserted_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        relation = this.expressionMap.relationMetadata;\n                        if (!(relation.isManyToOne || relation.isOneToOneOwner)) return [3 /*break*/, 2];\n                        updateSet = relation.joinColumns.reduce(function (updateSet, joinColumn) {\n                            var relationValue = value instanceof Object ? joinColumn.referencedColumn.getEntityValue(value) : value;\n                            joinColumn.setEntityValue(updateSet, relationValue);\n                            return updateSet;\n                        }, {});\n                        if (!this.expressionMap.of || (Array.isArray(this.expressionMap.of) && !this.expressionMap.of.length))\n                            return [2 /*return*/];\n                        return [4 /*yield*/, this.queryBuilder\n                                .createQueryBuilder()\n                                .update(relation.entityMetadata.target)\n                                .set(updateSet)\n                                .whereInIds(this.expressionMap.of)\n                                .execute()];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 10];\n                    case 2:\n                        if (!((relation.isOneToOneNotOwner || relation.isOneToMany) && value === null)) return [3 /*break*/, 4];\n                        updateSet_1 = {};\n                        relation.inverseRelation.joinColumns.forEach(function (column) {\n                            updateSet_1[column.propertyName] = null;\n                        });\n                        ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n                        parameters_1 = {};\n                        conditions_1 = [];\n                        ofs.forEach(function (of, ofIndex) {\n                            relation.inverseRelation.joinColumns.map(function (column, columnIndex) {\n                                var parameterName = \"joinColumn_\" + ofIndex + \"_\" + columnIndex;\n                                parameters_1[parameterName] = of instanceof Object ? column.referencedColumn.getEntityValue(of) : of;\n                                conditions_1.push(column.propertyPath + \" = :\" + parameterName);\n                            });\n                        });\n                        condition = conditions_1.map(function (str) { return \"(\" + str + \")\"; }).join(\" OR \");\n                        if (!condition)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, this.queryBuilder\n                                .createQueryBuilder()\n                                .update(relation.inverseEntityMetadata.target)\n                                .set(updateSet_1)\n                                .where(condition)\n                                .setParameters(parameters_1)\n                                .execute()];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 10];\n                    case 4:\n                        if (!(relation.isOneToOneNotOwner || relation.isOneToMany)) return [3 /*break*/, 6];\n                        if (Array.isArray(this.expressionMap.of))\n                            throw new Error(\"You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.\");\n                        of_1 = this.expressionMap.of;\n                        updateSet = relation.inverseRelation.joinColumns.reduce(function (updateSet, joinColumn) {\n                            var relationValue = of_1 instanceof Object ? joinColumn.referencedColumn.getEntityValue(of_1) : of_1;\n                            joinColumn.setEntityValue(updateSet, relationValue);\n                            return updateSet;\n                        }, {});\n                        if (!value || (Array.isArray(value) && !value.length))\n                            return [2 /*return*/];\n                        return [4 /*yield*/, this.queryBuilder\n                                .createQueryBuilder()\n                                .update(relation.inverseEntityMetadata.target)\n                                .set(updateSet)\n                                .whereInIds(value)\n                                .execute()];\n                    case 5:\n                        _a.sent();\n                        return [3 /*break*/, 10];\n                    case 6:\n                        junctionMetadata_1 = relation.junctionEntityMetadata;\n                        ofs = Array.isArray(this.expressionMap.of) ? this.expressionMap.of : [this.expressionMap.of];\n                        values = Array.isArray(value) ? value : [value];\n                        firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n                        secondColumnValues_1 = relation.isManyToManyOwner ? values : ofs;\n                        bulkInserted_1 = [];\n                        firstColumnValues.forEach(function (firstColumnVal) {\n                            secondColumnValues_1.forEach(function (secondColumnVal) {\n                                var inserted = {};\n                                junctionMetadata_1.ownerColumns.forEach(function (column) {\n                                    inserted[column.databaseName] = firstColumnVal instanceof Object ? column.referencedColumn.getEntityValue(firstColumnVal) : firstColumnVal;\n                                });\n                                junctionMetadata_1.inverseColumns.forEach(function (column) {\n                                    inserted[column.databaseName] = secondColumnVal instanceof Object ? column.referencedColumn.getEntityValue(secondColumnVal) : secondColumnVal;\n                                });\n                                bulkInserted_1.push(inserted);\n                            });\n                        });\n                        if (!bulkInserted_1.length)\n                            return [2 /*return*/];\n                        if (!(this.queryBuilder.connection.driver instanceof OracleDriver || this.queryBuilder.connection.driver instanceof SapDriver)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, Promise.all(bulkInserted_1.map(function (value) {\n                                return _this.queryBuilder\n                                    .createQueryBuilder()\n                                    .insert()\n                                    .into(junctionMetadata_1.tableName)\n                                    .values(value)\n                                    .execute();\n                            }))];\n                    case 7:\n                        _a.sent();\n                        return [3 /*break*/, 10];\n                    case 8: return [4 /*yield*/, this.queryBuilder\n                            .createQueryBuilder()\n                            .insert()\n                            .into(junctionMetadata_1.tableName)\n                            .values(bulkInserted_1)\n                            .execute()];\n                    case 9:\n                        _a.sent();\n                        _a.label = 10;\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return RelationUpdater;\n}());\nexport { RelationUpdater };\n\n//# sourceMappingURL=RelationUpdater.js.map\n","import * as tslib_1 from \"tslib\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\nvar ReturningResultsEntityUpdator = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function ReturningResultsEntityUpdator(queryRunner, expressionMap) {\n        this.queryRunner = queryRunner;\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates entities with a special columns after updation query execution.\n     */\n    ReturningResultsEntityUpdator.prototype.update = function (updateResult, entities) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.expressionMap.mainAlias.metadata;\n                        return [4 /*yield*/, Promise.all(entities.map(function (entity, entityIndex) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var result, returningColumns, updationColumns, entityId, loadedReturningColumns;\n                                var _this = this;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            if (!this.queryRunner.connection.driver.isReturningSqlSupported()) return [3 /*break*/, 1];\n                                            if (this.queryRunner.connection.driver instanceof OracleDriver && Array.isArray(updateResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {\n                                                updateResult.raw = updateResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {\n                                                    newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                                                    return newRaw;\n                                                }, {});\n                                            }\n                                            result = Array.isArray(updateResult.raw) ? updateResult.raw[entityIndex] : updateResult.raw;\n                                            returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);\n                                            if (returningColumns) {\n                                                this.queryRunner.manager.merge(metadata.target, entity, returningColumns);\n                                                updateResult.generatedMaps.push(returningColumns);\n                                            }\n                                            return [3 /*break*/, 3];\n                                        case 1:\n                                            updationColumns = this.getUpdationReturningColumns();\n                                            if (!(updationColumns.length > 0)) return [3 /*break*/, 3];\n                                            entityId = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n                                            if (!entityId)\n                                                throw new Error(\"Cannot update entity because entity id is not set in the entity.\");\n                                            return [4 /*yield*/, this.queryRunner.manager\n                                                    .createQueryBuilder()\n                                                    .select(metadata.primaryColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .addSelect(this.getUpdationReturningColumns().map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .from(metadata.target, metadata.targetName)\n                                                    .where(entityId)\n                                                    .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                                                    .getOne()];\n                                        case 2:\n                                            loadedReturningColumns = _a.sent();\n                                            if (loadedReturningColumns) {\n                                                this.queryRunner.manager.merge(metadata.target, entity, loadedReturningColumns);\n                                                updateResult.generatedMaps.push(loadedReturningColumns);\n                                            }\n                                            _a.label = 3;\n                                        case 3: return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates entities with a special columns after insertion query execution.\n     */\n    ReturningResultsEntityUpdator.prototype.insert = function (insertResult, entities) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, insertionColumns, generatedMaps;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        metadata = this.expressionMap.mainAlias.metadata;\n                        insertionColumns = this.getInsertionReturningColumns();\n                        generatedMaps = entities.map(function (entity, entityIndex) {\n                            if (_this.queryRunner.connection.driver instanceof OracleDriver && Array.isArray(insertResult.raw) && _this.expressionMap.extraReturningColumns.length > 0) {\n                                insertResult.raw = insertResult.raw.reduce(function (newRaw, rawItem, rawItemIndex) {\n                                    newRaw[_this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n                                    return newRaw;\n                                }, {});\n                            }\n                            // get all values generated by a database for us\n                            var result = Array.isArray(insertResult.raw) ? insertResult.raw[entityIndex] : insertResult.raw;\n                            var generatedMap = _this.queryRunner.connection.driver.createGeneratedMap(metadata, result) || {};\n                            // if database does not support uuid generation we need to get uuid values\n                            // generated by orm and set them to the generatedMap\n                            if (_this.queryRunner.connection.driver.isUUIDGenerationSupported() === false) {\n                                metadata.generatedColumns.forEach(function (generatedColumn) {\n                                    if (generatedColumn.generationStrategy === \"uuid\") {\n                                        // uuid can be defined by user in a model, that's why first we get it\n                                        var uuid = generatedColumn.getEntityValue(entity);\n                                        if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value\n                                            uuid = _this.expressionMap.nativeParameters[\"uuid_\" + generatedColumn.databaseName + entityIndex];\n                                        OrmUtils.mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));\n                                    }\n                                });\n                            }\n                            _this.queryRunner.manager.merge(metadata.target, entity, generatedMap); // todo: this should not be here, but problem with below line\n                            return generatedMap;\n                        });\n                        if (!(this.queryRunner.connection.driver.isReturningSqlSupported() === false && insertionColumns.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.all(entities.map(function (entity, entityIndex) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var entityId, returningResult;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            entityId = metadata.getEntityIdMap(entity);\n                                            return [4 /*yield*/, this.queryRunner.manager\n                                                    .createQueryBuilder()\n                                                    .select(metadata.primaryColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .addSelect(insertionColumns.map(function (column) { return metadata.targetName + \".\" + column.propertyPath; }))\n                                                    .from(metadata.target, metadata.targetName)\n                                                    .where(entityId)\n                                                    .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties maight be overridden by merge process\n                                                    .getOne()];\n                                        case 1:\n                                            returningResult = _a.sent();\n                                            this.queryRunner.manager.merge(metadata.target, generatedMaps[entityIndex], returningResult);\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        entities.forEach(function (entity, entityIndex) {\n                            var entityId = metadata.getEntityIdMap(entity);\n                            insertResult.identifiers.push(entityId);\n                            insertResult.generatedMaps.push(generatedMaps[entityIndex]);\n                            _this.queryRunner.manager.merge(_this.expressionMap.mainAlias.metadata.target, entity, generatedMaps[entityIndex], generatedMaps[entityIndex]); // todo: why twice?!\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Columns we need to be returned from the database when we insert entity.\n     */\n    ReturningResultsEntityUpdator.prototype.getInsertionReturningColumns = function () {\n        // for databases which support returning statement we need to return extra columns like id\n        // for other databases we don't need to return id column since its returned by a driver already\n        var needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported();\n        // filter out the columns of which we need database inserted values to update our entity\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            return column.default !== undefined ||\n                (needToCheckGenerated && column.isGenerated) ||\n                column.isCreateDate ||\n                column.isUpdateDate ||\n                column.isDeleteDate ||\n                column.isVersion;\n        });\n    };\n    /**\n     * Columns we need to be returned from the database when we update entity.\n     */\n    ReturningResultsEntityUpdator.prototype.getUpdationReturningColumns = function () {\n        return this.expressionMap.mainAlias.metadata.columns.filter(function (column) {\n            return column.isUpdateDate || column.isVersion;\n        });\n    };\n    return ReturningResultsEntityUpdator;\n}());\nexport { ReturningResultsEntityUpdator };\n\n//# sourceMappingURL=ReturningResultsEntityUpdator.js.map\n","import * as tslib_1 from \"tslib\";\nimport { SapDriver } from \"../driver/sap/SapDriver\";\nimport { RawSqlResultsToEntityTransformer } from \"./transformer/RawSqlResultsToEntityTransformer\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PessimisticLockTransactionRequiredError } from \"../error/PessimisticLockTransactionRequiredError\";\nimport { NoVersionOrUpdateDateColumnError } from \"../error/NoVersionOrUpdateDateColumnError\";\nimport { OptimisticLockVersionMismatchError } from \"../error/OptimisticLockVersionMismatchError\";\nimport { OptimisticLockCanNotBeUsedError } from \"../error/OptimisticLockCanNotBeUsedError\";\nimport { JoinAttribute } from \"./JoinAttribute\";\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\";\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\";\nimport { RelationIdLoader } from \"./relation-id/RelationIdLoader\";\nimport { RelationIdMetadataToAttributeTransformer } from \"./relation-id/RelationIdMetadataToAttributeTransformer\";\nimport { RelationCountLoader } from \"./relation-count/RelationCountLoader\";\nimport { RelationCountMetadataToAttributeTransformer } from \"./relation-count/RelationCountMetadataToAttributeTransformer\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { LockNotSupportedOnGivenDriverError } from \"../error/LockNotSupportedOnGivenDriverError\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { AbstractSqliteDriver } from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport { OffsetWithoutLimitNotSupportedError } from \"../error/OffsetWithoutLimitNotSupportedError\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar SelectQueryBuilder = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectQueryBuilder, _super);\n    function SelectQueryBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    SelectQueryBuilder.prototype.getQuery = function () {\n        var sql = this.createSelectExpression();\n        sql += this.createJoinExpression();\n        sql += this.createWhereExpression();\n        sql += this.createGroupByExpression();\n        sql += this.createHavingExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitOffsetExpression();\n        sql += this.createLockExpression();\n        sql = sql.trim();\n        if (this.expressionMap.subQuery)\n            sql = \"(\" + sql + \")\";\n        return sql;\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a subquery - query that can be used inside other queries.\n     */\n    SelectQueryBuilder.prototype.subQuery = function () {\n        var qb = this.createQueryBuilder();\n        qb.expressionMap.subQuery = true;\n        qb.expressionMap.parentQueryBuilder = this;\n        return qb;\n    };\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    SelectQueryBuilder.prototype.select = function (selection, selectionAliasName) {\n        this.expressionMap.queryType = \"select\";\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map(function (selection) { return ({ selection: selection }); });\n        }\n        else if (selection instanceof Function) {\n            var subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });\n        }\n        else if (selection) {\n            this.expressionMap.selects = [{ selection: selection, aliasName: selectionAliasName }];\n        }\n        return this;\n    };\n    /**\n     * Adds new selection to the SELECT query.\n     */\n    SelectQueryBuilder.prototype.addSelect = function (selection, selectionAliasName) {\n        if (!selection)\n            return this;\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = this.expressionMap.selects.concat(selection.map(function (selection) { return ({ selection: selection }); }));\n        }\n        else if (selection instanceof Function) {\n            var subQueryBuilder = selection(this.subQuery());\n            this.setParameters(subQueryBuilder.getParameters());\n            this.expressionMap.selects.push({ selection: subQueryBuilder.getQuery(), aliasName: selectionAliasName });\n        }\n        else if (selection) {\n            this.expressionMap.selects.push({ selection: selection, aliasName: selectionAliasName });\n        }\n        return this;\n    };\n    /**\n     * Sets whether the selection is DISTINCT.\n     */\n    SelectQueryBuilder.prototype.distinct = function (distinct) {\n        if (distinct === void 0) { distinct = true; }\n        this.expressionMap.selectDistinct = distinct;\n        return this;\n    };\n    /**\n     * Sets the distinct on clause for Postgres.\n     */\n    SelectQueryBuilder.prototype.distinctOn = function (distinctOn) {\n        this.expressionMap.selectDistinctOn = distinctOn;\n        return this;\n    };\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     * Removes all previously set from-s.\n     */\n    SelectQueryBuilder.prototype.from = function (entityTarget, aliasName) {\n        var mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    };\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    SelectQueryBuilder.prototype.addFrom = function (entityTarget, aliasName) {\n        var alias = this.createFromAlias(entityTarget, aliasName);\n        if (!this.expressionMap.mainAlias)\n            this.expressionMap.setMainAlias(alias);\n        return this;\n    };\n    /**\n     * INNER JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.innerJoin = function (entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters);\n        return this;\n    };\n    /**\n     * LEFT JOINs (without selection).\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.leftJoin = function (entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters);\n        return this;\n    };\n    /**\n     * INNER JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.innerJoinAndSelect = function (entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.addSelect(alias);\n        this.innerJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    };\n    /**\n     * LEFT JOINs and adds all selection properties to SELECT.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.leftJoinAndSelect = function (entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.addSelect(alias);\n        this.leftJoin(entityOrProperty, alias, condition, parameters);\n        return this;\n    };\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.innerJoinAndMapMany = function (mapToProperty, entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    };\n    /**\n     * INNER JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.innerJoinAndMapOne = function (mapToProperty, entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.addSelect(alias);\n        this.join(\"INNER\", entityOrProperty, alias, condition, parameters, mapToProperty, false);\n        return this;\n    };\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there are multiple rows of selecting data, and mapped result will be an array.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.leftJoinAndMapMany = function (mapToProperty, entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, true);\n        return this;\n    };\n    /**\n     * LEFT JOINs, SELECTs the data returned by a join and MAPs all that data to some entity's property.\n     * This is extremely useful when you want to select some data and map it to some virtual property.\n     * It will assume that there is a single row of selecting data, and mapped result will be a single selected value.\n     * You also need to specify an alias of the joined data.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.leftJoinAndMapOne = function (mapToProperty, entityOrProperty, alias, condition, parameters) {\n        if (condition === void 0) { condition = \"\"; }\n        this.addSelect(alias);\n        this.join(\"LEFT\", entityOrProperty, alias, condition, parameters, mapToProperty, false);\n        return this;\n    };\n    /**\n     * LEFT JOINs relation id and maps it into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.loadRelationIdAndMap = function (mapToProperty, relationName, aliasNameOrOptions, queryBuilderFactory) {\n        var relationIdAttribute = new RelationIdAttribute(this.expressionMap);\n        relationIdAttribute.mapToProperty = mapToProperty;\n        relationIdAttribute.relationName = relationName;\n        if (typeof aliasNameOrOptions === \"string\")\n            relationIdAttribute.alias = aliasNameOrOptions;\n        if (aliasNameOrOptions instanceof Object && aliasNameOrOptions.disableMixedMap)\n            relationIdAttribute.disableMixedMap = true;\n        relationIdAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationIdAttributes.push(relationIdAttribute);\n        if (relationIdAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationIdAttribute.junctionAlias,\n                metadata: relationIdAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    };\n    /**\n     * Counts number of entities of entity's relation and maps the value into some entity's property.\n     * Optionally, you can add condition and parameters used in condition.\n     */\n    SelectQueryBuilder.prototype.loadRelationCountAndMap = function (mapToProperty, relationName, aliasName, queryBuilderFactory) {\n        var relationCountAttribute = new RelationCountAttribute(this.expressionMap);\n        relationCountAttribute.mapToProperty = mapToProperty;\n        relationCountAttribute.relationName = relationName;\n        relationCountAttribute.alias = aliasName;\n        relationCountAttribute.queryBuilderFactory = queryBuilderFactory;\n        this.expressionMap.relationCountAttributes.push(relationCountAttribute);\n        this.expressionMap.createAlias({\n            type: \"other\",\n            name: relationCountAttribute.junctionAlias\n        });\n        if (relationCountAttribute.relation.junctionEntityMetadata) {\n            this.expressionMap.createAlias({\n                type: \"other\",\n                name: relationCountAttribute.junctionAlias,\n                metadata: relationCountAttribute.relation.junctionEntityMetadata\n            });\n        }\n        return this;\n    };\n    /**\n     * Loads all relation ids for all relations of the selected entity.\n     * All relation ids will be mapped to relation property themself.\n     * If array of strings is given then loads only relation ids of the given properties.\n     */\n    SelectQueryBuilder.prototype.loadAllRelationIds = function (options) {\n        var _this = this;\n        this.expressionMap.mainAlias.metadata.relations.forEach(function (relation) {\n            if (options !== undefined && options.relations !== undefined && options.relations.indexOf(relation.propertyPath) === -1)\n                return;\n            _this.loadRelationIdAndMap(_this.expressionMap.mainAlias.name + \".\" + relation.propertyPath, _this.expressionMap.mainAlias.name + \".\" + relation.propertyPath, options);\n        });\n        return this;\n    };\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    SelectQueryBuilder.prototype.where = function (where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        var condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    SelectQueryBuilder.prototype.andWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    SelectQueryBuilder.prototype.orWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    SelectQueryBuilder.prototype.whereInIds = function (ids) {\n        return this.where(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    SelectQueryBuilder.prototype.andWhereInIds = function (ids) {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     *\n     * Ids are mixed.\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\n     * If you have multiple primary keys you need to pass object with property names and values specified,\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\n     */\n    SelectQueryBuilder.prototype.orWhereInIds = function (ids) {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Sets HAVING condition in the query builder.\n     * If you had previously HAVING expression defined,\n     * calling this function will override previously set HAVING conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    SelectQueryBuilder.prototype.having = function (having, parameters) {\n        this.expressionMap.havings.push({ type: \"simple\", condition: having });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    SelectQueryBuilder.prototype.andHaving = function (having, parameters) {\n        this.expressionMap.havings.push({ type: \"and\", condition: having });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new OR HAVING condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    SelectQueryBuilder.prototype.orHaving = function (having, parameters) {\n        this.expressionMap.havings.push({ type: \"or\", condition: having });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Sets GROUP BY condition in the query builder.\n     * If you had previously GROUP BY expression defined,\n     * calling this function will override previously set GROUP BY conditions.\n     */\n    SelectQueryBuilder.prototype.groupBy = function (groupBy) {\n        if (groupBy) {\n            this.expressionMap.groupBys = [groupBy];\n        }\n        else {\n            this.expressionMap.groupBys = [];\n        }\n        return this;\n    };\n    /**\n     * Adds GROUP BY condition in the query builder.\n     */\n    SelectQueryBuilder.prototype.addGroupBy = function (groupBy) {\n        this.expressionMap.groupBys.push(groupBy);\n        return this;\n    };\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    SelectQueryBuilder.prototype.orderBy = function (sort, order, nulls) {\n        if (order === void 0) { order = \"ASC\"; }\n        var _a, _b;\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new Error(\"SelectQueryBuilder.addOrderBy \\\"order\\\" can accept only \\\"ASC\\\" and \\\"DESC\\\" values.\");\n        if (nulls !== undefined && nulls !== \"NULLS FIRST\" && nulls !== \"NULLS LAST\")\n            throw new Error(\"SelectQueryBuilder.addOrderBy \\\"nulls\\\" can accept only \\\"NULLS FIRST\\\" and \\\"NULLS LAST\\\" values.\");\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort;\n            }\n            else {\n                if (nulls) {\n                    this.expressionMap.orderBys = (_a = {}, _a[sort] = { order: order, nulls: nulls }, _a);\n                }\n                else {\n                    this.expressionMap.orderBys = (_b = {}, _b[sort] = order, _b);\n                }\n            }\n        }\n        else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    };\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    SelectQueryBuilder.prototype.addOrderBy = function (sort, order, nulls) {\n        if (order === void 0) { order = \"ASC\"; }\n        if (order !== undefined && order !== \"ASC\" && order !== \"DESC\")\n            throw new Error(\"SelectQueryBuilder.addOrderBy \\\"order\\\" can accept only \\\"ASC\\\" and \\\"DESC\\\" values.\");\n        if (nulls !== undefined && nulls !== \"NULLS FIRST\" && nulls !== \"NULLS LAST\")\n            throw new Error(\"SelectQueryBuilder.addOrderBy \\\"nulls\\\" can accept only \\\"NULLS FIRST\\\" and \\\"NULLS LAST\\\" values.\");\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order: order, nulls: nulls };\n        }\n        else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    };\n    /**\n     * Set's LIMIT - maximum number of rows to be selected.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead take method instead.\n     */\n    SelectQueryBuilder.prototype.limit = function (limit) {\n        this.expressionMap.limit = this.normalizeNumber(limit);\n        if (this.expressionMap.limit !== undefined && isNaN(this.expressionMap.limit))\n            throw new Error(\"Provided \\\"limit\\\" value is not a number. Please provide a numeric value.\");\n        return this;\n    };\n    /**\n     * Set's OFFSET - selection offset.\n     * NOTE that it may not work as you expect if you are using joins.\n     * If you want to implement pagination, and you are having join in your query,\n     * then use instead skip method instead.\n     */\n    SelectQueryBuilder.prototype.offset = function (offset) {\n        this.expressionMap.offset = this.normalizeNumber(offset);\n        if (this.expressionMap.offset !== undefined && isNaN(this.expressionMap.offset))\n            throw new Error(\"Provided \\\"offset\\\" value is not a number. Please provide a numeric value.\");\n        return this;\n    };\n    /**\n     * Sets maximal number of entities to take.\n     */\n    SelectQueryBuilder.prototype.take = function (take) {\n        this.expressionMap.take = this.normalizeNumber(take);\n        if (this.expressionMap.take !== undefined && isNaN(this.expressionMap.take))\n            throw new Error(\"Provided \\\"take\\\" value is not a number. Please provide a numeric value.\");\n        return this;\n    };\n    /**\n     * Sets number of entities to skip.\n     */\n    SelectQueryBuilder.prototype.skip = function (skip) {\n        this.expressionMap.skip = this.normalizeNumber(skip);\n        if (this.expressionMap.skip !== undefined && isNaN(this.expressionMap.skip))\n            throw new Error(\"Provided \\\"skip\\\" value is not a number. Please provide a numeric value.\");\n        return this;\n    };\n    /**\n     * Sets locking mode.\n     */\n    SelectQueryBuilder.prototype.setLock = function (lockMode, lockVersion) {\n        this.expressionMap.lockMode = lockMode;\n        this.expressionMap.lockVersion = lockVersion;\n        return this;\n    };\n    /**\n     * Disables the global condition of \"non-deleted\" for the entity with delete date columns.\n     */\n    SelectQueryBuilder.prototype.withDeleted = function () {\n        this.expressionMap.withDeleted = true;\n        return this;\n    };\n    /**\n     * Gets first raw result returned by execution of generated query builder sql.\n     */\n    SelectQueryBuilder.prototype.getRawOne = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getRawMany()];\n                    case 1: return [2 /*return*/, (_a.sent())[0]];\n                }\n            });\n        });\n    };\n    /**\n     * Gets all raw results returned by execution of generated query builder sql.\n     */\n    SelectQueryBuilder.prototype.getRawMany = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, transactionStartedByUs, results, error_1, rollbackError_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.expressionMap.lockMode === \"optimistic\")\n                            throw new OptimisticLockCanNotBeUsedError();\n                        this.expressionMap.queryEntity = false;\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 7, 12, 15]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.loadRawResults(queryRunner)];\n                    case 4:\n                        results = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 6];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6: return [2 /*return*/, results];\n                    case 7:\n                        error_1 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 11];\n                        _a.label = 8;\n                    case 8:\n                        _a.trys.push([8, 10, , 11]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 9:\n                        _a.sent();\n                        return [3 /*break*/, 11];\n                    case 10:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 11];\n                    case 11: throw error_1;\n                    case 12:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 14];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 13:\n                        _a.sent();\n                        _a.label = 14;\n                    case 14: return [7 /*endfinally*/];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    SelectQueryBuilder.prototype.getRawAndEntities = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, transactionStartedByUs, results, error_2, rollbackError_2;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 7, 12, 15]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 3;\n                    case 3:\n                        this.expressionMap.queryEntity = true;\n                        return [4 /*yield*/, this.executeEntitiesAndRawResults(queryRunner)];\n                    case 4:\n                        results = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 6];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6: return [2 /*return*/, results];\n                    case 7:\n                        error_2 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 11];\n                        _a.label = 8;\n                    case 8:\n                        _a.trys.push([8, 10, , 11]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 9:\n                        _a.sent();\n                        return [3 /*break*/, 11];\n                    case 10:\n                        rollbackError_2 = _a.sent();\n                        return [3 /*break*/, 11];\n                    case 11: throw error_2;\n                    case 12:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 14];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 13:\n                        _a.sent();\n                        _a.label = 14;\n                    case 14: return [7 /*endfinally*/];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Gets single entity returned by execution of generated query builder sql.\n     */\n    SelectQueryBuilder.prototype.getOne = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var results, result, metadata, actualVersion, actualVersion;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getRawAndEntities()];\n                    case 1:\n                        results = _a.sent();\n                        result = results.entities[0];\n                        if (result && this.expressionMap.lockMode === \"optimistic\" && this.expressionMap.lockVersion) {\n                            metadata = this.expressionMap.mainAlias.metadata;\n                            if (this.expressionMap.lockVersion instanceof Date) {\n                                actualVersion = metadata.updateDateColumn.getEntityValue(result);\n                                if (actualVersion.getTime() !== this.expressionMap.lockVersion.getTime())\n                                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n                            }\n                            else {\n                                actualVersion = metadata.versionColumn.getEntityValue(result);\n                                if (actualVersion !== this.expressionMap.lockVersion)\n                                    throw new OptimisticLockVersionMismatchError(metadata.name, this.expressionMap.lockVersion, actualVersion);\n                            }\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * Gets entities returned by execution of generated query builder sql.\n     */\n    SelectQueryBuilder.prototype.getMany = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var results;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.expressionMap.lockMode === \"optimistic\")\n                            throw new OptimisticLockCanNotBeUsedError();\n                        return [4 /*yield*/, this.getRawAndEntities()];\n                    case 1:\n                        results = _a.sent();\n                        return [2 /*return*/, results.entities];\n                }\n            });\n        });\n    };\n    /**\n     * Gets count - number of entities selected by sql generated by this query builder.\n     * Count excludes all limitations set by setFirstResult and setMaxResults methods call.\n     */\n    SelectQueryBuilder.prototype.getCount = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, transactionStartedByUs, results, error_3, rollbackError_3;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.expressionMap.lockMode === \"optimistic\")\n                            throw new OptimisticLockCanNotBeUsedError();\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 7, 12, 15]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 3;\n                    case 3:\n                        this.expressionMap.queryEntity = false;\n                        return [4 /*yield*/, this.executeCountQuery(queryRunner)];\n                    case 4:\n                        results = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 6];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 5:\n                        _a.sent();\n                        _a.label = 6;\n                    case 6: return [2 /*return*/, results];\n                    case 7:\n                        error_3 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 11];\n                        _a.label = 8;\n                    case 8:\n                        _a.trys.push([8, 10, , 11]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 9:\n                        _a.sent();\n                        return [3 /*break*/, 11];\n                    case 10:\n                        rollbackError_3 = _a.sent();\n                        return [3 /*break*/, 11];\n                    case 11: throw error_3;\n                    case 12:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 14];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 13:\n                        _a.sent();\n                        _a.label = 14;\n                    case 14: return [7 /*endfinally*/];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes built SQL query and returns entities and overall entities count (without limitation).\n     * This method is useful to build pagination.\n     */\n    SelectQueryBuilder.prototype.getManyAndCount = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, transactionStartedByUs, entitiesAndRaw, count, results, error_4, rollbackError_4;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this.expressionMap.lockMode === \"optimistic\")\n                            throw new OptimisticLockCanNotBeUsedError();\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 8, 13, 16]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _a.sent();\n                        transactionStartedByUs = true;\n                        _a.label = 3;\n                    case 3:\n                        this.expressionMap.queryEntity = true;\n                        return [4 /*yield*/, this.executeEntitiesAndRawResults(queryRunner)];\n                    case 4:\n                        entitiesAndRaw = _a.sent();\n                        this.expressionMap.queryEntity = false;\n                        return [4 /*yield*/, this.executeCountQuery(queryRunner)];\n                    case 5:\n                        count = _a.sent();\n                        results = [entitiesAndRaw.entities, count];\n                        if (!transactionStartedByUs) return [3 /*break*/, 7];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 6:\n                        _a.sent();\n                        _a.label = 7;\n                    case 7: return [2 /*return*/, results];\n                    case 8:\n                        error_4 = _a.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 12];\n                        _a.label = 9;\n                    case 9:\n                        _a.trys.push([9, 11, , 12]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 10:\n                        _a.sent();\n                        return [3 /*break*/, 12];\n                    case 11:\n                        rollbackError_4 = _a.sent();\n                        return [3 /*break*/, 12];\n                    case 12: throw error_4;\n                    case 13:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 15];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 14:\n                        _a.sent();\n                        _a.label = 15;\n                    case 15: return [7 /*endfinally*/];\n                    case 16: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes built SQL query and returns raw data stream.\n     */\n    SelectQueryBuilder.prototype.stream = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, sql, parameters, queryRunner, transactionStartedByUs, releaseFn, results, error_5, rollbackError_5;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.expressionMap.queryEntity = false;\n                        _a = tslib_1.__read(this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 6, 11, 14]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _b.sent();\n                        transactionStartedByUs = true;\n                        _b.label = 3;\n                    case 3:\n                        releaseFn = function () {\n                            if (queryRunner !== _this.queryRunner) // means we created our own query runner\n                                return queryRunner.release();\n                            return;\n                        };\n                        results = queryRunner.stream(sql, parameters, releaseFn, releaseFn);\n                        if (!transactionStartedByUs) return [3 /*break*/, 5];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5: return [2 /*return*/, results];\n                    case 6:\n                        error_5 = _b.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 10];\n                        _b.label = 7;\n                    case 7:\n                        _b.trys.push([7, 9, , 10]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 8:\n                        _b.sent();\n                        return [3 /*break*/, 10];\n                    case 9:\n                        rollbackError_5 = _b.sent();\n                        return [3 /*break*/, 10];\n                    case 10: throw error_5;\n                    case 11:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 13];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 12:\n                        _b.sent();\n                        _b.label = 13;\n                    case 13: return [7 /*endfinally*/];\n                    case 14: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Enables or disables query result caching.\n     */\n    SelectQueryBuilder.prototype.cache = function (enabledOrMillisecondsOrId, maybeMilliseconds) {\n        if (typeof enabledOrMillisecondsOrId === \"boolean\") {\n            this.expressionMap.cache = enabledOrMillisecondsOrId;\n        }\n        else if (typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheDuration = enabledOrMillisecondsOrId;\n        }\n        else if (typeof enabledOrMillisecondsOrId === \"string\" || typeof enabledOrMillisecondsOrId === \"number\") {\n            this.expressionMap.cache = true;\n            this.expressionMap.cacheId = enabledOrMillisecondsOrId;\n        }\n        if (maybeMilliseconds) {\n            this.expressionMap.cacheDuration = maybeMilliseconds;\n        }\n        return this;\n    };\n    /**\n     * Sets extra options that can be used to configure how query builder works.\n     */\n    SelectQueryBuilder.prototype.setOption = function (option) {\n        this.expressionMap.options.push(option);\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    SelectQueryBuilder.prototype.join = function (direction, entityOrProperty, aliasName, condition, parameters, mapToProperty, isMappingMany) {\n        this.setParameters(parameters || {});\n        var joinAttribute = new JoinAttribute(this.connection, this.expressionMap);\n        joinAttribute.direction = direction;\n        joinAttribute.mapToProperty = mapToProperty;\n        joinAttribute.isMappingMany = isMappingMany;\n        joinAttribute.entityOrProperty = entityOrProperty; // relationName\n        joinAttribute.condition = condition; // joinInverseSideCondition\n        // joinAttribute.junctionAlias = joinAttribute.relation.isOwning ? parentAlias + \"_\" + destinationTableAlias : destinationTableAlias + \"_\" + parentAlias;\n        this.expressionMap.joinAttributes.push(joinAttribute);\n        if (joinAttribute.metadata) {\n            // todo: find and set metadata right there?\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                metadata: joinAttribute.metadata\n            });\n            if (joinAttribute.relation && joinAttribute.relation.junctionEntityMetadata) {\n                this.expressionMap.createAlias({\n                    type: \"join\",\n                    name: joinAttribute.junctionAlias,\n                    metadata: joinAttribute.relation.junctionEntityMetadata\n                });\n            }\n        }\n        else {\n            var subQuery = \"\";\n            if (entityOrProperty instanceof Function) {\n                var subQueryBuilder = entityOrProperty(this.subQuery());\n                this.setParameters(subQueryBuilder.getParameters());\n                subQuery = subQueryBuilder.getQuery();\n            }\n            else {\n                subQuery = entityOrProperty;\n            }\n            var isSubQuery = entityOrProperty instanceof Function || entityOrProperty.substr(0, 1) === \"(\" && entityOrProperty.substr(-1) === \")\";\n            joinAttribute.alias = this.expressionMap.createAlias({\n                type: \"join\",\n                name: aliasName,\n                tablePath: isSubQuery === false ? entityOrProperty : undefined,\n                subQuery: isSubQuery === true ? subQuery : undefined,\n            });\n        }\n    };\n    /**\n     * Creates \"SELECT FROM\" part of SQL query.\n     */\n    SelectQueryBuilder.prototype.createSelectExpression = function () {\n        var _this = this;\n        if (!this.expressionMap.mainAlias)\n            throw new Error(\"Cannot build query because main alias is not set (call qb#from method)\");\n        // todo throw exception if selects or from is missing\n        var allSelects = [];\n        var excludedSelects = [];\n        if (this.expressionMap.mainAlias.hasMetadata) {\n            var metadata = this.expressionMap.mainAlias.metadata;\n            allSelects.push.apply(allSelects, tslib_1.__spread(this.buildEscapedEntityColumnSelects(this.expressionMap.mainAlias.name, metadata)));\n            excludedSelects.push.apply(excludedSelects, tslib_1.__spread(this.findEntityColumnSelects(this.expressionMap.mainAlias.name, metadata)));\n        }\n        // add selects from joins\n        this.expressionMap.joinAttributes\n            .forEach(function (join) {\n            if (join.metadata) {\n                allSelects.push.apply(allSelects, tslib_1.__spread(_this.buildEscapedEntityColumnSelects(join.alias.name, join.metadata)));\n                excludedSelects.push.apply(excludedSelects, tslib_1.__spread(_this.findEntityColumnSelects(join.alias.name, join.metadata)));\n            }\n            else {\n                var hasMainAlias = _this.expressionMap.selects.some(function (select) { return select.selection === join.alias.name; });\n                if (hasMainAlias) {\n                    allSelects.push({ selection: _this.escape(join.alias.name) + \".*\" });\n                    var excludedSelect = _this.expressionMap.selects.find(function (select) { return select.selection === join.alias.name; });\n                    excludedSelects.push(excludedSelect);\n                }\n            }\n        });\n        // add all other selects\n        this.expressionMap.selects\n            .filter(function (select) { return excludedSelects.indexOf(select) === -1; })\n            .forEach(function (select) { return allSelects.push({ selection: _this.replacePropertyNames(select.selection), aliasName: select.aliasName }); });\n        // if still selection is empty, then simply set it to all (*)\n        if (allSelects.length === 0)\n            allSelects.push({ selection: \"*\" });\n        var lock = \"\";\n        if (this.connection.driver instanceof SqlServerDriver) {\n            switch (this.expressionMap.lockMode) {\n                case \"pessimistic_read\":\n                    lock = \" WITH (HOLDLOCK, ROWLOCK)\";\n                    break;\n                case \"pessimistic_write\":\n                    lock = \" WITH (UPDLOCK, ROWLOCK)\";\n                    break;\n                case \"dirty_read\":\n                    lock = \" WITH (NOLOCK)\";\n                    break;\n            }\n        }\n        // create a selection query\n        var froms = this.expressionMap.aliases\n            .filter(function (alias) { return alias.type === \"from\" && (alias.tablePath || alias.subQuery); })\n            .map(function (alias) {\n            if (alias.subQuery)\n                return alias.subQuery + \" \" + _this.escape(alias.name);\n            return _this.getTableName(alias.tablePath) + \" \" + _this.escape(alias.name);\n        });\n        var select = this.createSelectDistinctExpression();\n        var selection = allSelects.map(function (select) { return select.selection + (select.aliasName ? \" AS \" + _this.escape(select.aliasName) : \"\"); }).join(\", \");\n        return select + selection + \" FROM \" + froms.join(\", \") + lock;\n    };\n    /**\n     * Creates select | select distinct part of SQL query.\n     */\n    SelectQueryBuilder.prototype.createSelectDistinctExpression = function () {\n        var _this = this;\n        var _a = this.expressionMap, selectDistinct = _a.selectDistinct, selectDistinctOn = _a.selectDistinctOn;\n        var driver = this.connection.driver;\n        var select = \"SELECT \";\n        if (driver instanceof PostgresDriver && selectDistinctOn.length > 0) {\n            var selectDistinctOnMap = selectDistinctOn.map(function (on) { return _this.replacePropertyNames(on); }).join(\", \");\n            select = \"SELECT DISTINCT ON (\" + selectDistinctOnMap + \") \";\n        }\n        else if (selectDistinct) {\n            select = \"SELECT DISTINCT \";\n        }\n        return select;\n    };\n    /**\n     * Creates \"JOIN\" part of SQL query.\n     */\n    SelectQueryBuilder.prototype.createJoinExpression = function () {\n        // examples:\n        // select from owning side\n        // qb.select(\"post\")\n        //     .leftJoinAndSelect(\"post.category\", \"category\");\n        // select from non-owning side\n        // qb.select(\"category\")\n        //     .leftJoinAndSelect(\"category.post\", \"post\");\n        var _this = this;\n        var joins = this.expressionMap.joinAttributes.map(function (joinAttr) {\n            var relation = joinAttr.relation;\n            var destinationTableName = joinAttr.tablePath;\n            var destinationTableAlias = joinAttr.alias.name;\n            var appendedCondition = joinAttr.condition ? \" AND (\" + joinAttr.condition + \")\" : \"\";\n            var parentAlias = joinAttr.parentAlias;\n            // if join was build without relation (e.g. without \"post.category\") then it means that we have direct\n            // table to join, without junction table involved. This means we simply join direct table.\n            if (!parentAlias || !relation) {\n                var destinationJoin = joinAttr.alias.subQuery ? joinAttr.alias.subQuery : _this.getTableName(destinationTableName);\n                return \" \" + joinAttr.direction + \" JOIN \" + destinationJoin + \" \" + _this.escape(destinationTableAlias) +\n                    (joinAttr.condition ? \" ON \" + _this.replacePropertyNames(joinAttr.condition) : \"\");\n            }\n            // if real entity relation is involved\n            if (relation.isManyToOne || relation.isOneToOneOwner) {\n                // JOIN `category` `category` ON `category`.`id` = `post`.`categoryId`\n                var condition = relation.joinColumns.map(function (joinColumn) {\n                    return destinationTableAlias + \".\" + joinColumn.referencedColumn.propertyPath + \"=\" +\n                        parentAlias + \".\" + relation.propertyPath + \".\" + joinColumn.referencedColumn.propertyPath;\n                }).join(\" AND \");\n                return \" \" + joinAttr.direction + \" JOIN \" + _this.getTableName(destinationTableName) + \" \" + _this.escape(destinationTableAlias) + \" ON \" + _this.replacePropertyNames(condition + appendedCondition);\n            }\n            else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                // JOIN `post` `post` ON `post`.`categoryId` = `category`.`id`\n                var condition = relation.inverseRelation.joinColumns.map(function (joinColumn) {\n                    return destinationTableAlias + \".\" + relation.inverseRelation.propertyPath + \".\" + joinColumn.referencedColumn.propertyPath + \"=\" +\n                        parentAlias + \".\" + joinColumn.referencedColumn.propertyPath;\n                }).join(\" AND \");\n                return \" \" + joinAttr.direction + \" JOIN \" + _this.getTableName(destinationTableName) + \" \" + _this.escape(destinationTableAlias) + \" ON \" + _this.replacePropertyNames(condition + appendedCondition);\n            }\n            else { // means many-to-many\n                var junctionTableName = relation.junctionEntityMetadata.tablePath;\n                var junctionAlias_1 = joinAttr.junctionAlias;\n                var junctionCondition = \"\", destinationCondition = \"\";\n                if (relation.isOwning) {\n                    junctionCondition = relation.joinColumns.map(function (joinColumn) {\n                        // `post_category`.`postId` = `post`.`id`\n                        return junctionAlias_1 + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn.propertyPath;\n                    }).join(\" AND \");\n                    destinationCondition = relation.inverseJoinColumns.map(function (joinColumn) {\n                        // `category`.`id` = `post_category`.`categoryId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn.propertyPath + \"=\" + junctionAlias_1 + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n                }\n                else {\n                    junctionCondition = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) {\n                        // `post_category`.`categoryId` = `category`.`id`\n                        return junctionAlias_1 + \".\" + joinColumn.propertyPath + \"=\" + parentAlias + \".\" + joinColumn.referencedColumn.propertyPath;\n                    }).join(\" AND \");\n                    destinationCondition = relation.inverseRelation.joinColumns.map(function (joinColumn) {\n                        // `post`.`id` = `post_category`.`postId`\n                        return destinationTableAlias + \".\" + joinColumn.referencedColumn.propertyPath + \"=\" + junctionAlias_1 + \".\" + joinColumn.propertyPath;\n                    }).join(\" AND \");\n                }\n                return \" \" + joinAttr.direction + \" JOIN \" + _this.getTableName(junctionTableName) + \" \" + _this.escape(junctionAlias_1) + \" ON \" + _this.replacePropertyNames(junctionCondition) +\n                    \" \" + joinAttr.direction + \" JOIN \" + _this.getTableName(destinationTableName) + \" \" + _this.escape(destinationTableAlias) + \" ON \" + _this.replacePropertyNames(destinationCondition + appendedCondition);\n            }\n        });\n        return joins.join(\" \");\n    };\n    /**\n     * Creates \"GROUP BY\" part of SQL query.\n     */\n    SelectQueryBuilder.prototype.createGroupByExpression = function () {\n        if (!this.expressionMap.groupBys || !this.expressionMap.groupBys.length)\n            return \"\";\n        return \" GROUP BY \" + this.replacePropertyNames(this.expressionMap.groupBys.join(\", \"));\n    };\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    SelectQueryBuilder.prototype.createOrderByExpression = function () {\n        var _this = this;\n        var orderBys = this.expressionMap.allOrderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                .map(function (columnName) {\n                if (typeof orderBys[columnName] === \"string\") {\n                    return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                }\n                else {\n                    return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName].order + \" \" + orderBys[columnName].nulls;\n                }\n            })\n                .join(\", \");\n        return \"\";\n    };\n    /**\n     * Creates \"LIMIT\" and \"OFFSET\" parts of SQL query.\n     */\n    SelectQueryBuilder.prototype.createLimitOffsetExpression = function () {\n        // in the case if nothing is joined in the query builder we don't need to make two requests to get paginated results\n        // we can use regular limit / offset, that's why we add offset and limit construction here based on skip and take values\n        var offset = this.expressionMap.offset, limit = this.expressionMap.limit;\n        if (!offset && !limit && this.expressionMap.joinAttributes.length === 0) {\n            offset = this.expressionMap.skip;\n            limit = this.expressionMap.take;\n        }\n        if (this.connection.driver instanceof SqlServerDriver) {\n            // Due to a limitation in SQL Server's parser implementation it does not support using\n            // OFFSET or FETCH NEXT without an ORDER BY clause being provided. In cases where the\n            // user does not request one we insert a dummy ORDER BY that does nothing and should\n            // have no effect on the query planner or on the order of the results returned.\n            // https://dba.stackexchange.com/a/193799\n            var prefix = \"\";\n            if ((limit || offset) && Object.keys(this.expressionMap.allOrderBys).length <= 0) {\n                prefix = \" ORDER BY (SELECT NULL)\";\n            }\n            if (limit && offset)\n                return prefix + \" OFFSET \" + offset + \" ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (limit)\n                return prefix + \" OFFSET 0 ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (offset)\n                return prefix + \" OFFSET \" + offset + \" ROWS\";\n        }\n        else if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver || this.connection.driver instanceof SapDriver) {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                throw new OffsetWithoutLimitNotSupportedError();\n        }\n        else if (this.connection.driver instanceof AbstractSqliteDriver) {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" LIMIT -1 OFFSET \" + offset;\n        }\n        else if (this.connection.driver instanceof OracleDriver) {\n            if (limit && offset)\n                return \" OFFSET \" + offset + \" ROWS FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (limit)\n                return \" FETCH NEXT \" + limit + \" ROWS ONLY\";\n            if (offset)\n                return \" OFFSET \" + offset + \" ROWS\";\n        }\n        else {\n            if (limit && offset)\n                return \" LIMIT \" + limit + \" OFFSET \" + offset;\n            if (limit)\n                return \" LIMIT \" + limit;\n            if (offset)\n                return \" OFFSET \" + offset;\n        }\n        return \"\";\n    };\n    /**\n     * Creates \"LOCK\" part of SQL query.\n     */\n    SelectQueryBuilder.prototype.createLockExpression = function () {\n        var driver = this.connection.driver;\n        switch (this.expressionMap.lockMode) {\n            case \"pessimistic_read\":\n                if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver) {\n                    return \" LOCK IN SHARE MODE\";\n                }\n                else if (driver instanceof PostgresDriver) {\n                    return \" FOR SHARE\";\n                }\n                else if (driver instanceof OracleDriver) {\n                    return \" FOR UPDATE\";\n                }\n                else if (driver instanceof SqlServerDriver) {\n                    return \"\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write\":\n                if (driver instanceof MysqlDriver || driver instanceof AuroraDataApiDriver || driver instanceof PostgresDriver || driver instanceof OracleDriver) {\n                    return \" FOR UPDATE\";\n                }\n                else if (driver instanceof SqlServerDriver) {\n                    return \"\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_partial_write\":\n                if (driver instanceof PostgresDriver) {\n                    return \" FOR UPDATE SKIP LOCKED\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"pessimistic_write_or_fail\":\n                if (driver instanceof PostgresDriver) {\n                    return \" FOR UPDATE NOWAIT\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            case \"for_no_key_update\":\n                if (driver instanceof PostgresDriver) {\n                    return \" FOR NO KEY UPDATE\";\n                }\n                else {\n                    throw new LockNotSupportedOnGivenDriverError();\n                }\n            default:\n                return \"\";\n        }\n    };\n    /**\n     * Creates \"HAVING\" part of SQL query.\n     */\n    SelectQueryBuilder.prototype.createHavingExpression = function () {\n        var _this = this;\n        if (!this.expressionMap.havings || !this.expressionMap.havings.length)\n            return \"\";\n        var conditions = this.expressionMap.havings.map(function (having, index) {\n            switch (having.type) {\n                case \"and\":\n                    return (index > 0 ? \"AND \" : \"\") + _this.replacePropertyNames(having.condition);\n                case \"or\":\n                    return (index > 0 ? \"OR \" : \"\") + _this.replacePropertyNames(having.condition);\n                default:\n                    return _this.replacePropertyNames(having.condition);\n            }\n        }).join(\" \");\n        if (!conditions.length)\n            return \"\";\n        return \" HAVING \" + conditions;\n    };\n    SelectQueryBuilder.prototype.buildEscapedEntityColumnSelects = function (aliasName, metadata) {\n        var _this = this;\n        var hasMainAlias = this.expressionMap.selects.some(function (select) { return select.selection === aliasName; });\n        var columns = [];\n        if (hasMainAlias) {\n            columns.push.apply(columns, tslib_1.__spread(metadata.columns.filter(function (column) { return column.isSelect === true; })));\n        }\n        columns.push.apply(columns, tslib_1.__spread(metadata.columns.filter(function (column) {\n            return _this.expressionMap.selects.some(function (select) { return select.selection === aliasName + \".\" + column.propertyPath; });\n        })));\n        // if user used partial selection and did not select some primary columns which are required to be selected\n        // we select those primary columns and mark them as \"virtual\". Later virtual column values will be removed from final entity\n        // to make entity contain exactly what user selected\n        if (columns.length === 0) // however not in the case when nothing (even partial) was selected from this target (for example joins without selection)\n            return [];\n        var nonSelectedPrimaryColumns = this.expressionMap.queryEntity ? metadata.primaryColumns.filter(function (primaryColumn) { return columns.indexOf(primaryColumn) === -1; }) : [];\n        var allColumns = tslib_1.__spread(columns, nonSelectedPrimaryColumns);\n        return allColumns.map(function (column) {\n            var selection = _this.expressionMap.selects.find(function (select) { return select.selection === aliasName + \".\" + column.propertyPath; });\n            var selectionPath = _this.escape(aliasName) + \".\" + _this.escape(column.databaseName);\n            if (_this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                if (_this.connection.driver instanceof MysqlDriver || _this.connection.driver instanceof AuroraDataApiDriver) {\n                    var useLegacy = _this.connection.driver.options.legacySpatialSupport;\n                    var asText = useLegacy ? \"AsText\" : \"ST_AsText\";\n                    selectionPath = asText + \"(\" + selectionPath + \")\";\n                }\n                if (_this.connection.driver instanceof PostgresDriver)\n                    // cast to JSON to trigger parsing in the driver\n                    selectionPath = \"ST_AsGeoJSON(\" + selectionPath + \")::json\";\n                if (_this.connection.driver instanceof SqlServerDriver)\n                    selectionPath = selectionPath + \".ToString()\";\n            }\n            return {\n                selection: selectionPath,\n                aliasName: selection && selection.aliasName ? selection.aliasName : DriverUtils.buildColumnAlias(_this.connection.driver, aliasName, column.databaseName),\n                // todo: need to keep in mind that custom selection.aliasName breaks hydrator. fix it later!\n                virtual: selection ? selection.virtual === true : (hasMainAlias ? false : true),\n            };\n        });\n    };\n    SelectQueryBuilder.prototype.findEntityColumnSelects = function (aliasName, metadata) {\n        var mainSelect = this.expressionMap.selects.find(function (select) { return select.selection === aliasName; });\n        if (mainSelect)\n            return [mainSelect];\n        return this.expressionMap.selects.filter(function (select) {\n            return metadata.columns.some(function (column) { return select.selection === aliasName + \".\" + column.propertyPath; });\n        });\n    };\n    SelectQueryBuilder.prototype.executeCountQuery = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var mainAlias, metadata, distinctAlias, countSql, results;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        mainAlias = this.expressionMap.mainAlias.name;\n                        metadata = this.expressionMap.mainAlias.metadata;\n                        distinctAlias = this.escape(mainAlias);\n                        countSql = \"\";\n                        if (metadata.hasMultiplePrimaryKeys) {\n                            if (this.connection.driver instanceof AbstractSqliteDriver) {\n                                countSql = \"COUNT(DISTINCT(\" + metadata.primaryColumns.map(function (primaryColumn, index) {\n                                    var propertyName = _this.escape(primaryColumn.databaseName);\n                                    return distinctAlias + \".\" + propertyName;\n                                }).join(\" || \") + \")) as \\\"cnt\\\"\";\n                            }\n                            else {\n                                countSql = \"COUNT(DISTINCT(CONCAT(\" + metadata.primaryColumns.map(function (primaryColumn, index) {\n                                    var propertyName = _this.escape(primaryColumn.databaseName);\n                                    return distinctAlias + \".\" + propertyName;\n                                }).join(\", \") + \"))) as \\\"cnt\\\"\";\n                            }\n                        }\n                        else {\n                            countSql = \"COUNT(DISTINCT(\" + metadata.primaryColumns.map(function (primaryColumn, index) {\n                                var propertyName = _this.escape(primaryColumn.databaseName);\n                                return distinctAlias + \".\" + propertyName;\n                            }).join(\", \") + \")) as \\\"cnt\\\"\";\n                        }\n                        return [4 /*yield*/, this.clone()\n                                .orderBy()\n                                .groupBy()\n                                .offset(undefined)\n                                .limit(undefined)\n                                .skip(undefined)\n                                .take(undefined)\n                                .select(countSql)\n                                .setOption(\"disable-global-order\")\n                                .loadRawResults(queryRunner)];\n                    case 1:\n                        results = _a.sent();\n                        if (!results || !results[0] || !results[0][\"cnt\"])\n                            return [2 /*return*/, 0];\n                        return [2 /*return*/, parseInt(results[0][\"cnt\"])];\n                }\n            });\n        });\n    };\n    /**\n     * Executes sql generated by query builder and returns object with raw results and entities created from them.\n     */\n    SelectQueryBuilder.prototype.executeEntitiesAndRawResults = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var metadata, relationIdLoader, relationCountLoader, relationIdMetadataTransformer, relationCountMetadataTransformer, rawResults, entities, _a, selects, orderBys_1, metadata_1, mainAliasName_1, querySelects, condition, parameters_1, ids, areAllNumbers, rawRelationIdResults, rawRelationCountResults, transformer, broadcastResult;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!this.expressionMap.mainAlias)\n                            throw new Error(\"Alias is not set. Use \\\"from\\\" method to set an alias.\");\n                        if ((this.expressionMap.lockMode === \"pessimistic_read\" || this.expressionMap.lockMode === \"pessimistic_write\" || this.expressionMap.lockMode === \"pessimistic_partial_write\" || this.expressionMap.lockMode === \"pessimistic_write_or_fail\" || this.expressionMap.lockMode === \"for_no_key_update\") && !queryRunner.isTransactionActive)\n                            throw new PessimisticLockTransactionRequiredError();\n                        if (this.expressionMap.lockMode === \"optimistic\") {\n                            metadata = this.expressionMap.mainAlias.metadata;\n                            if (!metadata.versionColumn && !metadata.updateDateColumn)\n                                throw new NoVersionOrUpdateDateColumnError(metadata.name);\n                        }\n                        relationIdLoader = new RelationIdLoader(this.connection, queryRunner, this.expressionMap.relationIdAttributes);\n                        relationCountLoader = new RelationCountLoader(this.connection, queryRunner, this.expressionMap.relationCountAttributes);\n                        relationIdMetadataTransformer = new RelationIdMetadataToAttributeTransformer(this.expressionMap);\n                        relationIdMetadataTransformer.transform();\n                        relationCountMetadataTransformer = new RelationCountMetadataToAttributeTransformer(this.expressionMap);\n                        relationCountMetadataTransformer.transform();\n                        rawResults = [], entities = [];\n                        if (!((this.expressionMap.skip || this.expressionMap.take) && this.expressionMap.joinAttributes.length > 0)) return [3 /*break*/, 4];\n                        _a = tslib_1.__read(this.createOrderByCombinedWithSelectExpression(\"distinctAlias\"), 2), selects = _a[0], orderBys_1 = _a[1];\n                        metadata_1 = this.expressionMap.mainAlias.metadata;\n                        mainAliasName_1 = this.expressionMap.mainAlias.name;\n                        querySelects = metadata_1.primaryColumns.map(function (primaryColumn) {\n                            var distinctAlias = _this.escape(\"distinctAlias\");\n                            var columnAlias = _this.escape(DriverUtils.buildColumnAlias(_this.connection.driver, mainAliasName_1, primaryColumn.databaseName));\n                            if (!orderBys_1[columnAlias]) // make sure we aren't overriding user-defined order in inverse direction\n                                orderBys_1[columnAlias] = \"ASC\";\n                            return distinctAlias + \".\" + columnAlias + \" as \\\"ids_\" + DriverUtils.buildColumnAlias(_this.connection.driver, mainAliasName_1, primaryColumn.databaseName) + \"\\\"\";\n                        });\n                        return [4 /*yield*/, new SelectQueryBuilder(this.connection, queryRunner)\n                                .select(\"DISTINCT \" + querySelects.join(\", \"))\n                                .addSelect(selects)\n                                .from(\"(\" + this.clone().orderBy().getQuery() + \")\", \"distinctAlias\")\n                                .offset(this.expressionMap.skip)\n                                .limit(this.expressionMap.take)\n                                .orderBy(orderBys_1)\n                                .cache(this.expressionMap.cache ? this.expressionMap.cache : this.expressionMap.cacheId, this.expressionMap.cacheDuration)\n                                .setParameters(this.getParameters())\n                                .setNativeParameters(this.expressionMap.nativeParameters)\n                                .getRawMany()];\n                    case 1:\n                        rawResults = _b.sent();\n                        if (!(rawResults.length > 0)) return [3 /*break*/, 3];\n                        condition = \"\";\n                        parameters_1 = {};\n                        if (metadata_1.hasMultiplePrimaryKeys) {\n                            condition = rawResults.map(function (result, index) {\n                                return metadata_1.primaryColumns.map(function (primaryColumn) {\n                                    var paramKey = \"orm_distinct_ids_\" + index + \"_\" + primaryColumn.databaseName;\n                                    parameters_1[paramKey] = result[\"ids_\" + mainAliasName_1 + \"_\" + primaryColumn.databaseName];\n                                    return mainAliasName_1 + \".\" + primaryColumn.propertyPath + \"=:\" + paramKey;\n                                }).join(\" AND \");\n                            }).join(\" OR \");\n                        }\n                        else {\n                            ids = rawResults.map(function (result) { return result[\"ids_\" + DriverUtils.buildColumnAlias(_this.connection.driver, mainAliasName_1, metadata_1.primaryColumns[0].databaseName)]; });\n                            areAllNumbers = ids.every(function (id) { return typeof id === \"number\"; });\n                            if (areAllNumbers) {\n                                // fixes #190. if all numbers then its safe to perform query without parameter\n                                condition = mainAliasName_1 + \".\" + metadata_1.primaryColumns[0].propertyPath + \" IN (\" + ids.join(\", \") + \")\";\n                            }\n                            else {\n                                parameters_1[\"orm_distinct_ids\"] = ids;\n                                condition = mainAliasName_1 + \".\" + metadata_1.primaryColumns[0].propertyPath + \" IN (:...orm_distinct_ids)\";\n                            }\n                        }\n                        return [4 /*yield*/, this.clone()\n                                .mergeExpressionMap({ extraAppendedAndWhereCondition: condition })\n                                .setParameters(parameters_1)\n                                .loadRawResults(queryRunner)];\n                    case 2:\n                        rawResults = _b.sent();\n                        _b.label = 3;\n                    case 3: return [3 /*break*/, 6];\n                    case 4: return [4 /*yield*/, this.loadRawResults(queryRunner)];\n                    case 5:\n                        rawResults = _b.sent();\n                        _b.label = 6;\n                    case 6:\n                        if (!(rawResults.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, relationIdLoader.load(rawResults)];\n                    case 7:\n                        rawRelationIdResults = _b.sent();\n                        return [4 /*yield*/, relationCountLoader.load(rawResults)];\n                    case 8:\n                        rawRelationCountResults = _b.sent();\n                        transformer = new RawSqlResultsToEntityTransformer(this.expressionMap, this.connection.driver, rawRelationIdResults, rawRelationCountResults, this.queryRunner);\n                        entities = transformer.transform(rawResults, this.expressionMap.mainAlias);\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 10];\n                        broadcastResult = new BroadcasterResult();\n                        queryRunner.broadcaster.broadcastLoadEventsForAll(broadcastResult, this.expressionMap.mainAlias.metadata, entities);\n                        if (!(broadcastResult.promises.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, Promise.all(broadcastResult.promises)];\n                    case 9:\n                        _b.sent();\n                        _b.label = 10;\n                    case 10: return [2 /*return*/, {\n                            raw: rawResults,\n                            entities: entities,\n                        }];\n                }\n            });\n        });\n    };\n    SelectQueryBuilder.prototype.createOrderByCombinedWithSelectExpression = function (parentAlias) {\n        var _this = this;\n        // if table has a default order then apply it\n        var orderBys = this.expressionMap.allOrderBys;\n        var selectString = Object.keys(orderBys)\n            .map(function (orderCriteria) {\n            if (orderCriteria.indexOf(\".\") !== -1) {\n                var _a = tslib_1.__read(orderCriteria.split(\".\"), 2), aliasName = _a[0], propertyPath = _a[1];\n                var alias = _this.expressionMap.findAliasByName(aliasName);\n                var column = alias.metadata.findColumnWithPropertyName(propertyPath);\n                return _this.escape(parentAlias) + \".\" + _this.escape(DriverUtils.buildColumnAlias(_this.connection.driver, aliasName, column.databaseName));\n            }\n            else {\n                if (_this.expressionMap.selects.find(function (select) { return select.selection === orderCriteria || select.aliasName === orderCriteria; }))\n                    return _this.escape(parentAlias) + \".\" + orderCriteria;\n                return \"\";\n            }\n        })\n            .join(\", \");\n        var orderByObject = {};\n        Object.keys(orderBys).forEach(function (orderCriteria) {\n            if (orderCriteria.indexOf(\".\") !== -1) {\n                var _a = tslib_1.__read(orderCriteria.split(\".\"), 2), aliasName = _a[0], propertyPath = _a[1];\n                var alias = _this.expressionMap.findAliasByName(aliasName);\n                var column = alias.metadata.findColumnWithPropertyName(propertyPath);\n                orderByObject[_this.escape(parentAlias) + \".\" + _this.escape(DriverUtils.buildColumnAlias(_this.connection.driver, aliasName, column.databaseName))] = orderBys[orderCriteria];\n            }\n            else {\n                if (_this.expressionMap.selects.find(function (select) { return select.selection === orderCriteria || select.aliasName === orderCriteria; })) {\n                    orderByObject[_this.escape(parentAlias) + \".\" + orderCriteria] = orderBys[orderCriteria];\n                }\n                else {\n                    orderByObject[orderCriteria] = orderBys[orderCriteria];\n                }\n            }\n        });\n        return [selectString, orderByObject];\n    };\n    /**\n     * Loads raw results from the database.\n     */\n    SelectQueryBuilder.prototype.loadRawResults = function (queryRunner) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, sql, parameters, queryId, cacheOptions, savedQueryResultCacheOptions, results;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = tslib_1.__read(this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];\n                        queryId = sql + \" -- PARAMETERS: \" + JSON.stringify(parameters);\n                        cacheOptions = typeof this.connection.options.cache === \"object\" ? this.connection.options.cache : {};\n                        savedQueryResultCacheOptions = undefined;\n                        if (!(this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.connection.queryResultCache.getFromCache({\n                                identifier: this.expressionMap.cacheId,\n                                query: queryId,\n                                duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000\n                            }, queryRunner)];\n                    case 1:\n                        savedQueryResultCacheOptions = _b.sent();\n                        if (savedQueryResultCacheOptions && !this.connection.queryResultCache.isExpired(savedQueryResultCacheOptions))\n                            return [2 /*return*/, JSON.parse(savedQueryResultCacheOptions.result)];\n                        _b.label = 2;\n                    case 2: return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 3:\n                        results = _b.sent();\n                        if (!(this.connection.queryResultCache && (this.expressionMap.cache || cacheOptions.alwaysEnabled))) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.connection.queryResultCache.storeInCache({\n                                identifier: this.expressionMap.cacheId,\n                                query: queryId,\n                                time: new Date().getTime(),\n                                duration: this.expressionMap.cacheDuration || cacheOptions.duration || 1000,\n                                result: JSON.stringify(results)\n                            }, savedQueryResultCacheOptions, queryRunner)];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5: return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Merges into expression map given expression map properties.\n     */\n    SelectQueryBuilder.prototype.mergeExpressionMap = function (expressionMap) {\n        ObjectUtils.assign(this.expressionMap, expressionMap);\n        return this;\n    };\n    /**\n     * Normalizes a give number - converts to int if possible.\n     */\n    SelectQueryBuilder.prototype.normalizeNumber = function (num) {\n        if (typeof num === \"number\" || num === undefined || num === null)\n            return num;\n        return Number(num);\n    };\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    SelectQueryBuilder.prototype.obtainQueryRunner = function () {\n        return this.queryRunner || this.connection.createQueryRunner(\"slave\");\n    };\n    return SelectQueryBuilder;\n}(QueryBuilder));\nexport { SelectQueryBuilder };\n\n//# sourceMappingURL=SelectQueryBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { AbstractSqliteDriver } from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { MissingDeleteDateColumnError } from \"../error/MissingDeleteDateColumnError\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { EntitySchema } from \"../entity-schema/EntitySchema\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar SoftDeleteQueryBuilder = /** @class */ (function (_super) {\n    tslib_1.__extends(SoftDeleteQueryBuilder, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function SoftDeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {\n        var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;\n        _this.expressionMap.aliasNamePrefixingEnabled = false;\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    SoftDeleteQueryBuilder.prototype.getQuery = function () {\n        var sql = this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return sql.trim();\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    SoftDeleteQueryBuilder.prototype.execute = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, transactionStartedByUs, broadcastResult, returningResultsEntityUpdator, _a, sql, parameters, updateResult, result, driver, broadcastResult, error_1, rollbackError_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 13, 18, 23]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _b.sent();\n                        transactionStartedByUs = true;\n                        _b.label = 3;\n                    case 3:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 5];\n                        broadcastResult = new BroadcasterResult();\n                        queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n                        if (!(broadcastResult.promises.length > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, Promise.all(broadcastResult.promises)];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n                        if (this.expressionMap.updateEntity === true &&\n                            this.expressionMap.mainAlias.hasMetadata &&\n                            this.expressionMap.whereEntities.length > 0) {\n                            this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n                        }\n                        _a = tslib_1.__read(this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];\n                        updateResult = new UpdateResult();\n                        return [4 /*yield*/, queryRunner.query(sql, parameters)];\n                    case 6:\n                        result = _b.sent();\n                        driver = queryRunner.connection.driver;\n                        if (driver instanceof PostgresDriver) {\n                            updateResult.raw = result[0];\n                            updateResult.affected = result[1];\n                        }\n                        else {\n                            updateResult.raw = result;\n                        }\n                        if (!(this.expressionMap.updateEntity === true &&\n                            this.expressionMap.mainAlias.hasMetadata &&\n                            this.expressionMap.whereEntities.length > 0)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities)];\n                    case 7:\n                        _b.sent();\n                        _b.label = 8;\n                    case 8:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 10];\n                        broadcastResult = new BroadcasterResult();\n                        queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n                        if (!(broadcastResult.promises.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, Promise.all(broadcastResult.promises)];\n                    case 9:\n                        _b.sent();\n                        _b.label = 10;\n                    case 10:\n                        if (!transactionStartedByUs) return [3 /*break*/, 12];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 11:\n                        _b.sent();\n                        _b.label = 12;\n                    case 12: return [2 /*return*/, updateResult];\n                    case 13:\n                        error_1 = _b.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 17];\n                        _b.label = 14;\n                    case 14:\n                        _b.trys.push([14, 16, , 17]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 15:\n                        _b.sent();\n                        return [3 /*break*/, 17];\n                    case 16:\n                        rollbackError_1 = _b.sent();\n                        return [3 /*break*/, 17];\n                    case 17: throw error_1;\n                    case 18:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 20];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 19:\n                        _b.sent();\n                        _b.label = 20;\n                    case 20:\n                        if (!(this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive)) return [3 /*break*/, 22];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 21:\n                        _b.sent();\n                        _b.label = 22;\n                    case 22: return [7 /*endfinally*/];\n                    case 23: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    SoftDeleteQueryBuilder.prototype.from = function (entityTarget, aliasName) {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        var mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return this;\n    };\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    SoftDeleteQueryBuilder.prototype.where = function (where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        var condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    SoftDeleteQueryBuilder.prototype.andWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    SoftDeleteQueryBuilder.prototype.orWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    SoftDeleteQueryBuilder.prototype.whereInIds = function (ids) {\n        return this.where(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    SoftDeleteQueryBuilder.prototype.andWhereInIds = function (ids) {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    SoftDeleteQueryBuilder.prototype.orWhereInIds = function (ids) {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    SoftDeleteQueryBuilder.prototype.output = function (output) {\n        return this.returning(output);\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    SoftDeleteQueryBuilder.prototype.returning = function (returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n        this.expressionMap.returning = returning;\n        return this;\n    };\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    SoftDeleteQueryBuilder.prototype.orderBy = function (sort, order, nulls) {\n        if (order === void 0) { order = \"ASC\"; }\n        var _a, _b;\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort;\n            }\n            else {\n                if (nulls) {\n                    this.expressionMap.orderBys = (_a = {}, _a[sort] = { order: order, nulls: nulls }, _a);\n                }\n                else {\n                    this.expressionMap.orderBys = (_b = {}, _b[sort] = order, _b);\n                }\n            }\n        }\n        else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    };\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    SoftDeleteQueryBuilder.prototype.addOrderBy = function (sort, order, nulls) {\n        if (order === void 0) { order = \"ASC\"; }\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order: order, nulls: nulls };\n        }\n        else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    };\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    SoftDeleteQueryBuilder.prototype.limit = function (limit) {\n        this.expressionMap.limit = limit;\n        return this;\n    };\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    SoftDeleteQueryBuilder.prototype.whereEntity = function (entity) {\n        var _this = this;\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            throw new Error(\".whereEntity method can only be used on queries which update real entity table.\");\n        this.expressionMap.wheres = [];\n        var entities = Array.isArray(entity) ? entity : [entity];\n        entities.forEach(function (entity) {\n            var entityIdMap = _this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new Error(\"Provided entity does not have ids set, cannot perform operation.\");\n            _this.orWhereInIds(entityIdMap);\n        });\n        this.expressionMap.whereEntities = entities;\n        return this;\n    };\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    SoftDeleteQueryBuilder.prototype.updateEntity = function (enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    SoftDeleteQueryBuilder.prototype.createUpdateExpression = function () {\n        var metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined;\n        if (!metadata)\n            throw new Error(\"Cannot get entity metadata for the given alias \\\"\" + this.expressionMap.mainAlias + \"\\\"\");\n        if (!metadata.deleteDateColumn) {\n            throw new MissingDeleteDateColumnError(metadata);\n        }\n        // prepare columns and values to be updated\n        var updateColumnAndValues = [];\n        var newParameters = {};\n        switch (this.expressionMap.queryType) {\n            case \"soft-delete\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\");\n                break;\n            case \"restore\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = NULL\");\n                break;\n            default:\n                throw new Error(\"The queryType must be \\\"soft-delete\\\" or \\\"restore\\\"\");\n        }\n        if (metadata.versionColumn)\n            updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n        if (metadata.updateDateColumn)\n            updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n        // because some drivers like mysql depend on order of parameters\n        if (this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver) {\n            this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\n        }\n        // get a table name and all column database names\n        var whereExpression = this.createWhereExpression();\n        var returningExpression = this.createReturningExpression();\n        // generate and return sql update query\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + whereExpression + \" RETURNING \" + returningExpression;\n        }\n        else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + \" OUTPUT \" + returningExpression + whereExpression;\n        }\n        else {\n            return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + whereExpression; // todo: how do we replace aliases in where to nothing?\n        }\n    };\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    SoftDeleteQueryBuilder.prototype.createOrderByExpression = function () {\n        var _this = this;\n        var orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                .map(function (columnName) {\n                if (typeof orderBys[columnName] === \"string\") {\n                    return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                }\n                else {\n                    return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName].order + \" \" + orderBys[columnName].nulls;\n                }\n            })\n                .join(\", \");\n        return \"\";\n    };\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    SoftDeleteQueryBuilder.prototype.createLimitExpression = function () {\n        var limit = this.expressionMap.limit;\n        if (limit) {\n            if (this.connection.driver instanceof MysqlDriver) {\n                return \" LIMIT \" + limit;\n            }\n            else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n        return \"\";\n    };\n    return SoftDeleteQueryBuilder;\n}(QueryBuilder));\nexport { SoftDeleteQueryBuilder };\n\n//# sourceMappingURL=SoftDeleteQueryBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { SapDriver } from \"../driver/sap/SapDriver\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { AbstractSqliteDriver } from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { EntityColumnNotFound } from \"../error/EntityColumnNotFound\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nvar UpdateQueryBuilder = /** @class */ (function (_super) {\n    tslib_1.__extends(UpdateQueryBuilder, _super);\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function UpdateQueryBuilder(connectionOrQueryBuilder, queryRunner) {\n        var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;\n        _this.expressionMap.aliasNamePrefixingEnabled = false;\n        return _this;\n    }\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    UpdateQueryBuilder.prototype.getQuery = function () {\n        var sql = this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return sql.trim();\n    };\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    UpdateQueryBuilder.prototype.execute = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var queryRunner, transactionStartedByUs, broadcastResult, declareSql, selectOutputSql, returningResultsEntityUpdator, _a, updateSql, parameters, updateResult, statements, result, broadcastResult, error_1, rollbackError_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        queryRunner = this.obtainQueryRunner();\n                        transactionStartedByUs = false;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 13, 18, 23]);\n                        if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, queryRunner.startTransaction()];\n                    case 2:\n                        _b.sent();\n                        transactionStartedByUs = true;\n                        _b.label = 3;\n                    case 3:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 5];\n                        broadcastResult = new BroadcasterResult();\n                        queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata, this.expressionMap.valuesSet);\n                        if (!(broadcastResult.promises.length > 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, Promise.all(broadcastResult.promises)];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        declareSql = null;\n                        selectOutputSql = null;\n                        returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n                        if (this.expressionMap.updateEntity === true &&\n                            this.expressionMap.mainAlias.hasMetadata &&\n                            this.expressionMap.whereEntities.length > 0) {\n                            this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n                            if (this.expressionMap.extraReturningColumns.length > 0 && this.connection.driver instanceof SqlServerDriver) {\n                                declareSql = this.connection.driver.buildTableVariableDeclaration(\"@OutputTable\", this.expressionMap.extraReturningColumns);\n                                selectOutputSql = \"SELECT * FROM @OutputTable\";\n                            }\n                        }\n                        _a = tslib_1.__read(this.getQueryAndParameters(), 2), updateSql = _a[0], parameters = _a[1];\n                        updateResult = new UpdateResult();\n                        statements = [declareSql, updateSql, selectOutputSql];\n                        return [4 /*yield*/, queryRunner.query(statements.filter(function (sql) { return sql != null; }).join(\";\\n\\n\"), parameters)];\n                    case 6:\n                        result = _b.sent();\n                        if (this.connection.driver instanceof PostgresDriver) {\n                            updateResult.raw = result[0];\n                            updateResult.affected = result[1];\n                        }\n                        else if (this.connection.driver instanceof MysqlDriver) {\n                            updateResult.raw = result;\n                            updateResult.affected = result.affectedRows;\n                        }\n                        else {\n                            updateResult.raw = result;\n                        }\n                        if (!(this.expressionMap.updateEntity === true &&\n                            this.expressionMap.mainAlias.hasMetadata &&\n                            this.expressionMap.whereEntities.length > 0)) return [3 /*break*/, 8];\n                        return [4 /*yield*/, returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities)];\n                    case 7:\n                        _b.sent();\n                        _b.label = 8;\n                    case 8:\n                        if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3 /*break*/, 10];\n                        broadcastResult = new BroadcasterResult();\n                        queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n                        if (!(broadcastResult.promises.length > 0)) return [3 /*break*/, 10];\n                        return [4 /*yield*/, Promise.all(broadcastResult.promises)];\n                    case 9:\n                        _b.sent();\n                        _b.label = 10;\n                    case 10:\n                        if (!transactionStartedByUs) return [3 /*break*/, 12];\n                        return [4 /*yield*/, queryRunner.commitTransaction()];\n                    case 11:\n                        _b.sent();\n                        _b.label = 12;\n                    case 12: return [2 /*return*/, updateResult];\n                    case 13:\n                        error_1 = _b.sent();\n                        if (!transactionStartedByUs) return [3 /*break*/, 17];\n                        _b.label = 14;\n                    case 14:\n                        _b.trys.push([14, 16, , 17]);\n                        return [4 /*yield*/, queryRunner.rollbackTransaction()];\n                    case 15:\n                        _b.sent();\n                        return [3 /*break*/, 17];\n                    case 16:\n                        rollbackError_1 = _b.sent();\n                        return [3 /*break*/, 17];\n                    case 17: throw error_1;\n                    case 18:\n                        if (!(queryRunner !== this.queryRunner)) return [3 /*break*/, 20];\n                        return [4 /*yield*/, queryRunner.release()];\n                    case 19:\n                        _b.sent();\n                        _b.label = 20;\n                    case 20:\n                        if (!(this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive)) return [3 /*break*/, 22];\n                        return [4 /*yield*/, this.connection.driver.autoSave()];\n                    case 21:\n                        _b.sent();\n                        _b.label = 22;\n                    case 22: return [7 /*endfinally*/];\n                    case 23: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Values needs to be updated.\n     */\n    UpdateQueryBuilder.prototype.set = function (values) {\n        this.expressionMap.valuesSet = values;\n        return this;\n    };\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    UpdateQueryBuilder.prototype.where = function (where, parameters) {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        var condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    UpdateQueryBuilder.prototype.andWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    UpdateQueryBuilder.prototype.orWhere = function (where, parameters) {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    UpdateQueryBuilder.prototype.whereInIds = function (ids) {\n        return this.where(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    UpdateQueryBuilder.prototype.andWhereInIds = function (ids) {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    UpdateQueryBuilder.prototype.orWhereInIds = function (ids) {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    UpdateQueryBuilder.prototype.output = function (output) {\n        return this.returning(output);\n    };\n    /**\n     * Optional returning/output clause.\n     */\n    UpdateQueryBuilder.prototype.returning = function (returning) {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n        this.expressionMap.returning = returning;\n        return this;\n    };\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    UpdateQueryBuilder.prototype.orderBy = function (sort, order, nulls) {\n        if (order === void 0) { order = \"ASC\"; }\n        var _a, _b;\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort;\n            }\n            else {\n                if (nulls) {\n                    this.expressionMap.orderBys = (_a = {}, _a[sort] = { order: order, nulls: nulls }, _a);\n                }\n                else {\n                    this.expressionMap.orderBys = (_b = {}, _b[sort] = order, _b);\n                }\n            }\n        }\n        else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    };\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    UpdateQueryBuilder.prototype.addOrderBy = function (sort, order, nulls) {\n        if (order === void 0) { order = \"ASC\"; }\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order: order, nulls: nulls };\n        }\n        else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    };\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    UpdateQueryBuilder.prototype.limit = function (limit) {\n        this.expressionMap.limit = limit;\n        return this;\n    };\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    UpdateQueryBuilder.prototype.whereEntity = function (entity) {\n        var _this = this;\n        if (!this.expressionMap.mainAlias.hasMetadata)\n            throw new Error(\".whereEntity method can only be used on queries which update real entity table.\");\n        this.expressionMap.wheres = [];\n        var entities = Array.isArray(entity) ? entity : [entity];\n        entities.forEach(function (entity) {\n            var entityIdMap = _this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new Error(\"Provided entity does not have ids set, cannot perform operation.\");\n            _this.orWhereInIds(entityIdMap);\n        });\n        this.expressionMap.whereEntities = entities;\n        return this;\n    };\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    UpdateQueryBuilder.prototype.updateEntity = function (enabled) {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    UpdateQueryBuilder.prototype.createUpdateExpression = function () {\n        var _this = this;\n        var valuesSet = this.getValueSet();\n        var metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined;\n        // prepare columns and values to be updated\n        var updateColumnAndValues = [];\n        var updatedColumns = [];\n        var newParameters = {};\n        var parametersCount = this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof AuroraDataApiDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver ||\n            this.connection.driver instanceof SapDriver\n            ? 0 : Object.keys(this.expressionMap.nativeParameters).length;\n        if (metadata) {\n            EntityMetadata.createPropertyPath(metadata, valuesSet).forEach(function (propertyPath) {\n                // todo: make this and other query builder to work with properly with tables without metadata\n                var columns = metadata.findColumnsWithPropertyPath(propertyPath);\n                if (columns.length <= 0) {\n                    throw new EntityColumnNotFound(propertyPath);\n                }\n                columns.forEach(function (column) {\n                    if (!column.isUpdate) {\n                        return;\n                    }\n                    updatedColumns.push(column);\n                    var paramName = \"upd_\" + column.databaseName;\n                    //\n                    var value = column.getEntityValue(valuesSet);\n                    if (column.referencedColumn && value instanceof Object) {\n                        value = column.referencedColumn.getEntityValue(value);\n                    }\n                    else if (!(value instanceof Function)) {\n                        value = _this.connection.driver.preparePersistentValue(value, column);\n                    }\n                    // todo: duplication zone\n                    if (value instanceof Function) { // support for SQL expressions in update query\n                        updateColumnAndValues.push(_this.escape(column.databaseName) + \" = \" + value());\n                    }\n                    else if (_this.connection.driver instanceof SapDriver && value === null) {\n                        updateColumnAndValues.push(_this.escape(column.databaseName) + \" = NULL\");\n                    }\n                    else {\n                        if (_this.connection.driver instanceof SqlServerDriver) {\n                            value = _this.connection.driver.parametrizeValue(column, value);\n                            // } else if (value instanceof Array) {\n                            //     value = new ArrayParameter(value);\n                        }\n                        if (_this.connection.driver instanceof MysqlDriver ||\n                            _this.connection.driver instanceof AuroraDataApiDriver ||\n                            _this.connection.driver instanceof OracleDriver ||\n                            _this.connection.driver instanceof AbstractSqliteDriver ||\n                            _this.connection.driver instanceof SapDriver) {\n                            newParameters[paramName] = value;\n                        }\n                        else {\n                            _this.expressionMap.nativeParameters[paramName] = value;\n                        }\n                        var expression = null;\n                        if ((_this.connection.driver instanceof MysqlDriver || _this.connection.driver instanceof AuroraDataApiDriver) && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            var useLegacy = _this.connection.driver.options.legacySpatialSupport;\n                            var geomFromText = useLegacy ? \"GeomFromText\" : \"ST_GeomFromText\";\n                            if (column.srid != null) {\n                                expression = geomFromText + \"(\" + _this.connection.driver.createParameter(paramName, parametersCount) + \", \" + column.srid + \")\";\n                            }\n                            else {\n                                expression = geomFromText + \"(\" + _this.connection.driver.createParameter(paramName, parametersCount) + \")\";\n                            }\n                        }\n                        else if (_this.connection.driver instanceof PostgresDriver && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            if (column.srid != null) {\n                                expression = \"ST_SetSRID(ST_GeomFromGeoJSON(\" + _this.connection.driver.createParameter(paramName, parametersCount) + \"), \" + column.srid + \")::\" + column.type;\n                            }\n                            else {\n                                expression = \"ST_GeomFromGeoJSON(\" + _this.connection.driver.createParameter(paramName, parametersCount) + \")::\" + column.type;\n                            }\n                        }\n                        else if (_this.connection.driver instanceof SqlServerDriver && _this.connection.driver.spatialTypes.indexOf(column.type) !== -1) {\n                            expression = column.type + \"::STGeomFromText(\" + _this.connection.driver.createParameter(paramName, parametersCount) + \", \" + (column.srid || \"0\") + \")\";\n                        }\n                        else {\n                            expression = _this.connection.driver.createParameter(paramName, parametersCount);\n                        }\n                        updateColumnAndValues.push(_this.escape(column.databaseName) + \" = \" + expression);\n                        parametersCount++;\n                    }\n                });\n            });\n            if (metadata.versionColumn && updatedColumns.indexOf(metadata.versionColumn) === -1)\n                updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n            if (metadata.updateDateColumn && updatedColumns.indexOf(metadata.updateDateColumn) === -1)\n                updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n        }\n        else {\n            Object.keys(valuesSet).map(function (key) {\n                var value = valuesSet[key];\n                // todo: duplication zone\n                if (value instanceof Function) { // support for SQL expressions in update query\n                    updateColumnAndValues.push(_this.escape(key) + \" = \" + value());\n                }\n                else if (_this.connection.driver instanceof SapDriver && value === null) {\n                    updateColumnAndValues.push(_this.escape(key) + \" = NULL\");\n                }\n                else {\n                    // we need to store array values in a special class to make sure parameter replacement will work correctly\n                    // if (value instanceof Array)\n                    //     value = new ArrayParameter(value);\n                    if (_this.connection.driver instanceof MysqlDriver ||\n                        _this.connection.driver instanceof AuroraDataApiDriver ||\n                        _this.connection.driver instanceof OracleDriver ||\n                        _this.connection.driver instanceof AbstractSqliteDriver ||\n                        _this.connection.driver instanceof SapDriver) {\n                        newParameters[key] = value;\n                    }\n                    else {\n                        _this.expressionMap.nativeParameters[key] = value;\n                    }\n                    updateColumnAndValues.push(_this.escape(key) + \" = \" + _this.connection.driver.createParameter(key, parametersCount));\n                    parametersCount++;\n                }\n            });\n        }\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n        // because some drivers like mysql depend on order of parameters\n        if (this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof AuroraDataApiDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver ||\n            this.connection.driver instanceof SapDriver) {\n            this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\n        }\n        // get a table name and all column database names\n        var whereExpression = this.createWhereExpression();\n        var returningExpression = this.createReturningExpression();\n        // generate and return sql update query\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + whereExpression + \" RETURNING \" + returningExpression;\n        }\n        else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + \" OUTPUT \" + returningExpression + whereExpression;\n        }\n        else {\n            return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + whereExpression; // todo: how do we replace aliases in where to nothing?\n        }\n    };\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    UpdateQueryBuilder.prototype.createOrderByExpression = function () {\n        var _this = this;\n        var orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                .map(function (columnName) {\n                if (typeof orderBys[columnName] === \"string\") {\n                    return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                }\n                else {\n                    return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName].order + \" \" + orderBys[columnName].nulls;\n                }\n            })\n                .join(\", \");\n        return \"\";\n    };\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    UpdateQueryBuilder.prototype.createLimitExpression = function () {\n        var limit = this.expressionMap.limit;\n        if (limit) {\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) {\n                return \" LIMIT \" + limit;\n            }\n            else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n        return \"\";\n    };\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    UpdateQueryBuilder.prototype.getValueSet = function () {\n        if (this.expressionMap.valuesSet instanceof Object)\n            return this.expressionMap.valuesSet;\n        throw new UpdateValuesMissingError();\n    };\n    return UpdateQueryBuilder;\n}(QueryBuilder));\nexport { UpdateQueryBuilder };\n\n//# sourceMappingURL=UpdateQueryBuilder.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\nvar RelationCountAttribute = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationCountAttribute(expressionMap, relationCountAttribute) {\n        this.expressionMap = expressionMap;\n        ObjectUtils.assign(this, relationCountAttribute || {});\n    }\n    Object.defineProperty(RelationCountAttribute.prototype, \"joinInverseSideMetadata\", {\n        // -------------------------------------------------------------------------\n        // Public Methods\n        // -------------------------------------------------------------------------\n        get: function () {\n            return this.relation.inverseEntityMetadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationCountAttribute.prototype, \"parentAlias\", {\n        /**\n         * Alias of the parent of this join.\n         * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n         * This value is extracted from entityOrProperty value.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n                throw new Error(\"Given value must be a string representation of alias property\");\n            return this.relationName.split(\".\")[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationCountAttribute.prototype, \"relationProperty\", {\n        /**\n         * Relation property name of the parent.\n         * This is used to understand what is joined.\n         * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n         * This value is extracted from entityOrProperty value.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n                throw new Error(\"Given value is a string representation of alias property\");\n            return this.relationName.split(\".\")[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationCountAttribute.prototype, \"junctionAlias\", {\n        get: function () {\n            var _a = tslib_1.__read(this.relationName.split(\".\"), 2), parentAlias = _a[0], relationProperty = _a[1];\n            return parentAlias + \"_\" + relationProperty + \"_rc\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationCountAttribute.prototype, \"relation\", {\n        /**\n         * Relation of the parent.\n         * This is used to understand what is joined.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n                throw new Error(\"Given value is a string representation of alias property\");\n            var _a = tslib_1.__read(this.relationName.split(\".\"), 2), parentAlias = _a[0], propertyPath = _a[1];\n            var relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\n            var relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\n            if (!relation)\n                throw new Error(\"Relation with property path \" + propertyPath + \" in entity was not found.\");\n            return relation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationCountAttribute.prototype, \"metadata\", {\n        /**\n         * Metadata of the joined entity.\n         * If table without entity was joined, then it will return undefined.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n                throw new Error(\"Given value is a string representation of alias property\");\n            var parentAlias = this.relationName.split(\".\")[0];\n            var selection = this.expressionMap.findAliasByName(parentAlias);\n            return selection.metadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationCountAttribute.prototype, \"mapToPropertyPropertyName\", {\n        get: function () {\n            return this.mapToProperty.split(\".\")[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RelationCountAttribute;\n}());\nexport { RelationCountAttribute };\n\n//# sourceMappingURL=RelationCountAttribute.js.map\n","import * as tslib_1 from \"tslib\";\nvar RelationCountLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationCountLoader(connection, queryRunner, relationCountAttributes) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.relationCountAttributes = relationCountAttributes;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationCountLoader.prototype.load = function (rawEntities) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var onlyUnique, promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                onlyUnique = function (value, index, self) {\n                    return self.indexOf(value) === index;\n                };\n                promises = this.relationCountAttributes.map(function (relationCountAttr) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var relation, inverseRelation, referenceColumnName_1, inverseSideTable, inverseSideTableName, inverseSideTableAlias, inverseSidePropertyName, referenceColumnValues, qb, _a, joinTableColumnName_1, inverseJoinColumnName, firstJunctionColumn, secondJunctionColumn, referenceColumnValues, junctionAlias, inverseSideTableName, inverseSideTableAlias, junctionTableName, condition, qb, _b;\n                    return tslib_1.__generator(this, function (_c) {\n                        switch (_c.label) {\n                            case 0:\n                                if (!relationCountAttr.relation.isOneToMany) return [3 /*break*/, 2];\n                                relation = relationCountAttr.relation;\n                                inverseRelation = relation.inverseRelation;\n                                referenceColumnName_1 = inverseRelation.joinColumns[0].referencedColumn.propertyName;\n                                inverseSideTable = relation.inverseEntityMetadata.target;\n                                inverseSideTableName = relation.inverseEntityMetadata.tableName;\n                                inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                                inverseSidePropertyName = inverseRelation.propertyName;\n                                referenceColumnValues = rawEntities\n                                    .map(function (rawEntity) { return rawEntity[relationCountAttr.parentAlias + \"_\" + referenceColumnName_1]; })\n                                    .filter(function (value) { return !!value; });\n                                referenceColumnValues = referenceColumnValues.filter(onlyUnique);\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (referenceColumnValues.length === 0)\n                                    return [2 /*return*/, { relationCountAttribute: relationCountAttr, results: [] }];\n                                qb = this.connection.createQueryBuilder(this.queryRunner);\n                                qb.select(inverseSideTableAlias + \".\" + inverseSidePropertyName, \"parentId\")\n                                    .addSelect(\"COUNT(*)\", \"cnt\")\n                                    .from(inverseSideTable, inverseSideTableAlias)\n                                    .where(inverseSideTableAlias + \".\" + inverseSidePropertyName + \" IN (:...ids)\")\n                                    .addGroupBy(inverseSideTableAlias + \".\" + inverseSidePropertyName)\n                                    .setParameter(\"ids\", referenceColumnValues);\n                                // apply condition (custom query builder factory)\n                                if (relationCountAttr.queryBuilderFactory)\n                                    relationCountAttr.queryBuilderFactory(qb);\n                                _a = {\n                                    relationCountAttribute: relationCountAttr\n                                };\n                                return [4 /*yield*/, qb.getRawMany()];\n                            case 1: return [2 /*return*/, (_a.results = _c.sent(),\n                                    _a)];\n                            case 2:\n                                inverseJoinColumnName = void 0;\n                                firstJunctionColumn = void 0;\n                                secondJunctionColumn = void 0;\n                                if (relationCountAttr.relation.isOwning) { // todo fix joinColumns[0] and inverseJoinColumns[0].\n                                    joinTableColumnName_1 = relationCountAttr.relation.joinColumns[0].referencedColumn.databaseName;\n                                    inverseJoinColumnName = relationCountAttr.relation.inverseJoinColumns[0].referencedColumn.databaseName;\n                                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];\n                                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];\n                                }\n                                else {\n                                    joinTableColumnName_1 = relationCountAttr.relation.inverseRelation.inverseJoinColumns[0].referencedColumn.databaseName;\n                                    inverseJoinColumnName = relationCountAttr.relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;\n                                    firstJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[1];\n                                    secondJunctionColumn = relationCountAttr.relation.junctionEntityMetadata.columns[0];\n                                }\n                                referenceColumnValues = rawEntities\n                                    .map(function (rawEntity) { return rawEntity[relationCountAttr.parentAlias + \"_\" + joinTableColumnName_1]; })\n                                    .filter(function (value) { return !!value; });\n                                referenceColumnValues = referenceColumnValues.filter(onlyUnique);\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (referenceColumnValues.length === 0)\n                                    return [2 /*return*/, { relationCountAttribute: relationCountAttr, results: [] }];\n                                junctionAlias = relationCountAttr.junctionAlias;\n                                inverseSideTableName = relationCountAttr.joinInverseSideMetadata.tableName;\n                                inverseSideTableAlias = relationCountAttr.alias || inverseSideTableName;\n                                junctionTableName = relationCountAttr.relation.junctionEntityMetadata.tableName;\n                                condition = junctionAlias + \".\" + firstJunctionColumn.propertyName + \" IN (\" + referenceColumnValues.map(function (vals) { return isNaN(vals) ? \"'\" + vals + \"'\" : vals; }) + \")\" +\n                                    \" AND \" + junctionAlias + \".\" + secondJunctionColumn.propertyName + \" = \" + inverseSideTableAlias + \".\" + inverseJoinColumnName;\n                                qb = this.connection.createQueryBuilder(this.queryRunner);\n                                qb.select(junctionAlias + \".\" + firstJunctionColumn.propertyName, \"parentId\")\n                                    .addSelect(\"COUNT(\" + qb.escape(inverseSideTableAlias) + \".\" + qb.escape(inverseJoinColumnName) + \")\", \"cnt\")\n                                    .from(inverseSideTableName, inverseSideTableAlias)\n                                    .innerJoin(junctionTableName, junctionAlias, condition)\n                                    .addGroupBy(junctionAlias + \".\" + firstJunctionColumn.propertyName);\n                                // apply condition (custom query builder factory)\n                                if (relationCountAttr.queryBuilderFactory)\n                                    relationCountAttr.queryBuilderFactory(qb);\n                                _b = {\n                                    relationCountAttribute: relationCountAttr\n                                };\n                                return [4 /*yield*/, qb.getRawMany()];\n                            case 3: return [2 /*return*/, (_b.results = _c.sent(),\n                                    _b)];\n                        }\n                    });\n                }); });\n                return [2 /*return*/, Promise.all(promises)];\n            });\n        });\n    };\n    return RelationCountLoader;\n}());\nexport { RelationCountLoader };\n\n//# sourceMappingURL=RelationCountLoader.js.map\n","import { RelationCountAttribute } from \"./RelationCountAttribute\";\nvar RelationCountMetadataToAttributeTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationCountMetadataToAttributeTransformer(expressionMap) {\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationCountMetadataToAttributeTransformer.prototype.transform = function () {\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n        var _this = this;\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(function (relationCount) {\n                var attribute = _this.metadataToAttribute(_this.expressionMap.mainAlias.name, relationCount);\n                _this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        }\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(function (join) {\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n            join.metadata.relationCounts.forEach(function (relationCount) {\n                var attribute = _this.metadataToAttribute(join.alias.name, relationCount);\n                _this.expressionMap.relationCountAttributes.push(attribute);\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    RelationCountMetadataToAttributeTransformer.prototype.metadataToAttribute = function (parentAliasName, relationCount) {\n        return new RelationCountAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationCount.relation.propertyName,\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName,\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory\n        });\n    };\n    return RelationCountMetadataToAttributeTransformer;\n}());\nexport { RelationCountMetadataToAttributeTransformer };\n\n//# sourceMappingURL=RelationCountMetadataToAttributeTransformer.js.map\n","import * as tslib_1 from \"tslib\";\nimport { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nvar RelationIdAttribute = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationIdAttribute(queryExpressionMap, relationIdAttribute) {\n        this.queryExpressionMap = queryExpressionMap;\n        /**\n         * Indicates if relation id should NOT be loaded as id map.\n         */\n        this.disableMixedMap = false;\n        ObjectUtils.assign(this, relationIdAttribute || {});\n    }\n    Object.defineProperty(RelationIdAttribute.prototype, \"joinInverseSideMetadata\", {\n        // -------------------------------------------------------------------------\n        // Public Methods\n        // -------------------------------------------------------------------------\n        get: function () {\n            return this.relation.inverseEntityMetadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationIdAttribute.prototype, \"parentAlias\", {\n        /**\n         * Alias of the parent of this join.\n         * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n         * This value is extracted from entityOrProperty value.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n                throw new Error(\"Given value must be a string representation of alias property\");\n            return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationIdAttribute.prototype, \"relationPropertyPath\", {\n        /**\n         * Relation property name of the parent.\n         * This is used to understand what is joined.\n         * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n         * This value is extracted from entityOrProperty value.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n                throw new Error(\"Given value must be a string representation of alias property\");\n            return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationIdAttribute.prototype, \"relation\", {\n        /**\n         * Relation of the parent.\n         * This is used to understand what is joined.\n         * This is available when join was made using \"post.category\" syntax.\n         */\n        get: function () {\n            if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n                throw new Error(\"Given value must be a string representation of alias property\");\n            var relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);\n            var relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n            if (!relation)\n                throw new Error(\"Relation with property path \" + this.relationPropertyPath + \" in entity was not found.\");\n            return relation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationIdAttribute.prototype, \"junctionAlias\", {\n        /**\n         * Generates alias of junction table, whose ids we get.\n         */\n        get: function () {\n            var _a = tslib_1.__read(this.relationName.split(\".\"), 2), parentAlias = _a[0], relationProperty = _a[1];\n            return parentAlias + \"_\" + relationProperty + \"_rid\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationIdAttribute.prototype, \"junctionMetadata\", {\n        /**\n         * Metadata of the joined entity.\n         * If extra condition without entity was joined, then it will return undefined.\n         */\n        get: function () {\n            return this.relation.junctionEntityMetadata;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationIdAttribute.prototype, \"mapToPropertyParentAlias\", {\n        get: function () {\n            return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RelationIdAttribute.prototype, \"mapToPropertyPropertyPath\", {\n        get: function () {\n            return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RelationIdAttribute;\n}());\nexport { RelationIdAttribute };\n\n//# sourceMappingURL=RelationIdAttribute.js.map\n","import * as tslib_1 from \"tslib\";\nimport { DriverUtils } from \"../../driver/DriverUtils\";\nvar RelationIdLoader = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationIdLoader(connection, queryRunner, relationIdAttributes) {\n        this.connection = connection;\n        this.queryRunner = queryRunner;\n        this.relationIdAttributes = relationIdAttributes;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationIdLoader.prototype.load = function (rawEntities) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                promises = this.relationIdAttributes.map(function (relationIdAttr) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var results, relation_1, joinColumns_1, table, tableName, tableAlias_1, parameters_1, condition, qb_1, results, relation, joinColumns_2, inverseJoinColumns_1, junctionAlias_1, inverseSideTableName, inverseSideTableAlias_1, junctionTableName, mappedColumns, parameters_2, joinColumnConditions, inverseJoinColumnCondition_1, condition, qb_2, results;\n                    var _this = this;\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                if (!(relationIdAttr.relation.isManyToOne || relationIdAttr.relation.isOneToOneOwner)) return [3 /*break*/, 1];\n                                // example: Post and Tag\n                                // loadRelationIdAndMap(\"post.tagId\", \"post.tag\")\n                                // we expect it to load id of tag\n                                if (relationIdAttr.queryBuilderFactory)\n                                    throw new Error(\"Additional condition can not be used with ManyToOne or OneToOne owner relations.\");\n                                results = rawEntities.map(function (rawEntity) {\n                                    var result = {};\n                                    relationIdAttr.relation.joinColumns.forEach(function (joinColumn) {\n                                        result[joinColumn.databaseName] = _this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, joinColumn.databaseName)], joinColumn.referencedColumn);\n                                    });\n                                    relationIdAttr.relation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n                                        result[primaryColumn.databaseName] = _this.connection.driver.prepareHydratedValue(rawEntity[DriverUtils.buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, primaryColumn.databaseName)], primaryColumn);\n                                    });\n                                    return result;\n                                });\n                                return [2 /*return*/, {\n                                        relationIdAttribute: relationIdAttr,\n                                        results: results\n                                    }];\n                            case 1:\n                                if (!(relationIdAttr.relation.isOneToMany || relationIdAttr.relation.isOneToOneNotOwner)) return [3 /*break*/, 3];\n                                relation_1 = relationIdAttr.relation;\n                                joinColumns_1 = relation_1.isOwning ? relation_1.joinColumns : relation_1.inverseRelation.joinColumns;\n                                table = relation_1.inverseEntityMetadata.target;\n                                tableName = relation_1.inverseEntityMetadata.tableName;\n                                tableAlias_1 = relationIdAttr.alias || tableName;\n                                parameters_1 = {};\n                                condition = rawEntities.map(function (rawEntity, index) {\n                                    return joinColumns_1.map(function (joinColumn) {\n                                        var parameterName = joinColumn.databaseName + index;\n                                        parameters_1[parameterName] = rawEntity[DriverUtils.buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn.databaseName)];\n                                        return tableAlias_1 + \".\" + joinColumn.propertyPath + \" = :\" + parameterName;\n                                    }).join(\" AND \");\n                                }).map(function (condition) { return \"(\" + condition + \")\"; })\n                                    .join(\" OR \");\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (!condition)\n                                    return [2 /*return*/, { relationIdAttribute: relationIdAttr, results: [] }];\n                                qb_1 = this.connection.createQueryBuilder(this.queryRunner);\n                                joinColumns_1.forEach(function (joinColumn) {\n                                    qb_1.addSelect(tableAlias_1 + \".\" + joinColumn.propertyPath, joinColumn.databaseName);\n                                });\n                                relation_1.inverseRelation.entityMetadata.primaryColumns.forEach(function (primaryColumn) {\n                                    qb_1.addSelect(tableAlias_1 + \".\" + primaryColumn.propertyPath, primaryColumn.databaseName);\n                                });\n                                qb_1.from(table, tableAlias_1)\n                                    .where(\"(\" + condition + \")\") // need brackets because if we have additional condition and no brackets, it looks like (a = 1) OR (a = 2) AND b = 1, that is incorrect\n                                    .setParameters(parameters_1);\n                                // apply condition (custom query builder factory)\n                                if (relationIdAttr.queryBuilderFactory)\n                                    relationIdAttr.queryBuilderFactory(qb_1);\n                                return [4 /*yield*/, qb_1.getRawMany()];\n                            case 2:\n                                results = _a.sent();\n                                results.forEach(function (result) {\n                                    joinColumns_1.forEach(function (column) {\n                                        result[column.databaseName] = _this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);\n                                    });\n                                    relation_1.inverseRelation.entityMetadata.primaryColumns.forEach(function (column) {\n                                        result[column.databaseName] = _this.connection.driver.prepareHydratedValue(result[column.databaseName], column);\n                                    });\n                                });\n                                return [2 /*return*/, {\n                                        relationIdAttribute: relationIdAttr,\n                                        results: results\n                                    }];\n                            case 3:\n                                relation = relationIdAttr.relation;\n                                joinColumns_2 = relation.isOwning ? relation.joinColumns : relation.inverseRelation.inverseJoinColumns;\n                                inverseJoinColumns_1 = relation.isOwning ? relation.inverseJoinColumns : relation.inverseRelation.joinColumns;\n                                junctionAlias_1 = relationIdAttr.junctionAlias;\n                                inverseSideTableName = relationIdAttr.joinInverseSideMetadata.tableName;\n                                inverseSideTableAlias_1 = relationIdAttr.alias || inverseSideTableName;\n                                junctionTableName = relation.isOwning ? relation.junctionEntityMetadata.tableName : relation.inverseRelation.junctionEntityMetadata.tableName;\n                                mappedColumns = rawEntities.map(function (rawEntity) {\n                                    return joinColumns_2.reduce(function (map, joinColumn) {\n                                        map[joinColumn.propertyPath] = rawEntity[DriverUtils.buildColumnAlias(_this.connection.driver, relationIdAttr.parentAlias, joinColumn.referencedColumn.databaseName)];\n                                        return map;\n                                    }, {});\n                                });\n                                // ensure we won't perform redundant queries for joined data which was not found in selection\n                                // example: if post.category was not found in db then no need to execute query for category.imageIds\n                                if (mappedColumns.length === 0)\n                                    return [2 /*return*/, { relationIdAttribute: relationIdAttr, results: [] }];\n                                parameters_2 = {};\n                                joinColumnConditions = mappedColumns.map(function (mappedColumn, index) {\n                                    return Object.keys(mappedColumn).map(function (key) {\n                                        var parameterName = key + index;\n                                        parameters_2[parameterName] = mappedColumn[key];\n                                        return junctionAlias_1 + \".\" + key + \" = :\" + parameterName;\n                                    }).join(\" AND \");\n                                });\n                                inverseJoinColumnCondition_1 = inverseJoinColumns_1.map(function (joinColumn) {\n                                    return junctionAlias_1 + \".\" + joinColumn.propertyPath + \" = \" + inverseSideTableAlias_1 + \".\" + joinColumn.referencedColumn.propertyPath;\n                                }).join(\" AND \");\n                                condition = joinColumnConditions.map(function (condition) {\n                                    return \"(\" + condition + \" AND \" + inverseJoinColumnCondition_1 + \")\";\n                                }).join(\" OR \");\n                                qb_2 = this.connection.createQueryBuilder(this.queryRunner);\n                                inverseJoinColumns_1.forEach(function (joinColumn) {\n                                    qb_2.addSelect(junctionAlias_1 + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                                        .addOrderBy(junctionAlias_1 + \".\" + joinColumn.propertyPath);\n                                });\n                                joinColumns_2.forEach(function (joinColumn) {\n                                    qb_2.addSelect(junctionAlias_1 + \".\" + joinColumn.propertyPath, joinColumn.databaseName)\n                                        .addOrderBy(junctionAlias_1 + \".\" + joinColumn.propertyPath);\n                                });\n                                qb_2.from(inverseSideTableName, inverseSideTableAlias_1)\n                                    .innerJoin(junctionTableName, junctionAlias_1, condition)\n                                    .setParameters(parameters_2);\n                                // apply condition (custom query builder factory)\n                                if (relationIdAttr.queryBuilderFactory)\n                                    relationIdAttr.queryBuilderFactory(qb_2);\n                                return [4 /*yield*/, qb_2.getRawMany()];\n                            case 4:\n                                results = _a.sent();\n                                results.forEach(function (result) {\n                                    tslib_1.__spread(joinColumns_2, inverseJoinColumns_1).forEach(function (column) {\n                                        result[column.databaseName] = _this.connection.driver.prepareHydratedValue(result[column.databaseName], column.referencedColumn);\n                                    });\n                                });\n                                return [2 /*return*/, {\n                                        relationIdAttribute: relationIdAttr,\n                                        results: results\n                                    }];\n                        }\n                    });\n                }); });\n                return [2 /*return*/, Promise.all(promises)];\n            });\n        });\n    };\n    return RelationIdLoader;\n}());\nexport { RelationIdLoader };\n\n//# sourceMappingURL=RelationIdLoader.js.map\n","import { RelationIdAttribute } from \"./RelationIdAttribute\";\nvar RelationIdMetadataToAttributeTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RelationIdMetadataToAttributeTransformer(expressionMap) {\n        this.expressionMap = expressionMap;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    RelationIdMetadataToAttributeTransformer.prototype.transform = function () {\n        // by example:\n        // post has relation id:\n        // @RelationId(post => post.categories) categoryIds\n        // category has relation id\n        // @RelationId(category => category.images) imageIds\n        // we load post and join category\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\n        var _this = this;\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationIds.forEach(function (relationId) {\n                var attribute = _this.metadataToAttribute(_this.expressionMap.mainAlias.name, relationId);\n                _this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        }\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach(function (join) {\n            // ensure this join has a metadata, because relation id can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction)\n                return;\n            join.metadata.relationIds.forEach(function (relationId) {\n                var attribute = _this.metadataToAttribute(join.alias.name, relationId);\n                _this.expressionMap.relationIdAttributes.push(attribute);\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    RelationIdMetadataToAttributeTransformer.prototype.metadataToAttribute = function (parentAliasName, relationId) {\n        return new RelationIdAttribute(this.expressionMap, {\n            relationName: parentAliasName + \".\" + relationId.relation.propertyName,\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName,\n            alias: relationId.alias,\n            queryBuilderFactory: relationId.queryBuilderFactory\n        });\n    };\n    return RelationIdMetadataToAttributeTransformer;\n}());\nexport { RelationIdMetadataToAttributeTransformer };\n\n//# sourceMappingURL=RelationIdMetadataToAttributeTransformer.js.map\n","/**\n * Result object returned by DeleteQueryBuilder execution.\n */\nvar DeleteResult = /** @class */ (function () {\n    function DeleteResult() {\n    }\n    return DeleteResult;\n}());\nexport { DeleteResult };\n\n//# sourceMappingURL=DeleteResult.js.map\n","/**\n * Result object returned by InsertQueryBuilder execution.\n */\nvar InsertResult = /** @class */ (function () {\n    function InsertResult() {\n        /**\n         * Contains inserted entity id.\n         * Has entity-like structure (not just column database name and values).\n         */\n        this.identifiers = [];\n        /**\n         * Generated values returned by a database.\n         * Has entity-like structure (not just column database name and values).\n         */\n        this.generatedMaps = [];\n    }\n    return InsertResult;\n}());\nexport { InsertResult };\n\n//# sourceMappingURL=InsertResult.js.map\n","/**\n * Result object returned by UpdateQueryBuilder execution.\n */\nvar UpdateResult = /** @class */ (function () {\n    function UpdateResult() {\n        /**\n         * Contains inserted entity id.\n         * Has entity-like structure (not just column database name and values).\n         */\n        // identifier: ObjectLiteral[] = [];\n        /**\n         * Generated values returned by a database.\n         * Has entity-like structure (not just column database name and values).\n         */\n        this.generatedMaps = [];\n    }\n    return UpdateResult;\n}());\nexport { UpdateResult };\n\n//# sourceMappingURL=UpdateResult.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n */\nvar LoadMapItem = /** @class */ (function () {\n    function LoadMapItem(plainEntity, metadata, parentLoadMapItem, relation) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n    Object.defineProperty(LoadMapItem.prototype, \"target\", {\n        get: function () {\n            return this.metadata.target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoadMapItem.prototype, \"id\", {\n        get: function () {\n            return this.metadata.getEntityIdMixedMap(this.plainEntity);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LoadMapItem;\n}());\nvar LoadMap = /** @class */ (function () {\n    function LoadMap() {\n        this.loadMapItems = [];\n    }\n    Object.defineProperty(LoadMap.prototype, \"mainLoadMapItem\", {\n        get: function () {\n            return this.loadMapItems.find(function (item) { return !item.relation && !item.parentLoadMapItem; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LoadMap.prototype.addLoadMap = function (newLoadMap) {\n        var item = this.loadMapItems.find(function (item) { return item.target === newLoadMap.target && item.id === newLoadMap.id; });\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    };\n    LoadMap.prototype.fillEntities = function (target, entities) {\n        var _this = this;\n        entities.forEach(function (entity) {\n            var item = _this.loadMapItems.find(function (loadMapItem) {\n                return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n            });\n            if (item)\n                item.entity = entity;\n        });\n    };\n    LoadMap.prototype.groupByTargetIds = function () {\n        var groups = [];\n        this.loadMapItems.forEach(function (loadMapItem) {\n            var group = groups.find(function (group) { return group.target === loadMapItem.target; });\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    };\n    return LoadMap;\n}());\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nvar PlainObjectToDatabaseEntityTransformer = /** @class */ (function () {\n    function PlainObjectToDatabaseEntityTransformer(manager) {\n        this.manager = manager;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    PlainObjectToDatabaseEntityTransformer.prototype.transform = function (plainObject, metadata) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var loadMap, fillLoadMap;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // if plain object does not have id then nothing to load really\n                        if (!metadata.hasAllPrimaryKeys(plainObject))\n                            return [2 /*return*/, Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\")];\n                        loadMap = new LoadMap();\n                        fillLoadMap = function (entity, entityMetadata, parentLoadMapItem, relation) {\n                            var item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n                            loadMap.addLoadMap(item);\n                            entityMetadata\n                                .extractRelationValuesFromEntity(entity, metadata.relations)\n                                .filter(function (value) { return value !== null && value !== undefined; })\n                                .forEach(function (_a) {\n                                var _b = tslib_1.__read(_a, 3), relation = _b[0], value = _b[1], inverseEntityMetadata = _b[2];\n                                return fillLoadMap(value, inverseEntityMetadata, item, relation);\n                            });\n                        };\n                        fillLoadMap(plainObject, metadata);\n                        // load all entities and store them in the load map\n                        return [4 /*yield*/, Promise.all(loadMap.groupByTargetIds().map(function (targetWithIds) {\n                                return _this.manager\n                                    .findByIds(targetWithIds.target, targetWithIds.ids)\n                                    .then(function (entities) { return loadMap.fillEntities(targetWithIds.target, entities); });\n                            }))];\n                    case 1:\n                        // load all entities and store them in the load map\n                        _a.sent();\n                        // go through each item in the load map and set their entity relationship using metadata stored in load map\n                        loadMap.loadMapItems.forEach(function (loadMapItem) {\n                            if (!loadMapItem.relation ||\n                                !loadMapItem.entity ||\n                                !loadMapItem.parentLoadMapItem ||\n                                !loadMapItem.parentLoadMapItem.entity)\n                                return;\n                            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n                                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n                            }\n                            else {\n                                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n                            }\n                        });\n                        return [2 /*return*/, loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined];\n                }\n            });\n        });\n    };\n    return PlainObjectToDatabaseEntityTransformer;\n}());\nexport { PlainObjectToDatabaseEntityTransformer };\n\n//# sourceMappingURL=PlainObjectToDatabaseEntityTransformer.js.map\n","/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nvar PlainObjectToNewEntityTransformer = /** @class */ (function () {\n    function PlainObjectToNewEntityTransformer() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    PlainObjectToNewEntityTransformer.prototype.transform = function (newEntity, object, metadata, getLazyRelationsPromiseValue) {\n        if (getLazyRelationsPromiseValue === void 0) { getLazyRelationsPromiseValue = false; }\n        // console.log(\"groupAndTransform entity:\", newEntity);\n        // console.log(\"groupAndTransform object:\", object);\n        this.groupAndTransform(newEntity, object, metadata, getLazyRelationsPromiseValue);\n        // console.log(\"result:\", newEntity);\n        return newEntity;\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    PlainObjectToNewEntityTransformer.prototype.groupAndTransform = function (entity, object, metadata, getLazyRelationsPromiseValue) {\n        // console.log(\"groupAndTransform entity:\", entity);\n        // console.log(\"groupAndTransform object:\", object);\n        var _this = this;\n        if (getLazyRelationsPromiseValue === void 0) { getLazyRelationsPromiseValue = false; }\n        // copy regular column properties from the given object\n        metadata.nonVirtualColumns.forEach(function (column) {\n            var objectColumnValue = column.getEntityValue(object);\n            if (objectColumnValue !== undefined)\n                column.setEntityValue(entity, objectColumnValue);\n        });\n        // // copy relation properties from the given object\n        if (metadata.relations.length) {\n            metadata.relations.forEach(function (relation) {\n                var entityRelatedValue = relation.getEntityValue(entity);\n                var objectRelatedValue = relation.getEntityValue(object, getLazyRelationsPromiseValue);\n                if (objectRelatedValue === undefined)\n                    return;\n                if (relation.isOneToMany || relation.isManyToMany) {\n                    if (!Array.isArray(objectRelatedValue))\n                        return;\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = [];\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n                    objectRelatedValue.forEach(function (objectRelatedValueItem) {\n                        // check if we have this item from the merging object in the original entity we merge into\n                        var objectRelatedValueEntity = entityRelatedValue.find(function (entityRelatedValueItem) {\n                            return relation.inverseEntityMetadata.compareEntities(objectRelatedValueItem, entityRelatedValueItem);\n                        });\n                        // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array\n                        if (!objectRelatedValueEntity) {\n                            objectRelatedValueEntity = relation.inverseEntityMetadata.create();\n                            entityRelatedValue.push(objectRelatedValueEntity);\n                        }\n                        _this.groupAndTransform(objectRelatedValueEntity, objectRelatedValueItem, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\n                    });\n                }\n                else {\n                    // if related object isn't an object (direct relation id for example)\n                    // we just set it to the entity relation, we don't need anything more from it\n                    // however we do it only if original entity does not have this relation set to object\n                    // to prevent full overriding of objects\n                    if (!(objectRelatedValue instanceof Object)) {\n                        if (!(entityRelatedValue instanceof Object))\n                            relation.setEntityValue(entity, objectRelatedValue);\n                        return;\n                    }\n                    if (!entityRelatedValue) {\n                        entityRelatedValue = relation.inverseEntityMetadata.create();\n                        relation.setEntityValue(entity, entityRelatedValue);\n                    }\n                    _this.groupAndTransform(entityRelatedValue, objectRelatedValue, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\n                }\n            });\n        }\n    };\n    return PlainObjectToNewEntityTransformer;\n}());\nexport { PlainObjectToNewEntityTransformer };\n\n//# sourceMappingURL=PlainObjectToNewEntityTransformer.js.map\n","import * as tslib_1 from \"tslib\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { DriverUtils } from \"../../driver/DriverUtils\";\n/**\n * Transforms raw sql results returned from the database into entity object.\n * Entity is constructed based on its entity metadata.\n */\nvar RawSqlResultsToEntityTransformer = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RawSqlResultsToEntityTransformer(expressionMap, driver, rawRelationIdResults, rawRelationCountResults, queryRunner) {\n        this.expressionMap = expressionMap;\n        this.driver = driver;\n        this.rawRelationIdResults = rawRelationIdResults;\n        this.rawRelationCountResults = rawRelationCountResults;\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\n     * we need to group our result and we must have some unique id (primary key in our case)\n     */\n    RawSqlResultsToEntityTransformer.prototype.transform = function (rawResults, alias) {\n        var _this = this;\n        var group = this.group(rawResults, alias);\n        var entities = [];\n        group.forEach(function (results) {\n            var entity = _this.transformRawResultsGroup(results, alias);\n            if (entity !== undefined)\n                entities.push(entity);\n        });\n        return entities;\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Groups given raw results by ids of given alias.\n     */\n    RawSqlResultsToEntityTransformer.prototype.group = function (rawResults, alias) {\n        var _this = this;\n        var map = new Map();\n        var keys = [];\n        if (alias.metadata.tableType === \"view\") {\n            keys.push.apply(keys, tslib_1.__spread(alias.metadata.columns.map(function (column) { return DriverUtils.buildColumnAlias(_this.driver, alias.name, column.databaseName); })));\n        }\n        else {\n            keys.push.apply(keys, tslib_1.__spread(alias.metadata.primaryColumns.map(function (column) { return DriverUtils.buildColumnAlias(_this.driver, alias.name, column.databaseName); })));\n        }\n        rawResults.forEach(function (rawResult) {\n            var id = keys.map(function (key) {\n                var keyValue = rawResult[key];\n                if (Buffer.isBuffer(keyValue)) {\n                    return keyValue.toString(\"hex\");\n                }\n                return keyValue;\n            }).join(\"_\"); // todo: check partial\n            var items = map.get(id);\n            if (!items) {\n                map.set(id, [rawResult]);\n            }\n            else {\n                items.push(rawResult);\n            }\n        });\n        return map;\n    };\n    /**\n     * Transforms set of data results into single entity.\n     */\n    RawSqlResultsToEntityTransformer.prototype.transformRawResultsGroup = function (rawResults, alias) {\n        var _this = this;\n        // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;\n        var metadata = alias.metadata;\n        if (metadata.discriminatorColumn) {\n            var discriminatorValues_1 = rawResults.map(function (result) { return result[DriverUtils.buildColumnAlias(_this.driver, alias.name, alias.metadata.discriminatorColumn.databaseName)]; });\n            var discriminatorMetadata = metadata.childEntityMetadatas.find(function (childEntityMetadata) {\n                return !!discriminatorValues_1.find(function (value) { return value === childEntityMetadata.discriminatorValue; });\n            });\n            if (discriminatorMetadata)\n                metadata = discriminatorMetadata;\n        }\n        var entity = this.expressionMap.options.indexOf(\"create-pojo\") !== -1 ? {} : metadata.create(this.queryRunner);\n        // get value from columns selections and put them into newly created entity\n        var hasColumns = this.transformColumns(rawResults, alias, entity, metadata);\n        var hasRelations = this.transformJoins(rawResults, entity, alias, metadata);\n        var hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);\n        var hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\n        // if we have at least one selected column then return this entity\n        // since entity must have at least primary columns to be really selected and transformed into entity\n        if (hasColumns)\n            return entity;\n        // if we don't have any selected column we should not return entity,\n        // except for the case when entity only contain a primary column as a relation to another entity\n        // in this case its absolutely possible our entity to not have any columns except a single relation\n        var hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(function (column) { return column.isVirtual === false; }).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns\n        if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts))\n            return entity;\n        return undefined;\n    };\n    // get value from columns selections and put them into object\n    RawSqlResultsToEntityTransformer.prototype.transformColumns = function (rawResults, alias, entity, metadata) {\n        var _this = this;\n        var hasData = false;\n        metadata.columns.forEach(function (column) {\n            // if table inheritance is used make sure this column is not child's column\n            if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(function (metadata) { return metadata.target; }).indexOf(column.target) !== -1)\n                return;\n            var value = rawResults[0][DriverUtils.buildColumnAlias(_this.driver, alias.name, column.databaseName)];\n            if (value === undefined || column.isVirtual)\n                return;\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\n            // then we don't add this column and its value into the entity\n            if (!_this.expressionMap.selects.find(function (select) { return select.selection === alias.name || select.selection === alias.name + \".\" + column.propertyPath; }))\n                return;\n            column.setEntityValue(entity, _this.driver.prepareHydratedValue(value, column));\n            if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\n                hasData = true;\n        });\n        return hasData;\n    };\n    /**\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\n     */\n    RawSqlResultsToEntityTransformer.prototype.transformJoins = function (rawResults, entity, alias, metadata) {\n        var _this = this;\n        var hasData = false;\n        // let discriminatorValue: string = \"\";\n        // if (metadata.discriminatorColumn)\n        //     discriminatorValue = rawResults[0][DriverUtils.buildColumnAlias(this.connection.driver, alias.name, alias.metadata.discriminatorColumn!.databaseName)];\n        this.expressionMap.joinAttributes.forEach(function (join) {\n            // skip joins without metadata\n            if (!join.metadata)\n                return;\n            // if simple left or inner join was performed without selection then we don't need to do anything\n            if (!join.isSelected)\n                return;\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)\n            // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\n            if (join.relation && !metadata.relations.find(function (relation) { return relation === join.relation; }))\n                return;\n            // some checks to make sure this join is for current alias\n            if (join.mapToProperty) {\n                if (join.mapToPropertyParentAlias !== alias.name)\n                    return;\n            }\n            else {\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation.propertyPath)\n                    return;\n            }\n            // transform joined data into entities\n            var result = _this.transform(rawResults, join.alias);\n            result = !join.isMany ? result[0] : result;\n            result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database\n            if (result === undefined) // if nothing was joined then simply return\n                return;\n            // if join was mapped to some property then save result to that property\n            if (join.mapToPropertyPropertyName) {\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\n            }\n            else { // otherwise set to relation\n                join.relation.setEntityValue(entity, result);\n            }\n            hasData = true;\n        });\n        return hasData;\n    };\n    RawSqlResultsToEntityTransformer.prototype.transformRelationIds = function (rawSqlResults, alias, entity, metadata) {\n        var _this = this;\n        var hasData = false;\n        this.rawRelationIdResults.forEach(function (rawRelationIdResult) {\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\n                return;\n            var relation = rawRelationIdResult.relationIdAttribute.relation;\n            var valueMap = _this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\n            if (valueMap === undefined || valueMap === null)\n                return;\n            var idMaps = rawRelationIdResult.results.map(function (result) {\n                var entityPrimaryIds = _this.extractEntityPrimaryIds(relation, result);\n                if (OrmUtils.compareIds(entityPrimaryIds, valueMap) === false)\n                    return;\n                var columns;\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n                }\n                else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n                    // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\n                }\n                else { // ManyToMany\n                    if (relation.isOwning) {\n                        columns = relation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n                    }\n                    else {\n                        columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n                    }\n                }\n                var idMap = columns.reduce(function (idMap, column) {\n                    var value = result[column.databaseName];\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        if (column.referencedColumn) // if column is a relation\n                            value = column.referencedColumn.createValueMap(value);\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(value));\n                    }\n                    else {\n                        if (column.referencedColumn.referencedColumn) // if column is a relation\n                            value = column.referencedColumn.referencedColumn.createValueMap(value);\n                        return OrmUtils.mergeDeep(idMap, column.referencedColumn.createValueMap(value));\n                    }\n                }, {});\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n                        return columns[0].getEntityValue(idMap);\n                    }\n                    else {\n                        return columns[0].referencedColumn.getEntityValue(idMap);\n                    }\n                }\n                return idMap;\n            }).filter(function (result) { return result; });\n            var properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\n            var mapToProperty = function (properties, map, value) {\n                var property = properties.shift();\n                if (property && properties.length === 0) {\n                    map[property] = value;\n                    return map;\n                }\n                else if (property && properties.length > 0) {\n                    mapToProperty(properties, map[property], value);\n                }\n                else {\n                    return map;\n                }\n            };\n            if (relation.isOneToOne || relation.isManyToOne) {\n                if (idMaps[0] !== undefined) {\n                    mapToProperty(properties, entity, idMaps[0]);\n                    hasData = true;\n                }\n            }\n            else {\n                mapToProperty(properties, entity, idMaps);\n                if (idMaps.length > 0) {\n                    hasData = true;\n                }\n            }\n        });\n        return hasData;\n    };\n    RawSqlResultsToEntityTransformer.prototype.transformRelationCounts = function (rawSqlResults, alias, entity) {\n        var _this = this;\n        var hasData = false;\n        this.rawRelationCountResults\n            .filter(function (rawRelationCountResult) { return rawRelationCountResult.relationCountAttribute.parentAlias === alias.name; })\n            .forEach(function (rawRelationCountResult) {\n            var relation = rawRelationCountResult.relationCountAttribute.relation;\n            var referenceColumnName;\n            if (relation.isOneToMany) {\n                referenceColumnName = relation.inverseRelation.joinColumns[0].referencedColumn.databaseName; // todo: fix joinColumns[0]\n            }\n            else {\n                referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn.databaseName : relation.inverseRelation.joinColumns[0].referencedColumn.databaseName;\n            }\n            var referenceColumnValue = rawSqlResults[0][DriverUtils.buildColumnAlias(_this.driver, alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\n            if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\n                entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\n                rawRelationCountResult.results\n                    .filter(function (result) { return result[\"parentId\"] === referenceColumnValue; })\n                    .forEach(function (result) {\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\n                    hasData = true;\n                });\n            }\n        });\n        return hasData;\n    };\n    RawSqlResultsToEntityTransformer.prototype.createValueMapFromJoinColumns = function (relation, parentAlias, rawSqlResults) {\n        var _this = this;\n        var columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n        }\n        return columns.reduce(function (valueMap, column) {\n            rawSqlResults.forEach(function (rawSqlResult) {\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\n                    valueMap[column.databaseName] = _this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildColumnAlias(_this.driver, parentAlias, column.databaseName)], column);\n                }\n                else {\n                    valueMap[column.databaseName] = _this.driver.prepareHydratedValue(rawSqlResult[DriverUtils.buildColumnAlias(_this.driver, parentAlias, column.referencedColumn.databaseName)], column);\n                }\n            });\n            return valueMap;\n        }, {});\n    };\n    RawSqlResultsToEntityTransformer.prototype.extractEntityPrimaryIds = function (relation, relationIdRawResult) {\n        var columns;\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.entityMetadata.primaryColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation.joinColumns.map(function (joinColumn) { return joinColumn; });\n        }\n        else {\n            if (relation.isOwning) {\n                columns = relation.joinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n            else {\n                columns = relation.inverseRelation.inverseJoinColumns.map(function (joinColumn) { return joinColumn; });\n            }\n        }\n        return columns.reduce(function (data, column) {\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\n            return data;\n        }, {});\n    };\n    return RawSqlResultsToEntityTransformer;\n}());\nexport { RawSqlResultsToEntityTransformer };\n\n//# sourceMappingURL=RawSqlResultsToEntityTransformer.js.map\n","import * as tslib_1 from \"tslib\";\nimport { Query } from \"../driver/Query\";\nimport { SqlInMemory } from \"../driver/SqlInMemory\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\nvar BaseQueryRunner = /** @class */ (function () {\n    function BaseQueryRunner() {\n        // -------------------------------------------------------------------------\n        // Public Properties\n        // -------------------------------------------------------------------------\n        /**\n         * Indicates if connection for this query runner is released.\n         * Once its released, query runner cannot run queries anymore.\n         */\n        this.isReleased = false;\n        /**\n         * Indicates if transaction is in progress.\n         */\n        this.isTransactionActive = false;\n        /**\n         * Stores temporarily user data.\n         * Useful for sharing data with subscribers.\n         */\n        this.data = {};\n        /**\n         * All synchronized tables in the database.\n         */\n        this.loadedTables = [];\n        /**\n         * All synchronized views in the database.\n         */\n        this.loadedViews = [];\n        /**\n         * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n         */\n        this.sqlMemoryMode = false;\n        /**\n         * Sql-s stored if \"sql in memory\" mode is enabled.\n         */\n        this.sqlInMemory = new SqlInMemory();\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Loads given table's data from the database.\n     */\n    BaseQueryRunner.prototype.getTable = function (tablePath) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.loadTables([tablePath])];\n                    case 1:\n                        _a.loadedTables = _b.sent();\n                        return [2 /*return*/, this.loadedTables.length > 0 ? this.loadedTables[0] : undefined];\n                }\n            });\n        });\n    };\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    BaseQueryRunner.prototype.getTables = function (tableNames) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.loadTables(tableNames)];\n                    case 1:\n                        _a.loadedTables = _b.sent();\n                        return [2 /*return*/, this.loadedTables];\n                }\n            });\n        });\n    };\n    /**\n     * Loads given view's data from the database.\n     */\n    BaseQueryRunner.prototype.getView = function (viewPath) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.loadViews([viewPath])];\n                    case 1:\n                        _a.loadedViews = _b.sent();\n                        return [2 /*return*/, this.loadedViews.length > 0 ? this.loadedViews[0] : undefined];\n                }\n            });\n        });\n    };\n    /**\n     * Loads given view's data from the database.\n     */\n    BaseQueryRunner.prototype.getViews = function (viewPaths) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this;\n                        return [4 /*yield*/, this.loadViews(viewPaths)];\n                    case 1:\n                        _a.loadedViews = _b.sent();\n                        return [2 /*return*/, this.loadedViews];\n                }\n            });\n        });\n    };\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    BaseQueryRunner.prototype.enableSqlMemory = function () {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = true;\n    };\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    BaseQueryRunner.prototype.disableSqlMemory = function () {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = false;\n    };\n    /**\n     * Flushes all memorized sqls.\n     */\n    BaseQueryRunner.prototype.clearSqlMemory = function () {\n        this.sqlInMemory = new SqlInMemory();\n    };\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    BaseQueryRunner.prototype.getMemorySql = function () {\n        return this.sqlInMemory;\n    };\n    /**\n     * Executes up sql queries.\n     */\n    BaseQueryRunner.prototype.executeMemoryUpSql = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.sqlInMemory.upQueries, function (upQuery) { return _this.query(upQuery.query, upQuery.parameters); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Executes down sql queries.\n     */\n    BaseQueryRunner.prototype.executeMemoryDownSql = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.sqlInMemory.downQueries.reverse(), function (downQuery) { return _this.query(downQuery.query, downQuery.parameters); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    BaseQueryRunner.prototype.getCachedView = function (viewName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var view, foundViews;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        view = this.loadedViews.find(function (view) { return view.name === viewName; });\n                        if (view)\n                            return [2 /*return*/, view];\n                        return [4 /*yield*/, this.loadViews([viewName])];\n                    case 1:\n                        foundViews = _a.sent();\n                        if (foundViews.length > 0) {\n                            this.loadedViews.push(foundViews[0]);\n                            return [2 /*return*/, foundViews[0]];\n                        }\n                        else {\n                            throw new Error(\"View \\\"\" + viewName + \"\\\" does not exist.\");\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    BaseQueryRunner.prototype.getCachedTable = function (tableName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, foundTables;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.loadedTables.find(function (table) { return table.name === tableName; });\n                        if (table)\n                            return [2 /*return*/, table];\n                        return [4 /*yield*/, this.loadTables([tableName])];\n                    case 1:\n                        foundTables = _a.sent();\n                        if (foundTables.length > 0) {\n                            this.loadedTables.push(foundTables[0]);\n                            return [2 /*return*/, foundTables[0]];\n                        }\n                        else {\n                            throw new Error(\"Table \\\"\" + tableName + \"\\\" does not exist.\");\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    BaseQueryRunner.prototype.replaceCachedTable = function (table, changedTable) {\n        var foundTable = this.loadedTables.find(function (loadedTable) { return loadedTable.name === table.name; });\n        if (foundTable) {\n            foundTable.name = changedTable.name;\n            foundTable.columns = changedTable.columns;\n            foundTable.indices = changedTable.indices;\n            foundTable.foreignKeys = changedTable.foreignKeys;\n            foundTable.uniques = changedTable.uniques;\n            foundTable.checks = changedTable.checks;\n            foundTable.justCreated = changedTable.justCreated;\n            foundTable.engine = changedTable.engine;\n        }\n    };\n    BaseQueryRunner.prototype.getTypeormMetadataTableName = function () {\n        var options = this.connection.driver.options;\n        return this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n    };\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    BaseQueryRunner.prototype.isColumnChanged = function (oldColumn, newColumn, checkDefault, checkComment) {\n        // this logs need to debug issues in column change detection. Do not delete it!\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(oldColumn.enum !== newColumn.enum);\n        // console.log(oldColumn.enum, newColumn.enum);\n        return oldColumn.charset !== newColumn.charset\n            || oldColumn.collation !== newColumn.collation\n            || oldColumn.precision !== newColumn.precision\n            || oldColumn.scale !== newColumn.scale\n            || oldColumn.width !== newColumn.width // MySQL only\n            || oldColumn.zerofill !== newColumn.zerofill // MySQL only\n            || oldColumn.unsigned !== newColumn.unsigned // MySQL only\n            || oldColumn.asExpression !== newColumn.asExpression // MySQL only\n            || (checkDefault && oldColumn.default !== newColumn.default)\n            || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only\n            || oldColumn.isNullable !== newColumn.isNullable\n            || (checkComment && oldColumn.comment !== newColumn.comment)\n            || oldColumn.enum !== newColumn.enum;\n    };\n    /**\n     * Checks if column length is by default.\n     */\n    BaseQueryRunner.prototype.isDefaultColumnLength = function (table, column, length) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            var metadata = this.connection.getMetadata(table.name);\n            var columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.length)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].length) {\n            return this.connection.driver.dataTypeDefaults[column.type].length.toString() === length.toString();\n        }\n        return false;\n    };\n    /**\n     * Checks if column display width is by default. Used only for MySQL.\n     */\n    BaseQueryRunner.prototype.isDefaultColumnWidth = function (table, column, width) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            var metadata = this.connection.getMetadata(table.name);\n            var columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.width)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].width) {\n            return this.connection.driver.dataTypeDefaults[column.type].width === width;\n        }\n        return false;\n    };\n    /**\n     * Checks if column precision is by default.\n     */\n    BaseQueryRunner.prototype.isDefaultColumnPrecision = function (table, column, precision) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            var metadata = this.connection.getMetadata(table.name);\n            var columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== null\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\n        return false;\n    };\n    /**\n     * Checks if column scale is by default.\n     */\n    BaseQueryRunner.prototype.isDefaultColumnScale = function (table, column, scale) {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            var metadata = this.connection.getMetadata(table.name);\n            var columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined)\n                return false;\n        }\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== null\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\n        return false;\n    };\n    /**\n     * Executes sql used special for schema build.\n     */\n    BaseQueryRunner.prototype.executeQueries = function (upQueries, downQueries) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            var _this = this;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (upQueries instanceof Query)\n                            upQueries = [upQueries];\n                        if (downQueries instanceof Query)\n                            downQueries = [downQueries];\n                        (_a = this.sqlInMemory.upQueries).push.apply(_a, tslib_1.__spread(upQueries));\n                        (_b = this.sqlInMemory.downQueries).push.apply(_b, tslib_1.__spread(downQueries));\n                        // if sql-in-memory mode is enabled then simply store sql in memory and return\n                        if (this.sqlMemoryMode === true)\n                            return [2 /*return*/, Promise.resolve()];\n                        return [4 /*yield*/, PromiseUtils.runInSequence(upQueries, function (upQuery) { return _this.query(upQuery.query, upQuery.parameters); })];\n                    case 1:\n                        _c.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return BaseQueryRunner;\n}());\nexport { BaseQueryRunner };\n\n//# sourceMappingURL=BaseQueryRunner.js.map\n","import { CustomRepositoryDoesNotHaveEntityError } from \"../error/CustomRepositoryDoesNotHaveEntityError\";\nimport { getMetadataArgsStorage } from \"../index\";\nimport { CustomRepositoryNotFoundError } from \"../error/CustomRepositoryNotFoundError\";\n/**\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\n * Contains all most-necessary methods to simplify code in the custom repository.\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\n *\n * @experimental\n */\nvar AbstractRepository = /** @class */ (function () {\n    function AbstractRepository() {\n    }\n    Object.defineProperty(AbstractRepository.prototype, \"repository\", {\n        // -------------------------------------------------------------------------\n        // Protected Accessors\n        // -------------------------------------------------------------------------\n        /**\n         * Gets the original ORM repository for the entity that is managed by this repository.\n         * If current repository does not manage any entity, then exception will be thrown.\n         */\n        get: function () {\n            var target = this.getCustomRepositoryTarget(this);\n            if (!target)\n                throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n            return this.manager.getRepository(target);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractRepository.prototype, \"treeRepository\", {\n        /**\n         * Gets the original ORM tree repository for the entity that is managed by this repository.\n         * If current repository does not manage any entity, then exception will be thrown.\n         */\n        get: function () {\n            var target = this.getCustomRepositoryTarget(this);\n            if (!target)\n                throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n            return this.manager.getTreeRepository(target);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder for the repository's entity that can be used to build a sql query.\n     * If current repository does not manage any entity, then exception will be thrown.\n     */\n    AbstractRepository.prototype.createQueryBuilder = function (alias) {\n        var target = this.getCustomRepositoryTarget(this.constructor);\n        if (!target)\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor);\n        return this.manager.getRepository(target).createQueryBuilder(alias);\n    };\n    /**\n     * Creates a new query builder for the given entity that can be used to build a sql query.\n     */\n    AbstractRepository.prototype.createQueryBuilderFor = function (entity, alias) {\n        return this.getRepositoryFor(entity).createQueryBuilder(alias);\n    };\n    /**\n     * Gets the original ORM repository for the given entity class.\n     */\n    AbstractRepository.prototype.getRepositoryFor = function (entity) {\n        return this.manager.getRepository(entity);\n    };\n    /**\n     * Gets the original ORM tree repository for the given entity class.\n     */\n    AbstractRepository.prototype.getTreeRepositoryFor = function (entity) {\n        return this.manager.getTreeRepository(entity);\n    };\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets custom repository's managed entity.\n     * If given custom repository does not manage any entity then undefined will be returned.\n     */\n    AbstractRepository.prototype.getCustomRepositoryTarget = function (customRepository) {\n        var entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(function (repository) {\n            return repository.target === (customRepository instanceof Function ? customRepository : customRepository.constructor);\n        });\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository);\n        return entityRepositoryMetadataArgs.entity;\n    };\n    return AbstractRepository;\n}());\nexport { AbstractRepository };\n\n//# sourceMappingURL=AbstractRepository.js.map\n","import * as tslib_1 from \"tslib\";\nimport { getConnection } from \"../index\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\n/**\n * Base abstract entity for all entities, used in ActiveRecord patterns.\n */\nvar BaseEntity = /** @class */ (function () {\n    function BaseEntity() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    BaseEntity.prototype.hasId = function () {\n        return this.constructor.getRepository().hasId(this);\n    };\n    /**\n     * Saves current entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    BaseEntity.prototype.save = function (options) {\n        return this.constructor.getRepository().save(this, options);\n    };\n    /**\n     * Removes current entity from the database.\n     */\n    BaseEntity.prototype.remove = function (options) {\n        return this.constructor.getRepository().remove(this, options);\n    };\n    /**\n     * Records the delete date of current entity.\n     */\n    BaseEntity.prototype.softRemove = function (options) {\n        return this.constructor.getRepository().softRemove(this, options);\n    };\n    /**\n     * Recovers a given entity in the database.\n     */\n    BaseEntity.prototype.recover = function (options) {\n        return this.constructor.getRepository().recover(this, options);\n    };\n    /**\n     * Reloads entity data from the database.\n     */\n    BaseEntity.prototype.reload = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var base, newestEntity;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        base = this.constructor;\n                        return [4 /*yield*/, base.getRepository().findOneOrFail(base.getId(this))];\n                    case 1:\n                        newestEntity = _a.sent();\n                        ObjectUtils.assign(this, newestEntity);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Sets connection to be used by entity.\n     */\n    BaseEntity.useConnection = function (connection) {\n        this.usedConnection = connection;\n    };\n    /**\n     * Gets current entity's Repository.\n     */\n    BaseEntity.getRepository = function () {\n        var connection = this.usedConnection || getConnection();\n        return connection.getRepository(this);\n    };\n    Object.defineProperty(BaseEntity, \"target\", {\n        /**\n         * Returns object that is managed by this repository.\n         * If this repository manages entity from schema,\n         * then it returns a name of that schema instead.\n         */\n        get: function () {\n            return this.getRepository().target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Checks entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    BaseEntity.hasId = function (entity) {\n        return this.getRepository().hasId(entity);\n    };\n    /**\n     * Gets entity mixed id.\n     */\n    BaseEntity.getId = function (entity) {\n        return this.getRepository().getId(entity);\n    };\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    BaseEntity.createQueryBuilder = function (alias) {\n        return this.getRepository().createQueryBuilder(alias);\n    };\n    /**\n      * Creates a new entity instance and copies all entity properties from this object into a new entity.\n      * Note that it copies only properties that present in entity schema.\n      */\n    BaseEntity.create = function (entityOrEntities) {\n        return this.getRepository().create(entityOrEntities);\n    };\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    BaseEntity.merge = function (mergeIntoEntity) {\n        var entityLikes = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            entityLikes[_i - 1] = arguments[_i];\n        }\n        var _a;\n        return (_a = this.getRepository()).merge.apply(_a, tslib_1.__spread([mergeIntoEntity], entityLikes));\n    };\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    BaseEntity.preload = function (entityLike) {\n        return this.getRepository().preload(entityLike);\n    };\n    /**\n     * Saves one or many given entities.\n     */\n    BaseEntity.save = function (entityOrEntities, options) {\n        return this.getRepository().save(entityOrEntities, options);\n    };\n    /**\n     * Removes one or many given entities.\n     */\n    BaseEntity.remove = function (entityOrEntities, options) {\n        return this.getRepository().remove(entityOrEntities, options);\n    };\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    BaseEntity.softRemove = function (entityOrEntities, options) {\n        return this.getRepository().softRemove(entityOrEntities, options);\n    };\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    BaseEntity.insert = function (entity, options) {\n        return this.getRepository().insert(entity, options);\n    };\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    BaseEntity.update = function (criteria, partialEntity, options) {\n        return this.getRepository().update(criteria, partialEntity, options);\n    };\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike remove method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    BaseEntity.delete = function (criteria, options) {\n        return this.getRepository().delete(criteria, options);\n    };\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    BaseEntity.count = function (optionsOrConditions) {\n        return this.getRepository().count(optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    BaseEntity.find = function (optionsOrConditions) {\n        return this.getRepository().find(optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    BaseEntity.findAndCount = function (optionsOrConditions) {\n        return this.getRepository().findAndCount(optionsOrConditions);\n    };\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    BaseEntity.findByIds = function (ids, optionsOrConditions) {\n        return this.getRepository().findByIds(ids, optionsOrConditions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    BaseEntity.findOne = function (optionsOrConditions, maybeOptions) {\n        return this.getRepository().findOne(optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    BaseEntity.findOneOrFail = function (optionsOrConditions, maybeOptions) {\n        return this.getRepository().findOneOrFail(optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    BaseEntity.query = function (query, parameters) {\n        return this.getRepository().query(query, parameters);\n    };\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     */\n    BaseEntity.clear = function () {\n        return this.getRepository().clear();\n    };\n    return BaseEntity;\n}());\nexport { BaseEntity };\n\n//# sourceMappingURL=BaseEntity.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nvar Repository = /** @class */ (function () {\n    function Repository() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    Repository.prototype.createQueryBuilder = function (alias, queryRunner) {\n        return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    };\n    Object.defineProperty(Repository.prototype, \"target\", {\n        /**\n         * Returns object that is managed by this repository.\n         * If this repository manages entity from schema,\n         * then it returns a name of that schema instead.\n         */\n        get: function () {\n            return this.metadata.target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    Repository.prototype.hasId = function (entity) {\n        return this.manager.hasId(this.metadata.target, entity);\n    };\n    /**\n     * Gets entity mixed id.\n     */\n    Repository.prototype.getId = function (entity) {\n        return this.manager.getId(this.metadata.target, entity);\n    };\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    Repository.prototype.create = function (plainEntityLikeOrPlainEntityLikes) {\n        return this.manager.create(this.metadata.target, plainEntityLikeOrPlainEntityLikes);\n    };\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    Repository.prototype.merge = function (mergeIntoEntity) {\n        var entityLikes = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            entityLikes[_i - 1] = arguments[_i];\n        }\n        var _a;\n        return (_a = this.manager).merge.apply(_a, tslib_1.__spread([this.metadata.target, mergeIntoEntity], entityLikes));\n    };\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    Repository.prototype.preload = function (entityLike) {\n        return this.manager.preload(this.metadata.target, entityLike);\n    };\n    /**\n     * Saves one or many given entities.\n     */\n    Repository.prototype.save = function (entityOrEntities, options) {\n        return this.manager.save(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Removes one or many given entities.\n     */\n    Repository.prototype.remove = function (entityOrEntities, options) {\n        return this.manager.remove(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    Repository.prototype.softRemove = function (entityOrEntities, options) {\n        return this.manager.softRemove(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Recovers one or many given entities.\n     */\n    Repository.prototype.recover = function (entityOrEntities, options) {\n        return this.manager.recover(this.metadata.target, entityOrEntities, options);\n    };\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    Repository.prototype.insert = function (entity) {\n        return this.manager.insert(this.metadata.target, entity);\n    };\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.update = function (criteria, partialEntity) {\n        return this.manager.update(this.metadata.target, criteria, partialEntity);\n    };\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.delete = function (criteria) {\n        return this.manager.delete(this.metadata.target, criteria);\n    };\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.softDelete = function (criteria) {\n        return this.manager.softDelete(this.metadata.target, criteria);\n    };\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    Repository.prototype.restore = function (criteria) {\n        return this.manager.restore(this.metadata.target, criteria);\n    };\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    Repository.prototype.count = function (optionsOrConditions) {\n        return this.manager.count(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    Repository.prototype.find = function (optionsOrConditions) {\n        return this.manager.find(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    Repository.prototype.findAndCount = function (optionsOrConditions) {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n    };\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    Repository.prototype.findByIds = function (ids, optionsOrConditions) {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    Repository.prototype.findOne = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    Repository.prototype.findOneOrFail = function (optionsOrConditions, maybeOptions) {\n        return this.manager.findOneOrFail(this.metadata.target, optionsOrConditions, maybeOptions);\n    };\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    Repository.prototype.query = function (query, parameters) {\n        return this.manager.query(query, parameters);\n    };\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    Repository.prototype.clear = function () {\n        return this.manager.clear(this.metadata.target);\n    };\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    Repository.prototype.increment = function (conditions, propertyPath, value) {\n        return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n    };\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    Repository.prototype.decrement = function (conditions, propertyPath, value) {\n        return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n    };\n    return Repository;\n}());\nexport { Repository };\n\n//# sourceMappingURL=Repository.js.map\n","import { TreeRepository } from \"./TreeRepository\";\nimport { Repository } from \"./Repository\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { MongoRepository } from \"./MongoRepository\";\n/**\n * Factory used to create different types of repositories.\n */\nvar RepositoryFactory = /** @class */ (function () {\n    function RepositoryFactory() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a repository.\n     */\n    RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {\n        if (metadata.treeType) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            var repository = new TreeRepository();\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n        }\n        else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            var repository = void 0;\n            if (manager.connection.driver instanceof MongoDriver) {\n                repository = new MongoRepository();\n            }\n            else {\n                repository = new Repository();\n            }\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n        }\n    };\n    return RepositoryFactory;\n}());\nexport { RepositoryFactory };\n\n//# sourceMappingURL=RepositoryFactory.js.map\n","import * as tslib_1 from \"tslib\";\nimport { Repository } from \"./Repository\";\nimport { AbstractSqliteDriver } from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\n/**\n * Repository with additional functions to work with trees.\n *\n * @see Repository\n */\nvar TreeRepository = /** @class */ (function (_super) {\n    tslib_1.__extends(TreeRepository, _super);\n    function TreeRepository() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // todo: implement moving\n    // todo: implement removing\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Gets complete trees for all roots in the table.\n     */\n    TreeRepository.prototype.findTrees = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var roots;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.findRoots()];\n                    case 1:\n                        roots = _a.sent();\n                        return [4 /*yield*/, Promise.all(roots.map(function (root) { return _this.findDescendantsTree(root); }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, roots];\n                }\n            });\n        });\n    };\n    /**\n     * Roots are entities that have no ancestors. Finds them all.\n     */\n    TreeRepository.prototype.findRoots = function () {\n        var _this = this;\n        var escapeAlias = function (alias) { return _this.manager.connection.driver.escape(alias); };\n        var escapeColumn = function (column) { return _this.manager.connection.driver.escape(column); };\n        var parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(this.metadata.treeParentRelation.propertyName, \"id\");\n        return this.createQueryBuilder(\"treeEntity\")\n            .where(escapeAlias(\"treeEntity\") + \".\" + escapeColumn(parentPropertyName) + \" IS NULL\")\n            .getMany();\n    };\n    /**\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\n     */\n    TreeRepository.prototype.findDescendants = function (entity) {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    };\n    /**\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\n     */\n    TreeRepository.prototype.findDescendantsTree = function (entity) {\n        var _this = this;\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(function (entitiesAndScalars) {\n            var relationMaps = _this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n            _this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n            return entity;\n        });\n    };\n    /**\n     * Gets number of descendants of the entity.\n     */\n    TreeRepository.prototype.countDescendants = function (entity) {\n        return this\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    };\n    /**\n     * Creates a query builder used to get descendants of the entities in a tree.\n     */\n    TreeRepository.prototype.createDescendantsQueryBuilder = function (alias, closureTableAlias, entity) {\n        var _this = this;\n        // create shortcuts for better readability\n        var escape = function (alias) { return _this.manager.connection.driver.escape(alias); };\n        if (this.metadata.treeType === \"closure-table\") {\n            var joinCondition = this.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = \" + escape(alias) + \".\" + escape(column.referencedColumn.propertyPath);\n            }).join(\" AND \");\n            var parameters_1 = {};\n            var whereCondition = this.metadata.closureJunctionTable.ancestorColumns.map(function (column) {\n                parameters_1[column.referencedColumn.propertyName] = column.referencedColumn.getEntityValue(entity);\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = :\" + column.referencedColumn.propertyName;\n            }).join(\" AND \");\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters_1);\n        }\n        else if (this.metadata.treeType === \"nested-set\") {\n            var whereCondition = alias + \".\" + this.metadata.nestedSetLeftColumn.propertyPath + \" BETWEEN \" +\n                \"joined.\" + this.metadata.nestedSetLeftColumn.propertyPath + \" AND joined.\" + this.metadata.nestedSetRightColumn.propertyPath;\n            var parameters_2 = {};\n            var joinCondition = this.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {\n                var parameterName = joinColumn.referencedColumn.propertyPath.replace(\".\", \"_\");\n                parameters_2[parameterName] = joinColumn.referencedColumn.getEntityValue(entity);\n                return \"joined.\" + joinColumn.referencedColumn.propertyPath + \" = :\" + parameterName;\n            }).join(\" AND \");\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", whereCondition)\n                .where(joinCondition, parameters_2);\n        }\n        else if (this.metadata.treeType === \"materialized-path\") {\n            return this\n                .createQueryBuilder(alias)\n                .where(function (qb) {\n                var subQuery = qb.subQuery()\n                    .select(_this.metadata.targetName + \".\" + _this.metadata.materializedPathColumn.propertyPath, \"path\")\n                    .from(_this.metadata.target, _this.metadata.targetName)\n                    .whereInIds(_this.metadata.getEntityIdMap(entity));\n                qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                if (_this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                    return alias + \".\" + _this.metadata.materializedPathColumn.propertyPath + \" LIKE \" + subQuery.getQuery() + \" || '%'\";\n                }\n                else {\n                    return alias + \".\" + _this.metadata.materializedPathColumn.propertyPath + \" LIKE CONCAT(\" + subQuery.getQuery() + \", '%')\";\n                }\n            });\n        }\n        throw new Error(\"Supported only in tree entities\");\n    };\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\n     */\n    TreeRepository.prototype.findAncestors = function (entity) {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getMany();\n    };\n    /**\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\n     */\n    TreeRepository.prototype.findAncestorsTree = function (entity) {\n        var _this = this;\n        // todo: throw exception if there is no column of this relation?\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getRawAndEntities()\n            .then(function (entitiesAndScalars) {\n            var relationMaps = _this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\n            _this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\n            return entity;\n        });\n    };\n    /**\n     * Gets number of ancestors of the entity.\n     */\n    TreeRepository.prototype.countAncestors = function (entity) {\n        return this\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\n            .getCount();\n    };\n    /**\n     * Creates a query builder used to get ancestors of the entities in the tree.\n     */\n    TreeRepository.prototype.createAncestorsQueryBuilder = function (alias, closureTableAlias, entity) {\n        // create shortcuts for better readability\n        // const escape = (alias: string) => this.manager.connection.driver.escape(alias);\n        var _this = this;\n        if (this.metadata.treeType === \"closure-table\") {\n            var joinCondition = this.metadata.closureJunctionTable.ancestorColumns.map(function (column) {\n                return closureTableAlias + \".\" + column.propertyPath + \" = \" + alias + \".\" + column.referencedColumn.propertyPath;\n            }).join(\" AND \");\n            var parameters_3 = {};\n            var whereCondition = this.metadata.closureJunctionTable.descendantColumns.map(function (column) {\n                parameters_3[column.referencedColumn.propertyName] = column.referencedColumn.getEntityValue(entity);\n                return closureTableAlias + \".\" + column.propertyPath + \" = :\" + column.referencedColumn.propertyName;\n            }).join(\" AND \");\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\n                .where(whereCondition)\n                .setParameters(parameters_3);\n        }\n        else if (this.metadata.treeType === \"nested-set\") {\n            var joinCondition = \"joined.\" + this.metadata.nestedSetLeftColumn.propertyPath + \" BETWEEN \" +\n                alias + \".\" + this.metadata.nestedSetLeftColumn.propertyPath + \" AND \" + alias + \".\" + this.metadata.nestedSetRightColumn.propertyPath;\n            var parameters_4 = {};\n            var whereCondition = this.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {\n                var parameterName = joinColumn.referencedColumn.propertyPath.replace(\".\", \"_\");\n                parameters_4[parameterName] = joinColumn.referencedColumn.getEntityValue(entity);\n                return \"joined.\" + joinColumn.referencedColumn.propertyPath + \" = :\" + parameterName;\n            }).join(\" AND \");\n            return this\n                .createQueryBuilder(alias)\n                .innerJoin(this.metadata.targetName, \"joined\", joinCondition)\n                .where(whereCondition, parameters_4);\n        }\n        else if (this.metadata.treeType === \"materialized-path\") {\n            // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');\n            return this\n                .createQueryBuilder(alias)\n                .where(function (qb) {\n                var subQuery = qb.subQuery()\n                    .select(_this.metadata.targetName + \".\" + _this.metadata.materializedPathColumn.propertyPath, \"path\")\n                    .from(_this.metadata.target, _this.metadata.targetName)\n                    .whereInIds(_this.metadata.getEntityIdMap(entity));\n                qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\n                if (_this.manager.connection.driver instanceof AbstractSqliteDriver) {\n                    return subQuery.getQuery() + \" LIKE \" + alias + \".\" + _this.metadata.materializedPathColumn.propertyPath + \" || '%'\";\n                }\n                else {\n                    return subQuery.getQuery() + \" LIKE CONCAT(\" + alias + \".\" + _this.metadata.materializedPathColumn.propertyPath + \", '%')\";\n                }\n            });\n        }\n        throw new Error(\"Supported only in tree entities\");\n    };\n    /**\n     * Moves entity to the children of then given entity.\n     *\n    move(entity: Entity, to: Entity): Promise<void> {\n        return Promise.resolve();\n    } */\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    TreeRepository.prototype.createRelationMaps = function (alias, rawResults) {\n        var _this = this;\n        return rawResults.map(function (rawResult) {\n            var joinColumn = _this.metadata.treeParentRelation.joinColumns[0];\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\n            var joinColumnName = joinColumn.givenDatabaseName || joinColumn.databaseName;\n            var id = rawResult[alias + \"_\" + _this.metadata.primaryColumns[0].databaseName];\n            var parentId = rawResult[alias + \"_\" + joinColumnName];\n            return {\n                id: _this.manager.connection.driver.prepareHydratedValue(id, _this.metadata.primaryColumns[0]),\n                parentId: _this.manager.connection.driver.prepareHydratedValue(parentId, joinColumn),\n            };\n        });\n    };\n    TreeRepository.prototype.buildChildrenEntityTree = function (entity, entities, relationMaps) {\n        var _this = this;\n        var childProperty = this.metadata.treeChildrenRelation.propertyName;\n        var parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        var childRelationMaps = relationMaps.filter(function (relationMap) { return relationMap.parentId === parentEntityId; });\n        var childIds = new Set(childRelationMaps.map(function (relationMap) { return relationMap.id; }));\n        entity[childProperty] = entities.filter(function (entity) { return childIds.has(entity.id); });\n        entity[childProperty].forEach(function (childEntity) {\n            _this.buildChildrenEntityTree(childEntity, entities, relationMaps);\n        });\n    };\n    TreeRepository.prototype.buildParentEntityTree = function (entity, entities, relationMaps) {\n        var _this = this;\n        var parentProperty = this.metadata.treeParentRelation.propertyName;\n        var entityId = this.metadata.primaryColumns[0].getEntityValue(entity);\n        var parentRelationMap = relationMaps.find(function (relationMap) { return relationMap.id === entityId; });\n        var parentEntity = entities.find(function (entity) {\n            if (!parentRelationMap)\n                return false;\n            return entity[_this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\n        });\n        if (parentEntity) {\n            entity[parentProperty] = parentEntity;\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\n        }\n    };\n    return TreeRepository;\n}(Repository));\nexport { TreeRepository };\n\n//# sourceMappingURL=TreeRepository.js.map\n","import * as tslib_1 from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { Table } from \"./table/Table\";\nimport { TableColumn } from \"./table/TableColumn\";\nimport { TableForeignKey } from \"./table/TableForeignKey\";\nimport { TableIndex } from \"./table/TableIndex\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\nimport { TableUtils } from \"./util/TableUtils\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { TableUnique } from \"./table/TableUnique\";\nimport { TableCheck } from \"./table/TableCheck\";\nimport { TableExclusion } from \"./table/TableExclusion\";\nimport { View } from \"./view/View\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nvar RdbmsSchemaBuilder = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function RdbmsSchemaBuilder(connection) {\n        this.connection = connection;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    RdbmsSchemaBuilder.prototype.build = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tablePaths, error_1, rollbackError_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.queryRunner = this.connection.createQueryRunner(\"master\");\n                        if (!!(this.connection.driver instanceof CockroachDriver)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.queryRunner.startTransaction()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 12, 18, 20]);\n                        tablePaths = this.entityToSyncMetadatas.map(function (metadata) { return metadata.tablePath; });\n                        if (!(this.viewEntityToSyncMetadatas.length > 0)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.createTypeormMetadataTable()];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [4 /*yield*/, this.queryRunner.getTables(tablePaths)];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.queryRunner.getViews([])];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.executeSchemaSyncOperationsInProperOrder()];\n                    case 7:\n                        _a.sent();\n                        if (!this.connection.queryResultCache) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.connection.queryResultCache.synchronize(this.queryRunner)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9:\n                        if (!!(this.connection.driver instanceof CockroachDriver)) return [3 /*break*/, 11];\n                        return [4 /*yield*/, this.queryRunner.commitTransaction()];\n                    case 10:\n                        _a.sent();\n                        _a.label = 11;\n                    case 11: return [3 /*break*/, 20];\n                    case 12:\n                        error_1 = _a.sent();\n                        _a.label = 13;\n                    case 13:\n                        _a.trys.push([13, 16, , 17]);\n                        if (!!(this.connection.driver instanceof CockroachDriver)) return [3 /*break*/, 15];\n                        return [4 /*yield*/, this.queryRunner.rollbackTransaction()];\n                    case 14:\n                        _a.sent();\n                        _a.label = 15;\n                    case 15: return [3 /*break*/, 17];\n                    case 16:\n                        rollbackError_1 = _a.sent();\n                        return [3 /*break*/, 17];\n                    case 17: throw error_1;\n                    case 18: return [4 /*yield*/, this.queryRunner.release()];\n                    case 19:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 20: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    RdbmsSchemaBuilder.prototype.log = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tablePaths;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.queryRunner = this.connection.createQueryRunner(\"master\");\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 9, 11]);\n                        tablePaths = this.entityToSyncMetadatas.map(function (metadata) { return metadata.tablePath; });\n                        if (!(this.viewEntityToSyncMetadatas.length > 0)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.createTypeormMetadataTable()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.queryRunner.getTables(tablePaths)];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this.queryRunner.getViews([])];\n                    case 5:\n                        _a.sent();\n                        this.queryRunner.enableSqlMemory();\n                        return [4 /*yield*/, this.executeSchemaSyncOperationsInProperOrder()];\n                    case 6:\n                        _a.sent();\n                        if (!this.connection.queryResultCache) return [3 /*break*/, 8];\n                        return [4 /*yield*/, this.connection.queryResultCache.synchronize(this.queryRunner)];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [2 /*return*/, this.queryRunner.getMemorySql()];\n                    case 9:\n                        // its important to disable this mode despite the fact we are release query builder\n                        // because there exist drivers which reuse same query runner. Also its important to disable\n                        // sql memory after call of getMemorySql() method because last one flushes sql memory.\n                        this.queryRunner.disableSqlMemory();\n                        return [4 /*yield*/, this.queryRunner.release()];\n                    case 10:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Object.defineProperty(RdbmsSchemaBuilder.prototype, \"entityToSyncMetadatas\", {\n        // -------------------------------------------------------------------------\n        // Protected Methods\n        // -------------------------------------------------------------------------\n        /**\n         * Returns only entities that should be synced in the database.\n         */\n        get: function () {\n            return this.connection.entityMetadatas.filter(function (metadata) { return metadata.synchronize && metadata.tableType !== \"entity-child\" && metadata.tableType !== \"view\"; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RdbmsSchemaBuilder.prototype, \"viewEntityToSyncMetadatas\", {\n        /**\n         * Returns only entities that should be synced in the database.\n         */\n        get: function () {\n            return this.connection.entityMetadatas.filter(function (metadata) { return metadata.tableType === \"view\" && metadata.synchronize; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    RdbmsSchemaBuilder.prototype.executeSchemaSyncOperationsInProperOrder = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.dropOldViews()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldForeignKeys()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldIndices()];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldChecks()];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropOldExclusions()];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropCompositeUniqueConstraints()];\n                    case 6:\n                        _a.sent();\n                        // await this.renameTables();\n                        return [4 /*yield*/, this.renameColumns()];\n                    case 7:\n                        // await this.renameTables();\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewTables()];\n                    case 8:\n                        _a.sent();\n                        return [4 /*yield*/, this.dropRemovedColumns()];\n                    case 9:\n                        _a.sent();\n                        return [4 /*yield*/, this.addNewColumns()];\n                    case 10:\n                        _a.sent();\n                        return [4 /*yield*/, this.updatePrimaryKeys()];\n                    case 11:\n                        _a.sent();\n                        return [4 /*yield*/, this.updateExistColumns()];\n                    case 12:\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewIndices()];\n                    case 13:\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewChecks()];\n                    case 14:\n                        _a.sent();\n                        return [4 /*yield*/, this.createNewExclusions()];\n                    case 15:\n                        _a.sent();\n                        return [4 /*yield*/, this.createCompositeUniqueConstraints()];\n                    case 16:\n                        _a.sent();\n                        return [4 /*yield*/, this.createForeignKeys()];\n                    case 17:\n                        _a.sent();\n                        return [4 /*yield*/, this.createViews()];\n                    case 18:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    RdbmsSchemaBuilder.prototype.dropOldForeignKeys = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, tableForeignKeysToDrop;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        tableForeignKeysToDrop = table.foreignKeys.filter(function (tableForeignKey) {\n                                            var metadataFK = metadata.foreignKeys.find(function (metadataForeignKey) { return foreignKeysMatch(tableForeignKey, metadataForeignKey); });\n                                            return !metadataFK\n                                                || (metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete)\n                                                || (metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate);\n                                        });\n                                        if (tableForeignKeysToDrop.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"dropping old foreign keys of \" + table.name + \": \" + tableForeignKeysToDrop.map(function (dbForeignKey) { return dbForeignKey.name; }).join(\", \"));\n                                        // drop foreign keys from the database\n                                        return [4 /*yield*/, this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop)];\n                                    case 1:\n                                        // drop foreign keys from the database\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Rename tables\n     */\n    RdbmsSchemaBuilder.prototype.renameTables = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            return tslib_1.__generator(this, function (_a) {\n                                return [2 /*return*/];\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    RdbmsSchemaBuilder.prototype.renameColumns = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, renamedMetadataColumns, renamedTableColumns, renamedColumn;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        if (metadata.columns.length !== table.columns.length)\n                                            return [2 /*return*/];\n                                        renamedMetadataColumns = metadata.columns.filter(function (column) {\n                                            return !table.columns.find(function (tableColumn) {\n                                                return tableColumn.name === column.databaseName\n                                                    && tableColumn.type === _this.connection.driver.normalizeType(column)\n                                                    && tableColumn.isNullable === column.isNullable\n                                                    && tableColumn.isUnique === _this.connection.driver.normalizeIsUnique(column);\n                                            });\n                                        });\n                                        if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                                            return [2 /*return*/];\n                                        renamedTableColumns = table.columns.filter(function (tableColumn) {\n                                            return !metadata.columns.find(function (column) {\n                                                return column.databaseName === tableColumn.name\n                                                    && _this.connection.driver.normalizeType(column) === tableColumn.type\n                                                    && column.isNullable === tableColumn.isNullable\n                                                    && _this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                                            });\n                                        });\n                                        if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                                            return [2 /*return*/];\n                                        renamedColumn = renamedTableColumns[0].clone();\n                                        renamedColumn.name = renamedMetadataColumns[0].databaseName;\n                                        this.connection.logger.logSchemaBuild(\"renaming column \\\"\" + renamedTableColumns[0].name + \"\\\" in to \\\"\" + renamedColumn.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldIndices = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, dropQueries;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        dropQueries = table.indices\n                                            .filter(function (tableIndex) {\n                                            var indexMetadata = metadata.indices.find(function (index) { return index.name === tableIndex.name; });\n                                            if (indexMetadata) {\n                                                if (indexMetadata.synchronize === false)\n                                                    return false;\n                                                if (indexMetadata.isUnique !== tableIndex.isUnique)\n                                                    return true;\n                                                if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                                                    return true;\n                                                if (indexMetadata.isFulltext !== tableIndex.isFulltext)\n                                                    return true;\n                                                if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                                                    return true;\n                                                return !indexMetadata.columns.every(function (column) { return tableIndex.columnNames.indexOf(column.databaseName) !== -1; });\n                                            }\n                                            return true;\n                                        })\n                                            .map(function (tableIndex) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                            return tslib_1.__generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0:\n                                                        this.connection.logger.logSchemaBuild(\"dropping an index: \\\"\" + tableIndex.name + \"\\\" from table \" + table.name);\n                                                        return [4 /*yield*/, this.queryRunner.dropIndex(table, tableIndex)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        return [2 /*return*/];\n                                                }\n                                            });\n                                        }); });\n                                        return [4 /*yield*/, Promise.all(dropQueries)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldChecks = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Mysql does not support check constraints\n                        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var table, oldChecks;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            oldChecks = table.checks.filter(function (tableCheck) {\n                                                return !metadata.checks.find(function (checkMetadata) { return checkMetadata.name === tableCheck.name; });\n                                            });\n                                            if (oldChecks.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"dropping old check constraint: \" + oldChecks.map(function (check) { return \"\\\"\" + check.name + \"\\\"\"; }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.dropCheckConstraints(table, oldChecks)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropCompositeUniqueConstraints = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, compositeUniques;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        compositeUniques = table.uniques.filter(function (tableUnique) {\n                                            return tableUnique.columnNames.length > 1 && !metadata.uniques.find(function (uniqueMetadata) { return uniqueMetadata.name === tableUnique.name; });\n                                        });\n                                        if (compositeUniques.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"dropping old unique constraint: \" + compositeUniques.map(function (unique) { return \"\\\"\" + unique.name + \"\\\"\"; }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.dropUniqueConstraints(table, compositeUniques)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldExclusions = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Only PostgreSQL supports exclusion constraints\n                        if (!(this.connection.driver instanceof PostgresDriver))\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var table, oldExclusions;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            oldExclusions = table.exclusions.filter(function (tableExclusion) {\n                                                return !metadata.exclusions.find(function (exclusionMetadata) { return exclusionMetadata.name === tableExclusion.name; });\n                                            });\n                                            if (oldExclusions.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"dropping old exclusion constraint: \" + oldExclusions.map(function (exclusion) { return \"\\\"\" + exclusion.name + \"\\\"\"; }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.dropExclusionConstraints(table, oldExclusions)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    RdbmsSchemaBuilder.prototype.createNewTables = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var existTable, table;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        existTable = this.queryRunner.loadedTables.find(function (table) {\n                                            var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                                            var schema = metadata.schema || _this.connection.driver.options.schema;\n                                            var fullTableName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                                            return table.name === fullTableName;\n                                        });\n                                        if (existTable)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"creating a new table: \" + metadata.tablePath);\n                                        table = Table.create(metadata, this.connection.driver);\n                                        return [4 /*yield*/, this.queryRunner.createTable(table, false, false)];\n                                    case 1:\n                                        _a.sent();\n                                        this.queryRunner.loadedTables.push(table);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.createViews = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.viewEntityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var existView, view;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        existView = this.queryRunner.loadedViews.find(function (view) {\n                                            var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                                            var schema = metadata.schema || _this.connection.driver.options.schema;\n                                            var fullViewName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                                            var viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(_this.connection).getQuery();\n                                            var metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression(_this.connection).getQuery();\n                                            return view.name === fullViewName && viewExpression === metadataExpression;\n                                        });\n                                        if (existView)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"creating a new view: \" + metadata.tablePath);\n                                        view = View.create(metadata, this.connection.driver);\n                                        return [4 /*yield*/, this.queryRunner.createView(view)];\n                                    case 1:\n                                        _a.sent();\n                                        this.queryRunner.loadedViews.push(view);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.dropOldViews = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.queryRunner.loadedViews, function (view) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var existViewMetadata;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        existViewMetadata = this.viewEntityToSyncMetadatas.find(function (metadata) {\n                                            var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                                            var schema = metadata.schema || _this.connection.driver.options.schema;\n                                            var fullViewName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                                            var viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(_this.connection).getQuery();\n                                            var metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression(_this.connection).getQuery();\n                                            return view.name === fullViewName && viewExpression === metadataExpression;\n                                        });\n                                        if (existViewMetadata)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"dropping an old view: \" + view.name);\n                                        // drop an old view\n                                        return [4 /*yield*/, this.queryRunner.dropView(view)];\n                                    case 1:\n                                        // drop an old view\n                                        _a.sent();\n                                        this.queryRunner.loadedViews.splice(this.queryRunner.loadedViews.indexOf(view), 1);\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    RdbmsSchemaBuilder.prototype.dropRemovedColumns = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, droppedTableColumns;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        droppedTableColumns = table.columns.filter(function (tableColumn) {\n                                            return !metadata.columns.find(function (columnMetadata) { return columnMetadata.databaseName === tableColumn.name; });\n                                        });\n                                        if (droppedTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"columns dropped in \" + table.name + \": \" + droppedTableColumns.map(function (column) { return column.name; }).join(\", \"));\n                                        // drop columns from the database\n                                        return [4 /*yield*/, this.queryRunner.dropColumns(table, droppedTableColumns)];\n                                    case 1:\n                                        // drop columns from the database\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    RdbmsSchemaBuilder.prototype.addNewColumns = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, newColumnMetadatas, newTableColumnOptions, newTableColumns;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newColumnMetadatas = metadata.columns.filter(function (columnMetadata) {\n                                            return !table.columns.find(function (tableColumn) { return tableColumn.name === columnMetadata.databaseName; });\n                                        });\n                                        if (newColumnMetadatas.length === 0)\n                                            return [2 /*return*/];\n                                        newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n                                        newTableColumns = newTableColumnOptions.map(function (option) { return new TableColumn(option); });\n                                        if (newTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"new columns added: \" + newColumnMetadatas.map(function (column) { return column.databaseName; }).join(\", \"));\n                                        return [4 /*yield*/, this.queryRunner.addColumns(table, newTableColumns)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Updates composite primary keys.\n     */\n    RdbmsSchemaBuilder.prototype.updatePrimaryKeys = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, primaryMetadataColumns, primaryTableColumns, changedPrimaryColumns;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        primaryMetadataColumns = metadata.columns.filter(function (column) { return column.isPrimary; });\n                                        primaryTableColumns = table.columns.filter(function (column) { return column.isPrimary; });\n                                        if (!(primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1)) return [3 /*break*/, 2];\n                                        changedPrimaryColumns = primaryMetadataColumns.map(function (primaryMetadataColumn) {\n                                            return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, _this.connection.driver));\n                                        });\n                                        return [4 /*yield*/, this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns)];\n                                    case 1:\n                                        _a.sent();\n                                        _a.label = 2;\n                                    case 2: return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    RdbmsSchemaBuilder.prototype.updateExistColumns = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, changedColumns, newAndOldTableColumns;\n                            var _this = this;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n                                        if (changedColumns.length === 0)\n                                            return [2 /*return*/];\n                                        // drop all foreign keys that point to this column\n                                        return [4 /*yield*/, PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 1:\n                                        // drop all foreign keys that point to this column\n                                        _a.sent();\n                                        // drop all composite indices related to this column\n                                        return [4 /*yield*/, PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 2:\n                                        // drop all composite indices related to this column\n                                        _a.sent();\n                                        if (!!(this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) return [3 /*break*/, 4];\n                                        return [4 /*yield*/, PromiseUtils.runInSequence(changedColumns, function (changedColumn) { return _this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName); })];\n                                    case 3:\n                                        _a.sent();\n                                        _a.label = 4;\n                                    case 4:\n                                        newAndOldTableColumns = changedColumns.map(function (changedColumn) {\n                                            var oldTableColumn = table.columns.find(function (column) { return column.name === changedColumn.databaseName; });\n                                            var newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, _this.connection.driver);\n                                            var newTableColumn = new TableColumn(newTableColumnOptions);\n                                            return {\n                                                oldColumn: oldTableColumn,\n                                                newColumn: newTableColumn\n                                            };\n                                        });\n                                        if (newAndOldTableColumns.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"columns changed in \\\"\" + table.name + \"\\\". updating: \" + changedColumns.map(function (column) { return column.databaseName; }).join(\", \"));\n                                        return [4 /*yield*/, this.queryRunner.changeColumns(table, newAndOldTableColumns)];\n                                    case 5:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    RdbmsSchemaBuilder.prototype.createNewIndices = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, newIndices;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newIndices = metadata.indices\n                                            .filter(function (indexMetadata) { return !table.indices.find(function (tableIndex) { return tableIndex.name === indexMetadata.name; }) && indexMetadata.synchronize === true; })\n                                            .map(function (indexMetadata) { return TableIndex.create(indexMetadata); });\n                                        if (newIndices.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"adding new indices \" + newIndices.map(function (index) { return \"\\\"\" + index.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createIndices(table, newIndices)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    RdbmsSchemaBuilder.prototype.createNewChecks = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Mysql does not support check constraints\n                        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var table, newChecks;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            newChecks = metadata.checks\n                                                .filter(function (checkMetadata) { return !table.checks.find(function (tableCheck) { return tableCheck.name === checkMetadata.name; }); })\n                                                .map(function (checkMetadata) { return TableCheck.create(checkMetadata); });\n                                            if (newChecks.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"adding new check constraints: \" + newChecks.map(function (index) { return \"\\\"\" + index.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.createCheckConstraints(table, newChecks)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    RdbmsSchemaBuilder.prototype.createCompositeUniqueConstraints = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, compositeUniques;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        compositeUniques = metadata.uniques\n                                            .filter(function (uniqueMetadata) { return uniqueMetadata.columns.length > 1 && !table.uniques.find(function (tableUnique) { return tableUnique.name === uniqueMetadata.name; }); })\n                                            .map(function (uniqueMetadata) { return TableUnique.create(uniqueMetadata); });\n                                        if (compositeUniques.length === 0)\n                                            return [2 /*return*/];\n                                        this.connection.logger.logSchemaBuild(\"adding new unique constraints: \" + compositeUniques.map(function (unique) { return \"\\\"\" + unique.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createUniqueConstraints(table, compositeUniques)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    RdbmsSchemaBuilder.prototype.createNewExclusions = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Only PostgreSQL supports exclusion constraints\n                        if (!(this.connection.driver instanceof PostgresDriver))\n                            return [2 /*return*/];\n                        return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var table, newExclusions;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                            if (!table)\n                                                return [2 /*return*/];\n                                            newExclusions = metadata.exclusions\n                                                .filter(function (exclusionMetadata) { return !table.exclusions.find(function (tableExclusion) { return tableExclusion.name === exclusionMetadata.name; }); })\n                                                .map(function (exclusionMetadata) { return TableExclusion.create(exclusionMetadata); });\n                                            if (newExclusions.length === 0)\n                                                return [2 /*return*/];\n                                            this.connection.logger.logSchemaBuild(\"adding new exclusion constraints: \" + newExclusions.map(function (exclusion) { return \"\\\"\" + exclusion.name + \"\\\"\"; }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                                            return [4 /*yield*/, this.queryRunner.createExclusionConstraints(table, newExclusions)];\n                                        case 1:\n                                            _a.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    RdbmsSchemaBuilder.prototype.createForeignKeys = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, PromiseUtils.runInSequence(this.entityToSyncMetadatas, function (metadata) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                            var table, newKeys, dbForeignKeys;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === metadata.tablePath; });\n                                        if (!table)\n                                            return [2 /*return*/];\n                                        newKeys = metadata.foreignKeys.filter(function (foreignKey) {\n                                            return !table.foreignKeys.find(function (dbForeignKey) { return foreignKeysMatch(dbForeignKey, foreignKey); });\n                                        });\n                                        if (newKeys.length === 0)\n                                            return [2 /*return*/];\n                                        dbForeignKeys = newKeys.map(function (foreignKeyMetadata) { return TableForeignKey.create(foreignKeyMetadata); });\n                                        this.connection.logger.logSchemaBuild(\"creating a foreign keys: \" + newKeys.map(function (key) { return key.name; }).join(\", \") + \" on table \\\"\" + table.name + \"\\\"\");\n                                        return [4 /*yield*/, this.queryRunner.createForeignKeys(table, dbForeignKeys)];\n                                    case 1:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnReferencedForeignKeys = function (tablePath, columnName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, tablesWithFK, columnForeignKey, clonedTable;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        tablesWithFK = [];\n                        columnForeignKey = table.foreignKeys.find(function (foreignKey) { return foreignKey.columnNames.indexOf(columnName) !== -1; });\n                        if (columnForeignKey) {\n                            clonedTable = table.clone();\n                            clonedTable.foreignKeys = [columnForeignKey];\n                            tablesWithFK.push(clonedTable);\n                            table.removeForeignKey(columnForeignKey);\n                        }\n                        this.queryRunner.loadedTables.forEach(function (loadedTable) {\n                            var dependForeignKeys = loadedTable.foreignKeys.filter(function (foreignKey) {\n                                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n                            });\n                            if (dependForeignKeys.length > 0) {\n                                var clonedTable = loadedTable.clone();\n                                clonedTable.foreignKeys = dependForeignKeys;\n                                tablesWithFK.push(clonedTable);\n                                dependForeignKeys.forEach(function (dependForeignKey) { return loadedTable.removeForeignKey(dependForeignKey); });\n                            }\n                        });\n                        if (!(tablesWithFK.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, PromiseUtils.runInSequence(tablesWithFK, function (tableWithFK) {\n                                _this.connection.logger.logSchemaBuild(\"dropping related foreign keys of \" + tableWithFK.name + \": \" + tableWithFK.foreignKeys.map(function (foreignKey) { return foreignKey.name; }).join(\", \"));\n                                return _this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n                            })];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnCompositeIndices = function (tablePath, columnName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, relatedIndices;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        relatedIndices = table.indices.filter(function (index) { return index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1; });\n                        if (relatedIndices.length === 0)\n                            return [2 /*return*/];\n                        this.connection.logger.logSchemaBuild(\"dropping related indices of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedIndices.map(function (index) { return index.name; }).join(\", \"));\n                        return [4 /*yield*/, this.queryRunner.dropIndices(table, relatedIndices)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    RdbmsSchemaBuilder.prototype.dropColumnCompositeUniques = function (tablePath, columnName) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var table, relatedUniques;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        table = this.queryRunner.loadedTables.find(function (table) { return table.name === tablePath; });\n                        if (!table)\n                            return [2 /*return*/];\n                        relatedUniques = table.uniques.filter(function (unique) { return unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1; });\n                        if (relatedUniques.length === 0)\n                            return [2 /*return*/];\n                        this.connection.logger.logSchemaBuild(\"dropping related unique constraints of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedUniques.map(function (unique) { return unique.name; }).join(\", \"));\n                        return [4 /*yield*/, this.queryRunner.dropUniqueConstraints(table, relatedUniques)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    RdbmsSchemaBuilder.prototype.metadataColumnsToTableColumnOptions = function (columns) {\n        var _this = this;\n        return columns.map(function (columnMetadata) { return TableUtils.createTableColumnOptions(columnMetadata, _this.connection.driver); });\n    };\n    /**\n     * Creates typeorm service table for storing user defined Views.\n     */\n    RdbmsSchemaBuilder.prototype.createTypeormMetadataTable = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var options, typeormMetadataTable;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = this.connection.driver.options;\n                        typeormMetadataTable = this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n                        return [4 /*yield*/, this.queryRunner.createTable(new Table({\n                                name: typeormMetadataTable,\n                                columns: [\n                                    {\n                                        name: \"type\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataType }),\n                                        isNullable: false\n                                    },\n                                    {\n                                        name: \"database\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataDatabase }),\n                                        isNullable: true\n                                    },\n                                    {\n                                        name: \"schema\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataSchema }),\n                                        isNullable: true\n                                    },\n                                    {\n                                        name: \"table\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataTable }),\n                                        isNullable: true\n                                    },\n                                    {\n                                        name: \"name\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataName }),\n                                        isNullable: true\n                                    },\n                                    {\n                                        name: \"value\",\n                                        type: this.connection.driver.normalizeType({ type: this.connection.driver.mappedDataTypes.metadataValue }),\n                                        isNullable: true\n                                    },\n                                ]\n                            }), true)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return RdbmsSchemaBuilder;\n}());\nexport { RdbmsSchemaBuilder };\nfunction foreignKeysMatch(tableForeignKey, metadataForeignKey) {\n    return (tableForeignKey.name === metadataForeignKey.name)\n        && (tableForeignKey.referencedTableName === metadataForeignKey.referencedTablePath);\n}\n\n//# sourceMappingURL=RdbmsSchemaBuilder.js.map\n","import { TableColumn } from \"./TableColumn\";\nimport { TableIndex } from \"./TableIndex\";\nimport { TableForeignKey } from \"./TableForeignKey\";\nimport { TableUtils } from \"../util/TableUtils\";\nimport { TableUnique } from \"./TableUnique\";\nimport { TableCheck } from \"./TableCheck\";\nimport { TableExclusion } from \"./TableExclusion\";\n/**\n * Table in the database represented in this class.\n */\nvar Table = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function Table(options) {\n        /**\n         * Table columns.\n         */\n        this.columns = [];\n        /**\n         * Table indices.\n         */\n        this.indices = [];\n        /**\n         * Table foreign keys.\n         */\n        this.foreignKeys = [];\n        /**\n         * Table unique constraints.\n         */\n        this.uniques = [];\n        /**\n         * Table check constraints.\n         */\n        this.checks = [];\n        /**\n         * Table exclusion constraints.\n         */\n        this.exclusions = [];\n        /**\n         * Indicates if table was just created.\n         * This is needed, for example to check if we need to skip primary keys creation\n         * for new tables.\n         */\n        this.justCreated = false;\n        if (options) {\n            this.name = options.name;\n            if (options.columns)\n                this.columns = options.columns.map(function (column) { return new TableColumn(column); });\n            if (options.indices)\n                this.indices = options.indices.map(function (index) { return new TableIndex(index); });\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map(function (foreignKey) { return new TableForeignKey(foreignKey); });\n            if (options.uniques)\n                this.uniques = options.uniques.map(function (unique) { return new TableUnique(unique); });\n            if (options.checks)\n                this.checks = options.checks.map(function (check) { return new TableCheck(check); });\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map(function (exclusion) { return new TableExclusion(exclusion); });\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated;\n            this.engine = options.engine;\n        }\n    }\n    Object.defineProperty(Table.prototype, \"primaryColumns\", {\n        // -------------------------------------------------------------------------\n        // Accessors\n        // -------------------------------------------------------------------------\n        get: function () {\n            return this.columns.filter(function (column) { return column.isPrimary; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    Table.prototype.clone = function () {\n        return new Table({\n            name: this.name,\n            columns: this.columns.map(function (column) { return column.clone(); }),\n            indices: this.indices.map(function (constraint) { return constraint.clone(); }),\n            foreignKeys: this.foreignKeys.map(function (constraint) { return constraint.clone(); }),\n            uniques: this.uniques.map(function (constraint) { return constraint.clone(); }),\n            checks: this.checks.map(function (constraint) { return constraint.clone(); }),\n            exclusions: this.exclusions.map(function (constraint) { return constraint.clone(); }),\n            justCreated: this.justCreated,\n            engine: this.engine,\n        });\n    };\n    /**\n     * Add column and creates its constraints.\n     */\n    Table.prototype.addColumn = function (column) {\n        this.columns.push(column);\n    };\n    /**\n     * Remove column and its constraints.\n     */\n    Table.prototype.removeColumn = function (column) {\n        var foundColumn = this.columns.find(function (c) { return c.name === column.name; });\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    };\n    /**\n     * Adds unique constraint.\n     */\n    Table.prototype.addUniqueConstraint = function (uniqueConstraint) {\n        this.uniques.push(uniqueConstraint);\n        if (uniqueConstraint.columnNames.length === 1) {\n            var uniqueColumn = this.columns.find(function (column) { return column.name === uniqueConstraint.columnNames[0]; });\n            if (uniqueColumn)\n                uniqueColumn.isUnique = true;\n        }\n    };\n    /**\n     * Removes unique constraint.\n     */\n    Table.prototype.removeUniqueConstraint = function (removedUnique) {\n        var foundUnique = this.uniques.find(function (unique) { return unique.name === removedUnique.name; });\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n            if (foundUnique.columnNames.length === 1) {\n                var uniqueColumn = this.columns.find(function (column) { return column.name === foundUnique.columnNames[0]; });\n                if (uniqueColumn)\n                    uniqueColumn.isUnique = false;\n            }\n        }\n    };\n    /**\n     * Adds check constraint.\n     */\n    Table.prototype.addCheckConstraint = function (checkConstraint) {\n        this.checks.push(checkConstraint);\n    };\n    /**\n     * Removes check constraint.\n     */\n    Table.prototype.removeCheckConstraint = function (removedCheck) {\n        var foundCheck = this.checks.find(function (check) { return check.name === removedCheck.name; });\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1);\n        }\n    };\n    /**\n     * Adds exclusion constraint.\n     */\n    Table.prototype.addExclusionConstraint = function (exclusionConstraint) {\n        this.exclusions.push(exclusionConstraint);\n    };\n    /**\n     * Removes exclusion constraint.\n     */\n    Table.prototype.removeExclusionConstraint = function (removedExclusion) {\n        var foundExclusion = this.exclusions.find(function (exclusion) { return exclusion.name === removedExclusion.name; });\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n        }\n    };\n    /**\n     * Adds foreign keys.\n     */\n    Table.prototype.addForeignKey = function (foreignKey) {\n        this.foreignKeys.push(foreignKey);\n    };\n    /**\n     * Removes foreign key.\n     */\n    Table.prototype.removeForeignKey = function (removedForeignKey) {\n        var fk = this.foreignKeys.find(function (foreignKey) { return foreignKey.name === removedForeignKey.name; });\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    };\n    /**\n     * Adds index.\n     */\n    Table.prototype.addIndex = function (index, isMysql) {\n        if (isMysql === void 0) { isMysql = false; }\n        this.indices.push(index);\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            var column = this.columns.find(function (c) { return c.name === index.columnNames[0]; });\n            if (column)\n                column.isUnique = true;\n        }\n    };\n    /**\n     * Removes index.\n     */\n    Table.prototype.removeIndex = function (tableIndex, isMysql) {\n        if (isMysql === void 0) { isMysql = false; }\n        var index = this.indices.find(function (index) { return index.name === tableIndex.name; });\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                var column_1 = this.columns.find(function (c) { return c.name === index.columnNames[0]; });\n                if (column_1)\n                    column_1.isUnique = this.indices.some(function (ind) { return ind.columnNames.length === 1 && ind.columnNames[0] === column_1.name && !!index.isUnique; });\n            }\n        }\n    };\n    Table.prototype.findColumnByName = function (name) {\n        return this.columns.find(function (column) { return column.name === name; });\n    };\n    /**\n     * Returns all column indices.\n     */\n    Table.prototype.findColumnIndices = function (column) {\n        return this.indices.filter(function (index) {\n            return !!index.columnNames.find(function (columnName) { return columnName === column.name; });\n        });\n    };\n    /**\n     * Returns all column foreign keys.\n     */\n    Table.prototype.findColumnForeignKeys = function (column) {\n        return this.foreignKeys.filter(function (foreignKey) {\n            return !!foreignKey.columnNames.find(function (columnName) { return columnName === column.name; });\n        });\n    };\n    /**\n     * Returns all column uniques.\n     */\n    Table.prototype.findColumnUniques = function (column) {\n        return this.uniques.filter(function (unique) {\n            return !!unique.columnNames.find(function (columnName) { return columnName === column.name; });\n        });\n    };\n    /**\n     * Returns all column checks.\n     */\n    Table.prototype.findColumnChecks = function (column) {\n        return this.checks.filter(function (check) {\n            return !!check.columnNames.find(function (columnName) { return columnName === column.name; });\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates table from a given entity metadata.\n     */\n    Table.create = function (entityMetadata, driver) {\n        var options = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter(function (column) { return column; })\n                .map(function (column) { return TableUtils.createTableColumnOptions(column, driver); }),\n            indices: entityMetadata.indices\n                .filter(function (index) { return index.synchronize === true; })\n                .map(function (index) { return TableIndex.create(index); }),\n            uniques: entityMetadata.uniques.map(function (unique) { return TableUnique.create(unique); }),\n            checks: entityMetadata.checks.map(function (check) { return TableCheck.create(check); }),\n            exclusions: entityMetadata.exclusions.map(function (exclusion) { return TableExclusion.create(exclusion); }),\n        };\n        return new Table(options);\n    };\n    return Table;\n}());\nexport { Table };\n\n//# sourceMappingURL=Table.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Database's table check constraint stored in this class.\n */\nvar TableCheck = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TableCheck(options) {\n        /**\n         * Column that contains this constraint.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.expression = options.expression;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    TableCheck.prototype.clone = function () {\n        return new TableCheck({\n            name: this.name,\n            columnNames: this.columnNames ? tslib_1.__spread(this.columnNames) : [],\n            expression: this.expression,\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates checks from the check metadata object.\n     */\n    TableCheck.create = function (checkMetadata) {\n        return new TableCheck({\n            name: checkMetadata.name,\n            expression: checkMetadata.expression\n        });\n    };\n    return TableCheck;\n}());\nexport { TableCheck };\n\n//# sourceMappingURL=TableCheck.js.map\n","/**\n * Table's columns in the database represented in this class.\n */\nvar TableColumn = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TableColumn(options) {\n        /**\n         * Indicates if column is NULL, or is NOT NULL in the database.\n         */\n        this.isNullable = false;\n        /**\n         * Indicates if column is auto-generated sequence.\n         */\n        this.isGenerated = false;\n        /**\n         * Indicates if column is a primary key.\n         */\n        this.isPrimary = false;\n        /**\n         * Indicates if column has unique value.\n         */\n        this.isUnique = false;\n        /**\n         * Indicates if column stores array.\n         */\n        this.isArray = false;\n        /**\n         * Column type's length. Used only on some column types.\n         * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n         */\n        this.length = \"\";\n        /**\n         * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n         * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n         */\n        this.zerofill = false;\n        /**\n         * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n         */\n        this.unsigned = false;\n        if (options) {\n            this.name = options.name;\n            this.type = options.type || \"\";\n            this.length = options.length || \"\";\n            this.width = options.width;\n            this.charset = options.charset;\n            this.collation = options.collation;\n            this.precision = options.precision;\n            this.scale = options.scale;\n            this.zerofill = options.zerofill || false;\n            this.unsigned = this.zerofill ? true : (options.unsigned || false);\n            this.default = options.default;\n            this.onUpdate = options.onUpdate;\n            this.isNullable = options.isNullable || false;\n            this.isGenerated = options.isGenerated || false;\n            this.generationStrategy = options.generationStrategy;\n            this.isPrimary = options.isPrimary || false;\n            this.isUnique = options.isUnique || false;\n            this.isArray = options.isArray || false;\n            this.comment = options.comment;\n            this.enum = options.enum;\n            this.enumName = options.enumName;\n            this.asExpression = options.asExpression;\n            this.generatedType = options.generatedType;\n            this.spatialFeatureType = options.spatialFeatureType;\n            this.srid = options.srid;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    TableColumn.prototype.clone = function () {\n        return new TableColumn({\n            name: this.name,\n            type: this.type,\n            length: this.length,\n            width: this.width,\n            charset: this.charset,\n            collation: this.collation,\n            precision: this.precision,\n            scale: this.scale,\n            zerofill: this.zerofill,\n            unsigned: this.unsigned,\n            enum: this.enum,\n            enumName: this.enumName,\n            asExpression: this.asExpression,\n            generatedType: this.generatedType,\n            default: this.default,\n            onUpdate: this.onUpdate,\n            isNullable: this.isNullable,\n            isGenerated: this.isGenerated,\n            generationStrategy: this.generationStrategy,\n            isPrimary: this.isPrimary,\n            isUnique: this.isUnique,\n            isArray: this.isArray,\n            comment: this.comment,\n            spatialFeatureType: this.spatialFeatureType,\n            srid: this.srid\n        });\n    };\n    return TableColumn;\n}());\nexport { TableColumn };\n\n//# sourceMappingURL=TableColumn.js.map\n","/**\n * Database's table exclusion constraint stored in this class.\n */\nvar TableExclusion = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TableExclusion(options) {\n        this.name = options.name;\n        this.expression = options.expression;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    TableExclusion.prototype.clone = function () {\n        return new TableExclusion({\n            name: this.name,\n            expression: this.expression,\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates exclusions from the exclusion metadata object.\n     */\n    TableExclusion.create = function (exclusionMetadata) {\n        return new TableExclusion({\n            name: exclusionMetadata.name,\n            expression: exclusionMetadata.expression\n        });\n    };\n    return TableExclusion;\n}());\nexport { TableExclusion };\n\n//# sourceMappingURL=TableExclusion.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Foreign key from the database stored in this class.\n */\nvar TableForeignKey = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TableForeignKey(options) {\n        /**\n         * Column names which included by this foreign key.\n         */\n        this.columnNames = [];\n        /**\n         * Column names which included by this foreign key.\n         */\n        this.referencedColumnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.referencedColumnNames = options.referencedColumnNames;\n        this.referencedTableName = options.referencedTableName;\n        this.onDelete = options.onDelete;\n        this.onUpdate = options.onUpdate;\n        this.deferrable = options.deferrable;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    TableForeignKey.prototype.clone = function () {\n        return new TableForeignKey({\n            name: this.name,\n            columnNames: tslib_1.__spread(this.columnNames),\n            referencedColumnNames: tslib_1.__spread(this.referencedColumnNames),\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    TableForeignKey.create = function (metadata) {\n        return new TableForeignKey({\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        });\n    };\n    return TableForeignKey;\n}());\nexport { TableForeignKey };\n\n//# sourceMappingURL=TableForeignKey.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Database's table index stored in this class.\n */\nvar TableIndex = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TableIndex(options) {\n        /**\n         * Columns included in this index.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.isUnique = !!options.isUnique;\n        this.isSpatial = !!options.isSpatial;\n        this.isFulltext = !!options.isFulltext;\n        this.parser = options.parser;\n        this.where = options.where ? options.where : \"\";\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    TableIndex.prototype.clone = function () {\n        return new TableIndex({\n            name: this.name,\n            columnNames: tslib_1.__spread(this.columnNames),\n            isUnique: this.isUnique,\n            isSpatial: this.isSpatial,\n            isFulltext: this.isFulltext,\n            parser: this.parser,\n            where: this.where\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates index from the index metadata object.\n     */\n    TableIndex.create = function (indexMetadata) {\n        return new TableIndex({\n            name: indexMetadata.name,\n            columnNames: indexMetadata.columns.map(function (column) { return column.databaseName; }),\n            isUnique: indexMetadata.isUnique,\n            isSpatial: indexMetadata.isSpatial,\n            isFulltext: indexMetadata.isFulltext,\n            parser: indexMetadata.parser,\n            where: indexMetadata.where\n        });\n    };\n    return TableIndex;\n}());\nexport { TableIndex };\n\n//# sourceMappingURL=TableIndex.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Database's table unique constraint stored in this class.\n */\nvar TableUnique = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function TableUnique(options) {\n        /**\n         * Columns that contains this constraint.\n         */\n        this.columnNames = [];\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    TableUnique.prototype.clone = function () {\n        return new TableUnique({\n            name: this.name,\n            columnNames: tslib_1.__spread(this.columnNames)\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates unique from the unique metadata object.\n     */\n    TableUnique.create = function (uniqueMetadata) {\n        return new TableUnique({\n            name: uniqueMetadata.name,\n            columnNames: uniqueMetadata.columns.map(function (column) { return column.databaseName; })\n        });\n    };\n    return TableUnique;\n}());\nexport { TableUnique };\n\n//# sourceMappingURL=TableUnique.js.map\n","var TableUtils = /** @class */ (function () {\n    function TableUtils() {\n    }\n    TableUtils.createTableColumnOptions = function (columnMetadata, driver) {\n        return {\n            name: columnMetadata.databaseName,\n            length: columnMetadata.length,\n            width: columnMetadata.width,\n            charset: columnMetadata.charset,\n            collation: columnMetadata.collation,\n            precision: columnMetadata.precision,\n            scale: columnMetadata.scale,\n            zerofill: columnMetadata.zerofill,\n            unsigned: columnMetadata.unsigned,\n            asExpression: columnMetadata.asExpression,\n            generatedType: columnMetadata.generatedType,\n            default: driver.normalizeDefault(columnMetadata),\n            onUpdate: columnMetadata.onUpdate,\n            comment: columnMetadata.comment,\n            isGenerated: columnMetadata.isGenerated,\n            generationStrategy: columnMetadata.generationStrategy,\n            isNullable: columnMetadata.isNullable,\n            type: driver.normalizeType(columnMetadata),\n            isPrimary: columnMetadata.isPrimary,\n            isUnique: driver.normalizeIsUnique(columnMetadata),\n            isArray: columnMetadata.isArray || false,\n            enum: columnMetadata.enum ? columnMetadata.enum.map(function (val) { return val + \"\"; }) : columnMetadata.enum,\n            enumName: columnMetadata.enumName,\n            spatialFeatureType: columnMetadata.spatialFeatureType,\n            srid: columnMetadata.srid\n        };\n    };\n    return TableUtils;\n}());\nexport { TableUtils };\n\n//# sourceMappingURL=TableUtils.js.map\n","/**\n * View in the database represented in this class.\n */\nvar View = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function View(options) {\n        if (options) {\n            this.name = options.name;\n            this.expression = options.expression;\n            this.materialized = !!options.materialized;\n        }\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    View.prototype.clone = function () {\n        return new View({\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Creates view from a given entity metadata.\n     */\n    View.create = function (entityMetadata, driver) {\n        var options = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            expression: entityMetadata.expression,\n            materialized: entityMetadata.tableMetadataArgs.materialized\n        };\n        return new View(options);\n    };\n    return View;\n}());\nexport { View };\n\n//# sourceMappingURL=View.js.map\n","/**\n * Broadcaster provides a helper methods to broadcast events to the subscribers.\n */\nvar Broadcaster = /** @class */ (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function Broadcaster(queryRunner) {\n        this.queryRunner = queryRunner;\n    }\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Broadcasts \"BEFORE_INSERT\" event.\n     * Before insert event is executed before entity is being inserted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    Broadcaster.prototype.broadcastBeforeInsertEvent = function (result, metadata, entity) {\n        var _this = this;\n        if (entity && metadata.beforeInsertListeners.length) {\n            metadata.beforeInsertListeners.forEach(function (listener) {\n                if (listener.isAllowed(entity)) {\n                    var executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(function (subscriber) {\n                if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeInsert) {\n                    var executionResult = subscriber.beforeInsert({\n                        connection: _this.queryRunner.connection,\n                        queryRunner: _this.queryRunner,\n                        manager: _this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    };\n    /**\n     * Broadcasts \"BEFORE_UPDATE\" event.\n     * Before update event is executed before entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    Broadcaster.prototype.broadcastBeforeUpdateEvent = function (result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {\n        var _this = this;\n        if (entity && metadata.beforeUpdateListeners.length) {\n            metadata.beforeUpdateListeners.forEach(function (listener) {\n                if (listener.isAllowed(entity)) {\n                    var executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(function (subscriber) {\n                if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeUpdate) {\n                    var executionResult = subscriber.beforeUpdate({\n                        connection: _this.queryRunner.connection,\n                        queryRunner: _this.queryRunner,\n                        manager: _this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || []\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    };\n    /**\n     * Broadcasts \"BEFORE_REMOVE\" event.\n     * Before remove event is executed before entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    Broadcaster.prototype.broadcastBeforeRemoveEvent = function (result, metadata, entity, databaseEntity) {\n        var _this = this;\n        if (entity && metadata.beforeRemoveListeners.length) {\n            metadata.beforeRemoveListeners.forEach(function (listener) {\n                if (listener.isAllowed(entity)) {\n                    var executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(function (subscriber) {\n                if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.beforeRemove) {\n                    var executionResult = subscriber.beforeRemove({\n                        connection: _this.queryRunner.connection,\n                        queryRunner: _this.queryRunner,\n                        manager: _this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity)\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    };\n    /**\n     * Broadcasts \"AFTER_INSERT\" event.\n     * After insert event is executed after entity is being persisted to the database for the first time.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    Broadcaster.prototype.broadcastAfterInsertEvent = function (result, metadata, entity) {\n        var _this = this;\n        if (entity && metadata.afterInsertListeners.length) {\n            metadata.afterInsertListeners.forEach(function (listener) {\n                if (listener.isAllowed(entity)) {\n                    var executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(function (subscriber) {\n                if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterInsert) {\n                    var executionResult = subscriber.afterInsert({\n                        connection: _this.queryRunner.connection,\n                        queryRunner: _this.queryRunner,\n                        manager: _this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    };\n    /**\n     * Broadcasts \"AFTER_UPDATE\" event.\n     * After update event is executed after entity is being updated in the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    Broadcaster.prototype.broadcastAfterUpdateEvent = function (result, metadata, entity, databaseEntity, updatedColumns, updatedRelations) {\n        var _this = this;\n        if (entity && metadata.afterUpdateListeners.length) {\n            metadata.afterUpdateListeners.forEach(function (listener) {\n                if (listener.isAllowed(entity)) {\n                    var executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(function (subscriber) {\n                if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterUpdate) {\n                    var executionResult = subscriber.afterUpdate({\n                        connection: _this.queryRunner.connection,\n                        queryRunner: _this.queryRunner,\n                        manager: _this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        updatedColumns: updatedColumns || [],\n                        updatedRelations: updatedRelations || []\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    };\n    /**\n     * Broadcasts \"AFTER_REMOVE\" event.\n     * After remove event is executed after entity is being removed from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    Broadcaster.prototype.broadcastAfterRemoveEvent = function (result, metadata, entity, databaseEntity) {\n        var _this = this;\n        if (entity && metadata.afterRemoveListeners.length) {\n            metadata.afterRemoveListeners.forEach(function (listener) {\n                if (listener.isAllowed(entity)) {\n                    var executionResult = listener.execute(entity);\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n        if (this.queryRunner.connection.subscribers.length) {\n            this.queryRunner.connection.subscribers.forEach(function (subscriber) {\n                if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterRemove) {\n                    var executionResult = subscriber.afterRemove({\n                        connection: _this.queryRunner.connection,\n                        queryRunner: _this.queryRunner,\n                        manager: _this.queryRunner.manager,\n                        entity: entity,\n                        metadata: metadata,\n                        databaseEntity: databaseEntity,\n                        entityId: metadata.getEntityIdMixedMap(databaseEntity)\n                    });\n                    if (executionResult instanceof Promise)\n                        result.promises.push(executionResult);\n                    result.count++;\n                }\n            });\n        }\n    };\n    /**\n     * Broadcasts \"AFTER_LOAD\" event for all given entities, and their sub-entities.\n     * After load event is executed after entity has been loaded from the database.\n     * All subscribers and entity listeners who listened to this event will be executed at this point.\n     * Subscribers and entity listeners can return promises, it will wait until they are resolved.\n     *\n     * Note: this method has a performance-optimized code organization, do not change code structure.\n     */\n    Broadcaster.prototype.broadcastLoadEventsForAll = function (result, metadata, entities) {\n        var _this = this;\n        entities.forEach(function (entity) {\n            if (entity instanceof Promise) // todo: check why need this?\n                return;\n            // collect load events for all children entities that were loaded with the main entity\n            if (metadata.relations.length) {\n                metadata.relations.forEach(function (relation) {\n                    // in lazy relations we cannot simply access to entity property because it will cause a getter and a database query\n                    if (relation.isLazy && !entity.hasOwnProperty(relation.propertyName))\n                        return;\n                    var value = relation.getEntityValue(entity);\n                    if (value instanceof Object)\n                        _this.broadcastLoadEventsForAll(result, relation.inverseEntityMetadata, Array.isArray(value) ? value : [value]);\n                });\n            }\n            if (metadata.afterLoadListeners.length) {\n                metadata.afterLoadListeners.forEach(function (listener) {\n                    if (listener.isAllowed(entity)) {\n                        var executionResult = listener.execute(entity);\n                        if (executionResult instanceof Promise)\n                            result.promises.push(executionResult);\n                        result.count++;\n                    }\n                });\n            }\n            if (_this.queryRunner.connection.subscribers.length) {\n                _this.queryRunner.connection.subscribers.forEach(function (subscriber) {\n                    if (_this.isAllowedSubscriber(subscriber, metadata.target) && subscriber.afterLoad) {\n                        var executionResult = subscriber.afterLoad(entity, {\n                            connection: _this.queryRunner.connection,\n                            queryRunner: _this.queryRunner,\n                            manager: _this.queryRunner.manager,\n                            entity: entity,\n                            metadata: metadata\n                        });\n                        if (executionResult instanceof Promise)\n                            result.promises.push(executionResult);\n                        result.count++;\n                    }\n                });\n            }\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Checks if subscriber's methods can be executed by checking if its don't listen to the particular entity,\n     * or listens our entity.\n     */\n    Broadcaster.prototype.isAllowedSubscriber = function (subscriber, target) {\n        return !subscriber.listenTo ||\n            !subscriber.listenTo() ||\n            subscriber.listenTo() === Object ||\n            subscriber.listenTo() === target ||\n            subscriber.listenTo().isPrototypeOf(target);\n    };\n    return Broadcaster;\n}());\nexport { Broadcaster };\n\n//# sourceMappingURL=Broadcaster.js.map\n","/**\n * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.\n */\nvar BroadcasterResult = /** @class */ (function () {\n    function BroadcasterResult() {\n        /**\n         * Number of executed listeners and subscribers.\n         */\n        this.count = 0;\n        /**\n         * Promises returned by listeners and subscribers which needs to be awaited.\n         */\n        this.promises = [];\n    }\n    return BroadcasterResult;\n}());\nexport { BroadcasterResult };\n\n//# sourceMappingURL=BroadcasterResult.js.map\n","var ApplyValueTransformers = /** @class */ (function () {\n    function ApplyValueTransformers() {\n    }\n    ApplyValueTransformers.transformFrom = function (transformer, databaseValue) {\n        if (Array.isArray(transformer)) {\n            var reverseTransformers = transformer.slice().reverse();\n            return reverseTransformers.reduce(function (transformedValue, _transformer) {\n                return _transformer.from(transformedValue);\n            }, databaseValue);\n        }\n        return transformer.from(databaseValue);\n    };\n    ApplyValueTransformers.transformTo = function (transformer, entityValue) {\n        if (Array.isArray(transformer)) {\n            return transformer.reduce(function (transformedValue, _transformer) {\n                return _transformer.to(transformedValue);\n            }, entityValue);\n        }\n        return transformer.to(entityValue);\n    };\n    return ApplyValueTransformers;\n}());\nexport { ApplyValueTransformers };\n\n//# sourceMappingURL=ApplyValueTransformers.js.map\n","import * as tslib_1 from \"tslib\";\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\nvar DateUtils = /** @class */ (function () {\n    function DateUtils() {\n    }\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    DateUtils.normalizeHydratedDate = function (mixedDate) {\n        if (!mixedDate)\n            return mixedDate;\n        return typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n    };\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    DateUtils.mixedDateToDateString = function (value) {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n        return value;\n    };\n    /**\n     * Converts given value into date object.\n     */\n    DateUtils.mixedDateToDate = function (mixedDate, toUtc, useMilliseconds) {\n        if (toUtc === void 0) { toUtc = false; }\n        if (useMilliseconds === void 0) { useMilliseconds = true; }\n        var date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n        if (toUtc)\n            date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n        if (!useMilliseconds)\n            date.setUTCMilliseconds(0);\n        return date;\n    };\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    DateUtils.mixedDateToTimeString = function (value, skipSeconds) {\n        if (skipSeconds === void 0) { skipSeconds = false; }\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getHours()) +\n                \":\" + this.formatZerolessValue(value.getMinutes()) +\n                (!skipSeconds ? \":\" + this.formatZerolessValue(value.getSeconds()) : \"\");\n        return value;\n    };\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    DateUtils.mixedTimeToDate = function (value) {\n        if (typeof value === \"string\") {\n            var _a = tslib_1.__read(value.split(\":\"), 3), hours = _a[0], minutes = _a[1], seconds = _a[2];\n            var date = new Date();\n            if (hours)\n                date.setHours(parseInt(hours));\n            if (minutes)\n                date.setMinutes(parseInt(minutes));\n            if (seconds)\n                date.setSeconds(parseInt(seconds));\n            return date;\n        }\n        return value;\n    };\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    DateUtils.mixedTimeToString = function (value, skipSeconds) {\n        if (skipSeconds === void 0) { skipSeconds = false; }\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + (!skipSeconds ? \":\" + value.getSeconds() : \"\")) : value;\n        if (typeof value === \"string\") {\n            return value.split(\":\")\n                .map(function (v) { return v.length === 1 ? \"0\" + v : v; }) // append zero at beginning if we have a first-zero-less number\n                .join(\":\");\n        }\n        return value;\n    };\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    DateUtils.mixedDateToDatetimeString = function (value, useMilliseconds) {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            var finalValue = this.formatZerolessValue(value.getFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getDate()) + \" \" +\n                this.formatZerolessValue(value.getHours()) + \":\" +\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\n                this.formatZerolessValue(value.getSeconds());\n            if (useMilliseconds)\n                finalValue += \".\" + this.formatMilliseconds(value.getMilliseconds());\n            value = finalValue;\n        }\n        return value;\n    };\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n     */\n    DateUtils.mixedDateToUtcDatetimeString = function (value) {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\n                this.formatZerolessValue(value.getUTCSeconds()) + \".\" +\n                this.formatMilliseconds(value.getUTCMilliseconds());\n        }\n        return value;\n    };\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    DateUtils.simpleArrayToString = function (value) {\n        if (Array.isArray(value)) {\n            return value\n                .map(function (i) { return String(i); })\n                .join(\",\");\n        }\n        return value;\n    };\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    DateUtils.stringToSimpleArray = function (value) {\n        if (value instanceof String || typeof value === \"string\") {\n            if (value.length > 0) {\n                return value.split(\",\");\n            }\n            else {\n                return [];\n            }\n        }\n        return value;\n    };\n    DateUtils.simpleJsonToString = function (value) {\n        return JSON.stringify(value);\n    };\n    DateUtils.stringToSimpleJson = function (value) {\n        try {\n            var simpleJSON = JSON.parse(value);\n            return (typeof simpleJSON === \"object\") ? simpleJSON : {};\n        }\n        catch (err) {\n            return {};\n        }\n    };\n    DateUtils.simpleEnumToString = function (value) {\n        return \"\" + value;\n    };\n    DateUtils.stringToSimpleEnum = function (value, columnMetadata) {\n        if (columnMetadata.enum\n            && !isNaN(value)\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n            // convert to number if that exists in poosible enum options\n            value = parseInt(value);\n        }\n        return value;\n    };\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    DateUtils.formatZerolessValue = function (value) {\n        if (value < 10)\n            return \"0\" + value;\n        return String(value);\n    };\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    DateUtils.formatMilliseconds = function (value) {\n        if (value < 10) {\n            return \"00\" + value;\n        }\n        else if (value < 100) {\n            return \"0\" + value;\n        }\n        else {\n            return String(value);\n        }\n    };\n    return DateUtils;\n}());\nexport { DateUtils };\n\n//# sourceMappingURL=DateUtils.js.map\n","/**\n * This source code is from https://github.com/jriecken/dependency-graph\n * Just added \"any\" types here, wrapper everything into exported class.\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\n */\n/**\n * A simple dependency graph\n */\n/**\n * Helper for creating a Depth-First-Search on\n * a set of edges.\n *\n * Detects cycles and throws an Error if one is detected.\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n */\nfunction createDFS(edges, leavesOnly, result) {\n    var currentPath = [];\n    var visited = {};\n    return function DFS(currentNode) {\n        visited[currentNode] = true;\n        currentPath.push(currentNode);\n        edges[currentNode].forEach(function (node) {\n            if (!visited[node]) {\n                DFS(node);\n            }\n            else if (currentPath.indexOf(node) >= 0) {\n                currentPath.push(node);\n                throw new Error(\"Dependency Cycle Found: \" + currentPath.join(\" -> \"));\n            }\n        });\n        currentPath.pop();\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\n            result.push(currentNode);\n        }\n    };\n}\nvar DepGraph = /** @class */ (function () {\n    function DepGraph() {\n        this.nodes = {};\n        this.outgoingEdges = {}; // Node -> [Dependency Node]\n        this.incomingEdges = {}; // Node -> [Dependant Node]\n    }\n    /**\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n     */\n    DepGraph.prototype.addNode = function (node, data) {\n        if (!this.hasNode(node)) {\n            // Checking the arguments length allows the user to add a node with undefined data\n            if (arguments.length === 2) {\n                this.nodes[node] = data;\n            }\n            else {\n                this.nodes[node] = node;\n            }\n            this.outgoingEdges[node] = [];\n            this.incomingEdges[node] = [];\n        }\n    };\n    /**\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n     */\n    DepGraph.prototype.removeNode = function (node) {\n        if (this.hasNode(node)) {\n            delete this.nodes[node];\n            delete this.outgoingEdges[node];\n            delete this.incomingEdges[node];\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n                Object.keys(edgeList).forEach(function (key) {\n                    var idx = edgeList[key].indexOf(node);\n                    if (idx >= 0) {\n                        edgeList[key].splice(idx, 1);\n                    }\n                }, this);\n            });\n        }\n    };\n    /**\n     * Check if a node exists in the graph\n     */\n    DepGraph.prototype.hasNode = function (node) {\n        return this.nodes.hasOwnProperty(node);\n    };\n    /**\n     * Get the data associated with a node name\n     */\n    DepGraph.prototype.getNodeData = function (node) {\n        if (this.hasNode(node)) {\n            return this.nodes[node];\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n     */\n    DepGraph.prototype.setNodeData = function (node, data) {\n        if (this.hasNode(node)) {\n            this.nodes[node] = data;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Add a dependency between two nodes. If either of the nodes does not exist,\n     * an Error will be thrown.\n     */\n    DepGraph.prototype.addDependency = function (from, to) {\n        if (!this.hasNode(from)) {\n            throw new Error(\"Node does not exist: \" + from);\n        }\n        if (!this.hasNode(to)) {\n            throw new Error(\"Node does not exist: \" + to);\n        }\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\n            this.outgoingEdges[from].push(to);\n        }\n        if (this.incomingEdges[to].indexOf(from) === -1) {\n            this.incomingEdges[to].push(from);\n        }\n        return true;\n    };\n    /**\n     * Remove a dependency between two nodes.\n     */\n    DepGraph.prototype.removeDependency = function (from, to) {\n        var idx;\n        if (this.hasNode(from)) {\n            idx = this.outgoingEdges[from].indexOf(to);\n            if (idx >= 0) {\n                this.outgoingEdges[from].splice(idx, 1);\n            }\n        }\n        if (this.hasNode(to)) {\n            idx = this.incomingEdges[to].indexOf(from);\n            if (idx >= 0) {\n                this.incomingEdges[to].splice(idx, 1);\n            }\n        }\n    };\n    /**\n     * Get an array containing the nodes that the specified node depends on (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n     * in the array.\n     */\n    DepGraph.prototype.dependenciesOf = function (node, leavesOnly) {\n        if (this.hasNode(node)) {\n            var result = [];\n            var DFS = createDFS(this.outgoingEdges, leavesOnly, result);\n            DFS(node);\n            var idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * get an array containing the nodes that depend on the specified node (transitively).\n     *\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\n     *\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n     */\n    DepGraph.prototype.dependantsOf = function (node, leavesOnly) {\n        if (this.hasNode(node)) {\n            var result = [];\n            var DFS = createDFS(this.incomingEdges, leavesOnly, result);\n            DFS(node);\n            var idx = result.indexOf(node);\n            if (idx >= 0) {\n                result.splice(idx, 1);\n            }\n            return result;\n        }\n        else {\n            throw new Error(\"Node does not exist: \" + node);\n        }\n    };\n    /**\n     * Construct the overall processing order for the dependency graph.\n     *\n     * Throws an Error if the graph has a cycle.\n     *\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n     */\n    DepGraph.prototype.overallOrder = function (leavesOnly) {\n        var self = this;\n        var result = [];\n        var keys = Object.keys(this.nodes);\n        if (keys.length === 0) {\n            return result; // Empty graph\n        }\n        else {\n            // Look for cycles - we run the DFS starting at all the nodes in case there\n            // are several disconnected subgraphs inside this dependency graph.\n            var CycleDFS_1 = createDFS(this.outgoingEdges, false, []);\n            keys.forEach(function (n) {\n                CycleDFS_1(n);\n            });\n            var DFS_1 = createDFS(this.outgoingEdges, leavesOnly, result);\n            // Find all potential starting points (nodes with nothing depending on them) an\n            // run a DFS starting at these points to get the order\n            keys.filter(function (node) {\n                return self.incomingEdges[node].length === 0;\n            }).forEach(function (n) {\n                DFS_1(n);\n            });\n            return result;\n        }\n    };\n    return DepGraph;\n}());\nexport { DepGraph };\n\n//# sourceMappingURL=DepGraph.js.map\n","import { PlatformTools } from \"../platform/PlatformTools\";\nimport { EntitySchema } from \"../index\";\n/**\n * Loads all exported classes from the given directory.\n */\nexport function importClassesFromDirectories(logger, directories, formats) {\n    if (formats === void 0) { formats = [\".js\", \".ts\"]; }\n    var logLevel = \"info\";\n    var classesNotFoundMessage = \"No classes were found using the provided glob pattern: \";\n    var classesFoundMessage = \"All classes found using provided glob pattern\";\n    function loadFileClasses(exported, allLoaded) {\n        if (typeof exported === \"function\" || exported instanceof EntitySchema) {\n            allLoaded.push(exported);\n        }\n        else if (Array.isArray(exported)) {\n            exported.forEach(function (i) { return loadFileClasses(i, allLoaded); });\n        }\n        else if (typeof exported === \"object\" && exported !== null) {\n            Object.keys(exported).forEach(function (key) { return loadFileClasses(exported[key], allLoaded); });\n        }\n        return allLoaded;\n    }\n    var allFiles = directories.reduce(function (allDirs, dir) {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\n    }, []);\n    if (directories.length > 0 && allFiles.length === 0) {\n        logger.log(logLevel, classesNotFoundMessage + \" \\\"\" + directories + \"\\\"\");\n    }\n    else if (allFiles.length > 0) {\n        logger.log(logLevel, classesFoundMessage + \" \\\"\" + directories + \"\\\" : \\\"\" + allFiles + \"\\\"\");\n    }\n    var dirs = allFiles\n        .filter(function (file) {\n        var dtsExtension = file.substring(file.length - 5, file.length);\n        return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\n    })\n        .map(function (file) { return PlatformTools.load(PlatformTools.pathResolve(file)); });\n    return loadFileClasses(dirs, []);\n}\n/**\n * Loads all json files from the given directory.\n */\nexport function importJsonsFromDirectories(directories, format) {\n    if (format === void 0) { format = \".json\"; }\n    var allFiles = directories.reduce(function (allDirs, dir) {\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\n    }, []);\n    return allFiles\n        .filter(function (file) { return PlatformTools.pathExtname(file) === format; })\n        .map(function (file) { return PlatformTools.load(PlatformTools.pathResolve(file)); });\n}\n\n//# sourceMappingURL=DirectoryExportedClassesLoader.js.map\n","import * as tslib_1 from \"tslib\";\nvar ObjectUtils = /** @class */ (function () {\n    function ObjectUtils() {\n    }\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param sources One or more source objects from which to copy properties\n     */\n    ObjectUtils.assign = function (target) {\n        var sources = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            sources[_i - 1] = arguments[_i];\n        }\n        var e_1, _a, e_2, _b;\n        try {\n            for (var sources_1 = tslib_1.__values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {\n                var source = sources_1_1.value;\n                try {\n                    for (var _c = tslib_1.__values(Object.getOwnPropertyNames(source)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                        var prop = _d.value;\n                        target[prop] = source[prop];\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) _a.call(sources_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    return ObjectUtils;\n}());\nexport { ObjectUtils };\n\n//# sourceMappingURL=ObjectUtils.js.map\n","import * as tslib_1 from \"tslib\";\nimport { URL } from \"url\";\nvar OrmUtils = /** @class */ (function () {\n    function OrmUtils() {\n    }\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    /**\n     * Chunks array into peaces.\n     */\n    OrmUtils.chunk = function (array, size) {\n        return Array.from(Array(Math.ceil(array.length / size)), function (_, i) {\n            return array.slice(i * size, i * size + size);\n        });\n    };\n    OrmUtils.splitClassesAndStrings = function (clsesAndStrings) {\n        return [\n            (clsesAndStrings).filter(function (cls) { return typeof cls !== \"string\"; }),\n            (clsesAndStrings).filter(function (str) { return typeof str === \"string\"; }),\n        ];\n    };\n    OrmUtils.groupBy = function (array, propertyCallback) {\n        return array.reduce(function (groupedArray, value) {\n            var key = propertyCallback(value);\n            var grouped = groupedArray.find(function (i) { return i.id === key; });\n            if (!grouped) {\n                grouped = { id: key, items: [] };\n                groupedArray.push(grouped);\n            }\n            grouped.items.push(value);\n            return groupedArray;\n        }, []);\n    };\n    OrmUtils.uniq = function (array, criteriaOrProperty) {\n        return array.reduce(function (uniqueArray, item) {\n            var found = false;\n            if (criteriaOrProperty instanceof Function) {\n                var itemValue_1 = criteriaOrProperty(item);\n                found = !!uniqueArray.find(function (uniqueItem) { return criteriaOrProperty(uniqueItem) === itemValue_1; });\n            }\n            else if (typeof criteriaOrProperty === \"string\") {\n                found = !!uniqueArray.find(function (uniqueItem) { return uniqueItem[criteriaOrProperty] === item[criteriaOrProperty]; });\n            }\n            else {\n                found = uniqueArray.indexOf(item) !== -1;\n            }\n            if (!found)\n                uniqueArray.push(item);\n            return uniqueArray;\n        }, []);\n    };\n    OrmUtils.isObject = function (item) {\n        return (item && typeof item === \"object\" && !Array.isArray(item));\n    };\n    /**\n     * Deep Object.assign.\n     *\n     * @see http://stackoverflow.com/a/34749873\n     */\n    OrmUtils.mergeDeep = function (target) {\n        var sources = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            sources[_i - 1] = arguments[_i];\n        }\n        var _a, _b;\n        if (!sources.length)\n            return target;\n        var source = sources.shift();\n        if (this.isObject(target) && this.isObject(source)) {\n            for (var key in source) {\n                var value = source[key];\n                if (key === \"__proto__\" || value instanceof Promise)\n                    continue;\n                if (this.isObject(value)\n                    && !(value instanceof Map)\n                    && !(value instanceof Set)\n                    && !(value instanceof Date)\n                    && !(value instanceof Buffer)\n                    && !(value instanceof RegExp)\n                    && !(value instanceof URL)) {\n                    if (!target[key])\n                        Object.assign(target, (_a = {}, _a[key] = Object.create(Object.getPrototypeOf(value)), _a));\n                    this.mergeDeep(target[key], value);\n                }\n                else {\n                    Object.assign(target, (_b = {}, _b[key] = value, _b));\n                }\n            }\n        }\n        return this.mergeDeep.apply(this, tslib_1.__spread([target], sources));\n    };\n    /**\n     * Deep compare objects.\n     *\n     * @see http://stackoverflow.com/a/1144249\n     */\n    OrmUtils.deepCompare = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var i, l, leftChain, rightChain;\n        if (arguments.length < 1) {\n            return true; // Die silently? Don't know how to handle such case, please help...\n            // throw \"Need two or more arguments to compare\";\n        }\n        for (i = 1, l = arguments.length; i < l; i++) {\n            leftChain = []; // Todo: this can be cached\n            rightChain = [];\n            if (!this.compare2Objects(leftChain, rightChain, arguments[0], arguments[i])) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Check if two entity-id-maps are the same\n     */\n    OrmUtils.compareIds = function (firstId, secondId) {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n        // Optimized version for the common case\n        if (((typeof firstId.id === \"string\" && typeof secondId.id === \"string\") ||\n            (typeof firstId.id === \"number\" && typeof secondId.id === \"number\")) &&\n            Object.keys(firstId).length === 1 &&\n            Object.keys(secondId).length === 1) {\n            return firstId.id === secondId.id;\n        }\n        return OrmUtils.deepCompare(firstId, secondId);\n    };\n    /**\n     * Transforms given value into boolean value.\n     */\n    OrmUtils.toBoolean = function (value) {\n        if (typeof value === \"boolean\")\n            return value;\n        if (typeof value === \"string\")\n            return value === \"true\" || value === \"1\";\n        if (typeof value === \"number\")\n            return value > 0;\n        return false;\n    };\n    /**\n     * Composes an object from the given array of keys and values.\n     */\n    OrmUtils.zipObject = function (keys, values) {\n        return keys.reduce(function (object, column, index) {\n            object[column] = values[index];\n            return object;\n        }, {});\n    };\n    /**\n     * Compares two arrays.\n     */\n    OrmUtils.isArraysEqual = function (arr1, arr2) {\n        if (arr1.length !== arr2.length)\n            return false;\n        return arr1.every(function (element) {\n            return arr2.indexOf(element) !== -1;\n        });\n    };\n    // -------------------------------------------------------------------------\n    // Private methods\n    // -------------------------------------------------------------------------\n    OrmUtils.compare2Objects = function (leftChain, rightChain, x, y) {\n        var p;\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (Number.isNaN(x) && Number.isNaN(y))\n            return true;\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y)\n            return true;\n        // Unequal, but either is null or undefined (use case: jsonb comparasion)\n        // PR #3776, todo: add tests\n        if (x === null || y === null || x === undefined || y === undefined)\n            return false;\n        // Fix the buffer compare bug.\n        // See: https://github.com/typeorm/typeorm/issues/3654\n        if ((typeof x.equals === \"function\" || x.equals instanceof Function) && x.equals(y))\n            return true;\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if ((typeof x === \"function\" && typeof y === \"function\") ||\n            (x instanceof Date && y instanceof Date) ||\n            (x instanceof RegExp && y instanceof RegExp) ||\n            (x instanceof String && y instanceof String) ||\n            (x instanceof Number && y instanceof Number) ||\n            (x instanceof URL && y instanceof URL))\n            return x.toString() === y.toString();\n        // At last checking prototypes as good as we can\n        if (!(x instanceof Object && y instanceof Object))\n            return false;\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x))\n            return false;\n        if (x.constructor !== y.constructor)\n            return false;\n        if (x.prototype !== y.prototype)\n            return false;\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1)\n            return false;\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n        }\n        for (p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n            switch (typeof (x[p])) {\n                case \"object\":\n                case \"function\":\n                    leftChain.push(x);\n                    rightChain.push(y);\n                    if (!this.compare2Objects(leftChain, rightChain, x[p], y[p])) {\n                        return false;\n                    }\n                    leftChain.pop();\n                    rightChain.pop();\n                    break;\n                default:\n                    if (x[p] !== y[p]) {\n                        return false;\n                    }\n                    break;\n            }\n        }\n        return true;\n    };\n    return OrmUtils;\n}());\nexport { OrmUtils };\n\n//# sourceMappingURL=OrmUtils.js.map\n","/**\n * Utils to help to work with Promise objects.\n */\nvar PromiseUtils = /** @class */ (function () {\n    function PromiseUtils() {\n    }\n    /**\n     * Creates a new promise with resolved value used for lazy relations.\n     */\n    PromiseUtils.create = function (value) {\n        var promise = Promise.resolve(value);\n        promise[\"__value__\"] = value;\n        return promise;\n    };\n    /**\n     * If given value is a promise created by \"create\" method this method gets its value.\n     * If given value is not a promise then given value is returned back.\n     */\n    PromiseUtils.extractValue = function (object) {\n        if (object instanceof Promise && object[\"__value__\"])\n            return object[\"__value__\"];\n        return object;\n    };\n    /**\n     * Runs given callback that returns promise for each item in the given collection in order.\n     * Operations executed after each other, right after previous promise being resolved.\n     */\n    PromiseUtils.runInSequence = function (collection, callback) {\n        var results = [];\n        return collection.reduce(function (promise, item) {\n            return promise.then(function () {\n                return callback(item);\n            }).then(function (result) {\n                results.push(result);\n            });\n        }, Promise.resolve()).then(function () {\n            return results;\n        });\n    };\n    /**\n     * Returns a promise that is fulfilled with an array of promise state snapshots,\n     * but only after all the original promises have settled, i.e. become either fulfilled or rejected.\n     */\n    PromiseUtils.settle = function (promises) {\n        return Promise.all(promises.map(function (p) { return Promise.resolve(p).then(function (v) { return ({\n            state: \"fulfilled\",\n            value: v,\n        }); }, function (r) { return ({\n            state: \"rejected\",\n            reason: r,\n        }); }); })).then(function (results) {\n            var rejected = results.find(function (result) { return result.state === \"rejected\"; });\n            if (rejected)\n                return Promise.reject(rejected.reason);\n            return results.map(function (result) { return result.value; });\n        });\n    };\n    return PromiseUtils;\n}());\nexport { PromiseUtils };\n\n//# sourceMappingURL=PromiseUtils.js.map\n","var RandomGenerator = /** @class */ (function () {\n    function RandomGenerator() {\n    }\n    /**\n     *  discuss at: http://locutus.io/php/sha1/\n     * original by: Webtoolkit.info (http://www.webtoolkit.info/)\n     * improved by: Michael White (http://getsprink.com)\n     * improved by: Kevin van Zonneveld (http://kvz.io)\n     *    input by: Brett Zamir (http://brett-zamir.me)\n     *      note 1: Keep in mind that in accordance with PHP, the whole string is buffered and then\n     *      note 1: hashed. If available, we'd recommend using Node's native crypto modules directly\n     *      note 1: in a steaming fashion for faster and more efficient hashing\n     *   example 1: sha1('Kevin van Zonneveld')\n     *   returns 1: '54916d2e62f65b3afa6e192e6a601cdbe5cb5897'\n     */\n    RandomGenerator.sha1 = function (str) {\n        var _rotLeft = function (n, s) {\n            var t4 = (n << s) | (n >>> (32 - s));\n            return t4;\n        };\n        var _cvtHex = function (val) {\n            var str = \"\";\n            var i;\n            var v;\n            for (i = 7; i >= 0; i--) {\n                v = (val >>> (i * 4)) & 0x0f;\n                str += v.toString(16);\n            }\n            return str;\n        };\n        var blockstart;\n        var i, j;\n        var W = new Array(80);\n        var H0 = 0x67452301;\n        var H1 = 0xEFCDAB89;\n        var H2 = 0x98BADCFE;\n        var H3 = 0x10325476;\n        var H4 = 0xC3D2E1F0;\n        var A, B, C, D, E;\n        var temp;\n        // utf8_encode\n        str = /*unescape*/ (encodeURIComponent(str));\n        var strLen = str.length;\n        var wordArray = [];\n        for (i = 0; i < strLen - 3; i += 4) {\n            j = str.charCodeAt(i) << 24 |\n                str.charCodeAt(i + 1) << 16 |\n                str.charCodeAt(i + 2) << 8 |\n                str.charCodeAt(i + 3);\n            wordArray.push(j);\n        }\n        switch (strLen % 4) {\n            case 0:\n                i = 0x080000000;\n                break;\n            case 1:\n                i = str.charCodeAt(strLen - 1) << 24 | 0x0800000;\n                break;\n            case 2:\n                i = str.charCodeAt(strLen - 2) << 24 | str.charCodeAt(strLen - 1) << 16 | 0x08000;\n                break;\n            case 3:\n                i = str.charCodeAt(strLen - 3) << 24 |\n                    str.charCodeAt(strLen - 2) << 16 |\n                    str.charCodeAt(strLen - 1) <<\n                        8 | 0x80;\n                break;\n        }\n        wordArray.push(i);\n        while ((wordArray.length % 16) !== 14) {\n            wordArray.push(0);\n        }\n        wordArray.push(strLen >>> 29);\n        wordArray.push((strLen << 3) & 0x0ffffffff);\n        for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {\n            for (i = 0; i < 16; i++) {\n                W[i] = wordArray[blockstart + i];\n            }\n            for (i = 16; i <= 79; i++) {\n                W[i] = _rotLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n            }\n            A = H0;\n            B = H1;\n            C = H2;\n            D = H3;\n            E = H4;\n            for (i = 0; i <= 19; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            for (i = 20; i <= 39; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            for (i = 40; i <= 59; i++) {\n                temp = (_rotLeft(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            for (i = 60; i <= 79; i++) {\n                temp = (_rotLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;\n                E = D;\n                D = C;\n                C = _rotLeft(B, 30);\n                B = A;\n                A = temp;\n            }\n            H0 = (H0 + A) & 0x0ffffffff;\n            H1 = (H1 + B) & 0x0ffffffff;\n            H2 = (H2 + C) & 0x0ffffffff;\n            H3 = (H3 + D) & 0x0ffffffff;\n            H4 = (H4 + E) & 0x0ffffffff;\n        }\n        temp = _cvtHex(H0) + _cvtHex(H1) + _cvtHex(H2) + _cvtHex(H3) + _cvtHex(H4);\n        return temp.toLowerCase();\n    };\n    /**\n     * RFC4122 compliant UUID v4 generator.\n     */\n    RandomGenerator.uuid4 = function () {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n    return RandomGenerator;\n}());\nexport { RandomGenerator };\n\n//# sourceMappingURL=RandomGenerator.js.map\n","import shajs from \"sha.js\";\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str, firstCapital) {\n    if (firstCapital === void 0) { firstCapital = false; }\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2, offset) {\n        if (firstCapital === true && offset === 0)\n            return p1;\n        if (p2)\n            return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n/**\n * Converts string into snake_case.\n *\n * @see https://regex101.com/r/QeSm2I/1\n */\nexport function snakeCase(str) {\n    return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, \"$1_$3$2$4\").toLowerCase();\n}\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); });\n}\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str, abbrLettersCount) {\n    if (abbrLettersCount === void 0) { abbrLettersCount = 1; }\n    var words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\n    return words.reduce(function (res, word) {\n        res += word.substr(0, abbrLettersCount);\n        return res;\n    }, \"\");\n}\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\nexport function shorten(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.segmentLength, segmentLength = _a === void 0 ? 4 : _a, _b = options.separator, separator = _b === void 0 ? \"__\" : _b, _c = options.termLength, termLength = _c === void 0 ? 2 : _c;\n    var segments = input.split(separator);\n    var shortSegments = segments.reduce(function (acc, val) {\n        // split the given segment into many terms based on an eventual camel cased name\n        var segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \");\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        var length = segmentTerms.length > 1 ? termLength : segmentLength;\n        var shortSegment = segmentTerms.map(function (term) { return term.substr(0, length); }).join(\"\");\n        acc.push(shortSegment);\n        return acc;\n    }, []);\n    return shortSegments.join(separator);\n}\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input, options) {\n    if (options === void 0) { options = {}; }\n    var hashFunction = shajs(\"sha256\");\n    hashFunction.update(input, \"utf8\");\n    var hashedInput = hashFunction.digest(\"hex\");\n    if (options.length) {\n        return hashedInput.slice(0, options.length);\n    }\n    return hashedInput;\n}\n\n//# sourceMappingURL=StringUtils.js.map\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","module.exports = __webpack_public_path__ + \"html/selectPersonFragment.html\";","module.exports = __webpack_public_path__ + \"html/checkMailSite.html\";","module.exports = __webpack_public_path__ + \"html/editListsSite.html\";","module.exports = __webpack_public_path__ + \"html/editPersonSite.html\";","module.exports = __webpack_public_path__ + \"html/selectListSite.html\";","module.exports = __webpack_public_path__ + \"html/selectPersonSite.html\";","import {AbstractFragment} from \"cordova-sites/dist/client/js/Context/AbstractFragment\";\n\nimport view from \"../../html/Fragment/selectPersonFragment.html\";\nimport * as Tabulator from \"tabulator-tables\";\nimport {DateHelper} from \"js-helper/dist/shared/DateHelper\";\nimport {Person} from \"../../../shared/model/Person\";\nimport {DataManager} from \"cordova-sites/dist/client/js/DataManager\";\nimport {SyncJob} from \"cordova-sites-easy-sync/dist/client/SyncJob\";\nimport {Helper} from \"js-helper/dist/shared/Helper\";\n\nexport class SelectPersonFragment extends AbstractFragment {\n    constructor(site) {\n        super(site, view);\n        this._table = null;\n        this._onRowClickedListener = null;\n        this._rowContextActions = [];\n    }\n\n    setMemberFilter(filter, list){\n        this._memberFilter = filter;\n        this._list = list;\n    }\n\n    addRowContextAction(action){\n        this._rowContextActions.push(action);\n    }\n\n    onViewLoaded() {\n        let res = super.onViewLoaded();\n\n        this._personTableElem = this.findBy(\".person-table\");\n\n        this._table = new Tabulator(this._personTableElem, {\n            height: \"100%\", // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)\n            selectable: true,\n            columns: [ //Define Table Columns\n                {\n                    title: \"Vorname\",\n                    field: \"firstname\",\n                    headerFilter: true,\n                    frozen: true,\n                    headerFilterPlaceholder: \"...\"\n                },\n                {title: \"Nachname\", field: \"surname\", headerFilter: true, frozen: true, headerFilterPlaceholder: \"...\"},\n                {title: \"E-Mail\", field: \"email\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {title: \"Straße\", field: \"street\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {title: \"Hausnr.\", field: \"housenumber\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {title: \"Adr.-Zusatz\", field: \"addressSuffix\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {title: \"PLZ\", field: \"zipcode\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {title: \"Stadt\", field: \"city\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {title: \"Land\", field: \"countrycode\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {\n                    title: \"Geburtstag\",\n                    field: \"birthday\",\n                    headerFilter: true,\n                    headerFilterPlaceholder: \"...\",\n                    formatter: (cell) => {\n                        if (cell.getValue()) {\n                            return DateHelper.strftime(\"%d.%m.%Y\", cell.getValue())\n                        } else {\n                            return \"-\";\n                        }\n                    }\n                },\n                {title: \"Kommentar\", field: \"comment\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                // {title: \"Age\", field: \"age\", hozAlign: \"left\", formatter: \"progress\"},\n                // {title: \"Favourite Color\", field: \"col\"},\n                // {title: \"Date Of Birth\", field: \"dob\", sorter: \"date\", hozAlign: \"center\"},\n            ],\n            ajaxParams: {\n                \"queries\": JSON.stringify([{\n                    model: Person.getSchemaName(),\n                }]),\n\n            },\n            ajaxURL: DataManager.basePath(SyncJob.SYNC_PATH_PREFIX),\n            ajaxProgressiveLoad: \"scroll\",\n            ajaxProgressiveLoadScrollMargin: 350,\n            ajaxSorting: true,\n            ajaxFiltering: true,\n            ajaxRequestFunc: async (url, config, params) => {\n                let orderBy = {\n                    \"firstname\": \"ASC\",\n                    \"surname\": \"ASC\",\n                    \"email\": \"ASC\"\n                }\n\n                if (params.sorters && params.sorters.length > 0) {\n                    orderBy = {};\n                    params.sorters.forEach(s => orderBy[s.field] = s.dir.toUpperCase());\n                }\n\n                let filter = {};\n                if (params.filters && params.filters.length > 0) {\n                    params.filters.forEach(f => {\n                        if (f.type === \"like\") {\n                            filter[f.field] = {\n                                type: \"like\",\n                                value: \"%\" + f.value + \"%\"\n                            }\n                        }\n                    })\n                }\n\n                let query = {\n                    model: Person.getSchemaName(),\n                    where: filter,\n                    orderBy: orderBy\n                };\n                if (Helper.isNotNull(this._memberFilter)){\n                    query.member = this._memberFilter;\n                    query.list = this._list;\n                }\n\n                console.log(\"query\", query);\n\n                let modelJson = await DataManager.load(\"/persons\" +\n                    DataManager.buildQuery({\n                        \"queries\": JSON.stringify([query]),\n                        \"offset\": (params.page - 1) * 50\n                    })\n                );\n                return {last_page: (modelJson.nextOffset / 50) + 1, data: modelJson.results[0].entities};\n            },\n            rowDblClick: async (e, row) => { //trigger an alert message when the row is clicked\n                if (typeof this._onRowClickedListener === \"function\") {\n                    await this._onRowClickedListener(e, row, this._table);\n                }\n            },\n            // rowContext: async (e, row) => {\n            //     if (typeof this._onRowContextMenuListener === \"function\"){\n            //         await this._onRowContextMenuListener(e, row);\n            //     }\n            // }\n            rowContextMenu: this._rowContextActions,\n        })\n\n        window.addEventListener(\"resize\", () => {\n            this._updateTableHeight();\n        })\n\n        return res;\n    }\n\n    addData(data){\n        this._table.updateOrAddData(data);\n    }\n\n    setOnRowClickedListener(listener) {\n        this._onRowClickedListener = listener;\n    }\n\n    onStart(pauseArguments) {\n        let res = super.onStart(pauseArguments);\n        this._updateTableHeight();\n        return res;\n    }\n\n    _updateTableHeight() {\n        // let height = parseInt(window.getComputedStyle(this._personTableElem.parentElement).getPropertyValue(\"height\"));\n        // this._personTableElem.style.height = (height-1)+\"px\";\n    }\n}","import {MenuSite} from \"cordova-sites/dist/client/js/Context/MenuSite\";\n\nimport view from \"../../html/Site/checkMailSite.html\"\nimport {App} from \"cordova-sites/dist/client/js/App\";\nimport {DataManager} from \"cordova-sites/dist/client/js/DataManager\";\nimport {Form} from \"cordova-sites/dist/client/js/Form\";\nimport {JsonHelper} from \"js-helper/dist/shared/JsonHelper\";\nimport {Toast} from \"cordova-sites/dist/client/js/Toast/Toast\";\nimport {ViewHelper} from \"js-helper/dist/client/ViewHelper\";\n\nexport class CheckMailSite extends MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n    }\n\n    async onConstruct(constructParameters) {\n        let res = super.onConstruct(constructParameters);\n        this._list = constructParameters[\"list\"];\n        return res;\n    }\n\n    onCreateMenu(navbar) {\n        navbar.removeAllActions();\n        super.onCreateMenu(navbar);\n    }\n\n    onViewLoaded() {\n        let res = super.onViewLoaded();\n\n        this._emailContainer = this.findBy(\"#email-container\")\n        this._emailTemplate = this.findBy(\"#email-template\");\n        this._emailTemplate.removeAttribute(\"id\");\n        this._emailTemplate.remove();\n\n        this._passwordSection = this.findBy(\"#password-section\");\n        this._emailSection = this.findBy(\"#email-section\");\n\n        new Form(this.findBy(\"#password-form\"), async values => {\n            this._pw = values[\"password\"];\n            let mails = await DataManager.send(\"mails\", {list: this._list, pw: this._pw});\n            if (!JsonHelper.deepEqual(mails, {})) {\n                this.setEmails(mails);\n            } else {\n                await new Toast(\"wrong password!\").show();\n            }\n        });\n\n        return res;\n    }\n\n    setEmails(mails) {\n        this._passwordSection.classList.add(\"hidden\");\n        this._emailSection.classList.remove(\"hidden\");\n\n        ViewHelper.removeAllChildren(this._emailContainer);\n        if (mails.entries) {\n            mails.entries.forEach(mail => {\n                let mailElem = this._emailTemplate.cloneNode(true);\n                mailElem.querySelector(\".email-text\").innerText = CheckMailSite._prepareMailText(mail.msg);\n                mailElem.querySelectorAll(\".button\").forEach(button => {\n                    button.addEventListener(\"click\", async (e) => {\n                        this.showLoadingSymbol();\n                        let res = await DataManager.send(\"handleMail\", {\n                            list: this._list,\n                            pw: this._pw,\n                            request: mail.request_id,\n                            action: e.target.dataset[\"action\"]\n                        })\n                        this.removeLoadingSymbol();\n                        if (res && res.success && res.success === true) {\n                            mailElem.remove();\n                        } else {\n                            new Toast(\"there was an error: \" + JSON.stringify(res)).show();\n                        }\n                    })\n                })\n                this._emailContainer.appendChild(mailElem);\n            })\n        }\n    }\n\n    static _prepareMailText(msg) {\n        let headerLength = msg.indexOf(\"\\n\\n\");\n        let headers = msg.substring(0, headerLength).split(\"\\n\");\n        let body = msg.substring(headerLength + 2);\n\n        const allowedHeaders = [\n            \"to\", \"from\", \"date\", \"subject\"\n        ]\n\n        headers = headers.filter(h => {\n            let headerName = h.split(\":\")[0].toLowerCase();\n            return allowedHeaders.indexOf(headerName) !== -1;\n        });\n        return headers.join(\"\\n\") + \"\\n\\n\" + body;\n    }\n}\n\nApp.addInitialization(app => {\n    app.addDeepLink(\"checkMail\", CheckMailSite);\n})","import view from \"../../html/Site/editListsSite.html\";\nimport {DataManager} from \"cordova-sites/dist/client/js/DataManager\";\nimport {MenuSite} from \"cordova-sites/dist/client/js/Context/MenuSite\";\nimport {App, Form, Toast} from \"cordova-sites\";\nimport {SelectPersonFragment} from \"../Fragment/SelectPersonFragment\";\nimport {JsonHelper} from \"js-helper/dist/shared/JsonHelper\";\nimport {RIGHTS} from \"../../../shared/RIGHTS\";\nimport {UserSite} from \"cordova-sites-user-management/dist/client/js/Context/UserSite\";\n\nexport class EditListSite extends MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n        this._ownerFragment = new SelectPersonFragment(this);\n        this._memberFragment = new SelectPersonFragment(this);\n        this._personFragment = new SelectPersonFragment(this);\n\n        this.addFragment(\"#owner-section\", this._ownerFragment);\n        this.addFragment(\"#member-section\", this._memberFragment);\n        this.addFragment(\"#persons-section\", this._personFragment);\n\n        this.addDelegate(new UserSite(this, RIGHTS.EDIT_LIST, false));\n    }\n\n    async onConstruct(constructParameters) {\n        let res = super.onConstruct(constructParameters);\n\n        if (constructParameters[\"id\"]) {\n            let lists = await DataManager.load(\"lists\" + DataManager.buildQuery({listname: constructParameters[\"id\"]}));\n            if (lists) {\n                this._list = lists;\n            }\n        }\n        if (!this._list) {\n            this._list = {};\n        }\n\n        this._ownerFragment.setMemberFilter(\"moderator\", this._list.list_id);\n        this._memberFragment.setMemberFilter(\"member\", this._list.list_id);\n        this._personFragment.setMemberFilter(false, this._list.list_id);\n\n        let ownerAction = {\n            \"label\": \"Add Moderator\",\n            \"action\": async (e, row) => {\n                await this.addMember(row, \"moderator\")\n            }\n        }\n        let memberAction = {\n            \"label\": \"Add Member\",\n            \"action\": async (e, row) => {\n                await this.addMember(row, \"member\")\n            }\n        }\n        let leaveOwnerAction = {\n            \"label\": \"Delete Moderator\",\n            \"action\": async (e, row) => {\n                await this.leaveList(row, \"moderator\")\n            }\n        }\n        let leaveMemberAction = {\n            \"label\": \"Delete Member\",\n            \"action\": async (e, row) => {\n                await this.leaveList(row, \"member\")\n            }\n        }\n\n        this._personFragment.addRowContextAction(memberAction)\n        this._personFragment.addRowContextAction(ownerAction)\n\n        this._memberFragment.addRowContextAction(ownerAction);\n        this._memberFragment.addRowContextAction(leaveMemberAction);\n\n        this._ownerFragment.addRowContextAction(leaveOwnerAction);\n\n        return res;\n    }\n\n    async addMember(row, role) {\n        this.showLoadingSymbol();\n        let res = await DataManager.send(\"/addMember\", {\n            \"role\": role,\n            \"list_id\": this._list.list_id,\n            \"subscriber\": row.getData().mailmanId,\n            \"subscriberMail\": row.getData().email,\n        });\n        if (res.member_id) {\n            let data = row.getData();\n            if (role === \"member\") {\n                row.delete();\n            }\n            if (role === \"member\") {\n                this._memberFragment.addData([data]);\n            } else {\n                this._ownerFragment.addData([data]);\n            }\n        }\n        this.removeLoadingSymbol();\n    }\n\n    async leaveList(row, role) {\n        this.showLoadingSymbol();\n        let res = await DataManager.send(\"/leaveList\", {\n            \"role\": role,\n            \"list_id\": this._list.list_id,\n            \"subscriberMail\": row.getData().email\n        })\n        if (JsonHelper.deepEqual({}, res)) {\n            let data = row.getData();\n            row.delete();\n            if (role === \"member\") {\n                this._personFragment.addData([data]);\n            }\n        }\n        this.removeLoadingSymbol();\n    }\n\n    async onViewLoaded() {\n        let res = super.onViewLoaded();\n\n        let form = new Form(this.findBy(\"#list-form\"), async values => {\n            this._list[\"description\"] = values[\"description\"];\n            this._list[\"display_name\"] = values[\"display_name\"];\n            this._list[\"subject_prefix\"] = values[\"subject_prefix\"];\n            if (values[\"pw\"]) {\n                this._list[\"pw\"] = values[\"pw\"];\n            }\n            this._list[\"default_member_action\"] = values[\"default_member_action\"];\n            this._list[\"default_nonmember_action\"] = values[\"default_nonmember_action\"];\n\n            let res = await DataManager.send(\"list\", this._list);\n            if (res.title && res.title.startsWith(\"400\") && res.description) {\n                new Toast(res.description, Toast.DEFAULT_DURATION, false).show();\n            } else {\n                await this.finish(res);\n            }\n        });\n        // console.log(\"list\", this._list);\n        await form.setValues(this._list);\n\n        return res;\n    }\n}\n\nApp.addInitialization(app => {\n    app.addDeepLink(\"editList\", EditListSite);\n})","import {ModifyEntitySite} from \"cordova-sites-easy-sync/dist/client/editEntitySite/ModifyEntitySite\";\n\nimport view from \"../../html/Site/editPersonSite.html\"\nimport {Person} from \"../../../shared/model/Person\";\nimport {Helper} from \"js-helper/dist/shared/Helper\";\nimport {DataManager} from \"cordova-sites/dist/client/js/DataManager\";\nimport {SyncJob} from \"cordova-sites-easy-sync/dist/client/SyncJob\";\nimport {ViewHelper} from \"js-helper/dist/client/ViewHelper\";\nimport {RIGHTS} from \"../../../shared/RIGHTS\";\nimport {UserSite} from \"cordova-sites-user-management/dist/client/js/Context/UserSite\";\nimport {App} from \"cordova-sites/dist/client/js/App\";\nimport {CheckMailSite} from \"./CheckMailSite\";\nimport {DateHelper} from \"js-helper\";\n\nexport class EditPersonSite extends ModifyEntitySite {\n\n    constructor(siteManager) {\n        super(siteManager, view, Person);\n        this.addDelegate(new UserSite(this, RIGHTS.EDIT_USER, false));\n    }\n\n    async onViewLoaded() {\n        let res = super.onViewLoaded();\n\n        this._membershipContainer = this.findBy(\"#membership-container\");\n        this._membershipTemplate = this.findBy(\"#membership-template\");\n\n        this._membershipTemplate.removeAttribute(\"id\");\n        this._membershipTemplate.remove();\n\n        await this.addMembershipSelections();\n\n        return res;\n    }\n\n    async addMembershipSelections() {\n        let lists = await DataManager.load(\"lists\");\n\n        ViewHelper.removeAllChildren(this._membershipContainer);\n        if (lists && lists.entries) {\n            lists.entries.forEach(entry => {\n                let elem = this._membershipTemplate.cloneNode(true);\n                elem.querySelector(\".membership-name\").innerText = entry.list_name;\n                elem.querySelector(\".membership-checkbox\").name = \"list-\" + entry.list_id;\n\n                this._membershipContainer.appendChild(elem);\n            });\n        }\n    }\n\n    async getEntityFromParameters(constructParameters) {\n        let entity = null;\n        if (Helper.isSet(constructParameters, \"id\")) {\n            let modelJson = await DataManager.load(SyncJob.SYNC_PATH_PREFIX +\n                DataManager.buildQuery({\n                    \"queries\": JSON.stringify([{\n                        model: Person.getSchemaName(),\n                        where: {id: constructParameters[\"id\"]},\n                    }]),\n                })\n            );\n\n            let persons = await Person._fromJson(modelJson.results[0].entities);\n            if (persons.length === 1) {\n                entity = persons[0];\n            }\n        }\n\n        if (Helper.isNull(entity)) {\n            entity = new Person();\n        }\n\n        this._memberships = await DataManager.load(\"memberships\" + DataManager.buildQuery({\"email\": entity.email}));\n\n        return entity;\n    }\n\n    async save(values) {\n        await this.hydrate(values, this._entity);\n\n        let memberships = []\n        Object.keys(values).forEach(key => {\n            if (key.startsWith(\"list-\")) {\n                memberships.push(key.substr(5));\n            }\n        })\n\n        let personData = this._entity.toJSON()\n\n        let data = {\"person\": personData, \"memberships\": memberships};\n        let res = await DataManager.send(Person.SAVE_PATH, data);\n        if (res.success === false) {\n            throw new Error(data.errors);\n        }\n        // await this._entity.save();\n    }\n\n    async dehydrate(entity) {\n        let values = await super.dehydrate(entity);\n        if (entity.birthday) {\n            values[\"birthday\"] = DateHelper.strftime(\"%Y-%m-%d\", new Date(entity.birthday));\n        }\n        if (this._memberships && this._memberships.entries) {\n            this._memberships.entries.forEach(entry => {\n                values[\"list-\" + entry.list_id] = \"1\";\n            });\n        }\n        return values;\n    };\n\n    saveListener() {\n        let values = this.dehydrate(this._entity);\n        this.finish(values);\n    }\n\n    async validate(values, form) {\n        //TODO real validator\n        return super.validate(values, form); //return only true\n    }\n}\n\nApp.addInitialization(app => {\n    app.addDeepLink(\"editPerson\", EditPersonSite);\n})","import {MenuSite} from \"cordova-sites\";\n\nimport view from \"../../html/Site/selectListSite.html\"\nimport {MenuAction} from \"cordova-sites/dist/client/js/Context/Menu/MenuAction/MenuAction\";\nimport * as Tabulator from \"tabulator-tables\";\nimport {DataManager} from \"cordova-sites/dist/client/js/DataManager\";\nimport {EditListSite} from \"./EditListSite\";\nimport {Toast} from \"cordova-sites/dist/client/js/Toast/Toast\";\nimport {App} from \"cordova-sites/dist/client/js/App\";\nimport {Helper} from \"js-helper/dist/shared/Helper\";\nimport {ConfirmDialog} from \"cordova-sites/dist/client/js/Dialog/ConfirmDialog\";\nimport {RIGHTS} from \"../../../shared/RIGHTS\";\nimport {UserSite} from \"cordova-sites-user-management/dist/client/js/Context/UserSite\";\n\nexport class SelectListSite extends MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n        this._table = null;\n\n        this.addDelegate(new UserSite(this, RIGHTS.VIEW_LIST, false));\n    }\n\n    onCreateMenu(navbar) {\n        navbar.addAction(new MenuAction(\"new entry\", async () => {\n            let res = await this.startSite(EditListSite);\n            if (this._table && res) {\n                this._table.updateOrAddData([res]);\n                new Toast(\"added entry\").show();\n            }\n        }));\n        return navbar;\n    }\n\n    async deleteLists(rows) {\n        if (await new ConfirmDialog(\"Are you sure to delete these lists? They will be gone forever! (That's a long time!)\", \"Delete selected lists?\").show()) {\n            this.showLoadingSymbol();\n            await DataManager.send(\"deleteLists\", {lists: rows.map(r => r.getData().list_id)});\n            rows.forEach(r => r.delete());\n            this.removeLoadingSymbol();\n            return true;\n        }\n        return false;\n    }\n\n    async onViewLoaded() {\n        let res = super.onViewLoaded();\n\n        this._view.classList.add(\"select-list-site\")\n\n        this._listTableElem = this.findBy(\"#list-table\");\n\n        this._table = new Tabulator(this._listTableElem, {\n            height: \"100%\", // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)\n            // layout: \"fitColumns\", //fit columns to width of table (optional)\n            index: \"list_id\",\n            selectable: true,\n            columns: [ //Define Table Columns\n                {\n                    title: \"Name\",\n                    field: \"display_name\",\n                    headerFilter: true,\n                    headerFilterPlaceholder: \"...\"\n                },\n                {\n                    title: \"Address\",\n                    field: \"fqdn_listname\",\n                    headerFilter: true,\n                    headerFilterPlaceholder: \"...\"\n                },\n                {title: \"Description\", field: \"description\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n                {title: \"Members\", field: \"member_count\", headerFilter: true, headerFilterPlaceholder: \"...\"},\n            ],\n            ajaxURL: DataManager.basePath(\"/lists\"),\n            ajaxProgressiveLoad: \"scroll\",\n            ajaxProgressiveLoadScrollMargin: 350,\n            // ajaxSorting: true,\n            // ajaxFiltering: true,\n            ajaxRequestFunc: async (url, config, params) => {\n                let modelJson = await DataManager.load(\"/lists\" +\n                    DataManager.buildQuery({\n                        \"page\": params.page,\n                        \"count\": 50,\n                    })\n                );\n                let data = Helper.nonNull(modelJson.entries, []);\n                return {last_page: (modelJson.total_size / 50) + 1, data: data};\n            },\n            rowDblClick: async (e, row) => { //trigger an alert message when the row is clicked\n                let id = row._row.data.list_id;\n                let res = await this.startSite(EditListSite, {id: id});\n                if (res) {\n                    this._table.updateOrAddData([res]);\n                    new Toast(\"modified entry\").show();\n                }\n            },\n            rowContextMenu: [{\n                \"label\": \"delete\",\n                \"action\": async (e, row) => {\n                    let rows = this._table.getSelectedRows();\n                    if (rows.length === 0) {\n                        rows = [row];\n                    }\n                    await this.deleteLists(rows);\n                }\n            }]\n        })\n        return res;\n    }\n}\n\nApp.addInitialization((app) => {\n    app.addDeepLink(\"lists\", SelectListSite);\n})","import {MenuSite} from \"cordova-sites/dist/client/js/Context/MenuSite\";\n\nimport view from \"../../html/Site/selectPersonSite.html\"\nimport {EditPersonSite} from \"./EditPersonSite\";\nimport {MenuAction} from \"cordova-sites/dist/client/js/Context/Menu/MenuAction/MenuAction\";\nimport {StartSiteMenuAction} from \"cordova-sites/dist/client/js/Context/Menu/MenuAction/StartSiteMenuAction\";\nimport {SelectListSite} from \"./SelectListSite\";\nimport {Toast} from \"cordova-sites/dist/client/js/Toast/Toast\";\nimport {SelectPersonFragment} from \"../Fragment/SelectPersonFragment\";\nimport {ConfirmDialog} from \"cordova-sites/dist/client/js/Dialog/ConfirmDialog\";\nimport {DataManager} from \"cordova-sites/dist/client/js/DataManager\";\nimport {UserSite} from \"cordova-sites-user-management/dist/client/js/Context/UserSite\";\nimport {RIGHTS} from \"../../../shared/RIGHTS\";\n\nexport class SelectPersonSite extends MenuSite {\n    constructor(siteManager) {\n        super(siteManager, view);\n        let fragment = new SelectPersonFragment(this);\n        this.addFragment(\"#person-list-fragment\", fragment);\n        fragment.setOnRowClickedListener(async (e, row) => {\n            let id = row._row.data.id;\n            let res = await this.startSite(EditPersonSite, {id: id});\n            if (res) {\n                fragment.addData([res]);\n                new Toast(\"modified entry\").show();\n            }\n        })\n\n        fragment.addRowContextAction({\n            \"label\": \"Delete\",\n            \"action\": async (e, row) => {\n                let rows = row.getTable().getSelectedRows();\n                if (rows.length === 0) {\n                    rows = [row];\n                }\n                if (await this.deletePersons(rows.map(r => r.getData()))) {\n                    rows.forEach(r => r.delete());\n                }\n            }\n        })\n\n        this.addDelegate(new UserSite(this, RIGHTS.VIEW_USER, false));\n\n        this._fragment = fragment;\n    }\n\n    async deletePersons(persons) {\n        if (await new ConfirmDialog(\"Are you sure to delete these persons? They will be gone forever! (That's a long time!)\", \"Delete selected persons?\").show()) {\n            this.showLoadingSymbol();\n            await DataManager.send(\"deletePersons\", {personIds: persons.map(p => p.id)});\n            this.removeLoadingSymbol();\n            return true;\n        }\n        return false;\n    }\n\n    onViewLoaded() {\n        let res = super.onViewLoaded();\n        this._view.classList.add(\"select-person-site\")\n        return res;\n    }\n\n    onCreateMenu(navbar) {\n        navbar.addAction(new MenuAction(\"new entry\", async () => {\n            let res = await this.startSite(EditPersonSite);\n            console.log(\"res\", res);\n            if (this._table && res) {\n                this._fragment.addData([res]);\n                new Toast(\"added entry\").show();\n            }\n        }));\n        navbar.addAction(new MenuAction(\"synchronise\", async () => {\n            try {\n                this.showLoadingSymbol();\n                let res = {\"askAgain\": false};\n                do {\n                    res = await DataManager.load(\"synchronise\");\n                } while (res.askAgain);\n                if (res.success) {\n                    new Toast(\"synchronised!\").show();\n                } else {\n                    new Toast(res.message).show();\n                }\n            } catch (e) {\n                console.error(e);\n            } finally {\n                this.removeLoadingSymbol();\n            }\n        }));\n        navbar.addAction(new StartSiteMenuAction(\"lists\", SelectListSite));\n        return navbar;\n    }\n}","import translationGerman from '../translations/de.json';\nimport translationEn from '../translations/en.json';\nimport {App, Translator, DataManager, Toast} from \"cordova-sites/dist/client\";\n\nimport \"cordova-sites-user-management/dist/client/js/translationInit\"\nimport \"cordova-sites/dist/client/js/translationInit\"\n\nimport {BaseDatabase} from \"cordova-sites-database/dist/cordova-sites-database\";\nimport {DeleteUserManagement1000000000000} from \"cordova-sites-user-management/dist/shared//migrations/DeleteUserManagement\";\nimport {SetupUserManagement1000000001000} from \"cordova-sites-user-management/dist/shared/migrations/SetupUserManagement\";\nimport {SetupEasySync1000000000500} from \"cordova-sites-easy-sync/dist/client\";\nimport {EasySyncClientDb} from \"cordova-sites-easy-sync/dist/client/EasySyncClientDb\";\nimport {NavbarFragment} from \"cordova-sites/dist/client/js/Context/Menu/NavbarFragment\";\nimport {SelectPersonSite} from \"./Site/SelectPersonSite\";\nimport {EasySyncBaseModel} from \"cordova-sites-easy-sync/dist/shared/EasySyncBaseModel\";\nimport {PersonInit1000000006000} from \"../../shared/model/migrations/PersonInit\";\n\nimport \"cordova-sites-user-management/dist/client\"\n\nimport {CheckMailSite} from \"./Site/CheckMailSite\";\nimport {UserManager} from \"cordova-sites-user-management/dist/client/js/UserManager\";\n\nwindow[\"JSObject\"] = Object;\n// window[\"version\"] = __VERSION__;\n\nEasySyncClientDb.BASE_MODEL = EasySyncBaseModel;\n\nApp.addInitialization(async () => {\n    Translator.init({\n        translations: {\n            \"de\": translationGerman,\n            \"en\": translationEn\n        },\n        fallbackLanguage: \"de\",\n        // markTranslations: true,\n        markUntranslatedTranslations: true,\n    });\n\n    //Setting Title\n    NavbarFragment.title = \"Mail\";\n\n    await UserManager.getInstance().getMe().catch(e => console.error(e));\n\n    // let syncJob = new SyncJob();\n    //\n    // await syncJob.syncInBackgroundIfDataExists([Person, MailingList]).catch(e => console.error(e));\n\n\n});\n\nDataManager._basePath = __HOST_ADDRESS__;\nDataManager._assetBasePath = __ASSET_BASE_PATH__;\nDataManager.onlineCallback = isOnline => {\n    if (!isOnline){\n        new Toast(\"not online!\").show();\n    }\n};\n\nlet synchronizeDb = false;\nif (synchronizeDb !== true) {\n}\nObject.assign(BaseDatabase.CONNECTION_OPTIONS, {\n    logging: [\"error\",],\n    synchronize: false,\n    migrationsRun: true,\n    migrations: [\n        DeleteUserManagement1000000000000,\n        SetupUserManagement1000000001000,\n        SetupEasySync1000000000500,\n        PersonInit1000000006000,\n    ]\n});\n\nlet app = new App();\napp.start(SelectPersonSite).catch(e => console.error(e)).then(async () => {\n    window[\"queryDb\"] = async (sql) => {\n        let res = await EasySyncClientDb.getInstance().rawQuery(sql);\n        console.log(res);\n        return res;\n    }\n});\napp.ready(() => {\n    console.log(\"initialisation over\", new Date());\n    if (device.platform === \"browser\"){\n        // Check that service workers are supported\n        if ('serviceWorker' in navigator) {\n            // Use the window load event to keep the page load performant\n            window.addEventListener('load', () => {\n                navigator.serviceWorker.register('service-worker.js');\n            });\n        }\n    }\n});","module.exports = __webpack_public_path__ + \"css/index.css\";","export class RIGHTS{\n    static VIEW_USER = \"view-person\";\n    // static VIEW_USER = \"admin\";\n    static EDIT_USER = \"modify-person\";\n    // static EDIT_USER = \"admin\";\n    static VIEW_LIST = \"view-list\";\n    // static VIEW_LIST = \"admin\";\n    static EDIT_LIST = \"modify-list\";\n    // static EDIT_LIST = \"admin\";\n}","import {AccessEasySyncModel} from \"cordova-sites-user-management/dist/shared\";\nimport {BaseDatabase} from \"cordova-sites-database/dist/cordova-sites-database\";\n\nexport class Person extends AccessEasySyncModel {\n\n    mailmanId: string = null;\n    surname: string = \"\";\n    firstname: string = \"\";\n    email: string = \"\";\n    street: string = \"\";\n    housenumber: string = \"\";\n    addressSuffix: string = \"\";\n    countrycode: string = \"\";\n    zipcode: string = \"\";\n    city: string = \"\";\n    birthday: Date = null;\n    comment: string = \"\";\n\n    static SAVE_PATH: string = \"/modifyPerson\";\n\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"mailmanId\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true,\n        };\n        columns[\"surname\"] = {\n            type: BaseDatabase.TYPES.STRING,\n        };\n        columns[\"firstname\"] = {\n            type: BaseDatabase.TYPES.STRING,\n        };\n        columns[\"email\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            unique: true,\n        };\n        columns[\"street\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"housenumber\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"addressSuffix\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"countrycode\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"zipcode\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"city\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"birthday\"] = {\n            type: BaseDatabase.TYPES.DATE,\n            nullable: true\n        };\n        columns[\"comment\"] = {\n            type: BaseDatabase.TYPES.MEDIUMTEXT,\n            nullable: true\n        };\n        return columns;\n    }\n}\nPerson.ACCESS_MODIFY = false;\n\n\nBaseDatabase.addModel(Person);","import {MigrationInterface, QueryRunner} from \"typeorm\";\nimport {MigrationHelper} from \"js-helper/dist/shared/MigrationHelper\";\nimport {Person} from \"./models/v1/Person\";\n\nexport class PersonInit1000000006000 implements MigrationInterface {\n\n    _isServer(): boolean {\n        return (typeof document !== \"object\")\n    }\n\n    async down(queryRunner: QueryRunner): Promise<any> {\n        return undefined\n    }\n\n    async up(queryRunner: QueryRunner): Promise<any> {\n        if (this._isServer()) {\n            await queryRunner.query(\"UPDATE person SET email1 = '' WHERE email1 IS NULL\");\n            await queryRunner.query(\"ALTER TABLE person CHANGE email1 email VARCHAR(255) NOT NULL DEFAULT '';\");\n            await queryRunner.query(\"ALTER TABLE person CHANGE street1 street VARCHAR(255) DEFAULT '';\");\n            await queryRunner.query(\"ALTER TABLE person CHANGE houseno1 housenumber VARCHAR(255) DEFAULT '';\");\n            await queryRunner.query(\"ALTER TABLE person CHANGE roomno1 addressSuffix VARCHAR(255) DEFAULT '';\");\n            await queryRunner.query(\"ALTER TABLE person CHANGE countrycode1 countrycode VARCHAR(255) DEFAULT '';\");\n            await queryRunner.query(\"ALTER TABLE person CHANGE zipcode1 zipcode VARCHAR(255) DEFAULT '';\");\n            await queryRunner.query(\"ALTER TABLE person CHANGE city1 city VARCHAR(255) DEFAULT '';\");\n\n            await queryRunner.query(\"ALTER TABLE person ADD COLUMN createdAt DATETIME NOT NULL DEFAULT NOW()\");\n            await queryRunner.query(\"ALTER TABLE person ADD COLUMN updatedAt DATETIME NOT NULL DEFAULT NOW()\");\n            await queryRunner.query(\"ALTER TABLE person ADD COLUMN version INTEGER NOT NULL DEFAULT 0\");\n            await queryRunner.query(\"ALTER TABLE person ADD COLUMN deleted SMALLINT(1) NOT NULL DEFAULT 0\");\n            await queryRunner.query(\"ALTER TABLE person ADD COLUMN mailmanId VARCHAR(255) DEFAULT NULL\");\n        }\n        else {\n            let table = MigrationHelper.createTableFromModelClass(Person);\n            await queryRunner.createTable(table);\n        }\n    }\n}","import {AccessEasySyncModel} from \"cordova-sites-user-management/dist/shared\";\nimport {BaseDatabase} from \"cordova-sites-database/dist/cordova-sites-database\";\n\nexport class Person extends AccessEasySyncModel {\n\n    mailmanId: string = null;\n    surname: string = \"\";\n    firstname: string = \"\";\n    email: string = \"\";\n    street: string = \"\";\n    housenumber: string = \"\";\n    addressSuffix: string = \"\";\n    countrycode: string = \"\";\n    zipcode: string = \"\";\n    city: string = \"\";\n    birthday: Date = null;\n    comment: string = \"\";\n\n    static getColumnDefinitions() {\n        let columns = super.getColumnDefinitions();\n        columns[\"mailmanId\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true,\n        };\n        columns[\"surname\"] = {\n            type: BaseDatabase.TYPES.STRING,\n        };\n        columns[\"firstname\"] = {\n            type: BaseDatabase.TYPES.STRING,\n        };\n        columns[\"email\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            unique: true,\n        };\n        columns[\"street\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"housenumber\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"addressSuffix\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"countrycode\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"zipcode\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"city\"] = {\n            type: BaseDatabase.TYPES.STRING,\n            nullable: true\n        };\n        columns[\"birthday\"] = {\n            type: BaseDatabase.TYPES.DATE,\n            nullable: true\n        };\n        columns[\"comment\"] = {\n            type: BaseDatabase.TYPES.MEDIUMTEXT,\n            nullable: true\n        };\n        return columns;\n    }\n}\nPerson.ACCESS_MODIFY = false;\n"],"sourceRoot":""}